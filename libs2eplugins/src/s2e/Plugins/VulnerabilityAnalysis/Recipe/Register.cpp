///
/// Copyright (C) 2016, Dependable Systems Laboratory, EPFL
/// Copyright (C) 2016, Cyberhaven
/// All rights reserved.
///
/// Licensed under the Cyberhaven Research License Agreement.
///

#include "Register.h"

namespace s2e {
namespace plugins {
namespace recipe {

const char *Register::s_regs32[10] = {"EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI", "EIP", nullptr};
const char *Register::s_regs64[18] = {"RAX", "RCX", "RDX", "RBX", "RSP", "RBP", "RSI", "RDI", "R8",
                                      "R9",  "R10", "R11", "R12", "R13", "R14", "R15", "RIP", nullptr};

std::string Register::name() const {
    if (m_bits == 32) {
        return s_regs32[m_reg];
    } else {
        return s_regs64[m_reg];
    }
}

klee::ref<Register> Register::fromName(const std::string &name, unsigned byteIdx) {

    for (unsigned i = 0; s_regs32[i]; ++i) {
        if (s_regs32[i] == name) {
            return klee::ref<Register>(new Register(i, 32, byteIdx));
        }
    }

    for (unsigned i = 0; s_regs64[i]; ++i) {
        if (s_regs64[i] == name) {
            return klee::ref<Register>(new Register(i, 64, byteIdx));
        }
    }

    return nullptr;
}

klee::ref<Register> Register::fromIndex(Reg reg, uint8_t bits) {
    return new Register(reg, bits, 0);
}

bool Register::isPc() const {
    if (m_bits == 32) {
        return m_reg == 8;
    } else if (m_bits == 64) {
        return m_reg == 16;
    }
    return false;
}
} // namespace recipe
} // namespace plugins
} // namespace s2e

; ModuleID = '/home/cyfi/s2e/install/share/libs2e/op_helper.bc.i386'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CPUX86State = type { [8 x i32], i32, i32, i32, i32, i32, i16, i16, [8 x i8], [8 x %union.FPReg], %struct.float_status, %struct.floatx80, %struct.float_status, %struct.float_status, i32, [8 x %union.XMMReg], %union.XMMReg, %union.MMXReg, i32, i32,
%union.FPReg = type { %struct.floatx80 }
%struct.floatx80 = type { i64, i16 }
%struct.float_status = type { i8, i8, i8, i8, i8, i8, i8 }
%union.XMMReg = type { [2 x i64] }
%union.MMXReg = type { i64 }
%struct.SegmentCache = type { i32, i32, i32, i32 }
%union.anon = type { [4 x %struct.CPUBreakpoint*] }
%struct.CPUBreakpoint = type { i32, i32, %union.anon.0 }
%struct.TranslationBlock = type { i32, i32, i64, i16, i32, %struct.tb_tc, %struct.TranslationBlock*, [2 x %struct.TranslationBlock*], [2 x i64], i32, [2 x i16], [2 x i64], i64, [2 x i64], [2 x i64], i32, i8*, i32, i64, i8*, i64, i32 }
%struct.tb_tc = type { i8*, i64 }
%struct.CPUTLBEntry = type { i32, i32, i32, i32, i64, i64, i8*, [24 x i8] }
%struct.CPUTLBRAMEntry = type { i64, i64, i8* }
%union.anon.0 = type { %struct.QTailQLink }
%struct.QTailQLink = type { i8*, %struct.QTailQLink* }
%struct.CPUWatchpoint = type { i32, i32, i32, %union.anon.0 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.cpuid_t = type { i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MTRRVar = type { i64, i64 }
%struct.DeviceState = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.se_libcpu_interface_t = type { i32, %struct.mode, %struct.exec, %struct.tb, %struct.tlb, %struct.regs, %struct.mem, %struct.expr, %struct.libcpu, %struct.events, %struct.anon, %struct.anon.3 }
%struct.mode = type { i32*, i32*, i8**, i32*, i32*, i32*, i32* }
%struct.exec = type { void (i8*, i8*)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, void ()*, void (i8*)*, i64 (%struct.CPUX86State*, %struct.TranslationBlock*)*, void (i32, i32, i32, i64, i32)*, i32* }
%struct.tb = type { i8* ()*, void (...)*, void (i8*, i8*)*, i32 (i8*)*, void (i8*)* }
%struct.tlb = type { void ()*, void (i8*, i32, i32)*, void (%struct.CPUX86State*, i32, i64, i64)* }
%struct.regs = type { void (i32, i8*, i32)*, void (i32, i8*, i32)*, void (%struct.CPUX86State*)* }
%struct.mem = type { i8 (i64)*, void (i64, i8)*, void (i64, i8*, i32)*, void (i64, i8*, i32)*, void (i64, i8*, i64)*, void (i64, i8*, i64)*, void (i64, i8*, i64)*, i64 (i32)*, i32 (i64)*, i32 (i64, i32)*, i32 (i64, i32)*, i64 (i64)*, i8 (i8*, i32)*, i16 
%struct.expr = type { i8* ()*, void (i8*)*, void ()*, i8* (i8*, i8*, i64)*, i64 (i8*)*, void (i8*, i64)*, void (i8*, i32, i32)*, i8* (i8*, i32, i32)*, i8* (i8*, i64)*, i8* (i8*, i64)* }
%struct.libcpu = type { i32 (%struct.CPUX86State*, i32)*, i32 (%struct.CPUX86State*, i32)* }
%struct.events = type { i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, void (i32, i32)*, void (i64, i64)*, void (i64, i32, i8*)*, void (i64, i32, i8*)*, void (i64, i64, i32, i32, i64)*, v
%struct.special_instruction_data_t = type { %union.MMXReg }
%struct.anon = type { void (i8*, ...)* }
%struct.anon.3 = type { i32 (i8*)* }
%struct.MemoryDescOps = type { i64 (i64, i32)*, void (i64, i64, i32)* }

@env = local_unnamed_addr global %struct.CPUX86State* null, align 8
@parity_table = external local_unnamed_addr constant [256 x i8], align 16
@loglevel = external local_unnamed_addr global i32, align 4
@logfile = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [36 x i8] c"check_exception old: 0x%x new 0x%x\0A\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"Triple fault\0A\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"vmexit(%08x, %016lx, %016lx, %08x)!\0A\00", align 1
@g_sqi = external local_unnamed_addr global %struct.se_libcpu_interface_t, align 8
@se_do_interrupt_all.count = internal unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [65 x i8] c"%6d: v=%02x e=%04x i=%d cpl=%d IP=%04x:%08x pc=%08x SP=%04x:%08x\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c" CR2=%08x\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c" EAX=%08x\00", align 1
@switch.table.se_do_interrupt_all = private unnamed_addr constant [10 x i32] [i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1], align 4
@.str.20 = private unnamed_addr constant [12 x i8] c"invalid tss\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"SMM: enter\0A\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"0 && \22Not implemented\22\00", align 1
@.str.19 = private unnamed_addr constant [61 x i8] c"/home/cyfi/s2e/source/s2e/libcpu/src/target-i386/op_helper.c\00", align 1
@__PRETTY_FUNCTION__.cpu_smm_update = private unnamed_addr constant [35 x i8] c"void cpu_smm_update(CPUX86State *)\00", align 1
@fcom_ccval = internal unnamed_addr constant [4 x i32] [i32 256, i32 16384, i32 0, i32 17664], align 16
@comis_eflags = internal unnamed_addr constant [4 x i32] [i32 1, i32 64, i32 0, i32 69], align 16
@.str.21 = private unnamed_addr constant [16 x i8] c"Not implemented\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"vmrun! %08x\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"Injecting(%#hx): \00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"INTR\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"NMI\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"EXEPT\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"SOFT\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c" %#x %#x\0A\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"vmload! %08x\0AFS: %016lx | %08x\0A\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"vmsave! %08x\0AFS: %016lx | %08x\0A\00", align 1
@rclb_table = external local_unnamed_addr constant [32 x i8], align 16
@rclw_table = external local_unnamed_addr constant [32 x i8], align 16
@float16_default_nan = local_unnamed_addr constant i16 -512, align 2
@float32_default_nan = local_unnamed_addr constant i32 -4194304, align 4
@float64_default_nan = local_unnamed_addr constant i64 -2251799813685248, align 8
@floatx80_default_nan = local_unnamed_addr constant %struct.floatx80 { i64 -4611686018427387904, i16 -1 }, align 8
@float128_default_nan = local_unnamed_addr constant %struct.MTRRVar { i64 0, i64 -140737488355328 }, align 8
@estimateSqrt32.sqrtOddAdjustments = internal unnamed_addr constant [16 x i16] [i16 4, i16 34, i16 93, i16 177, i16 285, i16 415, i16 566, i16 736, i16 924, i16 1128, i16 1349, i16 1585, i16 1835, i16 2098, i16 2374, i16 2663], align 16
@estimateSqrt32.sqrtEvenAdjustments = internal unnamed_addr constant [16 x i16] [i16 2605, i16 2223, i16 1882, i16 1577, i16 1306, i16 1065, i16 854, i16 670, i16 512, i16 377, i16 265, i16 175, i16 104, i16 52, i16 18, i16 2], align 16
@float32_exp2_coefficients = internal unnamed_addr constant [15 x i64] [i64 4607182418800017408, i64 4602678819172646912, i64 4595172819793696085, i64 4586165620538955093, i64 4575957461383581969, i64 4564047942368979991, i64 4551452160554016794, i64 453

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @compute_eflags() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 16
  %6 = tail call i32 @helper_cc_compute_all(i32 %5)
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 19
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1024
  %10 = or i32 %3, %6
  %11 = or i32 %10, %9
  %12 = or i32 %11, 2
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_cc_compute_all(i32 %0) local_unnamed_addr #0 {
  switch i32 %0, label %791 [
    i32 1, label %2
    i32 2, label %6
    i32 3, label %27
    i32 4, label %50
    i32 6, label %72
    i32 7, label %103
    i32 8, label %136
    i32 10, label %167
    i32 11, label %199
    i32 12, label %233
    i32 14, label %265
    i32 15, label %296
    i32 16, label %329
    i32 18, label %359
    i32 19, label %391
    i32 20, label %425
    i32 22, label %456
    i32 23, label %470
    i32 24, label %486
    i32 26, label %501
    i32 27, label %525
    i32 28, label %551
    i32 30, label %576
    i32 31, label %600
    i32 32, label %626
    i32 34, label %651
    i32 35, label %674
    i32 36, label %699
    i32 38, label %722
    i32 39, label %744
    i32 40, label %768
  ]

2:                                                ; preds = %1
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  br label %791

6:                                                ; preds = %1
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  %11 = zext i1 %10 to i32
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 255
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %14, 0
  %20 = select i1 %19, i32 64, i32 0
  %21 = and i32 %13, 128
  %22 = select i1 %10, i32 2048, i32 0
  %23 = or i32 %21, %11
  %24 = or i32 %23, %22
  %25 = or i32 %24, %18
  %26 = or i32 %25, %20
  br label %791

27:                                               ; preds = %1
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp ne i32 %30, 0
  %32 = zext i1 %31 to i32
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 3
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, 255
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = and i32 %34, 65535
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, i32 64, i32 0
  %43 = lshr i32 %34, 8
  %44 = and i32 %43, 128
  %45 = select i1 %31, i32 2048, i32 0
  %46 = or i32 %45, %32
  %47 = or i32 %46, %39
  %48 = or i32 %47, %44
  %49 = or i32 %48, %42
  br label %791

50:                                               ; preds = %1
  %51 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i32
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 3
  %57 = load i32, i32* %56, align 8
  %58 = and i32 %57, 255
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %57, 0
  %64 = select i1 %63, i32 64, i32 0
  %65 = lshr i32 %57, 24
  %66 = and i32 %65, 128
  %67 = select i1 %54, i32 2048, i32 0
  %68 = or i32 %67, %55
  %69 = or i32 %68, %62
  %70 = or i32 %69, %64
  %71 = or i32 %70, %66
  br label %791

72:                                               ; preds = %1
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = sub i32 %77, %75
  %79 = and i32 %77, 255
  %80 = and i32 %75, 255
  %81 = icmp ult i32 %79, %80
  %82 = zext i1 %81 to i32
  %83 = zext i32 %79 to i64
  %84 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = xor i32 %77, %75
  %88 = xor i32 %87, %78
  %89 = and i32 %88, 16
  %90 = icmp eq i32 %79, 0
  %91 = select i1 %90, i32 64, i32 0
  %92 = and i32 %77, 128
  %93 = xor i32 %75, 128
  %94 = xor i32 %93, %78
  %95 = and i32 %94, %87
  %96 = shl i32 %95, 4
  %97 = and i32 %96, 2048
  %98 = or i32 %92, %86
  %99 = or i32 %98, %82
  %100 = or i32 %99, %89
  %101 = or i32 %100, %91
  %102 = or i32 %101, %97
  br label %791

103:                                              ; preds = %1
  %104 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %104, i64 0, i32 2
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %104, i64 0, i32 3
  %108 = load i32, i32* %107, align 8
  %109 = sub i32 %108, %106
  %110 = and i32 %108, 65535
  %111 = and i32 %106, 65535
  %112 = icmp ult i32 %110, %111
  %113 = zext i1 %112 to i32
  %114 = and i32 %108, 255
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = xor i32 %108, %106
  %120 = xor i32 %119, %109
  %121 = and i32 %120, 16
  %122 = icmp eq i32 %110, 0
  %123 = select i1 %122, i32 64, i32 0
  %124 = lshr i32 %108, 8
  %125 = and i32 %124, 128
  %126 = xor i32 %106, 32768
  %127 = xor i32 %126, %109
  %128 = and i32 %127, %119
  %129 = lshr i32 %128, 4
  %130 = and i32 %129, 2048
  %131 = or i32 %125, %118
  %132 = or i32 %131, %113
  %133 = or i32 %132, %121
  %134 = or i32 %133, %123
  %135 = or i32 %134, %130
  br label %791

136:                                              ; preds = %1
  %137 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %138 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 2
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 3
  %141 = load i32, i32* %140, align 8
  %142 = sub i32 %141, %139
  %143 = icmp ult i32 %141, %139
  %144 = zext i1 %143 to i32
  %145 = and i32 %141, 255
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = xor i32 %141, %139
  %151 = xor i32 %150, %142
  %152 = and i32 %151, 16
  %153 = icmp eq i32 %141, 0
  %154 = select i1 %153, i32 64, i32 0
  %155 = lshr i32 %141, 24
  %156 = and i32 %155, 128
  %157 = xor i32 %139, -2147483648
  %158 = xor i32 %157, %142
  %159 = and i32 %158, %150
  %160 = lshr i32 %159, 20
  %161 = and i32 %160, 2048
  %162 = or i32 %144, %149
  %163 = or i32 %162, %154
  %164 = or i32 %163, %156
  %165 = or i32 %164, %152
  %166 = or i32 %165, %161
  br label %791

167:                                              ; preds = %1
  %168 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 2
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 3
  %172 = load i32, i32* %171, align 8
  %173 = xor i32 %170, -1
  %174 = add i32 %172, %173
  %175 = and i32 %172, 255
  %176 = and i32 %170, 255
  %177 = icmp ule i32 %175, %176
  %178 = zext i1 %177 to i32
  %179 = zext i32 %175 to i64
  %180 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = xor i32 %172, %170
  %184 = xor i32 %183, %174
  %185 = and i32 %184, 16
  %186 = icmp eq i32 %175, 0
  %187 = select i1 %186, i32 64, i32 0
  %188 = and i32 %172, 128
  %189 = xor i32 %170, 128
  %190 = xor i32 %189, %174
  %191 = and i32 %190, %183
  %192 = shl i32 %191, 4
  %193 = and i32 %192, 2048
  %194 = or i32 %188, %182
  %195 = or i32 %194, %178
  %196 = or i32 %195, %185
  %197 = or i32 %196, %187
  %198 = or i32 %197, %193
  br label %791

199:                                              ; preds = %1
  %200 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %201 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %200, i64 0, i32 2
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %200, i64 0, i32 3
  %204 = load i32, i32* %203, align 8
  %205 = xor i32 %202, -1
  %206 = add i32 %204, %205
  %207 = and i32 %204, 65535
  %208 = and i32 %202, 65535
  %209 = icmp ule i32 %207, %208
  %210 = zext i1 %209 to i32
  %211 = and i32 %204, 255
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = xor i32 %204, %202
  %217 = xor i32 %216, %206
  %218 = and i32 %217, 16
  %219 = icmp eq i32 %207, 0
  %220 = select i1 %219, i32 64, i32 0
  %221 = lshr i32 %204, 8
  %222 = and i32 %221, 128
  %223 = xor i32 %202, 32768
  %224 = xor i32 %223, %206
  %225 = and i32 %224, %216
  %226 = lshr i32 %225, 4
  %227 = and i32 %226, 2048
  %228 = or i32 %222, %215
  %229 = or i32 %228, %210
  %230 = or i32 %229, %218
  %231 = or i32 %230, %220
  %232 = or i32 %231, %227
  br label %791

233:                                              ; preds = %1
  %234 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %235 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %234, i64 0, i32 2
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %234, i64 0, i32 3
  %238 = load i32, i32* %237, align 8
  %239 = xor i32 %236, -1
  %240 = add i32 %238, %239
  %241 = icmp ule i32 %238, %236
  %242 = zext i1 %241 to i32
  %243 = and i32 %238, 255
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = xor i32 %238, %236
  %249 = xor i32 %248, %240
  %250 = and i32 %249, 16
  %251 = icmp eq i32 %238, 0
  %252 = select i1 %251, i32 64, i32 0
  %253 = lshr i32 %238, 24
  %254 = and i32 %253, 128
  %255 = xor i32 %236, -2147483648
  %256 = xor i32 %255, %240
  %257 = and i32 %256, %248
  %258 = lshr i32 %257, 20
  %259 = and i32 %258, 2048
  %260 = or i32 %242, %247
  %261 = or i32 %260, %252
  %262 = or i32 %261, %254
  %263 = or i32 %262, %250
  %264 = or i32 %263, %259
  br label %791

265:                                              ; preds = %1
  %266 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %267 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %266, i64 0, i32 3
  %268 = load i32, i32* %267, align 8
  %269 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %266, i64 0, i32 2
  %270 = load i32, i32* %269, align 4
  %271 = add i32 %270, %268
  %272 = and i32 %271, 255
  %273 = and i32 %270, 255
  %274 = icmp ult i32 %272, %273
  %275 = zext i1 %274 to i32
  %276 = and i32 %268, 255
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %277
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = xor i32 %271, %268
  %282 = xor i32 %281, %270
  %283 = and i32 %282, 16
  %284 = icmp eq i32 %276, 0
  %285 = select i1 %284, i32 64, i32 0
  %286 = and i32 %268, 128
  %287 = xor i32 %271, %270
  %288 = and i32 %287, %281
  %289 = shl i32 %288, 4
  %290 = and i32 %289, 2048
  %291 = or i32 %286, %280
  %292 = or i32 %291, %285
  %293 = or i32 %292, %275
  %294 = or i32 %293, %283
  %295 = or i32 %294, %290
  br label %791

296:                                              ; preds = %1
  %297 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %298 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 3
  %299 = load i32, i32* %298, align 8
  %300 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 2
  %301 = load i32, i32* %300, align 4
  %302 = add i32 %301, %299
  %303 = and i32 %302, 65535
  %304 = and i32 %301, 65535
  %305 = icmp ult i32 %303, %304
  %306 = zext i1 %305 to i32
  %307 = and i32 %299, 255
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = xor i32 %302, %299
  %313 = xor i32 %312, %301
  %314 = and i32 %313, 16
  %315 = and i32 %299, 65535
  %316 = icmp eq i32 %315, 0
  %317 = select i1 %316, i32 64, i32 0
  %318 = lshr i32 %299, 8
  %319 = and i32 %318, 128
  %320 = xor i32 %302, %301
  %321 = and i32 %320, %312
  %322 = lshr i32 %321, 4
  %323 = and i32 %322, 2048
  %324 = or i32 %319, %311
  %325 = or i32 %324, %317
  %326 = or i32 %325, %306
  %327 = or i32 %326, %314
  %328 = or i32 %327, %323
  br label %791

329:                                              ; preds = %1
  %330 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %331 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %330, i64 0, i32 3
  %332 = load i32, i32* %331, align 8
  %333 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %330, i64 0, i32 2
  %334 = load i32, i32* %333, align 4
  %335 = add i32 %334, %332
  %336 = icmp ult i32 %335, %334
  %337 = zext i1 %336 to i32
  %338 = and i32 %332, 255
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %339
  %341 = load i8, i8* %340, align 1
  %342 = zext i8 %341 to i32
  %343 = xor i32 %335, %332
  %344 = xor i32 %343, %334
  %345 = and i32 %344, 16
  %346 = icmp eq i32 %332, 0
  %347 = select i1 %346, i32 64, i32 0
  %348 = lshr i32 %332, 24
  %349 = and i32 %348, 128
  %350 = xor i32 %335, %334
  %351 = and i32 %350, %343
  %352 = lshr i32 %351, 20
  %353 = and i32 %352, 2048
  %354 = or i32 %349, %347
  %355 = or i32 %354, %342
  %356 = or i32 %355, %337
  %357 = or i32 %356, %345
  %358 = or i32 %357, %353
  br label %791

359:                                              ; preds = %1
  %360 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %361 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %360, i64 0, i32 3
  %362 = load i32, i32* %361, align 8
  %363 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %360, i64 0, i32 2
  %364 = load i32, i32* %363, align 4
  %365 = add i32 %362, 1
  %366 = add i32 %365, %364
  %367 = and i32 %366, 255
  %368 = and i32 %364, 255
  %369 = icmp ule i32 %367, %368
  %370 = zext i1 %369 to i32
  %371 = and i32 %362, 255
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %372
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i32
  %376 = xor i32 %366, %362
  %377 = xor i32 %376, %364
  %378 = and i32 %377, 16
  %379 = icmp eq i32 %371, 0
  %380 = select i1 %379, i32 64, i32 0
  %381 = and i32 %362, 128
  %382 = xor i32 %366, %364
  %383 = and i32 %382, %376
  %384 = shl i32 %383, 4
  %385 = and i32 %384, 2048
  %386 = or i32 %381, %375
  %387 = or i32 %386, %380
  %388 = or i32 %387, %370
  %389 = or i32 %388, %378
  %390 = or i32 %389, %385
  br label %791

391:                                              ; preds = %1
  %392 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %393 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 3
  %394 = load i32, i32* %393, align 8
  %395 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 2
  %396 = load i32, i32* %395, align 4
  %397 = add i32 %394, 1
  %398 = add i32 %397, %396
  %399 = and i32 %398, 65535
  %400 = and i32 %396, 65535
  %401 = icmp ule i32 %399, %400
  %402 = zext i1 %401 to i32
  %403 = and i32 %394, 255
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = xor i32 %398, %394
  %409 = xor i32 %408, %396
  %410 = and i32 %409, 16
  %411 = and i32 %394, 65535
  %412 = icmp eq i32 %411, 0
  %413 = select i1 %412, i32 64, i32 0
  %414 = lshr i32 %394, 8
  %415 = and i32 %414, 128
  %416 = xor i32 %398, %396
  %417 = and i32 %416, %408
  %418 = lshr i32 %417, 4
  %419 = and i32 %418, 2048
  %420 = or i32 %415, %407
  %421 = or i32 %420, %413
  %422 = or i32 %421, %402
  %423 = or i32 %422, %410
  %424 = or i32 %423, %419
  br label %791

425:                                              ; preds = %1
  %426 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %427 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %426, i64 0, i32 3
  %428 = load i32, i32* %427, align 8
  %429 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %426, i64 0, i32 2
  %430 = load i32, i32* %429, align 4
  %431 = add i32 %428, 1
  %432 = add i32 %431, %430
  %433 = icmp ule i32 %432, %430
  %434 = zext i1 %433 to i32
  %435 = and i32 %428, 255
  %436 = zext i32 %435 to i64
  %437 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %436
  %438 = load i8, i8* %437, align 1
  %439 = zext i8 %438 to i32
  %440 = xor i32 %432, %428
  %441 = xor i32 %440, %430
  %442 = and i32 %441, 16
  %443 = icmp eq i32 %428, 0
  %444 = select i1 %443, i32 64, i32 0
  %445 = lshr i32 %428, 24
  %446 = and i32 %445, 128
  %447 = xor i32 %432, %430
  %448 = and i32 %447, %440
  %449 = lshr i32 %448, 20
  %450 = and i32 %449, 2048
  %451 = or i32 %446, %444
  %452 = or i32 %451, %439
  %453 = or i32 %452, %434
  %454 = or i32 %453, %442
  %455 = or i32 %454, %450
  br label %791

456:                                              ; preds = %1
  %457 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %458 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %457, i64 0, i32 3
  %459 = load i32, i32* %458, align 8
  %460 = and i32 %459, 255
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %461
  %463 = load i8, i8* %462, align 1
  %464 = zext i8 %463 to i32
  %465 = icmp eq i32 %460, 0
  %466 = select i1 %465, i32 64, i32 0
  %467 = and i32 %459, 128
  %468 = or i32 %467, %464
  %469 = or i32 %468, %466
  br label %791

470:                                              ; preds = %1
  %471 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %472 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %471, i64 0, i32 3
  %473 = load i32, i32* %472, align 8
  %474 = and i32 %473, 255
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %475
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i32
  %479 = and i32 %473, 65535
  %480 = icmp eq i32 %479, 0
  %481 = select i1 %480, i32 64, i32 0
  %482 = lshr i32 %473, 8
  %483 = and i32 %482, 128
  %484 = or i32 %483, %478
  %485 = or i32 %484, %481
  br label %791

486:                                              ; preds = %1
  %487 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %488 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %487, i64 0, i32 3
  %489 = load i32, i32* %488, align 8
  %490 = and i32 %489, 255
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %491
  %493 = load i8, i8* %492, align 1
  %494 = zext i8 %493 to i32
  %495 = icmp eq i32 %489, 0
  %496 = select i1 %495, i32 64, i32 0
  %497 = lshr i32 %489, 24
  %498 = and i32 %497, 128
  %499 = or i32 %496, %494
  %500 = or i32 %499, %498
  br label %791

501:                                              ; preds = %1
  %502 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %503 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %502, i64 0, i32 3
  %504 = load i32, i32* %503, align 8
  %505 = add i32 %504, 31
  %506 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %502, i64 0, i32 2
  %507 = load i32, i32* %506, align 4
  %508 = and i32 %504, 255
  %509 = zext i32 %508 to i64
  %510 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %509
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i32
  %513 = xor i32 %505, %504
  %514 = and i32 %513, 16
  %515 = icmp eq i32 %508, 0
  %516 = select i1 %515, i32 64, i32 0
  %517 = and i32 %504, 128
  %518 = icmp eq i32 %508, 128
  %519 = select i1 %518, i32 2048, i32 0
  %520 = or i32 %517, %507
  %521 = or i32 %520, %512
  %522 = or i32 %521, %514
  %523 = or i32 %522, %516
  %524 = or i32 %523, %519
  br label %791

525:                                              ; preds = %1
  %526 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %527 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %526, i64 0, i32 3
  %528 = load i32, i32* %527, align 8
  %529 = add i32 %528, 31
  %530 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %526, i64 0, i32 2
  %531 = load i32, i32* %530, align 4
  %532 = and i32 %528, 255
  %533 = zext i32 %532 to i64
  %534 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %533
  %535 = load i8, i8* %534, align 1
  %536 = zext i8 %535 to i32
  %537 = xor i32 %529, %528
  %538 = and i32 %537, 16
  %539 = and i32 %528, 65535
  %540 = icmp eq i32 %539, 0
  %541 = select i1 %540, i32 64, i32 0
  %542 = lshr i32 %528, 8
  %543 = and i32 %542, 128
  %544 = icmp eq i32 %539, 32768
  %545 = select i1 %544, i32 2048, i32 0
  %546 = or i32 %543, %531
  %547 = or i32 %546, %536
  %548 = or i32 %547, %538
  %549 = or i32 %548, %541
  %550 = or i32 %549, %545
  br label %791

551:                                              ; preds = %1
  %552 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %553 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %552, i64 0, i32 3
  %554 = load i32, i32* %553, align 8
  %555 = add i32 %554, 31
  %556 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %552, i64 0, i32 2
  %557 = load i32, i32* %556, align 4
  %558 = and i32 %554, 255
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %559
  %561 = load i8, i8* %560, align 1
  %562 = zext i8 %561 to i32
  %563 = xor i32 %555, %554
  %564 = and i32 %563, 16
  %565 = icmp eq i32 %554, 0
  %566 = select i1 %565, i32 64, i32 0
  %567 = lshr i32 %554, 24
  %568 = and i32 %567, 128
  %569 = icmp eq i32 %554, -2147483648
  %570 = select i1 %569, i32 2048, i32 0
  %571 = or i32 %566, %557
  %572 = or i32 %571, %568
  %573 = or i32 %572, %570
  %574 = or i32 %573, %562
  %575 = or i32 %574, %564
  br label %791

576:                                              ; preds = %1
  %577 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %578 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %577, i64 0, i32 3
  %579 = load i32, i32* %578, align 8
  %580 = add i32 %579, 1
  %581 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %577, i64 0, i32 2
  %582 = load i32, i32* %581, align 4
  %583 = and i32 %579, 255
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %584
  %586 = load i8, i8* %585, align 1
  %587 = zext i8 %586 to i32
  %588 = xor i32 %580, %579
  %589 = and i32 %588, 16
  %590 = icmp eq i32 %583, 0
  %591 = select i1 %590, i32 64, i32 0
  %592 = and i32 %579, 128
  %593 = icmp eq i32 %583, 127
  %594 = select i1 %593, i32 2048, i32 0
  %595 = or i32 %592, %582
  %596 = or i32 %595, %587
  %597 = or i32 %596, %589
  %598 = or i32 %597, %591
  %599 = or i32 %598, %594
  br label %791

600:                                              ; preds = %1
  %601 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %602 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %601, i64 0, i32 3
  %603 = load i32, i32* %602, align 8
  %604 = add i32 %603, 1
  %605 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %601, i64 0, i32 2
  %606 = load i32, i32* %605, align 4
  %607 = and i32 %603, 255
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i32
  %612 = xor i32 %604, %603
  %613 = and i32 %612, 16
  %614 = and i32 %603, 65535
  %615 = icmp eq i32 %614, 0
  %616 = select i1 %615, i32 64, i32 0
  %617 = lshr i32 %603, 8
  %618 = and i32 %617, 128
  %619 = icmp eq i32 %614, 32767
  %620 = select i1 %619, i32 2048, i32 0
  %621 = or i32 %618, %606
  %622 = or i32 %621, %611
  %623 = or i32 %622, %613
  %624 = or i32 %623, %616
  %625 = or i32 %624, %620
  br label %791

626:                                              ; preds = %1
  %627 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %628 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %627, i64 0, i32 3
  %629 = load i32, i32* %628, align 8
  %630 = add i32 %629, 1
  %631 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %627, i64 0, i32 2
  %632 = load i32, i32* %631, align 4
  %633 = and i32 %629, 255
  %634 = zext i32 %633 to i64
  %635 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %634
  %636 = load i8, i8* %635, align 1
  %637 = zext i8 %636 to i32
  %638 = xor i32 %630, %629
  %639 = and i32 %638, 16
  %640 = icmp eq i32 %629, 0
  %641 = select i1 %640, i32 64, i32 0
  %642 = lshr i32 %629, 24
  %643 = and i32 %642, 128
  %644 = icmp eq i32 %629, 2147483647
  %645 = select i1 %644, i32 2048, i32 0
  %646 = or i32 %641, %632
  %647 = or i32 %646, %643
  %648 = or i32 %647, %645
  %649 = or i32 %648, %637
  %650 = or i32 %649, %639
  br label %791

651:                                              ; preds = %1
  %652 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %653 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %652, i64 0, i32 2
  %654 = load i32, i32* %653, align 4
  %655 = lshr i32 %654, 7
  %656 = and i32 %655, 1
  %657 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %652, i64 0, i32 3
  %658 = load i32, i32* %657, align 8
  %659 = and i32 %658, 255
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %660
  %662 = load i8, i8* %661, align 1
  %663 = zext i8 %662 to i32
  %664 = icmp eq i32 %659, 0
  %665 = select i1 %664, i32 64, i32 0
  %666 = and i32 %658, 128
  %667 = xor i32 %658, %654
  %668 = shl i32 %667, 4
  %669 = and i32 %668, 2048
  %670 = or i32 %666, %656
  %671 = or i32 %670, %663
  %672 = or i32 %671, %665
  %673 = or i32 %672, %669
  br label %791

674:                                              ; preds = %1
  %675 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %676 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %675, i64 0, i32 2
  %677 = load i32, i32* %676, align 4
  %678 = lshr i32 %677, 15
  %679 = and i32 %678, 1
  %680 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %675, i64 0, i32 3
  %681 = load i32, i32* %680, align 8
  %682 = and i32 %681, 255
  %683 = zext i32 %682 to i64
  %684 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %683
  %685 = load i8, i8* %684, align 1
  %686 = zext i8 %685 to i32
  %687 = and i32 %681, 65535
  %688 = icmp eq i32 %687, 0
  %689 = select i1 %688, i32 64, i32 0
  %690 = lshr i32 %681, 8
  %691 = and i32 %690, 128
  %692 = xor i32 %681, %677
  %693 = lshr i32 %692, 4
  %694 = and i32 %693, 2048
  %695 = or i32 %679, %686
  %696 = or i32 %695, %691
  %697 = or i32 %696, %689
  %698 = or i32 %697, %694
  br label %791

699:                                              ; preds = %1
  %700 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %701 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %700, i64 0, i32 2
  %702 = load i32, i32* %701, align 4
  %703 = lshr i32 %702, 31
  %704 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %700, i64 0, i32 3
  %705 = load i32, i32* %704, align 8
  %706 = and i32 %705, 255
  %707 = zext i32 %706 to i64
  %708 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %707
  %709 = load i8, i8* %708, align 1
  %710 = zext i8 %709 to i32
  %711 = icmp eq i32 %705, 0
  %712 = select i1 %711, i32 64, i32 0
  %713 = lshr i32 %705, 24
  %714 = and i32 %713, 128
  %715 = xor i32 %705, %702
  %716 = lshr i32 %715, 20
  %717 = and i32 %716, 2048
  %718 = or i32 %703, %710
  %719 = or i32 %718, %712
  %720 = or i32 %719, %714
  %721 = or i32 %720, %717
  br label %791

722:                                              ; preds = %1
  %723 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %724 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %723, i64 0, i32 2
  %725 = load i32, i32* %724, align 4
  %726 = and i32 %725, 1
  %727 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %723, i64 0, i32 3
  %728 = load i32, i32* %727, align 8
  %729 = and i32 %728, 255
  %730 = zext i32 %729 to i64
  %731 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %730
  %732 = load i8, i8* %731, align 1
  %733 = zext i8 %732 to i32
  %734 = icmp eq i32 %729, 0
  %735 = select i1 %734, i32 64, i32 0
  %736 = and i32 %728, 128
  %737 = xor i32 %728, %725
  %738 = shl i32 %737, 4
  %739 = and i32 %738, 2048
  %740 = or i32 %736, %726
  %741 = or i32 %740, %733
  %742 = or i32 %741, %735
  %743 = or i32 %742, %739
  br label %791

744:                                              ; preds = %1
  %745 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %746 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %745, i64 0, i32 2
  %747 = load i32, i32* %746, align 4
  %748 = and i32 %747, 1
  %749 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %745, i64 0, i32 3
  %750 = load i32, i32* %749, align 8
  %751 = and i32 %750, 255
  %752 = zext i32 %751 to i64
  %753 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %752
  %754 = load i8, i8* %753, align 1
  %755 = zext i8 %754 to i32
  %756 = and i32 %750, 65535
  %757 = icmp eq i32 %756, 0
  %758 = select i1 %757, i32 64, i32 0
  %759 = lshr i32 %750, 8
  %760 = and i32 %759, 128
  %761 = xor i32 %750, %747
  %762 = lshr i32 %761, 4
  %763 = and i32 %762, 2048
  %764 = or i32 %748, %755
  %765 = or i32 %764, %760
  %766 = or i32 %765, %758
  %767 = or i32 %766, %763
  br label %791

768:                                              ; preds = %1
  %769 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %770 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %769, i64 0, i32 2
  %771 = load i32, i32* %770, align 4
  %772 = and i32 %771, 1
  %773 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %769, i64 0, i32 3
  %774 = load i32, i32* %773, align 8
  %775 = and i32 %774, 255
  %776 = zext i32 %775 to i64
  %777 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %776
  %778 = load i8, i8* %777, align 1
  %779 = zext i8 %778 to i32
  %780 = icmp eq i32 %774, 0
  %781 = select i1 %780, i32 64, i32 0
  %782 = lshr i32 %774, 24
  %783 = and i32 %782, 128
  %784 = xor i32 %774, %771
  %785 = lshr i32 %784, 20
  %786 = and i32 %785, 2048
  %787 = or i32 %772, %779
  %788 = or i32 %787, %781
  %789 = or i32 %788, %783
  %790 = or i32 %789, %786
  br label %791

791:                                              ; preds = %1, %768, %744, %722, %699, %674, %651, %626, %600, %576, %551, %525, %501, %486, %470, %456, %425, %391, %359, %329, %296, %265, %233, %199, %167, %136, %103, %72, %50, %27, %6, %2
  %792 = phi i32 [ %790, %768 ], [ %767, %744 ], [ %743, %722 ], [ %721, %699 ], [ %698, %674 ], [ %673, %651 ], [ %650, %626 ], [ %625, %600 ], [ %599, %576 ], [ %575, %551 ], [ %550, %525 ], [ %524, %501 ], [ %500, %486 ], [ %485, %470 ], [ %469, %456 
  ret i32 %792
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @cpu_set_eflags(%struct.CPUX86State* nocapture %0, i32 %1) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 1
  store i32 1, i32* %3, align 16
  %4 = and i32 %1, 2261
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 2
  store i32 %4, i32* %5, align 4
  %6 = and i32 %1, 1024
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 1, i32 -1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 19
  store i32 %8, i32* %9, align 4
  %10 = and i32 %1, -3286
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  store i32 %10, i32* %11, align 16
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_write_eflags(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %0, 2261
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 2
  store i32 %3, i32* %5, align 4
  %6 = and i32 %0, 1024
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 1, i32 -1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 19
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 20
  %11 = load i32, i32* %10, align 16
  %12 = xor i32 %1, -1
  %13 = and i32 %11, %12
  %14 = and i32 %0, -3286
  %15 = and i32 %14, %1
  %16 = or i32 %13, %15
  store i32 %16, i32* %10, align 16
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_read_eflags() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32, i32* %2, align 16
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 19
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1024
  %8 = or i32 %7, %4
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %10 = load i32, i32* %9, align 16
  %11 = and i32 %10, -196609
  %12 = or i32 %8, %11
  ret i32 %12
}

; Function Attrs: uwtable
define void @helper_check_iob(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 36608
  %6 = icmp eq i32 %5, 35072
  br i1 %6, label %7, label %29

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 103
  br i1 %10, label %29, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, 102
  %15 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %2, i32 %14)
  %16 = ashr i32 %0, 3
  %17 = add nsw i32 %15, %16
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %8, align 8
  %20 = icmp ugt i32 %18, %19
  br i1 %20, label %29, label %21

21:                                               ; preds = %11
  %22 = load i32, i32* %12, align 4
  %23 = add i32 %22, %17
  %24 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %2, i32 %23)
  %25 = and i32 %0, 7
  %26 = shl nuw nsw i32 1, %25
  %27 = and i32 %24, %26
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %21, %11, %7, %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %2, i32 13, i32 0, i64 0)
  unreachable

30:                                               ; preds = %21
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = zext i32 %17 to i64
  %21 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %20, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, -33
  %24 = and i32 %14, -4095
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %29, label %26, !prof !3, !misexpect !4

26:                                               ; preds = %13
  %27 = tail call zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 0, i8* null)
  %28 = zext i16 %27 to i32
  br label %42

29:                                               ; preds = %13
  %30 = zext i32 %14 to i64
  %31 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %20, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = inttoptr i64 %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %29
  %41 = zext i16 %35 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %41, i32 4, i32 0, i64 0)
  br label %42

42:                                               ; preds = %29, %40, %26
  %43 = phi i32 [ %28, %26 ], [ %36, %40 ], [ %36, %29 ]
  ret i32 %43
}

; Function Attrs: noreturn uwtable
define void @raise_exception_err_ra(%struct.CPUX86State* %0, i32 %1, i32 %2, i64 %3) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* %0, i32 %1, i32 0, i32 %2, i32 0, i64 %3) #21
  unreachable
}

; Function Attrs: noreturn uwtable
define internal fastcc void @raise_interrupt2(%struct.CPUX86State* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) unnamed_addr #4 {
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %63

8:                                                ; preds = %6
  %9 = add nsw i32 %1, 64
  %10 = sext i32 %3 to i64
  tail call void @helper_svm_check_intercept_param(i32 %9, i64 %10)
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 64
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  %15 = add i32 %13, -10
  %16 = icmp ult i32 %15, 4
  %17 = or i1 %14, %16
  %18 = icmp eq i32 %1, 0
  %19 = add i32 %1, -10
  %20 = icmp ult i32 %19, 4
  %21 = or i1 %18, %20
  %22 = load i32, i32* @loglevel, align 4
  %23 = and i32 %22, 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %8
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %27 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16, i64 0, i64 0), i32 %13, i32 %1)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 64
  %30 = load i32, i32* %29, align 4
  br label %31

31:                                               ; preds = %25, %8
  %32 = phi i32 [ %13, %8 ], [ %30, %25 ]
  %33 = phi %struct.CPUX86State* [ %11, %8 ], [ %28, %25 ]
  %34 = icmp eq i32 %32, 8
  br i1 %34, label %35, label %49

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 21
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 2097152
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %35
  tail call void @helper_vmexit(i32 127, i64 0)
  unreachable

41:                                               ; preds = %35
  %42 = load i32, i32* @loglevel, align 4
  %43 = and i32 %42, 512
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %47 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %46)
  br label %48

48:                                               ; preds = %45, %41
  tail call void @exit(i32 -1) #22
  unreachable

49:                                               ; preds = %31
  %50 = and i1 %21, %17
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = icmp eq i32 %32, 14
  %53 = icmp eq i32 %1, 14
  %54 = or i1 %53, %21
  %55 = and i1 %54, %52
  br i1 %55, label %56, label %57

56:                                               ; preds = %51, %49
  br label %57

57:                                               ; preds = %56, %51
  %58 = phi i32 [ 0, %56 ], [ %3, %51 ]
  %59 = phi i32 [ 8, %56 ], [ %1, %51 ]
  switch i32 %1, label %60 [
    i32 13, label %61
    i32 12, label %61
    i32 11, label %61
    i32 10, label %61
    i32 0, label %61
  ]

60:                                               ; preds = %57
  switch i32 %59, label %75 [
    i32 14, label %61
    i32 8, label %61
  ]

61:                                               ; preds = %60, %60, %57, %57, %57, %57, %57
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 64
  store i32 %59, i32* %62, align 4
  br label %75

63:                                               ; preds = %6
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 21
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %66, 2097152
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %75, label %69, !prof !3, !misexpect !5

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 42
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, 2097152
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %75, label %74

74:                                               ; preds = %69
  tail call void @helper_vmexit(i32 117, i64 0)
  unreachable

75:                                               ; preds = %69, %63, %61, %60
  %76 = phi i32 [ %58, %60 ], [ %58, %61 ], [ %3, %63 ], [ %3, %69 ]
  %77 = phi i32 [ %59, %60 ], [ %59, %61 ], [ %1, %63 ], [ %1, %69 ]
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 95
  store i32 %77, i32* %78, align 16
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 58
  store i32 %76, i32* %79, align 16
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 59
  store i32 %2, i32* %80, align 4
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, %4
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 60
  store i32 %83, i32* %84, align 8
  tail call void @cpu_loop_exit_restore(%struct.CPUX86State* %0, i64 %5) #21
  unreachable
}

; Function Attrs: uwtable
define void @helper_svm_check_intercept_param(i32 %0, i64 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 21
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 2097152
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %102, label %8, !prof !3, !misexpect !5

8:                                                ; preds = %2
  switch i32 %0, label %93 [
    i32 0, label %9
    i32 1, label %9
    i32 2, label %9
    i32 3, label %9
    i32 4, label %9
    i32 5, label %9
    i32 6, label %9
    i32 7, label %9
    i32 8, label %9
    i32 16, label %17
    i32 17, label %17
    i32 18, label %17
    i32 19, label %17
    i32 20, label %17
    i32 21, label %17
    i32 22, label %17
    i32 23, label %17
    i32 24, label %17
    i32 32, label %26
    i32 33, label %26
    i32 34, label %26
    i32 35, label %26
    i32 36, label %26
    i32 37, label %26
    i32 38, label %26
    i32 39, label %26
    i32 48, label %35
    i32 49, label %35
    i32 50, label %35
    i32 51, label %35
    i32 52, label %35
    i32 53, label %35
    i32 54, label %35
    i32 55, label %35
    i32 64, label %44
    i32 65, label %44
    i32 66, label %44
    i32 67, label %44
    i32 68, label %44
    i32 69, label %44
    i32 70, label %44
    i32 71, label %44
    i32 72, label %44
    i32 73, label %44
    i32 74, label %44
    i32 75, label %44
    i32 76, label %44
    i32 77, label %44
    i32 78, label %44
    i32 79, label %44
    i32 80, label %44
    i32 81, label %44
    i32 82, label %44
    i32 83, label %44
    i32 84, label %44
    i32 85, label %44
    i32 86, label %44
    i32 87, label %44
    i32 88, label %44
    i32 89, label %44
    i32 90, label %44
    i32 91, label %44
    i32 92, label %44
    i32 93, label %44
    i32 94, label %44
    i32 95, label %44
    i32 124, label %52
  ]

9:                                                ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 43
  %11 = load i16, i16* %10, align 16
  %12 = zext i16 %11 to i32
  %13 = shl nuw nsw i32 1, %0
  %14 = and i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %102, label %16

16:                                               ; preds = %9
  tail call void @helper_vmexit(i32 %0, i64 %1)
  unreachable

17:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 44
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nsw i32 %0, -16
  %22 = shl nuw nsw i32 1, %21
  %23 = and i32 %22, %20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %102, label %25

25:                                               ; preds = %17
  tail call void @helper_vmexit(i32 %0, i64 %1)
  unreachable

26:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 45
  %28 = load i16, i16* %27, align 4
  %29 = zext i16 %28 to i32
  %30 = add nsw i32 %0, -32
  %31 = shl nuw nsw i32 1, %30
  %32 = and i32 %31, %29
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %102, label %34

34:                                               ; preds = %26
  tail call void @helper_vmexit(i32 %0, i64 %1)
  unreachable

35:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 46
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %0, -48
  %40 = shl nuw nsw i32 1, %39
  %41 = and i32 %40, %38
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %102, label %43

43:                                               ; preds = %35
  tail call void @helper_vmexit(i32 %0, i64 %1)
  unreachable

44:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 47
  %46 = load i32, i32* %45, align 8
  %47 = add nsw i32 %0, -64
  %48 = shl nuw i32 1, %47
  %49 = and i32 %46, %48
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %102, label %51

51:                                               ; preds = %44
  tail call void @helper_vmexit(i32 %0, i64 %1)
  unreachable

52:                                               ; preds = %8
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 42
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 268435456
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %102, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 40
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, 72
  %61 = tail call i64 @ldq_phys(i64 %60)
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 0, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = and i32 %64, -8192
  switch i32 %65, label %69 [
    i32 -1073676288, label %75
    i32 -1073741824, label %71
  ]

66:                                               ; preds = %69
  %67 = shl nuw nsw i32 %64, 1
  %68 = lshr i32 %64, 2
  br label %80

69:                                               ; preds = %57
  %70 = icmp ult i32 %64, 8192
  br i1 %70, label %66, label %79

71:                                               ; preds = %57
  %72 = shl i32 %64, 1
  %73 = add i32 %72, -2147467264
  %74 = lshr i32 %73, 3
  br label %80

75:                                               ; preds = %57
  %76 = shl i32 %64, 1
  %77 = add i32 %76, 2147385344
  %78 = lshr i32 %77, 3
  br label %80

79:                                               ; preds = %69
  tail call void @helper_vmexit(i32 124, i64 %1)
  unreachable

80:                                               ; preds = %75, %71, %66
  %81 = phi i32 [ %77, %75 ], [ %73, %71 ], [ %67, %66 ]
  %82 = phi i32 [ %78, %75 ], [ %74, %71 ], [ %68, %66 ]
  %83 = and i32 %81, 6
  %84 = zext i32 %82 to i64
  %85 = add i64 %61, %84
  %86 = tail call i32 @ldub_phys(i64 %85)
  %87 = trunc i64 %1 to i32
  %88 = shl nuw i32 1, %87
  %89 = shl i32 %88, %83
  %90 = and i32 %86, %89
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %80
  tail call void @helper_vmexit(i32 124, i64 %1)
  unreachable

93:                                               ; preds = %8
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 42
  %95 = load i64, i64* %94, align 8
  %96 = add i32 %0, -96
  %97 = zext i32 %96 to i64
  %98 = shl nuw i64 1, %97
  %99 = and i64 %95, %98
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %102, label %101

101:                                              ; preds = %93
  tail call void @helper_vmexit(i32 %0, i64 %1)
  unreachable

102:                                              ; preds = %80, %93, %9, %17, %26, %35, %44, %52, %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #5

; Function Attrs: noreturn uwtable
define void @helper_vmexit(i32 %0, i64 %1) local_unnamed_addr #4 {
  %3 = load i32, i32* @loglevel, align 4
  %4 = and i32 %3, 2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 40
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 128
  %12 = tail call i64 @ldq_phys(i64 %11)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 18
  %15 = load i32, i32* %14, align 8
  %16 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0), i32 %0, i64 %1, i64 %12, i32 %15)
  br label %17

17:                                               ; preds = %2, %6
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 21
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 3
  %22 = and i32 %20, 8
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 40
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, 104
  br i1 %23, label %32, label %27

27:                                               ; preds = %17
  tail call void @stl_phys(i64 %26, i32 1)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 21
  %30 = load i32, i32* %29, align 4
  %31 = and i32 %30, -9
  store i32 %31, i32* %29, align 4
  br label %34

32:                                               ; preds = %17
  tail call void @stl_phys(i64 %26, i32 0)
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %34

34:                                               ; preds = %32, %27
  %35 = phi %struct.CPUX86State* [ %33, %32 ], [ %28, %27 ]
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 40
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, 1024
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  tail call void @stw_phys(i64 %38, i32 %40)
  %41 = add i64 %37, 1032
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  tail call void @stq_phys(i64 %41, i64 %44)
  %45 = add i64 %37, 1028
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  tail call void @stl_phys(i64 %45, i32 %47)
  %48 = add i64 %37, 1026
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = lshr i32 %50, 8
  %52 = and i32 %51, 255
  %53 = lshr i32 %50, 12
  %54 = and i32 %53, 3840
  %55 = or i32 %52, %54
  tail call void @stw_phys(i64 %48, i32 %55)
  %56 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %56, i64 0, i32 40
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, 1040
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %56, i64 0, i32 24, i64 1, i32 0
  %61 = load i32, i32* %60, align 4
  tail call void @stw_phys(i64 %59, i32 %61)
  %62 = add i64 %58, 1048
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %56, i64 0, i32 24, i64 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  tail call void @stq_phys(i64 %62, i64 %65)
  %66 = add i64 %58, 1044
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %56, i64 0, i32 24, i64 1, i32 2
  %68 = load i32, i32* %67, align 4
  tail call void @stl_phys(i64 %66, i32 %68)
  %69 = add i64 %58, 1042
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %56, i64 0, i32 24, i64 1, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %71, 8
  %73 = and i32 %72, 255
  %74 = lshr i32 %71, 12
  %75 = and i32 %74, 3840
  %76 = or i32 %73, %75
  tail call void @stw_phys(i64 %69, i32 %76)
  %77 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 40
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %79, 1056
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 24, i64 2, i32 0
  %82 = load i32, i32* %81, align 4
  tail call void @stw_phys(i64 %80, i32 %82)
  %83 = add i64 %79, 1064
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 24, i64 2, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i64
  tail call void @stq_phys(i64 %83, i64 %86)
  %87 = add i64 %79, 1060
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 24, i64 2, i32 2
  %89 = load i32, i32* %88, align 4
  tail call void @stl_phys(i64 %87, i32 %89)
  %90 = add i64 %79, 1058
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 24, i64 2, i32 3
  %92 = load i32, i32* %91, align 4
  %93 = lshr i32 %92, 8
  %94 = and i32 %93, 255
  %95 = lshr i32 %92, 12
  %96 = and i32 %95, 3840
  %97 = or i32 %94, %96
  tail call void @stw_phys(i64 %90, i32 %97)
  %98 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %98, i64 0, i32 40
  %100 = load i64, i64* %99, align 8
  %101 = add i64 %100, 1072
  %102 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %98, i64 0, i32 24, i64 3, i32 0
  %103 = load i32, i32* %102, align 4
  tail call void @stw_phys(i64 %101, i32 %103)
  %104 = add i64 %100, 1080
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %98, i64 0, i32 24, i64 3, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  tail call void @stq_phys(i64 %104, i64 %107)
  %108 = add i64 %100, 1076
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %98, i64 0, i32 24, i64 3, i32 2
  %110 = load i32, i32* %109, align 4
  tail call void @stl_phys(i64 %108, i32 %110)
  %111 = add i64 %100, 1074
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %98, i64 0, i32 24, i64 3, i32 3
  %113 = load i32, i32* %112, align 4
  %114 = lshr i32 %113, 8
  %115 = and i32 %114, 255
  %116 = lshr i32 %113, 12
  %117 = and i32 %116, 3840
  %118 = or i32 %115, %117
  tail call void @stw_phys(i64 %111, i32 %118)
  %119 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 40
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, 1128
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 27, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  tail call void @stq_phys(i64 %122, i64 %125)
  %126 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %126, i64 0, i32 40
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %128, 1124
  %130 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %126, i64 0, i32 27, i32 2
  %131 = load i32, i32* %130, align 8
  tail call void @stl_phys(i64 %129, i32 %131)
  %132 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %132, i64 0, i32 40
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, 1160
  %136 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %132, i64 0, i32 28, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i64
  tail call void @stq_phys(i64 %135, i64 %138)
  %139 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 40
  %141 = load i64, i64* %140, align 8
  %142 = add i64 %141, 1156
  %143 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 28, i32 2
  %144 = load i32, i32* %143, align 8
  tail call void @stl_phys(i64 %142, i32 %144)
  %145 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 40
  %147 = load i64, i64* %146, align 8
  %148 = add i64 %147, 1232
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 37
  %150 = load i64, i64* %149, align 16
  tail call void @stq_phys(i64 %148, i64 %150)
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 40
  %153 = load i64, i64* %152, align 8
  %154 = add i64 %153, 1368
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 29, i64 0
  %156 = load i32, i32* %155, align 16
  %157 = zext i32 %156 to i64
  tail call void @stq_phys(i64 %154, i64 %157)
  %158 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %159 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %158, i64 0, i32 40
  %160 = load i64, i64* %159, align 8
  %161 = add i64 %160, 1600
  %162 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %158, i64 0, i32 29, i64 2
  %163 = load i32, i32* %162, align 8
  %164 = zext i32 %163 to i64
  tail call void @stq_phys(i64 %161, i64 %164)
  %165 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %166 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %165, i64 0, i32 40
  %167 = load i64, i64* %166, align 8
  %168 = add i64 %167, 1360
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %165, i64 0, i32 29, i64 3
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  tail call void @stq_phys(i64 %168, i64 %171)
  %172 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %173 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %172, i64 0, i32 40
  %174 = load i64, i64* %173, align 8
  %175 = add i64 %174, 1352
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %172, i64 0, i32 29, i64 4
  %177 = load i32, i32* %176, align 16
  %178 = zext i32 %177 to i64
  tail call void @stq_phys(i64 %175, i64 %178)
  %179 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %180 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %179, i64 0, i32 40
  %181 = load i64, i64* %180, align 8
  %182 = add i64 %181, 96
  %183 = tail call i32 @ldl_phys(i64 %182)
  %184 = and i32 %183, -272
  %185 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %186 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %185, i64 0, i32 48
  %187 = load i8, i8* %186, align 4
  %188 = and i8 %187, 15
  %189 = zext i8 %188 to i32
  %190 = or i32 %184, %189
  %191 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %185, i64 0, i32 76
  %192 = load i32, i32* %191, align 4
  %193 = and i32 %192, 256
  %194 = or i32 %190, %193
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %185, i64 0, i32 40
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %196, 96
  tail call void @stl_phys(i64 %197, i32 %194)
  %198 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 40
  %200 = load i64, i64* %199, align 8
  %201 = add i64 %200, 1392
  %202 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 20
  %203 = load i32, i32* %202, align 16
  %204 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 1
  %205 = load i32, i32* %204, align 16
  %206 = tail call i32 @helper_cc_compute_all(i32 %205) #23
  %207 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 19
  %208 = load i32, i32* %207, align 4
  %209 = and i32 %208, 1024
  %210 = or i32 %203, %206
  %211 = or i32 %210, %209
  %212 = or i32 %211, 2
  %213 = zext i32 %212 to i64
  tail call void @stq_phys(i64 %201, i64 %213)
  %214 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %215 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %214, i64 0, i32 40
  %216 = load i64, i64* %215, align 8
  %217 = add i64 %216, 1400
  %218 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %214, i64 0, i32 18
  %219 = load i32, i32* %218, align 8
  %220 = zext i32 %219 to i64
  tail call void @stq_phys(i64 %217, i64 %220)
  %221 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %222 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %221, i64 0, i32 40
  %223 = load i64, i64* %222, align 8
  %224 = add i64 %223, 1496
  %225 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %221, i64 0, i32 0, i64 4
  %226 = load i32, i32* %225, align 16
  %227 = zext i32 %226 to i64
  tail call void @stq_phys(i64 %224, i64 %227)
  %228 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %229 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %228, i64 0, i32 40
  %230 = load i64, i64* %229, align 8
  %231 = add i64 %230, 1528
  %232 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %228, i64 0, i32 0, i64 0
  %233 = load i32, i32* %232, align 16
  %234 = zext i32 %233 to i64
  tail call void @stq_phys(i64 %231, i64 %234)
  %235 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 40
  %237 = load i64, i64* %236, align 8
  %238 = add i64 %237, 1376
  %239 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 61, i64 7
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %240 to i64
  tail call void @stq_phys(i64 %238, i64 %241)
  %242 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %243 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %242, i64 0, i32 40
  %244 = load i64, i64* %243, align 8
  %245 = add i64 %244, 1384
  %246 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %242, i64 0, i32 61, i64 6
  %247 = load i32, i32* %246, align 4
  %248 = zext i32 %247 to i64
  tail call void @stq_phys(i64 %245, i64 %248)
  %249 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %250 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %249, i64 0, i32 40
  %251 = load i64, i64* %250, align 8
  %252 = add i64 %251, 1227
  %253 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %249, i64 0, i32 21
  %254 = load i32, i32* %253, align 4
  %255 = and i32 %254, 3
  tail call void @stb_phys(i64 %252, i32 %255)
  %256 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 22
  %258 = load i32, i32* %257, align 8
  %259 = and i32 %258, -11
  store i32 %259, i32* %257, align 8
  %260 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 21
  %261 = load i32, i32* %260, align 4
  %262 = and i32 %261, -2097153
  store i32 %262, i32* %260, align 4
  %263 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 47
  store i32 0, i32* %263, align 8
  %264 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 76
  %265 = load i32, i32* %264, align 4
  %266 = and i32 %265, -257
  store i32 %266, i32* %264, align 4
  %267 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 41
  %268 = bitcast i64* %267 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %268, align 16
  %269 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 39
  %270 = load i64, i64* %269, align 16
  %271 = add i64 %270, 1128
  %272 = tail call i64 @ldq_phys(i64 %271)
  %273 = trunc i64 %272 to i32
  %274 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %275 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %274, i64 0, i32 27, i32 1
  store i32 %273, i32* %275, align 4
  %276 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %274, i64 0, i32 39
  %277 = load i64, i64* %276, align 16
  %278 = add i64 %277, 1124
  %279 = tail call i32 @ldl_phys(i64 %278)
  %280 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %281 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %280, i64 0, i32 27, i32 2
  store i32 %279, i32* %281, align 8
  %282 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %280, i64 0, i32 39
  %283 = load i64, i64* %282, align 16
  %284 = add i64 %283, 1160
  %285 = tail call i64 @ldq_phys(i64 %284)
  %286 = trunc i64 %285 to i32
  %287 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %288 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 28, i32 1
  store i32 %286, i32* %288, align 4
  %289 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 39
  %290 = load i64, i64* %289, align 16
  %291 = add i64 %290, 1156
  %292 = tail call i32 @ldl_phys(i64 %291)
  %293 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %294 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %293, i64 0, i32 28, i32 2
  store i32 %292, i32* %294, align 8
  %295 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %293, i64 0, i32 39
  %296 = load i64, i64* %295, align 16
  %297 = add i64 %296, 1368
  %298 = tail call i64 @ldq_phys(i64 %297)
  %299 = trunc i64 %298 to i32
  %300 = or i32 %299, 1
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %293, i32 %300)
  %301 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %302 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %301, i64 0, i32 39
  %303 = load i64, i64* %302, align 16
  %304 = add i64 %303, 1352
  %305 = tail call i64 @ldq_phys(i64 %304)
  %306 = trunc i64 %305 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %301, i32 %306)
  %307 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %308 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %307, i64 0, i32 39
  %309 = load i64, i64* %308, align 16
  %310 = add i64 %309, 1360
  %311 = tail call i64 @ldq_phys(i64 %310)
  %312 = trunc i64 %311 to i32
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %307, i32 %312)
  %313 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %314 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %313, i64 0, i32 39
  %315 = load i64, i64* %314, align 16
  %316 = add i64 %315, 1232
  %317 = tail call i64 @ldq_phys(i64 %316)
  %318 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %313, i64 0, i32 37
  store i64 %317, i64* %318, align 16
  %319 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %313, i64 0, i32 21
  %320 = load i32, i32* %319, align 4
  %321 = and i32 %320, -1064961
  %322 = trunc i64 %317 to i32
  %323 = shl i32 %322, 4
  %324 = and i32 %323, 16384
  %325 = or i32 %321, %324
  %326 = shl i32 %322, 8
  %327 = and i32 %326, 1048576
  %328 = or i32 %325, %327
  store i32 %328, i32* %319, align 4
  %329 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %330 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %329, i64 0, i32 20
  store i32 0, i32* %330, align 16
  %331 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %329, i64 0, i32 39
  %332 = load i64, i64* %331, align 16
  %333 = add i64 %332, 1392
  %334 = tail call i64 @ldq_phys(i64 %333)
  %335 = trunc i64 %334 to i32
  %336 = and i32 %335, 2261
  %337 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %338 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 2
  store i32 %336, i32* %338, align 4
  %339 = and i32 %335, 1024
  %340 = icmp eq i32 %339, 0
  %341 = select i1 %340, i32 1, i32 -1
  %342 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 19
  store i32 %341, i32* %342, align 4
  %343 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 20
  %344 = load i32, i32* %343, align 16
  %345 = and i32 %344, 3285
  %346 = and i32 %335, -3286
  %347 = or i32 %345, %346
  store i32 %347, i32* %343, align 16
  %348 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 1
  store i32 1, i32* %348, align 16
  %349 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 39
  %350 = load i64, i64* %349, align 16
  %351 = add i64 %350, 1024
  %352 = tail call i32 @lduw_phys(i64 %351)
  %353 = add i64 %350, 1032
  %354 = tail call i64 @ldq_phys(i64 %353)
  %355 = trunc i64 %354 to i32
  %356 = add i64 %350, 1028
  %357 = tail call i32 @ldl_phys(i64 %356)
  %358 = add i64 %350, 1026
  %359 = tail call i32 @lduw_phys(i64 %358)
  %360 = shl i32 %359, 8
  %361 = and i32 %360, 65280
  %362 = shl i32 %359, 12
  %363 = and i32 %362, 15728640
  %364 = or i32 %361, %363
  %365 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 0, i32 0
  store i32 %352, i32* %365, align 4
  %366 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 0, i32 1
  store i32 %355, i32* %366, align 4
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 0, i32 2
  store i32 %357, i32* %367, align 4
  %368 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 0, i32 3
  store i32 %364, i32* %368, align 4
  %369 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 21
  %370 = load i32, i32* %369, align 4
  %371 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 2, i32 3
  %372 = load i32, i32* %371, align 4
  %373 = lshr i32 %372, 17
  %374 = and i32 %373, 32
  %375 = trunc i32 %370 to i16
  %376 = icmp slt i16 %375, 0
  br i1 %376, label %401, label %377

377:                                              ; preds = %34
  %378 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 29, i64 0
  %379 = load i32, i32* %378, align 16
  %380 = and i32 %379, 1
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %389, label %382

382:                                              ; preds = %377
  %383 = load i32, i32* %343, align 16
  %384 = and i32 %383, 131072
  %385 = icmp ne i32 %384, 0
  %386 = and i32 %370, 16
  %387 = icmp eq i32 %386, 0
  %388 = or i1 %387, %385
  br i1 %388, label %389, label %391

389:                                              ; preds = %382, %377
  %390 = or i32 %374, 64
  br label %401

391:                                              ; preds = %382
  %392 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 3, i32 1
  %393 = load i32, i32* %392, align 4
  %394 = or i32 %393, %355
  %395 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %337, i64 0, i32 24, i64 2, i32 1
  %396 = load i32, i32* %395, align 4
  %397 = or i32 %394, %396
  %398 = icmp eq i32 %397, 0
  %399 = select i1 %398, i32 0, i32 64
  %400 = or i32 %399, %374
  br label %401

401:                                              ; preds = %34, %389, %391
  %402 = phi i32 [ %374, %34 ], [ %390, %389 ], [ %400, %391 ]
  %403 = and i32 %370, -97
  %404 = or i32 %402, %403
  store i32 %404, i32* %369, align 4
  %405 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %406 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %405, i64 0, i32 39
  %407 = load i64, i64* %406, align 16
  %408 = add i64 %407, 1040
  tail call fastcc void @svm_load_seg_cache(i64 %408, %struct.CPUX86State* %405, i32 1)
  %409 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %410 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 39
  %411 = load i64, i64* %410, align 16
  %412 = add i64 %411, 1056
  %413 = tail call i32 @lduw_phys(i64 %412)
  %414 = add i64 %411, 1064
  %415 = tail call i64 @ldq_phys(i64 %414)
  %416 = trunc i64 %415 to i32
  %417 = add i64 %411, 1060
  %418 = tail call i32 @ldl_phys(i64 %417)
  %419 = add i64 %411, 1058
  %420 = tail call i32 @lduw_phys(i64 %419)
  %421 = shl i32 %420, 8
  %422 = and i32 %421, 65280
  %423 = shl i32 %420, 12
  %424 = and i32 %423, 15728640
  %425 = or i32 %422, %424
  %426 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 24, i64 2, i32 0
  store i32 %413, i32* %426, align 4
  %427 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 24, i64 2, i32 1
  store i32 %416, i32* %427, align 4
  %428 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 24, i64 2, i32 2
  store i32 %418, i32* %428, align 4
  %429 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 24, i64 2, i32 3
  store i32 %425, i32* %429, align 4
  %430 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 21
  %431 = load i32, i32* %430, align 4
  %432 = lshr exact i32 %424, 17
  %433 = and i32 %432, 32
  %434 = trunc i32 %431 to i16
  %435 = icmp slt i16 %434, 0
  br i1 %435, label %461, label %436

436:                                              ; preds = %401
  %437 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 29, i64 0
  %438 = load i32, i32* %437, align 16
  %439 = and i32 %438, 1
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %449, label %441

441:                                              ; preds = %436
  %442 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 20
  %443 = load i32, i32* %442, align 16
  %444 = and i32 %443, 131072
  %445 = icmp ne i32 %444, 0
  %446 = and i32 %431, 16
  %447 = icmp eq i32 %446, 0
  %448 = or i1 %447, %445
  br i1 %448, label %449, label %451

449:                                              ; preds = %441, %436
  %450 = or i32 %433, 64
  br label %461

451:                                              ; preds = %441
  %452 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 24, i64 3, i32 1
  %453 = load i32, i32* %452, align 4
  %454 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 24, i64 0, i32 1
  %455 = load i32, i32* %454, align 4
  %456 = or i32 %453, %416
  %457 = or i32 %456, %455
  %458 = icmp eq i32 %457, 0
  %459 = select i1 %458, i32 0, i32 64
  %460 = or i32 %459, %433
  br label %461

461:                                              ; preds = %401, %449, %451
  %462 = phi i32 [ %433, %401 ], [ %450, %449 ], [ %460, %451 ]
  %463 = and i32 %431, -97
  %464 = or i32 %462, %463
  store i32 %464, i32* %430, align 4
  %465 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %466 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 39
  %467 = load i64, i64* %466, align 16
  %468 = add i64 %467, 1072
  %469 = tail call i32 @lduw_phys(i64 %468)
  %470 = add i64 %467, 1080
  %471 = tail call i64 @ldq_phys(i64 %470)
  %472 = trunc i64 %471 to i32
  %473 = add i64 %467, 1076
  %474 = tail call i32 @ldl_phys(i64 %473)
  %475 = add i64 %467, 1074
  %476 = tail call i32 @lduw_phys(i64 %475)
  %477 = shl i32 %476, 8
  %478 = and i32 %477, 65280
  %479 = shl i32 %476, 12
  %480 = and i32 %479, 15728640
  %481 = or i32 %478, %480
  %482 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 3, i32 0
  store i32 %469, i32* %482, align 4
  %483 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 3, i32 1
  store i32 %472, i32* %483, align 4
  %484 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 3, i32 2
  store i32 %474, i32* %484, align 4
  %485 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 3, i32 3
  store i32 %481, i32* %485, align 4
  %486 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 21
  %487 = load i32, i32* %486, align 4
  %488 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 2, i32 3
  %489 = load i32, i32* %488, align 4
  %490 = lshr i32 %489, 17
  %491 = and i32 %490, 32
  %492 = trunc i32 %487 to i16
  %493 = icmp slt i16 %492, 0
  br i1 %493, label %519, label %494

494:                                              ; preds = %461
  %495 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 29, i64 0
  %496 = load i32, i32* %495, align 16
  %497 = and i32 %496, 1
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %507, label %499

499:                                              ; preds = %494
  %500 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 20
  %501 = load i32, i32* %500, align 16
  %502 = and i32 %501, 131072
  %503 = icmp ne i32 %502, 0
  %504 = and i32 %487, 16
  %505 = icmp eq i32 %504, 0
  %506 = or i1 %505, %503
  br i1 %506, label %507, label %509

507:                                              ; preds = %499, %494
  %508 = or i32 %491, 64
  br label %519

509:                                              ; preds = %499
  %510 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 0, i32 1
  %511 = load i32, i32* %510, align 4
  %512 = or i32 %511, %472
  %513 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 24, i64 2, i32 1
  %514 = load i32, i32* %513, align 4
  %515 = or i32 %512, %514
  %516 = icmp eq i32 %515, 0
  %517 = select i1 %516, i32 0, i32 64
  %518 = or i32 %517, %491
  br label %519

519:                                              ; preds = %461, %507, %509
  %520 = phi i32 [ %491, %461 ], [ %508, %507 ], [ %518, %509 ]
  %521 = and i32 %487, -97
  %522 = or i32 %520, %521
  store i32 %522, i32* %486, align 4
  %523 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %524 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %523, i64 0, i32 39
  %525 = load i64, i64* %524, align 16
  %526 = add i64 %525, 1400
  %527 = tail call i64 @ldq_phys(i64 %526)
  %528 = trunc i64 %527 to i32
  %529 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %530 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %529, i64 0, i32 18
  store i32 %528, i32* %530, align 8
  %531 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %529, i64 0, i32 39
  %532 = load i64, i64* %531, align 16
  %533 = add i64 %532, 1496
  %534 = tail call i64 @ldq_phys(i64 %533)
  %535 = trunc i64 %534 to i32
  %536 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %537 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %536, i64 0, i32 0, i64 4
  store i32 %535, i32* %537, align 16
  %538 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %536, i64 0, i32 39
  %539 = load i64, i64* %538, align 16
  %540 = add i64 %539, 1528
  %541 = tail call i64 @ldq_phys(i64 %540)
  %542 = trunc i64 %541 to i32
  %543 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %544 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %543, i64 0, i32 0, i64 0
  store i32 %542, i32* %544, align 16
  %545 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %546 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %545, i64 0, i32 39
  %547 = load i64, i64* %546, align 16
  %548 = add i64 %547, 1384
  %549 = tail call i64 @ldq_phys(i64 %548)
  %550 = trunc i64 %549 to i32
  %551 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %552 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %551, i64 0, i32 61, i64 6
  store i32 %550, i32* %552, align 4
  %553 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %551, i64 0, i32 39
  %554 = load i64, i64* %553, align 16
  %555 = add i64 %554, 1376
  %556 = tail call i64 @ldq_phys(i64 %555)
  %557 = trunc i64 %556 to i32
  %558 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %559 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %558, i64 0, i32 61, i64 7
  store i32 %557, i32* %559, align 4
  %560 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %561 = load i32, i32* %560, align 4
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %569, label %563, !prof !3, !misexpect !4

563:                                              ; preds = %519
  %564 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %565 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %558, i64 0, i32 21
  %566 = load i32, i32* %565, align 4
  %567 = and i32 %566, 3
  tail call void %564(i32 %567, i32 0)
  %568 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %569

569:                                              ; preds = %519, %563
  %570 = phi %struct.CPUX86State* [ %558, %519 ], [ %568, %563 ]
  %571 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %558, i64 0, i32 21
  %572 = load i32, i32* %571, align 4
  %573 = and i32 %572, -4
  store i32 %573, i32* %571, align 4
  %574 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %570, i64 0, i32 40
  %575 = load i64, i64* %574, align 8
  %576 = add i64 %575, 112
  %577 = zext i32 %0 to i64
  tail call void @stq_phys(i64 %576, i64 %577)
  %578 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %579 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %578, i64 0, i32 40
  %580 = load i64, i64* %579, align 8
  %581 = add i64 %580, 120
  tail call void @stq_phys(i64 %581, i64 %1)
  %582 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %583 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %582, i64 0, i32 40
  %584 = load i64, i64* %583, align 8
  %585 = add i64 %584, 136
  %586 = add i64 %584, 168
  %587 = tail call i32 @ldl_phys(i64 %586)
  tail call void @stl_phys(i64 %585, i32 %587)
  %588 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %589 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %588, i64 0, i32 40
  %590 = load i64, i64* %589, align 8
  %591 = add i64 %590, 140
  %592 = add i64 %590, 172
  %593 = tail call i32 @ldl_phys(i64 %592)
  tail call void @stl_phys(i64 %591, i32 %593)
  %594 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %595 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %594, i64 0, i32 40
  %596 = load i64, i64* %595, align 8
  %597 = add i64 %596, 168
  tail call void @stl_phys(i64 %597, i32 0)
  %598 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %599 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %598, i64 0, i32 22
  %600 = load i32, i32* %599, align 8
  %601 = and i32 %600, -2
  store i32 %601, i32* %599, align 8
  %602 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %598, i64 0, i32 29, i64 0
  %603 = load i32, i32* %602, align 16
  %604 = or i32 %603, 1
  store i32 %604, i32* %602, align 16
  %605 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %598, i64 0, i32 20
  %606 = load i32, i32* %605, align 16
  %607 = and i32 %606, -131073
  store i32 %607, i32* %605, align 16
  %608 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %598, i64 0, i32 95
  store i32 -1, i32* %608, align 16
  %609 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %598, i64 0, i32 58
  store i32 0, i32* %609, align 16
  %610 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %598, i64 0, i32 64
  store i32 -1, i32* %610, align 4
  %611 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %612 = load i32, i32* %611, align 4
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %617, label %614, !prof !3, !misexpect !4

614:                                              ; preds = %569
  %615 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %615(i32 %21, i32 0)
  %616 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %617

617:                                              ; preds = %569, %614
  %618 = phi %struct.CPUX86State* [ %598, %569 ], [ %616, %614 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* %618) #21
  unreachable
}

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @cpu_loop_exit_restore(%struct.CPUX86State*, i64) local_unnamed_addr #8

declare i64 @ldq_phys(i64) local_unnamed_addr #9

declare void @stl_phys(i64, i32) local_unnamed_addr #9

declare void @stw_phys(i64, i32) local_unnamed_addr #9

declare void @stq_phys(i64, i64) local_unnamed_addr #9

declare i32 @ldl_phys(i64) local_unnamed_addr #9

declare void @stb_phys(i64, i32) local_unnamed_addr #9

declare void @cpu_x86_update_cr0(%struct.CPUX86State*, i32) local_unnamed_addr #9

declare void @cpu_x86_update_cr4(%struct.CPUX86State*, i32) local_unnamed_addr #9

declare void @cpu_x86_update_cr3(%struct.CPUX86State*, i32) local_unnamed_addr #9

declare i32 @lduw_phys(i64) local_unnamed_addr #9

; Function Attrs: inlinehint uwtable
define internal fastcc void @svm_load_seg_cache(i64 %0, %struct.CPUX86State* nocapture %1, i32 %2) unnamed_addr #10 {
  %4 = tail call i32 @lduw_phys(i64 %0)
  %5 = add i64 %0, 8
  %6 = tail call i64 @ldq_phys(i64 %5)
  %7 = trunc i64 %6 to i32
  %8 = add i64 %0, 4
  %9 = tail call i32 @ldl_phys(i64 %8)
  %10 = add i64 %0, 2
  %11 = tail call i32 @lduw_phys(i64 %10)
  %12 = shl i32 %11, 8
  %13 = and i32 %12, 65280
  %14 = shl i32 %11, 12
  %15 = and i32 %14, 15728640
  %16 = or i32 %13, %15
  %17 = sext i32 %2 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %17, i32 0
  store i32 %4, i32* %18, align 4
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %17, i32 1
  store i32 %7, i32* %19, align 4
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %17, i32 2
  store i32 %9, i32* %20, align 4
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %17, i32 3
  store i32 %16, i32* %21, align 4
  %22 = icmp eq i32 %2, 1
  br i1 %22, label %26, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %25 = load i32, i32* %24, align 4
  br label %35

26:                                               ; preds = %3
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 1, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = lshr i32 %28, 18
  %30 = and i32 %29, 16
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, -32785
  %34 = or i32 %33, %30
  store i32 %34, i32* %31, align 4
  br label %35

35:                                               ; preds = %26, %23
  %36 = phi i32 [ %25, %23 ], [ %34, %26 ]
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 2, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = lshr i32 %38, 17
  %40 = and i32 %39, 32
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %42 = trunc i32 %36 to i16
  %43 = icmp slt i16 %42, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %35
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 0
  %46 = load i32, i32* %45, align 16
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %57, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %51 = load i32, i32* %50, align 16
  %52 = and i32 %51, 131072
  %53 = icmp ne i32 %52, 0
  %54 = and i32 %36, 16
  %55 = icmp eq i32 %54, 0
  %56 = or i1 %55, %53
  br i1 %56, label %57, label %59

57:                                               ; preds = %49, %44
  %58 = or i32 %40, 64
  br label %71

59:                                               ; preds = %49
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 3, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = or i32 %63, %61
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 2, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = or i32 %64, %66
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %68, i32 0, i32 64
  %70 = or i32 %69, %40
  br label %71

71:                                               ; preds = %35, %57, %59
  %72 = phi i32 [ %40, %35 ], [ %58, %57 ], [ %70, %59 ]
  %73 = and i32 %36, -97
  %74 = or i32 %72, %73
  store i32 %74, i32* %41, align 4
  ret void
}

; Function Attrs: noreturn
declare void @cpu_loop_exit(%struct.CPUX86State*) local_unnamed_addr #8

declare i32 @ldub_phys(i64) local_unnamed_addr #9

declare void @tcg_llvm_before_memory_access(i32, i64, i32, i32) local_unnamed_addr #9

declare i32 @tcg_llvm_fork_and_concretize(i32, i32, i32, i32) local_unnamed_addr #9

; Function Attrs: uwtable
define zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %10

10:                                               ; preds = %4, %9
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i32 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i32 %17, 12
  %19 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %18, i32 0, i32 1048575, i32 0)
  %20 = and i32 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %21
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %24 = zext i32 %20 to i64
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %24
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %17, -4096
  %29 = and i32 %27, -2048
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %33, label %31, !prof !3, !misexpect !5

31:                                               ; preds = %16
  %32 = shl i32 %19, 12
  br label %69

33:                                               ; preds = %69, %16
  %34 = phi %struct.CPUTLBEntry* [ %23, %16 ], [ %70, %69 ]
  %35 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %71, %69 ]
  %36 = phi i32 [ %27, %16 ], [ %73, %69 ]
  %37 = and i32 %36, 4063
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %52, label %39, !prof !3, !misexpect !4

39:                                               ; preds = %33
  %40 = and i32 %17, 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %55

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %21, i64 %24
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %45, align 8
  %46 = tail call zeroext i16 @io_read_chkw_mmu(%struct.CPUX86State* nonnull %0, i64 %44, i32 %17, i8* %3)
  %47 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %76, label %50

50:                                               ; preds = %42
  %51 = zext i16 %46 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %51, i32 2, i32 1, i64 0)
  br label %76

52:                                               ; preds = %33
  %53 = and i32 %17, 4095
  %54 = icmp eq i32 %53, 4095
  br i1 %54, label %55, label %57, !prof !6, !misexpect !4

55:                                               ; preds = %39, %52
  %56 = tail call fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* nonnull %0, i32 %17, i32 %5, i8* %3)
  br label %76

57:                                               ; preds = %52
  %58 = zext i32 %17 to i64
  %59 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %24, i32 4
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, %58
  %62 = inttoptr i64 %61 to i16*
  %63 = load i16, i16* %62, align 2
  %64 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %76, label %67

67:                                               ; preds = %57
  %68 = zext i16 %63 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %68, i32 2, i32 0, i64 0)
  br label %76

69:                                               ; preds = %31, %69
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %17, i32 %32, i32 0, i32 %5, i8* %3)
  %70 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %71 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %70, i64 %24
  %72 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %71, i64 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = and i32 %73, -2048
  %75 = icmp eq i32 %28, %74
  br i1 %75, label %33, label %69, !prof !3, !misexpect !5

76:                                               ; preds = %42, %57, %50, %67, %55
  %77 = phi i16 [ %56, %55 ], [ %46, %50 ], [ %46, %42 ], [ %63, %67 ], [ %63, %57 ]
  ret i16 %77
}

declare void @tcg_llvm_after_memory_access(i32, i64, i32, i32, i64) local_unnamed_addr #9

; Function Attrs: uwtable
define zeroext i16 @io_read_chkw_mmu(%struct.CPUX86State* %0, i64 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = alloca i16, align 2
  %6 = bitcast i16* %5 to i8*
  %7 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %8 = zext i32 %2 to i64
  %9 = ptrtoint i8* %3 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %9, i64* %10, align 16
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %8, i32 0)
  %11 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %7, i32 0)
  br i1 %11, label %12, label %20

12:                                               ; preds = %4
  %13 = trunc i64 %1 to i32
  %14 = and i32 %13, -4096
  %15 = add i32 %14, %2
  %16 = zext i32 %15 to i64
  %17 = tail call i64 @se_notdirty_mem_read(i64 %16)
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  store volatile i16 %19, i16* %5, align 2
  br label %22

20:                                               ; preds = %4
  %21 = tail call zeroext i16 @io_readw_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i32 %2, i8* %3)
  store volatile i16 %21, i16* %5, align 2
  br label %22

22:                                               ; preds = %12, %20
  %23 = load volatile i16, i16* %5, align 2
  %24 = zext i16 %23 to i64
  %25 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %8, i64 %24, i32 2, i32 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  %26 = load volatile i16, i16* %5, align 2
  ret i16 %26
}

; Function Attrs: uwtable
define internal fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) unnamed_addr #3 {
  %5 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %9

9:                                                ; preds = %4, %8
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %20
  %22 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %23 = zext i32 %19 to i64
  %24 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %22, i64 %23
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %16, -4096
  %28 = and i32 %26, -2048
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %15
  %31 = shl i32 %18, 12
  br label %80

32:                                               ; preds = %80, %15
  %33 = phi %struct.CPUTLBEntry* [ %22, %15 ], [ %81, %80 ]
  %34 = phi %struct.CPUTLBEntry* [ %24, %15 ], [ %82, %80 ]
  %35 = phi i32 [ %26, %15 ], [ %84, %80 ]
  %36 = and i32 %35, 4063
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %32
  %39 = and i32 %16, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %20, i64 %23
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %44, align 8
  %45 = tail call zeroext i16 @io_read_chkw_mmu(%struct.CPUX86State* nonnull %0, i64 %43, i32 %16, i8* %3)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %87, label %49

49:                                               ; preds = %41
  %50 = zext i16 %45 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %50, i32 2, i32 1, i64 0)
  br label %87

51:                                               ; preds = %32
  %52 = and i32 %16, 4095
  %53 = icmp eq i32 %52, 4095
  br i1 %53, label %54, label %68

54:                                               ; preds = %38, %51
  %55 = and i32 %16, -2
  %56 = add i32 %55, 2
  %57 = tail call fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* nonnull %0, i32 %55, i32 %2, i8* %3)
  %58 = tail call fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* nonnull %0, i32 %56, i32 %2, i8* %3)
  %59 = shl i32 %16, 3
  %60 = and i32 %59, 8
  %61 = zext i16 %57 to i32
  %62 = lshr i32 %61, %60
  %63 = zext i16 %58 to i32
  %64 = sub nuw nsw i32 16, %60
  %65 = shl nuw i32 %63, %64
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i16
  ret i16 %67

68:                                               ; preds = %51
  %69 = zext i32 %16 to i64
  %70 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %23, i32 4
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, %69
  %73 = inttoptr i64 %72 to i16*
  %74 = load i16, i16* %73, align 2
  %75 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %87, label %78

78:                                               ; preds = %68
  %79 = zext i16 %74 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %79, i32 2, i32 0, i64 0)
  br label %87

80:                                               ; preds = %30, %80
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %16, i32 %31, i32 0, i32 %2, i8* %3)
  %81 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %82 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %81, i64 %23
  %83 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %82, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = and i32 %84, -2048
  %86 = icmp eq i32 %27, %85
  br i1 %86, label %32, label %80

87:                                               ; preds = %41, %68, %49, %78
  %88 = phi i16 [ %45, %49 ], [ %45, %41 ], [ %74, %78 ], [ %74, %68 ]
  ret i16 %88
}

; Function Attrs: uwtable
define void @tlb_fill(%struct.CPUX86State* nocapture readnone %0, i32 %1, i32 %2, i32 %3, i32 %4, i8* %5) local_unnamed_addr #3 {
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 14), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10, !prof !3, !misexpect !4

10:                                               ; preds = %6
  %11 = load void (i64, i32, i8*)*, void (i64, i32, i8*)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 22), align 8
  %12 = zext i32 %1 to i64
  tail call void %11(i64 %12, i32 %3, i8* %5)
  br label %13

13:                                               ; preds = %6, %10
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = tail call i32 @cpu_x86_handle_mmu_fault(%struct.CPUX86State* %14, i32 %2, i32 %3, i32 %4)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %48, label %17

17:                                               ; preds = %13
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 95
  %20 = load i32, i32* %19, align 16
  %21 = icmp eq i32 %20, 14
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 47
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 16384
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 40
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, 128
  %31 = zext i32 %1 to i64
  tail call void @stq_phys(i64 %30, i64 %31)
  br label %34

32:                                               ; preds = %22
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 29, i64 2
  store i32 %1, i32* %33, align 8
  br label %34

34:                                               ; preds = %27, %32, %17
  %35 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 13), align 8
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %41, label %38, !prof !3, !misexpect !4

38:                                               ; preds = %34
  %39 = load void (i64, i32, i8*)*, void (i64, i32, i8*)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 21), align 8
  %40 = zext i32 %1 to i64
  tail call void %39(i64 %40, i32 %3, i8* %5)
  br label %41

41:                                               ; preds = %34, %38
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 95
  %44 = load i32, i32* %43, align 16
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 58
  %46 = load i32, i32* %45, align 16
  %47 = ptrtoint i8* %5 to i64
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %42, i32 %44, i32 %46, i64 %47) #21
  unreachable

48:                                               ; preds = %13
  ret void
}

declare i32 @cpu_x86_handle_mmu_fault(%struct.CPUX86State*, i32, i32, i32) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #11

declare %struct.MemoryDescOps* @phys_get_ops(i64) local_unnamed_addr #9

declare void @tcg_llvm_write_mem_io_vaddr(i64, i32) local_unnamed_addr #9

declare zeroext i1 @se_ismemfunc(%struct.MemoryDescOps*, i32) local_unnamed_addr #9

declare i64 @se_notdirty_mem_read(i64) local_unnamed_addr #9

declare zeroext i16 @io_readw_mmu(%struct.CPUX86State*, i64, i32, i8*) local_unnamed_addr #9

declare i64 @tcg_llvm_trace_mmio_access(i64, i64, i32, i32) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: uwtable
define void @helper_check_iow(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 36608
  %6 = icmp eq i32 %5, 35072
  br i1 %6, label %7, label %29

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 103
  br i1 %10, label %29, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, 102
  %15 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %2, i32 %14)
  %16 = ashr i32 %0, 3
  %17 = add nsw i32 %15, %16
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %8, align 8
  %20 = icmp ugt i32 %18, %19
  br i1 %20, label %29, label %21

21:                                               ; preds = %11
  %22 = load i32, i32* %12, align 4
  %23 = add i32 %22, %17
  %24 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %2, i32 %23)
  %25 = and i32 %0, 7
  %26 = ashr i32 %24, %25
  %27 = and i32 %26, 3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %21, %11, %7, %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %2, i32 13, i32 0, i64 0)
  unreachable

30:                                               ; preds = %21
  ret void
}

; Function Attrs: uwtable
define void @helper_check_iol(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 36608
  %6 = icmp eq i32 %5, 35072
  br i1 %6, label %7, label %29

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 103
  br i1 %10, label %29, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, 102
  %15 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %2, i32 %14)
  %16 = ashr i32 %0, 3
  %17 = add nsw i32 %15, %16
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %8, align 8
  %20 = icmp ugt i32 %18, %19
  br i1 %20, label %29, label %21

21:                                               ; preds = %11
  %22 = load i32, i32* %12, align 4
  %23 = add i32 %22, %17
  %24 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %2, i32 %23)
  %25 = and i32 %0, 7
  %26 = ashr i32 %24, %25
  %27 = and i32 %26, 15
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %21, %11, %7, %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %2, i32 13, i32 0, i64 0)
  unreachable

30:                                               ; preds = %21
  ret void
}

; Function Attrs: uwtable
define void @helper_outb(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = tail call i64 @tcg_llvm_get_value(i64 %7, i1 zeroext false)
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i32 [ %9, %6 ], [ %0, %2 ]
  %12 = zext i32 %11 to i64
  %13 = zext i32 %1 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 %12, i64 %13, i32 8, i32 1)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %10
  %17 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 5), align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = and i32 %1, 255
  %22 = zext i32 %21 to i64
  %23 = tail call i64 @tcg_llvm_get_value(i64 %22, i1 zeroext false)
  %24 = trunc i64 %23 to i32
  br label %25

25:                                               ; preds = %16, %20
  %26 = phi i32 [ %24, %20 ], [ %11, %16 ]
  %27 = phi i32 [ %21, %20 ], [ %1, %16 ]
  %28 = trunc i32 %27 to i8
  tail call void @cpu_outb(i32 %26, i8 zeroext %28)
  br label %29

29:                                               ; preds = %10, %25
  ret void
}

declare i64 @tcg_llvm_get_value(i64, i1 zeroext) local_unnamed_addr #9

declare i64 @tcg_llvm_trace_port_access(i64, i64, i32, i32) local_unnamed_addr #9

declare void @cpu_outb(i32, i8 zeroext) local_unnamed_addr #9

; Function Attrs: uwtable
define i32 @helper_inb(i32 %0) local_unnamed_addr #3 {
  %2 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  %7 = tail call i64 @tcg_llvm_get_value(i64 %6, i1 zeroext false)
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i32 [ %8, %5 ], [ %0, %1 ]
  %11 = tail call zeroext i8 @cpu_inb(i32 %10)
  %12 = zext i32 %10 to i64
  %13 = zext i8 %11 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 %12, i64 %13, i32 8, i32 0)
  %15 = trunc i64 %14 to i32
  ret i32 %15
}

declare zeroext i8 @cpu_inb(i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_outw(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = tail call i64 @tcg_llvm_get_value(i64 %7, i1 zeroext false)
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i32 [ %9, %6 ], [ %0, %2 ]
  %12 = zext i32 %11 to i64
  %13 = zext i32 %1 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 %12, i64 %13, i32 16, i32 1)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %10
  %17 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 5), align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = and i32 %1, 65535
  %22 = zext i32 %21 to i64
  %23 = tail call i64 @tcg_llvm_get_value(i64 %22, i1 zeroext false)
  %24 = trunc i64 %23 to i32
  br label %25

25:                                               ; preds = %16, %20
  %26 = phi i32 [ %24, %20 ], [ %1, %16 ]
  %27 = trunc i32 %26 to i16
  tail call void @cpu_outw(i32 %11, i16 zeroext %27)
  br label %28

28:                                               ; preds = %10, %25
  ret void
}

declare void @cpu_outw(i32, i16 zeroext) local_unnamed_addr #9

; Function Attrs: uwtable
define i32 @helper_inw(i32 %0) local_unnamed_addr #3 {
  %2 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  %7 = tail call i64 @tcg_llvm_get_value(i64 %6, i1 zeroext false)
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i32 [ %8, %5 ], [ %0, %1 ]
  %11 = tail call zeroext i16 @cpu_inw(i32 %10)
  %12 = zext i32 %10 to i64
  %13 = zext i16 %11 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 %12, i64 %13, i32 16, i32 0)
  %15 = trunc i64 %14 to i32
  ret i32 %15
}

declare zeroext i16 @cpu_inw(i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_outl(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = tail call i64 @tcg_llvm_get_value(i64 %7, i1 zeroext false)
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i32 [ %9, %6 ], [ %0, %2 ]
  %12 = zext i32 %11 to i64
  %13 = zext i32 %1 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 %12, i64 %13, i32 32, i32 1)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %10
  %17 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 5), align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = tail call i64 @tcg_llvm_get_value(i64 %13, i1 zeroext false)
  %22 = trunc i64 %21 to i32
  br label %23

23:                                               ; preds = %16, %20
  %24 = phi i32 [ %22, %20 ], [ %11, %16 ]
  tail call void @cpu_outl(i32 %24, i32 %1)
  br label %25

25:                                               ; preds = %10, %23
  ret void
}

declare void @cpu_outl(i32, i32) local_unnamed_addr #9

; Function Attrs: uwtable
define i32 @helper_inl(i32 %0) local_unnamed_addr #3 {
  %2 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  %7 = tail call i64 @tcg_llvm_get_value(i64 %6, i1 zeroext false)
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i32 [ %8, %5 ], [ %0, %1 ]
  %11 = tail call i32 @cpu_inl(i32 %10)
  %12 = zext i32 %10 to i64
  %13 = zext i32 %11 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 %12, i64 %13, i32 32, i32 0)
  %15 = trunc i64 %14 to i32
  ret i32 %15
}

declare i32 @cpu_inl(i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @se_do_interrupt_all(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #3 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = load i32, i32* @loglevel, align 4
  %9 = and i32 %8, 16
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %62, label %11

11:                                               ; preds = %5
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 29, i64 0
  %14 = load i32, i32* %13, align 16
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %62, label %17

17:                                               ; preds = %11
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %19 = icmp eq %struct._IO_FILE* %18, null
  br i1 %19, label %38, label %20

20:                                               ; preds = %17
  %21 = load i32, i32* @se_do_interrupt_all.count, align 4
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 21
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 3
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 24, i64 1, i32 0
  %26 = load i32, i32* %25, align 16
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 18
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 24, i64 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, %28
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 24, i64 2, i32 0
  %33 = load i32, i32* %32, align 16
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 0, i64 4
  %35 = load i32, i32* %34, align 16
  %36 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %18, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i32 %21, i32 %0, i32 %2, i32 %1, i32 %24, i32 %26, i32 %28, i32 %31, i32 %33, i32 %35)
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  br label %38

38:                                               ; preds = %17, %20
  %39 = phi %struct._IO_FILE* [ null, %17 ], [ %37, %20 ]
  %40 = icmp eq i32 %0, 14
  %41 = icmp ne %struct._IO_FILE* %39, null
  br i1 %40, label %42, label %48

42:                                               ; preds = %38
  br i1 %41, label %43, label %54

43:                                               ; preds = %42
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 29, i64 2
  %46 = load i32, i32* %45, align 8
  %47 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %39, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 %46)
  br label %54

48:                                               ; preds = %38
  br i1 %41, label %49, label %54

49:                                               ; preds = %48
  %50 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %50, i64 0, i32 0, i64 0
  %52 = load i32, i32* %51, align 16
  %53 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %39, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 %52)
  br label %54

54:                                               ; preds = %42, %43, %48, %49
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %56 = icmp eq %struct._IO_FILE* %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %54
  %58 = tail call i32 @fputc(i32 10, %struct._IO_FILE* nonnull %55)
  br label %59

59:                                               ; preds = %54, %57
  %60 = load i32, i32* @se_do_interrupt_all.count, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* @se_do_interrupt_all.count, align 4
  br label %62

62:                                               ; preds = %11, %5, %59
  %63 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 29, i64 0
  %65 = load i32, i32* %64, align 16
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 21
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, 2097152
  %71 = icmp ne i32 %70, 0
  br i1 %67, label %653, label %72

72:                                               ; preds = %62
  br i1 %71, label %73, label %96

73:                                               ; preds = %72
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 40
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 168
  %77 = tail call i32 @ldl_phys(i64 %76)
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %96, label %79

79:                                               ; preds = %73
  %80 = icmp eq i32 %1, 0
  %81 = select i1 %80, i32 768, i32 1024
  %82 = or i32 %81, %0
  %83 = or i32 %82, -2147483648
  switch i32 %0, label %90 [
    i32 8, label %84
    i32 10, label %84
    i32 11, label %84
    i32 12, label %84
    i32 13, label %84
    i32 14, label %84
    i32 17, label %84
  ]

84:                                               ; preds = %79, %79, %79, %79, %79, %79, %79
  %85 = or i32 %82, -2147481600
  %86 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %86, i64 0, i32 40
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, 172
  tail call void @stl_phys(i64 %89, i32 %2)
  br label %90

90:                                               ; preds = %84, %79
  %91 = phi i32 [ %85, %84 ], [ %83, %79 ]
  %92 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 40
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, 168
  tail call void @stl_phys(i64 %95, i32 %91)
  br label %96

96:                                               ; preds = %90, %73, %72
  %97 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %98 = bitcast i32* %6 to i8*
  store i32 0, i32* %6, align 4
  %99 = bitcast i32* %7 to i8*
  %100 = icmp ne i32 %1, 0
  %101 = or i32 %4, %1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %110

103:                                              ; preds = %96
  %104 = add i32 %0, -8
  %105 = icmp ult i32 %104, 10
  br i1 %105, label %106, label %110

106:                                              ; preds = %103
  %107 = sext i32 %104 to i64
  %108 = getelementptr inbounds [10 x i32], [10 x i32]* @switch.table.se_do_interrupt_all, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  br label %110

110:                                              ; preds = %103, %106, %96
  %111 = phi i32 [ 0, %96 ], [ %109, %106 ], [ 0, %103 ]
  br i1 %100, label %115, label %112

112:                                              ; preds = %110
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 18
  %114 = load i32, i32* %113, align 8
  br label %115

115:                                              ; preds = %112, %110
  %116 = phi i32 [ %114, %112 ], [ %3, %110 ]
  %117 = shl nsw i32 %0, 3
  %118 = or i32 %117, 7
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 28, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = icmp ugt i32 %118, %120
  br i1 %121, label %122, label %124

122:                                              ; preds = %115
  %123 = or i32 %117, 2
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %123)
  unreachable

124:                                              ; preds = %115
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 28, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, %117
  %128 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %97, i32 %127)
  %129 = add i32 %127, 4
  %130 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %97, i32 %129)
  %131 = lshr i32 %130, 8
  %132 = and i32 %131, 31
  switch i32 %132, label %166 [
    i32 5, label %133
    i32 6, label %168
    i32 7, label %168
    i32 14, label %168
    i32 15, label %168
  ]

133:                                              ; preds = %124
  %134 = trunc i32 %130 to i16
  %135 = icmp slt i16 %134, 0
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = or i32 %117, 2
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 11, i32 %137)
  unreachable

138:                                              ; preds = %133
  tail call fastcc void @switch_tss(%struct.CPUX86State* nonnull %97, i32 %117, i32 %128, i32 %130, i32 2, i32 %116)
  %139 = icmp eq i32 %111, 0
  br i1 %139, label %652, label %140

140:                                              ; preds = %138
  %141 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 26, i32 3
  %142 = load i32, i32* %141, align 4
  %143 = lshr i32 %142, 11
  %144 = and i32 %143, 1
  %145 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 3
  %146 = load i32, i32* %145, align 4
  %147 = and i32 %146, 4194304
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i32 65535, i32 -1
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 0, i64 4
  %151 = load i32, i32* %150, align 16
  %152 = shl nuw nsw i32 2, %144
  %153 = sub i32 %151, %152
  %154 = and i32 %153, %149
  store i32 %154, i32* %7, align 4
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 1
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %154, %156
  %158 = icmp eq i32 %144, 0
  br i1 %158, label %160, label %159

159:                                              ; preds = %140
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %157, i32 %2)
  br label %161

160:                                              ; preds = %140
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %157, i32 %2)
  br label %161

161:                                              ; preds = %160, %159
  %162 = load i32, i32* %150, align 16
  %163 = xor i32 %149, -1
  %164 = and i32 %162, %163
  %165 = or i32 %164, %154
  store i32 %165, i32* %150, align 16
  br label %652

166:                                              ; preds = %124
  %167 = or i32 %117, 2
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %167)
  unreachable

168:                                              ; preds = %124, %124, %124, %124
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 21
  %170 = load i32, i32* %169, align 4
  %171 = and i32 %170, 3
  br i1 %100, label %172, label %178

172:                                              ; preds = %168
  %173 = lshr i32 %130, 13
  %174 = and i32 %173, 3
  %175 = icmp ult i32 %174, %171
  br i1 %175, label %176, label %178

176:                                              ; preds = %172
  %177 = or i32 %117, 2
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %177)
  unreachable

178:                                              ; preds = %172, %168
  %179 = trunc i32 %130 to i16
  %180 = icmp slt i16 %179, 0
  br i1 %180, label %183, label %181

181:                                              ; preds = %178
  %182 = or i32 %117, 2
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 11, i32 %182)
  unreachable

183:                                              ; preds = %178
  %184 = lshr i32 %128, 16
  %185 = and i32 %130, -65536
  %186 = and i32 %128, 65535
  %187 = or i32 %185, %186
  %188 = and i32 %184, 65532
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %183
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 0)
  unreachable

191:                                              ; preds = %183
  %192 = and i32 %128, 262144
  %193 = icmp eq i32 %192, 0
  %194 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %194, i64 0, i32 25
  %196 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %194, i64 0, i32 27
  %197 = select i1 %193, %struct.SegmentCache* %196, %struct.SegmentCache* %195
  %198 = or i32 %184, 7
  %199 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %197, i64 0, i32 2
  %200 = load i32, i32* %199, align 4
  %201 = icmp ugt i32 %198, %200
  br i1 %201, label %202, label %203

202:                                              ; preds = %191
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %188)
  unreachable

203:                                              ; preds = %191
  %204 = and i32 %184, 65528
  %205 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %197, i64 0, i32 1
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %206, %204
  %208 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %194, i32 %207)
  %209 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %210 = add i32 %207, 4
  %211 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %209, i32 %210)
  %212 = and i32 %211, 6144
  %213 = icmp eq i32 %212, 6144
  br i1 %213, label %215, label %214

214:                                              ; preds = %203
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %188)
  unreachable

215:                                              ; preds = %203
  %216 = lshr i32 %211, 13
  %217 = and i32 %216, 3
  %218 = icmp ugt i32 %217, %171
  br i1 %218, label %219, label %220

219:                                              ; preds = %215
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %188)
  unreachable

220:                                              ; preds = %215
  %221 = trunc i32 %211 to i16
  %222 = icmp slt i16 %221, 0
  br i1 %222, label %224, label %223

223:                                              ; preds = %220
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 11, i32 %188)
  unreachable

224:                                              ; preds = %220
  %225 = and i32 %211, 1024
  %226 = icmp eq i32 %225, 0
  %227 = icmp ult i32 %217, %171
  %228 = and i1 %226, %227
  br i1 %228, label %229, label %283

229:                                              ; preds = %224
  call fastcc void @get_ss_esp_from_tss(%struct.CPUX86State* nonnull %97, i32* nonnull %6, i32* nonnull %7, i32 %217)
  %230 = load i32, i32* %6, align 4
  %231 = and i32 %230, 65532
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %234

233:                                              ; preds = %229
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 10, i32 0)
  unreachable

234:                                              ; preds = %229
  %235 = and i32 %230, 3
  %236 = icmp eq i32 %235, %217
  br i1 %236, label %238, label %237

237:                                              ; preds = %234
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 10, i32 %231)
  unreachable

238:                                              ; preds = %234
  %239 = and i32 %230, 4
  %240 = icmp eq i32 %239, 0
  %241 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %242 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %241, i64 0, i32 25
  %243 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %241, i64 0, i32 27
  %244 = select i1 %240, %struct.SegmentCache* %243, %struct.SegmentCache* %242
  %245 = or i32 %230, 7
  %246 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %244, i64 0, i32 2
  %247 = load i32, i32* %246, align 4
  %248 = icmp ugt i32 %245, %247
  br i1 %248, label %249, label %250

249:                                              ; preds = %238
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 10, i32 %231)
  unreachable

250:                                              ; preds = %238
  %251 = and i32 %230, -8
  %252 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %244, i64 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = add i32 %253, %251
  %255 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %241, i32 %254)
  %256 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %257 = add i32 %254, 4
  %258 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %256, i32 %257)
  %259 = lshr i32 %258, 13
  %260 = and i32 %259, 3
  %261 = icmp eq i32 %260, %217
  br i1 %261, label %263, label %262

262:                                              ; preds = %250
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 10, i32 %231)
  unreachable

263:                                              ; preds = %250
  %264 = and i32 %258, 6656
  %265 = icmp eq i32 %264, 4608
  br i1 %265, label %267, label %266

266:                                              ; preds = %263
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 10, i32 %231)
  unreachable

267:                                              ; preds = %263
  %268 = trunc i32 %258 to i16
  %269 = icmp slt i16 %268, 0
  br i1 %269, label %271, label %270

270:                                              ; preds = %267
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 10, i32 %231)
  unreachable

271:                                              ; preds = %267
  %272 = and i32 %258, 4194304
  %273 = icmp eq i32 %272, 0
  %274 = select i1 %273, i32 65535, i32 -1
  %275 = lshr i32 %255, 16
  %276 = shl i32 %258, 16
  %277 = and i32 %276, 16711680
  %278 = and i32 %258, -16777216
  %279 = or i32 %278, %275
  %280 = or i32 %279, %277
  %281 = and i32 %255, 65535
  %282 = and i32 %230, -4
  br label %304

283:                                              ; preds = %224
  %284 = icmp ne i32 %225, 0
  %285 = icmp eq i32 %217, %171
  %286 = or i1 %284, %285
  br i1 %286, label %287, label %303

287:                                              ; preds = %283
  %288 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 20
  %289 = load i32, i32* %288, align 16
  %290 = and i32 %289, 131072
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %293, label %292

292:                                              ; preds = %287
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %188)
  unreachable

293:                                              ; preds = %287
  %294 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 3
  %295 = load i32, i32* %294, align 4
  %296 = and i32 %295, 4194304
  %297 = icmp eq i32 %296, 0
  %298 = select i1 %297, i32 65535, i32 -1
  %299 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 1
  %300 = load i32, i32* %299, align 4
  %301 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 0, i64 4
  %302 = load i32, i32* %301, align 16
  store i32 %302, i32* %7, align 4
  br label %304

303:                                              ; preds = %283
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %97, i32 13, i32 %188)
  unreachable

304:                                              ; preds = %293, %271
  %305 = phi i32 [ %282, %271 ], [ 0, %293 ]
  %306 = phi i32 [ %281, %271 ], [ 0, %293 ]
  %307 = phi i32 [ %258, %271 ], [ 0, %293 ]
  %308 = phi i1 [ true, %271 ], [ false, %293 ]
  %309 = phi i32 [ %217, %271 ], [ %171, %293 ]
  %310 = phi i32 [ %274, %271 ], [ %298, %293 ]
  %311 = phi i32 [ %280, %271 ], [ %300, %293 ]
  %312 = and i32 %130, 6144
  %313 = icmp eq i32 %312, 2048
  br i1 %313, label %314, label %386

314:                                              ; preds = %304
  br i1 %308, label %317, label %315

315:                                              ; preds = %314
  %316 = load i32, i32* %7, align 4
  br label %356

317:                                              ; preds = %314
  %318 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 20
  %319 = load i32, i32* %318, align 16
  %320 = and i32 %319, 131072
  %321 = icmp eq i32 %320, 0
  %322 = load i32, i32* %7, align 4
  br i1 %321, label %344, label %323

323:                                              ; preds = %317
  %324 = add i32 %322, -4
  %325 = and i32 %324, %310
  %326 = add i32 %325, %311
  %327 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 5, i32 0
  %328 = load i32, i32* %327, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %326, i32 %328)
  %329 = add i32 %322, -8
  %330 = and i32 %329, %310
  %331 = add i32 %330, %311
  %332 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 4, i32 0
  %333 = load i32, i32* %332, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %331, i32 %333)
  %334 = add i32 %322, -12
  %335 = and i32 %334, %310
  %336 = add i32 %335, %311
  %337 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 3, i32 0
  %338 = load i32, i32* %337, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %336, i32 %338)
  %339 = add i32 %322, -16
  store i32 %339, i32* %7, align 4
  %340 = and i32 %339, %310
  %341 = add i32 %340, %311
  %342 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 0, i32 0
  %343 = load i32, i32* %342, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %341, i32 %343)
  br label %344

344:                                              ; preds = %323, %317
  %345 = phi i32 [ %339, %323 ], [ %322, %317 ]
  %346 = add i32 %345, -4
  %347 = and i32 %346, %310
  %348 = add i32 %347, %311
  %349 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 0
  %350 = load i32, i32* %349, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %348, i32 %350)
  %351 = add i32 %345, -8
  store i32 %351, i32* %7, align 4
  %352 = and i32 %351, %310
  %353 = add i32 %352, %311
  %354 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 0, i64 4
  %355 = load i32, i32* %354, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %353, i32 %355)
  br label %356

356:                                              ; preds = %344, %315
  %357 = phi i32 [ %316, %315 ], [ %351, %344 ]
  %358 = add i32 %357, -4
  %359 = and i32 %358, %310
  %360 = add i32 %359, %311
  %361 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %362 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %361, i64 0, i32 20
  %363 = load i32, i32* %362, align 16
  %364 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %361, i64 0, i32 1
  %365 = load i32, i32* %364, align 16
  %366 = tail call i32 @helper_cc_compute_all(i32 %365) #23
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %361, i64 0, i32 19
  %368 = load i32, i32* %367, align 4
  %369 = and i32 %368, 1024
  %370 = or i32 %363, %366
  %371 = or i32 %370, %369
  %372 = or i32 %371, 2
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %360, i32 %372)
  %373 = add i32 %357, -8
  %374 = and i32 %373, %310
  %375 = add i32 %374, %311
  %376 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 1, i32 0
  %377 = load i32, i32* %376, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %375, i32 %377)
  %378 = add i32 %357, -12
  store i32 %378, i32* %7, align 4
  %379 = and i32 %378, %310
  %380 = add i32 %379, %311
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %380, i32 %116)
  %381 = icmp eq i32 %111, 0
  br i1 %381, label %458, label %382

382:                                              ; preds = %356
  %383 = add i32 %357, -16
  store i32 %383, i32* %7, align 4
  %384 = and i32 %383, %310
  %385 = add i32 %384, %311
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %97, i32 %385, i32 %2)
  br label %458

386:                                              ; preds = %304
  br i1 %308, label %389, label %387

387:                                              ; preds = %386
  %388 = load i32, i32* %7, align 4
  br label %428

389:                                              ; preds = %386
  %390 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 20
  %391 = load i32, i32* %390, align 16
  %392 = and i32 %391, 131072
  %393 = icmp eq i32 %392, 0
  %394 = load i32, i32* %7, align 4
  br i1 %393, label %416, label %395

395:                                              ; preds = %389
  %396 = add i32 %394, -2
  %397 = and i32 %396, %310
  %398 = add i32 %397, %311
  %399 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 5, i32 0
  %400 = load i32, i32* %399, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %398, i32 %400)
  %401 = add i32 %394, -4
  %402 = and i32 %401, %310
  %403 = add i32 %402, %311
  %404 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 4, i32 0
  %405 = load i32, i32* %404, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %403, i32 %405)
  %406 = add i32 %394, -6
  %407 = and i32 %406, %310
  %408 = add i32 %407, %311
  %409 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 3, i32 0
  %410 = load i32, i32* %409, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %408, i32 %410)
  %411 = add i32 %394, -8
  store i32 %411, i32* %7, align 4
  %412 = and i32 %411, %310
  %413 = add i32 %412, %311
  %414 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 0, i32 0
  %415 = load i32, i32* %414, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %413, i32 %415)
  br label %416

416:                                              ; preds = %395, %389
  %417 = phi i32 [ %411, %395 ], [ %394, %389 ]
  %418 = add i32 %417, -2
  %419 = and i32 %418, %310
  %420 = add i32 %419, %311
  %421 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 0
  %422 = load i32, i32* %421, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %420, i32 %422)
  %423 = add i32 %417, -4
  store i32 %423, i32* %7, align 4
  %424 = and i32 %423, %310
  %425 = add i32 %424, %311
  %426 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 0, i64 4
  %427 = load i32, i32* %426, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %425, i32 %427)
  br label %428

428:                                              ; preds = %416, %387
  %429 = phi i32 [ %388, %387 ], [ %423, %416 ]
  %430 = add i32 %429, -2
  %431 = and i32 %430, %310
  %432 = add i32 %431, %311
  %433 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %434 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 20
  %435 = load i32, i32* %434, align 16
  %436 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 1
  %437 = load i32, i32* %436, align 16
  %438 = tail call i32 @helper_cc_compute_all(i32 %437) #23
  %439 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 19
  %440 = load i32, i32* %439, align 4
  %441 = and i32 %440, 1024
  %442 = or i32 %435, %438
  %443 = or i32 %442, %441
  %444 = or i32 %443, 2
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %432, i32 %444)
  %445 = add i32 %429, -4
  %446 = and i32 %445, %310
  %447 = add i32 %446, %311
  %448 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 1, i32 0
  %449 = load i32, i32* %448, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %447, i32 %449)
  %450 = add i32 %429, -6
  store i32 %450, i32* %7, align 4
  %451 = and i32 %450, %310
  %452 = add i32 %451, %311
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %452, i32 %116)
  %453 = icmp eq i32 %111, 0
  br i1 %453, label %458, label %454

454:                                              ; preds = %428
  %455 = add i32 %429, -8
  store i32 %455, i32* %7, align 4
  %456 = and i32 %455, %310
  %457 = add i32 %456, %311
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %97, i32 %457, i32 %2)
  br label %458

458:                                              ; preds = %454, %428, %382, %356
  %459 = phi i32 [ %378, %356 ], [ %450, %428 ], [ %455, %454 ], [ %383, %382 ]
  br i1 %308, label %466, label %460

460:                                              ; preds = %458
  %461 = load i32, i32* %169, align 4
  %462 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 3
  %463 = load i32, i32* %462, align 4
  %464 = lshr i32 %463, 17
  %465 = and i32 %464, 32
  br label %565

466:                                              ; preds = %458
  %467 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 20
  %468 = load i32, i32* %467, align 16
  %469 = and i32 %468, 131072
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %473

471:                                              ; preds = %466
  %472 = load i32, i32* %169, align 4
  br label %521

473:                                              ; preds = %466
  %474 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 0, i32 0
  %475 = bitcast i32* %474 to i8*
  br label %476

476:                                              ; preds = %479, %473
  %477 = phi i64 [ 0, %473 ], [ %481, %479 ]
  %478 = icmp ult i64 %477, 16
  br i1 %478, label %479, label %482

479:                                              ; preds = %476
  %480 = getelementptr i8, i8* %475, i64 %477
  store i8 0, i8* %480
  %481 = add i64 %477, 1
  br label %476

482:                                              ; preds = %476
  %483 = load i32, i32* %169, align 4
  %484 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 3
  %485 = load i32, i32* %484, align 4
  %486 = lshr i32 %485, 17
  %487 = and i32 %486, 32
  %488 = lshr i32 %483, 9
  %489 = and i32 %488, 64
  %490 = and i32 %483, -97
  %491 = or i32 %489, %490
  %492 = or i32 %491, %487
  %493 = xor i32 %492, 64
  %494 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 3, i32 0
  %495 = bitcast i32* %494 to i8*
  br label %496

496:                                              ; preds = %499, %482
  %497 = phi i64 [ 0, %482 ], [ %501, %499 ]
  %498 = icmp ult i64 %497, 16
  br i1 %498, label %499, label %502

499:                                              ; preds = %496
  %500 = getelementptr i8, i8* %495, i64 %497
  store i8 0, i8* %500
  %501 = add i64 %497, 1
  br label %496

502:                                              ; preds = %496
  %503 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 4, i32 0
  %504 = bitcast i32* %503 to i8*
  br label %505

505:                                              ; preds = %508, %502
  %506 = phi i64 [ 0, %502 ], [ %510, %508 ]
  %507 = icmp ult i64 %506, 16
  br i1 %507, label %508, label %511

508:                                              ; preds = %505
  %509 = getelementptr i8, i8* %504, i64 %506
  store i8 0, i8* %509
  %510 = add i64 %506, 1
  br label %505

511:                                              ; preds = %505
  %512 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 5, i32 0
  %513 = bitcast i32* %512 to i8*
  br label %514

514:                                              ; preds = %517, %511
  %515 = phi i64 [ 0, %511 ], [ %519, %517 ]
  %516 = icmp ult i64 %515, 16
  br i1 %516, label %517, label %520

517:                                              ; preds = %514
  %518 = getelementptr i8, i8* %513, i64 %515
  store i8 0, i8* %518
  %519 = add i64 %515, 1
  br label %514

520:                                              ; preds = %514
  store i32 %493, i32* %169, align 4
  br label %521

521:                                              ; preds = %520, %471
  %522 = phi i32 [ %472, %471 ], [ %493, %520 ]
  %523 = or i32 %309, %305
  store i32 %523, i32* %6, align 4
  %524 = and i32 %307, 983040
  %525 = or i32 %524, %306
  %526 = and i32 %307, 8388608
  %527 = icmp eq i32 %526, 0
  %528 = shl nuw i32 %525, 12
  %529 = or i32 %528, 4095
  %530 = select i1 %527, i32 %525, i32 %529
  %531 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 0
  store i32 %523, i32* %531, align 4
  %532 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 1
  store i32 %311, i32* %532, align 4
  %533 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 2
  store i32 %530, i32* %533, align 4
  %534 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 3
  store i32 %307, i32* %534, align 4
  %535 = lshr i32 %307, 17
  %536 = and i32 %535, 32
  %537 = trunc i32 %522 to i16
  %538 = icmp slt i16 %537, 0
  br i1 %538, label %561, label %539

539:                                              ; preds = %521
  %540 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 29, i64 0
  %541 = load i32, i32* %540, align 16
  %542 = and i32 %541, 1
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %549, label %544

544:                                              ; preds = %539
  %545 = icmp ne i32 %469, 0
  %546 = and i32 %522, 16
  %547 = icmp eq i32 %546, 0
  %548 = or i1 %545, %547
  br i1 %548, label %549, label %551

549:                                              ; preds = %544, %539
  %550 = or i32 %536, 64
  br label %561

551:                                              ; preds = %544
  %552 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 3, i32 1
  %553 = load i32, i32* %552, align 4
  %554 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 0, i32 1
  %555 = load i32, i32* %554, align 4
  %556 = or i32 %553, %311
  %557 = or i32 %556, %555
  %558 = icmp eq i32 %557, 0
  %559 = select i1 %558, i32 0, i32 64
  %560 = or i32 %559, %536
  br label %561

561:                                              ; preds = %551, %549, %521
  %562 = phi i32 [ %536, %521 ], [ %550, %549 ], [ %560, %551 ]
  %563 = and i32 %522, -97
  %564 = or i32 %562, %563
  store i32 %564, i32* %169, align 4
  br label %565

565:                                              ; preds = %561, %460
  %566 = phi i32 [ %465, %460 ], [ %536, %561 ]
  %567 = phi i32 [ %461, %460 ], [ %564, %561 ]
  %568 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 0, i64 4
  %569 = load i32, i32* %568, align 16
  %570 = xor i32 %310, -1
  %571 = and i32 %569, %570
  %572 = and i32 %459, %310
  %573 = or i32 %571, %572
  store i32 %573, i32* %568, align 16
  %574 = or i32 %309, %188
  %575 = lshr i32 %208, 16
  %576 = shl i32 %211, 16
  %577 = and i32 %576, 16711680
  %578 = and i32 %211, -16777216
  %579 = or i32 %578, %575
  %580 = or i32 %579, %577
  %581 = and i32 %208, 65535
  %582 = and i32 %211, 983040
  %583 = or i32 %582, %581
  %584 = and i32 %211, 8388608
  %585 = icmp eq i32 %584, 0
  %586 = shl nuw i32 %583, 12
  %587 = or i32 %586, 4095
  %588 = select i1 %585, i32 %583, i32 %587
  %589 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 1, i32 0
  store i32 %574, i32* %589, align 4
  %590 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 1, i32 1
  store i32 %580, i32* %590, align 4
  %591 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 1, i32 2
  store i32 %588, i32* %591, align 4
  %592 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 1, i32 3
  store i32 %211, i32* %592, align 4
  %593 = lshr i32 %211, 18
  %594 = and i32 %593, 16
  %595 = and i32 %567, -32785
  %596 = or i32 %595, %594
  store i32 %596, i32* %169, align 4
  %597 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 29, i64 0
  %598 = load i32, i32* %597, align 16
  %599 = and i32 %598, 1
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %608, label %601

601:                                              ; preds = %565
  %602 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 20
  %603 = load i32, i32* %602, align 16
  %604 = and i32 %603, 131072
  %605 = icmp ne i32 %604, 0
  %606 = icmp eq i32 %594, 0
  %607 = or i1 %606, %605
  br i1 %607, label %608, label %610

608:                                              ; preds = %601, %565
  %609 = or i32 %566, 64
  br label %622

610:                                              ; preds = %601
  %611 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 3, i32 1
  %612 = load i32, i32* %611, align 4
  %613 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 0, i32 1
  %614 = load i32, i32* %613, align 4
  %615 = or i32 %614, %612
  %616 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 24, i64 2, i32 1
  %617 = load i32, i32* %616, align 4
  %618 = or i32 %615, %617
  %619 = icmp eq i32 %618, 0
  %620 = select i1 %619, i32 0, i32 64
  %621 = or i32 %620, %566
  br label %622

622:                                              ; preds = %610, %608
  %623 = phi i32 [ %609, %608 ], [ %621, %610 ]
  %624 = and i32 %596, -32865
  %625 = or i32 %623, %624
  store i32 %625, i32* %169, align 4
  %626 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %627 = load i32, i32* %626, align 4
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %633, label %629, !prof !3, !misexpect !4

629:                                              ; preds = %622
  %630 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %631 = and i32 %567, 3
  tail call void %630(i32 %631, i32 %309)
  %632 = load i32, i32* %169, align 4
  br label %633

633:                                              ; preds = %629, %622
  %634 = phi i32 [ %625, %622 ], [ %632, %629 ]
  %635 = and i32 %634, -4
  %636 = or i32 %635, %309
  store i32 %636, i32* %169, align 4
  %637 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 18
  store i32 %187, i32* %637, align 8
  %638 = and i32 %130, 256
  %639 = icmp eq i32 %638, 0
  %640 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 20
  %641 = load i32, i32* %640, align 16
  br i1 %639, label %642, label %644

642:                                              ; preds = %633
  %643 = and i32 %641, -513
  store i32 %643, i32* %640, align 16
  br label %644

644:                                              ; preds = %642, %633
  %645 = phi i32 [ %643, %642 ], [ %641, %633 ]
  %646 = and i32 %645, -213249
  store i32 %646, i32* %640, align 16
  %647 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %648 = load i32, i32* %647, align 4
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %652, label %650, !prof !3, !misexpect !4

650:                                              ; preds = %644
  %651 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %651(i32 %171, i32 %309)
  br label %652

652:                                              ; preds = %138, %161, %644, %650
  br label %728

653:                                              ; preds = %62
  br i1 %71, label %654, label %669

654:                                              ; preds = %653
  %655 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 40
  %656 = load i64, i64* %655, align 8
  %657 = add i64 %656, 168
  %658 = tail call i32 @ldl_phys(i64 %657)
  %659 = icmp slt i32 %658, 0
  br i1 %659, label %669, label %660

660:                                              ; preds = %654
  %661 = icmp eq i32 %1, 0
  %662 = select i1 %661, i32 768, i32 1024
  %663 = or i32 %662, %0
  %664 = or i32 %663, -2147483648
  %665 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %666 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %665, i64 0, i32 40
  %667 = load i64, i64* %666, align 8
  %668 = add i64 %667, 168
  tail call void @stl_phys(i64 %668, i32 %664)
  br label %669

669:                                              ; preds = %660, %654, %653
  %670 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %671 = shl nsw i32 %0, 2
  %672 = or i32 %671, 3
  %673 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 28, i32 2
  %674 = load i32, i32* %673, align 4
  %675 = icmp ugt i32 %672, %674
  br i1 %675, label %676, label %679

676:                                              ; preds = %669
  %677 = shl nsw i32 %0, 3
  %678 = or i32 %677, 2
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %670, i32 13, i32 %678)
  unreachable

679:                                              ; preds = %669
  %680 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 28, i32 1
  %681 = load i32, i32* %680, align 4
  %682 = add i32 %681, %671
  %683 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %670, i32 %682)
  %684 = add i32 %682, 2
  %685 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %670, i32 %684)
  %686 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 0, i64 4
  %687 = load i32, i32* %686, align 16
  %688 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 24, i64 2, i32 1
  %689 = load i32, i32* %688, align 4
  %690 = icmp eq i32 %1, 0
  br i1 %690, label %691, label %694

691:                                              ; preds = %679
  %692 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 18
  %693 = load i32, i32* %692, align 8
  br label %694

694:                                              ; preds = %679, %691
  %695 = phi i32 [ %693, %691 ], [ %3, %679 ]
  %696 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 24, i64 1, i32 0
  %697 = load i32, i32* %696, align 16
  %698 = add i32 %687, 65534
  %699 = and i32 %698, 65535
  %700 = add i32 %699, %689
  %701 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %702 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %701, i64 0, i32 20
  %703 = load i32, i32* %702, align 16
  %704 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %701, i64 0, i32 1
  %705 = load i32, i32* %704, align 16
  %706 = tail call i32 @helper_cc_compute_all(i32 %705) #23
  %707 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %701, i64 0, i32 19
  %708 = load i32, i32* %707, align 4
  %709 = and i32 %708, 1024
  %710 = or i32 %703, %706
  %711 = or i32 %710, %709
  %712 = or i32 %711, 2
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %670, i32 %700, i32 %712)
  %713 = add i32 %687, 65532
  %714 = and i32 %713, 65535
  %715 = add i32 %714, %689
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %670, i32 %715, i32 %697)
  %716 = add i32 %687, 65530
  %717 = and i32 %716, 65535
  %718 = add i32 %717, %689
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %670, i32 %718, i32 %695)
  %719 = load i32, i32* %686, align 16
  %720 = and i32 %719, -65536
  %721 = or i32 %720, %717
  store i32 %721, i32* %686, align 16
  %722 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 18
  store i32 %683, i32* %722, align 8
  store i32 %685, i32* %696, align 16
  %723 = shl i32 %685, 4
  %724 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 24, i64 1, i32 1
  store i32 %723, i32* %724, align 4
  %725 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %670, i64 0, i32 20
  %726 = load i32, i32* %725, align 16
  %727 = and i32 %726, -328449
  store i32 %727, i32* %725, align 16
  br label %728

728:                                              ; preds = %694, %652
  %729 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %730 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %729, i64 0, i32 21
  %731 = load i32, i32* %730, align 4
  %732 = and i32 %731, 2097152
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %744, label %734

734:                                              ; preds = %728
  %735 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %729, i64 0, i32 40
  %736 = load i64, i64* %735, align 8
  %737 = add i64 %736, 168
  %738 = tail call i32 @ldl_phys(i64 %737)
  %739 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %740 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %739, i64 0, i32 40
  %741 = load i64, i64* %740, align 8
  %742 = add i64 %741, 168
  %743 = and i32 %738, 2147483647
  tail call void @stl_phys(i64 %742, i32 %743)
  br label %744

744:                                              ; preds = %728, %734
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #6

; Function Attrs: noreturn uwtable
define void @raise_exception_err(%struct.CPUX86State* %0, i32 %1, i32 %2) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* %0, i32 %1, i32 0, i32 %2, i32 0, i64 0) #21
  unreachable
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = zext i32 %17 to i64
  %21 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %20, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, -33
  %24 = and i32 %14, -4093
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %28, label %26, !prof !3, !misexpect !4

26:                                               ; preds = %13
  %27 = tail call i32 @helper_ldl_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 0, i8* null)
  br label %40

28:                                               ; preds = %13
  %29 = zext i32 %14 to i64
  %30 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %20, i32 4
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %29
  %33 = inttoptr i64 %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %28
  %39 = zext i32 %34 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %39, i32 4, i32 0, i64 0)
  br label %40

40:                                               ; preds = %28, %38, %26
  %41 = phi i32 [ %27, %26 ], [ %34, %38 ], [ %34, %28 ]
  ret i32 %41
}

; Function Attrs: uwtable
define internal fastcc void @switch_tss(%struct.CPUX86State* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 3
  %10 = lshr i32 %3, 8
  %11 = and i32 %10, 15
  %12 = icmp eq i32 %11, 5
  br i1 %12, label %13, label %52

13:                                               ; preds = %6
  %14 = trunc i32 %3 to i16
  %15 = icmp slt i16 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %13
  %17 = and i32 %1, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 11, i32 %17, i64 0)
  unreachable

18:                                               ; preds = %13
  %19 = lshr i32 %2, 16
  %20 = and i32 %2, 262144
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %23, i64 0)
  unreachable

24:                                               ; preds = %18
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = or i32 %19, 7
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 27, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %26, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %31, i64 0)
  unreachable

32:                                               ; preds = %24
  %33 = and i32 %19, 65528
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 27, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, %33
  %37 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %25, i32 %36)
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = add i32 %36, 4
  %40 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %38, i32 %39)
  %41 = and i32 %40, 4096
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %32
  %44 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %44, i64 0)
  unreachable

45:                                               ; preds = %32
  %46 = lshr i32 %40, 8
  %47 = and i32 %46, 15
  %48 = and i32 %40, 1792
  %49 = icmp eq i32 %48, 256
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  %51 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %51, i64 0)
  unreachable

52:                                               ; preds = %45, %6
  %53 = phi i32 [ %37, %45 ], [ %2, %6 ]
  %54 = phi i32 [ %40, %45 ], [ %3, %6 ]
  %55 = phi i32 [ %47, %45 ], [ %11, %6 ]
  %56 = phi i32 [ %19, %45 ], [ %1, %6 ]
  %57 = trunc i32 %54 to i16
  %58 = icmp slt i16 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %52
  %60 = and i32 %56, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 11, i32 %60, i64 0)
  unreachable

61:                                               ; preds = %52
  %62 = and i32 %55, 8
  %63 = icmp ne i32 %62, 0
  %64 = select i1 %63, i32 103, i32 43
  %65 = and i32 %53, 65535
  %66 = and i32 %54, 983040
  %67 = or i32 %66, %65
  %68 = and i32 %54, 8388608
  %69 = icmp eq i32 %68, 0
  %70 = shl nuw i32 %67, 12
  %71 = or i32 %70, 4095
  %72 = select i1 %69, i32 %67, i32 %71
  %73 = lshr i32 %53, 16
  %74 = shl i32 %54, 16
  %75 = and i32 %74, 16711680
  %76 = and i32 %54, -16777216
  %77 = or i32 %76, %73
  %78 = or i32 %77, %75
  %79 = and i32 %56, 4
  %80 = icmp ne i32 %79, 0
  %81 = icmp slt i32 %72, %64
  %82 = or i1 %80, %81
  br i1 %82, label %83, label %85

83:                                               ; preds = %61
  %84 = and i32 %56, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %84, i64 0)
  unreachable

85:                                               ; preds = %61
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 3
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %88, 2048
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, i32 43, i32 103
  br i1 %63, label %92, label %131

92:                                               ; preds = %85
  %93 = add i32 %78, 28
  %94 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %93)
  %95 = add i32 %78, 32
  %96 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %95)
  %97 = add i32 %78, 36
  %98 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %97)
  %99 = add i32 %78, 40
  %100 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %99)
  %101 = add i32 %78, 44
  %102 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %101)
  %103 = add i32 %78, 48
  %104 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %103)
  %105 = add i32 %78, 52
  %106 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %105)
  %107 = add i32 %78, 56
  %108 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %107)
  %109 = add i32 %78, 60
  %110 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %109)
  %111 = add i32 %78, 64
  %112 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %111)
  %113 = add i32 %78, 68
  %114 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %113)
  %115 = add i32 %78, 72
  %116 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %115)
  %117 = add i32 %78, 76
  %118 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %117)
  %119 = add i32 %78, 80
  %120 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %119)
  %121 = add i32 %78, 84
  %122 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %121)
  %123 = add i32 %78, 88
  %124 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %123)
  %125 = add i32 %78, 92
  %126 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %125)
  %127 = add i32 %78, 96
  %128 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %127)
  %129 = add i32 %78, 100
  %130 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %129)
  br label %170

131:                                              ; preds = %85
  %132 = add i32 %78, 14
  %133 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %132)
  %134 = add i32 %78, 16
  %135 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %134)
  %136 = add i32 %78, 18
  %137 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %136)
  %138 = or i32 %137, -65536
  %139 = add i32 %78, 20
  %140 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %139)
  %141 = or i32 %140, -65536
  %142 = add i32 %78, 22
  %143 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %142)
  %144 = or i32 %143, -65536
  %145 = add i32 %78, 24
  %146 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %145)
  %147 = or i32 %146, -65536
  %148 = add i32 %78, 26
  %149 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %148)
  %150 = or i32 %149, -65536
  %151 = add i32 %78, 28
  %152 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %151)
  %153 = or i32 %152, -65536
  %154 = add i32 %78, 30
  %155 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %154)
  %156 = or i32 %155, -65536
  %157 = add i32 %78, 32
  %158 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %157)
  %159 = or i32 %158, -65536
  %160 = add i32 %78, 34
  %161 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %160)
  %162 = add i32 %78, 38
  %163 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %162)
  %164 = add i32 %78, 42
  %165 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %164)
  %166 = add i32 %78, 46
  %167 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %166)
  %168 = add i32 %78, 42
  %169 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %168)
  br label %170

170:                                              ; preds = %131, %92
  %171 = phi i32 [ %126, %92 ], [ 0, %131 ]
  %172 = phi i32 [ %124, %92 ], [ 0, %131 ]
  %173 = phi i32 [ %122, %92 ], [ %167, %131 ]
  %174 = phi i32 [ %120, %92 ], [ %165, %131 ]
  %175 = phi i32 [ %116, %92 ], [ %161, %131 ]
  %176 = phi i32 [ %118, %92 ], [ %163, %131 ]
  %177 = phi i32 [ %114, %92 ], [ %159, %131 ]
  %178 = phi i32 [ %112, %92 ], [ %156, %131 ]
  %179 = phi i32 [ %110, %92 ], [ %153, %131 ]
  %180 = phi i32 [ %108, %92 ], [ %150, %131 ]
  %181 = phi i32 [ %106, %92 ], [ %147, %131 ]
  %182 = phi i32 [ %104, %92 ], [ %144, %131 ]
  %183 = phi i32 [ %102, %92 ], [ %141, %131 ]
  %184 = phi i32 [ %100, %92 ], [ %138, %131 ]
  %185 = phi i32 [ %128, %92 ], [ %169, %131 ]
  %186 = phi i32 [ %94, %92 ], [ 0, %131 ]
  %187 = phi i32 [ %96, %92 ], [ %133, %131 ]
  %188 = phi i32 [ %98, %92 ], [ %135, %131 ]
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = tail call fastcc i32 @cpu_ldub_kernel(%struct.CPUX86State* nonnull %0, i32 %190)
  %192 = load i32, i32* %189, align 4
  %193 = add i32 %192, %91
  %194 = tail call fastcc i32 @cpu_ldub_kernel(%struct.CPUX86State* nonnull %0, i32 %193)
  %195 = load i32, i32* %189, align 4
  tail call fastcc void @cpu_stb_kernel(%struct.CPUX86State* nonnull %0, i32 %195, i32 %191)
  %196 = load i32, i32* %189, align 4
  %197 = add i32 %196, %91
  tail call fastcc void @cpu_stb_kernel(%struct.CPUX86State* nonnull %0, i32 %197, i32 %194)
  %198 = icmp eq i32 %4, 1
  %199 = icmp ult i32 %4, 2
  br i1 %199, label %200, label %210

200:                                              ; preds = %170
  %201 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 1
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %86, i64 0, i32 0
  %204 = load i32, i32* %203, align 16
  %205 = and i32 %204, -8
  %206 = add i32 %202, 4
  %207 = add i32 %206, %205
  %208 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %207)
  %209 = and i32 %208, -513
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %207, i32 %209)
  br label %210

210:                                              ; preds = %170, %200
  %211 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %212 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 20
  %213 = load i32, i32* %212, align 16
  %214 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 1
  %215 = load i32, i32* %214, align 16
  %216 = tail call i32 @helper_cc_compute_all(i32 %215) #23
  %217 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 19
  %218 = load i32, i32* %217, align 4
  %219 = and i32 %218, 1024
  %220 = or i32 %213, %216
  %221 = or i32 %220, %219
  %222 = or i32 %221, 2
  %223 = and i32 %222, -16385
  %224 = select i1 %198, i32 %223, i32 %222
  %225 = load i32, i32* %189, align 4
  br i1 %63, label %226, label %285

226:                                              ; preds = %210
  %227 = add i32 %225, 32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %227, i32 %5)
  %228 = load i32, i32* %189, align 4
  %229 = add i32 %228, 36
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %229, i32 %224)
  %230 = load i32, i32* %189, align 4
  %231 = add i32 %230, 40
  %232 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 0
  %233 = load i32, i32* %232, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %231, i32 %233)
  %234 = load i32, i32* %189, align 4
  %235 = add i32 %234, 44
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 1
  %237 = load i32, i32* %236, align 4
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %235, i32 %237)
  %238 = load i32, i32* %189, align 4
  %239 = add i32 %238, 48
  %240 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 2
  %241 = load i32, i32* %240, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %239, i32 %241)
  %242 = load i32, i32* %189, align 4
  %243 = add i32 %242, 52
  %244 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 3
  %245 = load i32, i32* %244, align 4
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %243, i32 %245)
  %246 = load i32, i32* %189, align 4
  %247 = add i32 %246, 56
  %248 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %249 = load i32, i32* %248, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %247, i32 %249)
  %250 = load i32, i32* %189, align 4
  %251 = add i32 %250, 60
  %252 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 5
  %253 = load i32, i32* %252, align 4
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %251, i32 %253)
  %254 = load i32, i32* %189, align 4
  %255 = add i32 %254, 64
  %256 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 6
  %257 = load i32, i32* %256, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %255, i32 %257)
  %258 = load i32, i32* %189, align 4
  %259 = add i32 %258, 68
  %260 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 7
  %261 = load i32, i32* %260, align 4
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %259, i32 %261)
  %262 = load i32, i32* %189, align 4
  %263 = add i32 %262, 72
  %264 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 0
  %265 = load i32, i32* %264, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %263, i32 %265)
  %266 = load i32, i32* %189, align 4
  %267 = add i32 %266, 76
  %268 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  %269 = load i32, i32* %268, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %267, i32 %269)
  %270 = load i32, i32* %189, align 4
  %271 = add i32 %270, 80
  %272 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  %273 = load i32, i32* %272, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %271, i32 %273)
  %274 = load i32, i32* %189, align 4
  %275 = add i32 %274, 84
  %276 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 0
  %277 = load i32, i32* %276, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %275, i32 %277)
  %278 = load i32, i32* %189, align 4
  %279 = add i32 %278, 88
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 0
  %281 = load i32, i32* %280, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %279, i32 %281)
  %282 = load i32, i32* %189, align 4
  %283 = add i32 %282, 92
  %284 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 0
  br label %336

285:                                              ; preds = %210
  %286 = add i32 %225, 14
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %286, i32 %5)
  %287 = load i32, i32* %189, align 4
  %288 = add i32 %287, 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %288, i32 %224)
  %289 = load i32, i32* %189, align 4
  %290 = add i32 %289, 18
  %291 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 0
  %292 = load i32, i32* %291, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %290, i32 %292)
  %293 = load i32, i32* %189, align 4
  %294 = add i32 %293, 20
  %295 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 1
  %296 = load i32, i32* %295, align 4
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %294, i32 %296)
  %297 = load i32, i32* %189, align 4
  %298 = add i32 %297, 22
  %299 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 2
  %300 = load i32, i32* %299, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %298, i32 %300)
  %301 = load i32, i32* %189, align 4
  %302 = add i32 %301, 24
  %303 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 3
  %304 = load i32, i32* %303, align 4
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %302, i32 %304)
  %305 = load i32, i32* %189, align 4
  %306 = add i32 %305, 26
  %307 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %308 = load i32, i32* %307, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %306, i32 %308)
  %309 = load i32, i32* %189, align 4
  %310 = add i32 %309, 28
  %311 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 5
  %312 = load i32, i32* %311, align 4
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %310, i32 %312)
  %313 = load i32, i32* %189, align 4
  %314 = add i32 %313, 30
  %315 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 6
  %316 = load i32, i32* %315, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %314, i32 %316)
  %317 = load i32, i32* %189, align 4
  %318 = add i32 %317, 32
  %319 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 7
  %320 = load i32, i32* %319, align 4
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %318, i32 %320)
  %321 = load i32, i32* %189, align 4
  %322 = add i32 %321, 34
  %323 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 0
  %324 = load i32, i32* %323, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %322, i32 %324)
  %325 = load i32, i32* %189, align 4
  %326 = add i32 %325, 38
  %327 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  %328 = load i32, i32* %327, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %326, i32 %328)
  %329 = load i32, i32* %189, align 4
  %330 = add i32 %329, 42
  %331 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  %332 = load i32, i32* %331, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %330, i32 %332)
  %333 = load i32, i32* %189, align 4
  %334 = add i32 %333, 46
  %335 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 0
  br label %336

336:                                              ; preds = %285, %226
  %337 = phi i32* [ %335, %285 ], [ %284, %226 ]
  %338 = phi i32 [ %334, %285 ], [ %283, %226 ]
  %339 = load i32, i32* %337, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %338, i32 %339)
  %340 = icmp eq i32 %4, 2
  br i1 %340, label %341, label %345

341:                                              ; preds = %336
  %342 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %86, i64 0, i32 0
  %343 = load i32, i32* %342, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %0, i32 %78, i32 %343)
  %344 = or i32 %188, 16384
  br label %348

345:                                              ; preds = %336
  %346 = and i32 %4, -3
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %357

348:                                              ; preds = %341, %345
  %349 = phi i32 [ %344, %341 ], [ %188, %345 ]
  %350 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 1
  %351 = load i32, i32* %350, align 4
  %352 = and i32 %56, -8
  %353 = or i32 %352, 4
  %354 = add i32 %353, %351
  %355 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %354)
  %356 = or i32 %355, 512
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %0, i32 %354, i32 %356)
  br label %357

357:                                              ; preds = %345, %348
  %358 = phi i32 [ %188, %345 ], [ %349, %348 ]
  %359 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %360 = load i32, i32* %359, align 16
  %361 = or i32 %360, 8
  store i32 %361, i32* %359, align 16
  %362 = load i32, i32* %7, align 4
  %363 = or i32 %362, 2048
  store i32 %363, i32* %7, align 4
  %364 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %86, i64 0, i32 0
  store i32 %56, i32* %364, align 16
  store i32 %78, i32* %189, align 4
  %365 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 2
  store i32 %72, i32* %365, align 8
  %366 = and i32 %54, -513
  store i32 %366, i32* %87, align 4
  br i1 %63, label %367, label %370

367:                                              ; preds = %357
  %368 = icmp slt i32 %361, 0
  br i1 %368, label %369, label %370

369:                                              ; preds = %367
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* nonnull %0, i32 %186)
  br label %370

370:                                              ; preds = %357, %369, %367
  %371 = phi i32 [ -2585345, %367 ], [ -2585345, %369 ], [ -29441, %357 ]
  %372 = phi i32 [ 2585344, %367 ], [ 2585344, %369 ], [ 29440, %357 ]
  %373 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  store i32 %187, i32* %373, align 8
  %374 = and i32 %358, 2261
  %375 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %376 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %375, i64 0, i32 2
  store i32 %374, i32* %376, align 4
  %377 = and i32 %358, 1024
  %378 = icmp eq i32 %377, 0
  %379 = select i1 %378, i32 1, i32 -1
  %380 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %375, i64 0, i32 19
  store i32 %379, i32* %380, align 4
  %381 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %375, i64 0, i32 20
  %382 = load i32, i32* %381, align 16
  %383 = and i32 %382, %371
  %384 = and i32 %358, %372
  %385 = or i32 %383, %384
  store i32 %385, i32* %381, align 16
  %386 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 0
  store i32 %184, i32* %386, align 16
  %387 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 1
  store i32 %183, i32* %387, align 4
  %388 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 2
  store i32 %182, i32* %388, align 8
  %389 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 3
  store i32 %181, i32* %389, align 4
  %390 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  store i32 %180, i32* %390, align 16
  %391 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 5
  store i32 %179, i32* %391, align 4
  %392 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 6
  store i32 %178, i32* %392, align 8
  %393 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 7
  store i32 %177, i32* %393, align 4
  %394 = and i32 %358, 131072
  %395 = icmp ne i32 %394, 0
  br i1 %395, label %396, label %457

396:                                              ; preds = %370
  %397 = and i32 %175, 65535
  %398 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %399 = shl nuw nsw i32 %397, 4
  %400 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 0, i32 0
  store i32 %397, i32* %400, align 4
  %401 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 0, i32 1
  store i32 %399, i32* %401, align 4
  %402 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 0, i32 2
  store i32 65535, i32* %402, align 4
  %403 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 0, i32 3
  store i32 0, i32* %403, align 4
  %404 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 21
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 2, i32 3
  %407 = load i32, i32* %406, align 4
  %408 = lshr i32 %407, 17
  %409 = and i32 %408, 32
  %410 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 21
  %411 = and i32 %176, 65535
  %412 = shl nuw nsw i32 %411, 4
  %413 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 1, i32 0
  store i32 %411, i32* %413, align 4
  %414 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 1, i32 1
  store i32 %412, i32* %414, align 4
  %415 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 1, i32 2
  store i32 65535, i32* %415, align 4
  %416 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 1, i32 3
  store i32 0, i32* %416, align 4
  %417 = and i32 %405, -32881
  %418 = or i32 %409, %417
  %419 = or i32 %418, 64
  store i32 %419, i32* %410, align 4
  %420 = and i32 %174, 65535
  %421 = shl nuw nsw i32 %420, 4
  %422 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 2, i32 0
  store i32 %420, i32* %422, align 4
  %423 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 2, i32 1
  store i32 %421, i32* %423, align 4
  %424 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 2, i32 2
  store i32 65535, i32* %424, align 4
  store i32 0, i32* %406, align 4
  %425 = or i32 %417, 64
  store i32 %425, i32* %410, align 4
  %426 = and i32 %173, 65535
  %427 = shl nuw nsw i32 %426, 4
  %428 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 3, i32 0
  store i32 %426, i32* %428, align 4
  %429 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 3, i32 1
  store i32 %427, i32* %429, align 4
  %430 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 3, i32 2
  store i32 65535, i32* %430, align 4
  %431 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 3, i32 3
  store i32 0, i32* %431, align 4
  %432 = or i32 %417, 64
  store i32 %432, i32* %410, align 4
  %433 = and i32 %172, 65535
  %434 = shl nuw nsw i32 %433, 4
  %435 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 4, i32 0
  store i32 %433, i32* %435, align 4
  %436 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 4, i32 1
  store i32 %434, i32* %436, align 4
  %437 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 4, i32 2
  store i32 65535, i32* %437, align 4
  %438 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 4, i32 3
  store i32 0, i32* %438, align 4
  %439 = or i32 %417, 64
  store i32 %439, i32* %410, align 4
  %440 = and i32 %171, 65535
  %441 = shl nuw nsw i32 %440, 4
  %442 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 5, i32 0
  store i32 %440, i32* %442, align 4
  %443 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 5, i32 1
  store i32 %441, i32* %443, align 4
  %444 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 5, i32 2
  store i32 65535, i32* %444, align 4
  %445 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 5, i32 3
  store i32 0, i32* %445, align 4
  %446 = or i32 %417, 64
  store i32 %446, i32* %410, align 4
  %447 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %448 = load i32, i32* %447, align 4
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %454, label %450, !prof !3, !misexpect !4

450:                                              ; preds = %396
  %451 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %452 = load i32, i32* %7, align 4
  %453 = and i32 %452, 3
  tail call void %451(i32 %453, i32 3)
  br label %454

454:                                              ; preds = %396, %450
  %455 = load i32, i32* %7, align 4
  %456 = or i32 %455, 3
  br label %504

457:                                              ; preds = %370
  %458 = and i32 %176, 3
  %459 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %466, label %462, !prof !3, !misexpect !4

462:                                              ; preds = %457
  %463 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %464 = load i32, i32* %7, align 4
  %465 = and i32 %464, 3
  tail call void %463(i32 %465, i32 %458)
  br label %466

466:                                              ; preds = %457, %462
  %467 = load i32, i32* %7, align 4
  %468 = and i32 %467, -4
  %469 = or i32 %468, %458
  store i32 %469, i32* %7, align 4
  %470 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  %471 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  %472 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %473 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %474 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %475 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 0
  store i32 %175, i32* %475, align 4
  store i32 0, i32* %473, align 4
  %476 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 2
  store i32 0, i32* %476, align 4
  %477 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 3
  store i32 0, i32* %477, align 4
  %478 = load i32, i32* %471, align 4
  %479 = lshr i32 %478, 17
  %480 = and i32 %479, 32
  %481 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  store i32 %176, i32* %481, align 4
  %482 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 1
  store i32 0, i32* %482, align 4
  %483 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  store i32 0, i32* %483, align 4
  store i32 0, i32* %470, align 4
  %484 = and i32 %469, -32881
  %485 = or i32 %480, %484
  %486 = or i32 %485, 64
  store i32 %486, i32* %7, align 4
  %487 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  store i32 %174, i32* %487, align 4
  store i32 0, i32* %474, align 4
  %488 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 2
  store i32 0, i32* %488, align 4
  store i32 0, i32* %471, align 4
  %489 = or i32 %484, 64
  store i32 %489, i32* %7, align 4
  %490 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 0
  store i32 %173, i32* %490, align 4
  store i32 0, i32* %472, align 4
  %491 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 2
  store i32 0, i32* %491, align 4
  %492 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 3
  store i32 0, i32* %492, align 4
  %493 = or i32 %484, 64
  store i32 %493, i32* %7, align 4
  %494 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 0
  store i32 %172, i32* %494, align 4
  %495 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 1
  store i32 0, i32* %495, align 4
  %496 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 2
  store i32 0, i32* %496, align 4
  %497 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 3
  store i32 0, i32* %497, align 4
  %498 = or i32 %484, 64
  store i32 %498, i32* %7, align 4
  %499 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 0
  store i32 %171, i32* %499, align 4
  %500 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 1
  store i32 0, i32* %500, align 4
  %501 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 2
  store i32 0, i32* %501, align 4
  %502 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 3
  store i32 0, i32* %502, align 4
  %503 = or i32 %484, 64
  br label %504

504:                                              ; preds = %466, %454
  %505 = phi i32 [ %503, %466 ], [ %456, %454 ]
  %506 = phi i32 [ %458, %466 ], [ 3, %454 ]
  store i32 %505, i32* %7, align 4
  %507 = and i32 %185, -5
  %508 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 0
  store i32 %507, i32* %508, align 16
  %509 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 1
  store i32 0, i32* %509, align 4
  %510 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 2
  store i32 0, i32* %510, align 8
  %511 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 3
  store i32 0, i32* %511, align 4
  %512 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %513 = load i32, i32* %512, align 4
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %517, label %515, !prof !3, !misexpect !4

515:                                              ; preds = %504
  %516 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %516(i32 %9, i32 %506)
  br label %517

517:                                              ; preds = %504, %515
  %518 = and i32 %185, 4
  %519 = icmp eq i32 %518, 0
  %520 = and i32 %185, 65532
  br i1 %519, label %522, label %521

521:                                              ; preds = %517
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %520, i64 0)
  unreachable

522:                                              ; preds = %517
  %523 = icmp eq i32 %520, 0
  br i1 %523, label %560, label %524

524:                                              ; preds = %522
  %525 = or i32 %185, 7
  %526 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 2
  %527 = load i32, i32* %526, align 4
  %528 = icmp ugt i32 %525, %527
  br i1 %528, label %529, label %530

529:                                              ; preds = %524
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %520, i64 0)
  unreachable

530:                                              ; preds = %524
  %531 = and i32 %185, -8
  %532 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 1
  %533 = load i32, i32* %532, align 4
  %534 = add i32 %533, %531
  %535 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %534)
  %536 = add i32 %534, 4
  %537 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %536)
  %538 = and i32 %537, 7936
  %539 = icmp eq i32 %538, 512
  br i1 %539, label %541, label %540

540:                                              ; preds = %530
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %520, i64 0)
  unreachable

541:                                              ; preds = %530
  %542 = trunc i32 %537 to i16
  %543 = icmp slt i16 %542, 0
  br i1 %543, label %545, label %544

544:                                              ; preds = %541
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %520, i64 0)
  unreachable

545:                                              ; preds = %541
  %546 = lshr i32 %535, 16
  %547 = shl i32 %537, 16
  %548 = and i32 %547, 16711680
  %549 = and i32 %537, -16777216
  %550 = or i32 %549, %546
  %551 = or i32 %550, %548
  store i32 %551, i32* %509, align 4
  %552 = and i32 %535, 65535
  %553 = and i32 %537, 983040
  %554 = or i32 %553, %552
  %555 = and i32 %537, 8388608
  %556 = icmp eq i32 %555, 0
  %557 = shl nuw i32 %554, 12
  %558 = or i32 %557, 4095
  %559 = select i1 %556, i32 %554, i32 %558
  store i32 %559, i32* %510, align 4
  store i32 %537, i32* %511, align 4
  br label %560

560:                                              ; preds = %522, %545
  br i1 %395, label %562, label %561

561:                                              ; preds = %560
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* nonnull %0, i32 1, i32 %176)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* nonnull %0, i32 2, i32 %174)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* nonnull %0, i32 0, i32 %175)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* nonnull %0, i32 3, i32 %173)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* nonnull %0, i32 4, i32 %172)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* nonnull %0, i32 5, i32 %171)
  br label %562

562:                                              ; preds = %561, %560
  %563 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  %564 = load i32, i32* %563, align 8
  %565 = icmp ugt i32 %187, %564
  br i1 %565, label %566, label %567

566:                                              ; preds = %562
  tail call void @raise_exception_err(%struct.CPUX86State* nonnull %0, i32 13, i32 0)
  unreachable

567:                                              ; preds = %562
  %568 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 61, i64 7
  %569 = load i32, i32* %568, align 4
  %570 = and i32 %569, 85
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %584, label %572

572:                                              ; preds = %567
  %573 = zext i32 %569 to i64
  %574 = and i64 %573, 3
  %575 = icmp eq i64 %574, 1
  br i1 %575, label %576, label %579

576:                                              ; preds = %572
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* nonnull %0, i32 0)
  %577 = load i32, i32* %568, align 4
  %578 = zext i32 %577 to i64
  br label %579

579:                                              ; preds = %572, %576
  %580 = phi i64 [ %573, %572 ], [ %578, %576 ]
  %581 = phi i32 [ %569, %572 ], [ %577, %576 ]
  %582 = and i64 %580, 12
  %583 = icmp eq i64 %582, 4
  br i1 %583, label %585, label %588

584:                                              ; preds = %567, %603
  ret void

585:                                              ; preds = %579
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* nonnull %0, i32 1)
  %586 = load i32, i32* %568, align 4
  %587 = zext i32 %586 to i64
  br label %588

588:                                              ; preds = %585, %579
  %589 = phi i64 [ %587, %585 ], [ %580, %579 ]
  %590 = phi i32 [ %586, %585 ], [ %581, %579 ]
  %591 = and i64 %589, 48
  %592 = icmp eq i64 %591, 16
  br i1 %592, label %593, label %596

593:                                              ; preds = %588
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* nonnull %0, i32 2)
  %594 = load i32, i32* %568, align 4
  %595 = zext i32 %594 to i64
  br label %596

596:                                              ; preds = %593, %588
  %597 = phi i64 [ %595, %593 ], [ %589, %588 ]
  %598 = phi i32 [ %594, %593 ], [ %590, %588 ]
  %599 = and i64 %597, 192
  %600 = icmp eq i64 %599, 64
  br i1 %600, label %601, label %603

601:                                              ; preds = %596
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* nonnull %0, i32 3)
  %602 = load i32, i32* %568, align 4
  br label %603

603:                                              ; preds = %601, %596
  %604 = phi i32 [ %602, %601 ], [ %598, %596 ]
  %605 = and i32 %604, -86
  store i32 %605, i32* %568, align 4
  br label %584
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stl_kernel(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %8, i32 4, i32 1)
  br label %9

9:                                                ; preds = %3, %7
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 0
  %21 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %20, align 8
  %22 = zext i32 %19 to i64
  %23 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %22, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, -33
  %26 = and i32 %16, -4093
  %27 = icmp eq i32 %25, %26
  br i1 %27, label %29, label %28, !prof !3, !misexpect !4

28:                                               ; preds = %15
  tail call void @helper_stl_mmu(%struct.CPUX86State* nonnull %0, i32 %16, i32 %2, i32 0, i8* null)
  br label %40

29:                                               ; preds = %15
  %30 = zext i32 %16 to i64
  %31 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %22, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = inttoptr i64 %33 to i32*
  store i32 %2, i32* %34, align 4
  %35 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %29
  %39 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %39, i32 4, i32 2, i64 0)
  br label %40

40:                                               ; preds = %29, %38, %28
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stw_kernel(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %8, i32 4, i32 1)
  br label %9

9:                                                ; preds = %3, %7
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 0
  %21 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %20, align 8
  %22 = zext i32 %19 to i64
  %23 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %22, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, -33
  %26 = and i32 %16, -4095
  %27 = icmp eq i32 %25, %26
  br i1 %27, label %30, label %28, !prof !3, !misexpect !4

28:                                               ; preds = %15
  %29 = trunc i32 %2 to i16
  tail call void @helper_stw_mmu(%struct.CPUX86State* nonnull %0, i32 %16, i16 zeroext %29, i32 0, i8* null)
  br label %42

30:                                               ; preds = %15
  %31 = zext i32 %16 to i64
  %32 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %22, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, %31
  %35 = trunc i32 %2 to i16
  %36 = inttoptr i64 %34 to i16*
  store i16 %35, i16* %36, align 2
  %37 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %30
  %41 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %41, i32 4, i32 2, i64 0)
  br label %42

42:                                               ; preds = %30, %40, %28
  ret void
}

; Function Attrs: inlinehint uwtable
define internal fastcc void @get_ss_esp_from_tss(%struct.CPUX86State* %0, i32* nocapture %1, i32* nocapture %2, i32 %3) unnamed_addr #10 {
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i16
  %8 = icmp slt i16 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void (%struct.CPUX86State*, i8*, ...) @cpu_abort(%struct.CPUX86State* nonnull %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i64 0, i64 0)) #21
  unreachable

10:                                               ; preds = %4
  %11 = lshr i32 %6, 11
  %12 = and i32 %11, 1
  %13 = shl nsw i32 %3, 2
  %14 = or i32 %13, 2
  %15 = shl i32 %14, %12
  %16 = shl nuw nsw i32 4, %12
  %17 = add nsw i32 %16, -1
  %18 = add i32 %17, %15
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %10
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 0
  %24 = load i32, i32* %23, align 16
  %25 = and i32 %24, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %25, i64 0)
  unreachable

26:                                               ; preds = %10
  %27 = icmp eq i32 %12, 0
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = add i32 %29, %15
  br i1 %27, label %31, label %33

31:                                               ; preds = %26
  %32 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %30)
  br label %35

33:                                               ; preds = %26
  %34 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %30)
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i32 [ %34, %33 ], [ %32, %31 ]
  %37 = phi i32 [ 4, %33 ], [ 2, %31 ]
  store i32 %36, i32* %2, align 4
  %38 = load i32, i32* %28, align 4
  %39 = add i32 %15, %37
  %40 = add i32 %39, %38
  %41 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %40)
  store i32 %41, i32* %1, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #11

; Function Attrs: noreturn
declare void @cpu_abort(%struct.CPUX86State*, i8*, ...) local_unnamed_addr #8

; Function Attrs: uwtable
define void @helper_stw_mmu(%struct.CPUX86State* %0, i32 %1, i16 zeroext %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = zext i16 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %11, i32 2, i32 1)
  br label %12

12:                                               ; preds = %5, %10
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i32 [ %17, %16 ], [ %1, %12 ]
  %20 = lshr i32 %19, 12
  %21 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %20, i32 0, i32 1048575, i32 0)
  %22 = and i32 %21, 1023
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %23
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %26 = zext i32 %22 to i64
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %26, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %19, -4096
  %30 = and i32 %28, -2048
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %34, label %32, !prof !3, !misexpect !5

32:                                               ; preds = %18
  %33 = shl i32 %21, 12
  br label %137

34:                                               ; preds = %137, %18
  %35 = phi %struct.CPUTLBEntry* [ %25, %18 ], [ %138, %137 ]
  %36 = phi i32 [ %28, %18 ], [ %140, %137 ]
  %37 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %35, i64 %26
  %38 = and i32 %36, 4063
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %52, label %40, !prof !3, !misexpect !4

40:                                               ; preds = %34
  %41 = and i32 %19, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %23, i64 %26
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %37, %struct.CPUTLBEntry** %46, align 8
  tail call void @io_write_chkw_mmu(%struct.CPUX86State* nonnull %0, i64 %45, i16 zeroext %2, i32 %19, i8* %4)
  %47 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %143, label %50

50:                                               ; preds = %43
  %51 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %19, i64 %51, i32 2, i32 3, i64 0)
  br label %143

52:                                               ; preds = %34
  %53 = and i32 %19, 4095
  %54 = icmp eq i32 %53, 4095
  br i1 %54, label %55, label %126, !prof !6, !misexpect !4

55:                                               ; preds = %40, %52
  %56 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %55
  %60 = zext i16 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %19, i64 %60, i32 2, i32 1)
  br label %61

61:                                               ; preds = %59, %55
  %62 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %19, i32 0, i32 -1, i32 0)
  %67 = lshr i32 %66, 12
  %68 = and i32 %66, -4096
  br label %69

69:                                               ; preds = %65, %61
  %70 = phi i32 [ %68, %65 ], [ %29, %61 ]
  %71 = phi i32 [ %67, %65 ], [ %20, %61 ]
  %72 = phi i32 [ %66, %65 ], [ %19, %61 ]
  %73 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %71, i32 0, i32 1048575, i32 0)
  %74 = and i32 %73, 1023
  %75 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %76 = zext i32 %74 to i64
  %77 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %75, i64 %76, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, -2048
  %80 = icmp eq i32 %70, %79
  br i1 %80, label %83, label %81

81:                                               ; preds = %69
  %82 = shl i32 %73, 12
  br label %120

83:                                               ; preds = %120, %69
  %84 = phi %struct.CPUTLBEntry* [ %75, %69 ], [ %121, %120 ]
  %85 = phi i32 [ %78, %69 ], [ %123, %120 ]
  %86 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %84, i64 %76
  %87 = and i32 %85, 4063
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %101, label %89

89:                                               ; preds = %83
  %90 = and i32 %72, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %89
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %23, i64 %76
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %86, %struct.CPUTLBEntry** %95, align 8
  tail call void @io_write_chkw_mmu(%struct.CPUX86State* nonnull %0, i64 %94, i16 zeroext %2, i32 %72, i8* %4)
  %96 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %143, label %99

99:                                               ; preds = %92
  %100 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %72, i64 %100, i32 2, i32 3, i64 0)
  br label %143

101:                                              ; preds = %83
  %102 = and i32 %72, 4095
  %103 = icmp eq i32 %102, 4095
  br i1 %103, label %104, label %109

104:                                              ; preds = %101, %89
  %105 = add i32 %72, 1
  %106 = lshr i16 %2, 8
  %107 = trunc i16 %106 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %105, i8 zeroext %107, i32 %6, i8* %4)
  %108 = trunc i16 %2 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %72, i8 zeroext %108, i32 %6, i8* %4)
  br label %143

109:                                              ; preds = %101
  %110 = zext i32 %72 to i64
  %111 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %84, i64 %76, i32 4
  %112 = load i64, i64* %111, align 8
  %113 = add i64 %112, %110
  %114 = inttoptr i64 %113 to i16*
  store i16 %2, i16* %114, align 2
  %115 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %143, label %118

118:                                              ; preds = %109
  %119 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %72, i64 %119, i32 2, i32 2, i64 0)
  br label %143

120:                                              ; preds = %120, %81
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %72, i32 %82, i32 1, i32 %6, i8* %4)
  %121 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %122 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %121, i64 %76, i32 1
  %123 = load i32, i32* %122, align 4
  %124 = and i32 %123, -2048
  %125 = icmp eq i32 %70, %124
  br i1 %125, label %83, label %120

126:                                              ; preds = %52
  %127 = zext i32 %19 to i64
  %128 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %35, i64 %26, i32 4
  %129 = load i64, i64* %128, align 8
  %130 = add i64 %129, %127
  %131 = inttoptr i64 %130 to i16*
  store i16 %2, i16* %131, align 2
  %132 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %143, label %135

135:                                              ; preds = %126
  %136 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %19, i64 %136, i32 2, i32 2, i64 0)
  br label %143

137:                                              ; preds = %32, %137
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %19, i32 %33, i32 1, i32 %6, i8* %4)
  %138 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %139 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %138, i64 %26, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = and i32 %140, -2048
  %142 = icmp eq i32 %29, %141
  br i1 %142, label %34, label %137, !prof !3, !misexpect !5

143:                                              ; preds = %118, %109, %104, %99, %92, %43, %126, %50, %135
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkw_mmu(%struct.CPUX86State* %0, i64 %1, i16 zeroext %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %7 = zext i32 %3 to i64
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %7, i32 0)
  %8 = ptrtoint i8* %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %8, i64* %9, align 16
  %10 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %6, i32 1)
  br i1 %10, label %11, label %16

11:                                               ; preds = %5
  %12 = and i64 %1, -4096
  %13 = add i64 %12, %7
  %14 = tail call i64 @se_notdirty_mem_write(i64 %13, i32 2)
  %15 = inttoptr i64 %14 to i16*
  store i16 %2, i16* %15, align 2
  br label %17

16:                                               ; preds = %5
  tail call void @io_writew_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i16 zeroext %2, i32 %3, i8* %4)
  br label %17

17:                                               ; preds = %11, %16
  %18 = zext i16 %2 to i64
  %19 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %7, i64 %18, i32 2, i32 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @slow_stb_mmu(%struct.CPUX86State* %0, i32 %1, i8 zeroext %2, i32 %3, i8* %4) unnamed_addr #3 {
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = zext i8 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %10, i32 1, i32 1)
  br label %11

11:                                               ; preds = %5, %9
  %12 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i32 [ %16, %15 ], [ %1, %11 ]
  %19 = lshr i32 %18, 12
  %20 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %19, i32 0, i32 1048575, i32 0)
  %21 = and i32 %20, 1023
  %22 = sext i32 %3 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %21 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %18, -4096
  %29 = and i32 %27, -2048
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %17
  %32 = shl i32 %20, 12
  br label %59

33:                                               ; preds = %59, %17
  %34 = phi %struct.CPUTLBEntry* [ %24, %17 ], [ %60, %59 ]
  %35 = phi i32 [ %27, %17 ], [ %62, %59 ]
  %36 = and i32 %35, 4063
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %25
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %22, i64 %25
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %39, %struct.CPUTLBEntry** %42, align 8
  tail call void @io_write_chkb_mmu(%struct.CPUX86State* nonnull %0, i64 %41, i8 zeroext %2, i32 %18, i8* %4)
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %65, label %46

46:                                               ; preds = %38
  %47 = zext i8 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %18, i64 %47, i32 1, i32 3, i64 0)
  br label %65

48:                                               ; preds = %33
  %49 = zext i32 %18 to i64
  %50 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %25, i32 4
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, %49
  %53 = inttoptr i64 %52 to i8*
  store i8 %2, i8* %53, align 1
  %54 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %48
  %58 = zext i8 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %18, i64 %58, i32 1, i32 2, i64 0)
  br label %65

59:                                               ; preds = %31, %59
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %18, i32 %32, i32 1, i32 %3, i8* %4)
  %60 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %61 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %60, i64 %25, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, -2048
  %64 = icmp eq i32 %28, %63
  br i1 %64, label %33, label %59

65:                                               ; preds = %38, %48, %46, %57
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkb_mmu(%struct.CPUX86State* %0, i64 %1, i8 zeroext %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %7 = zext i32 %3 to i64
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %7, i32 0)
  %8 = ptrtoint i8* %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %8, i64* %9, align 16
  %10 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %6, i32 1)
  br i1 %10, label %11, label %16

11:                                               ; preds = %5
  %12 = and i64 %1, -4096
  %13 = add i64 %12, %7
  %14 = tail call i64 @se_notdirty_mem_write(i64 %13, i32 1)
  %15 = inttoptr i64 %14 to i8*
  store i8 %2, i8* %15, align 1
  br label %17

16:                                               ; preds = %5
  tail call void @io_writeb_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i8 zeroext %2, i32 %3, i8* %4)
  br label %17

17:                                               ; preds = %11, %16
  %18 = zext i8 %2 to i64
  %19 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %7, i64 %18, i32 1, i32 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  ret void
}

declare i64 @se_notdirty_mem_write(i64, i32) local_unnamed_addr #9

declare void @io_writeb_mmu(%struct.CPUX86State*, i64, i8 zeroext, i32, i8*) local_unnamed_addr #9

declare void @io_writew_mmu(%struct.CPUX86State*, i64, i16 zeroext, i32, i8*) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_stl_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %11, i32 4, i32 1)
  br label %12

12:                                               ; preds = %5, %10
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i32 [ %17, %16 ], [ %1, %12 ]
  %20 = lshr i32 %19, 12
  %21 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %20, i32 0, i32 1048575, i32 0)
  %22 = and i32 %21, 1023
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %23
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %26 = zext i32 %22 to i64
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %26, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %19, -4096
  %30 = and i32 %28, -2048
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %34, label %32, !prof !3, !misexpect !5

32:                                               ; preds = %18
  %33 = shl i32 %21, 12
  br label %143

34:                                               ; preds = %143, %18
  %35 = phi %struct.CPUTLBEntry* [ %25, %18 ], [ %144, %143 ]
  %36 = phi i32 [ %28, %18 ], [ %146, %143 ]
  %37 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %35, i64 %26
  %38 = and i32 %36, 4063
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %52, label %40, !prof !3, !misexpect !4

40:                                               ; preds = %34
  %41 = and i32 %19, 3
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %23, i64 %26
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %37, %struct.CPUTLBEntry** %46, align 8
  tail call void @io_write_chkl_mmu(%struct.CPUX86State* nonnull %0, i64 %45, i32 %2, i32 %19, i8* %4)
  %47 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %149, label %50

50:                                               ; preds = %43
  %51 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %19, i64 %51, i32 4, i32 3, i64 0)
  br label %149

52:                                               ; preds = %34
  %53 = and i32 %19, 4095
  %54 = icmp ugt i32 %53, 4092
  br i1 %54, label %55, label %132, !prof !6, !misexpect !4

55:                                               ; preds = %40, %52
  %56 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %55
  %60 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %19, i64 %60, i32 4, i32 1)
  br label %61

61:                                               ; preds = %59, %55
  %62 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %19, i32 0, i32 -1, i32 0)
  %67 = lshr i32 %66, 12
  %68 = and i32 %66, -4096
  br label %69

69:                                               ; preds = %65, %61
  %70 = phi i32 [ %68, %65 ], [ %29, %61 ]
  %71 = phi i32 [ %67, %65 ], [ %20, %61 ]
  %72 = phi i32 [ %66, %65 ], [ %19, %61 ]
  %73 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %71, i32 0, i32 1048575, i32 0)
  %74 = and i32 %73, 1023
  %75 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %76 = zext i32 %74 to i64
  %77 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %75, i64 %76, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, -2048
  %80 = icmp eq i32 %70, %79
  br i1 %80, label %83, label %81

81:                                               ; preds = %69
  %82 = shl i32 %73, 12
  br label %126

83:                                               ; preds = %126, %69
  %84 = phi %struct.CPUTLBEntry* [ %75, %69 ], [ %127, %126 ]
  %85 = phi i32 [ %78, %69 ], [ %129, %126 ]
  %86 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %84, i64 %76
  %87 = and i32 %85, 4063
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %101, label %89

89:                                               ; preds = %83
  %90 = and i32 %72, 3
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %89
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %23, i64 %76
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %86, %struct.CPUTLBEntry** %95, align 8
  tail call void @io_write_chkl_mmu(%struct.CPUX86State* nonnull %0, i64 %94, i32 %2, i32 %72, i8* %4)
  %96 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %149, label %99

99:                                               ; preds = %92
  %100 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %72, i64 %100, i32 4, i32 3, i64 0)
  br label %149

101:                                              ; preds = %83
  %102 = and i32 %72, 4095
  %103 = icmp ugt i32 %102, 4092
  br i1 %103, label %104, label %115

104:                                              ; preds = %101, %89
  %105 = add i32 %72, 3
  %106 = lshr i32 %2, 24
  %107 = trunc i32 %106 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %105, i8 zeroext %107, i32 %6, i8* %4)
  %108 = add i32 %72, 2
  %109 = lshr i32 %2, 16
  %110 = trunc i32 %109 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %108, i8 zeroext %110, i32 %6, i8* %4)
  %111 = add i32 %72, 1
  %112 = lshr i32 %2, 8
  %113 = trunc i32 %112 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %111, i8 zeroext %113, i32 %6, i8* %4)
  %114 = trunc i32 %2 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %72, i8 zeroext %114, i32 %6, i8* %4)
  br label %149

115:                                              ; preds = %101
  %116 = zext i32 %72 to i64
  %117 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %84, i64 %76, i32 4
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %118, %116
  %120 = inttoptr i64 %119 to i32*
  store i32 %2, i32* %120, align 4
  %121 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %149, label %124

124:                                              ; preds = %115
  %125 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %72, i64 %125, i32 4, i32 2, i64 0)
  br label %149

126:                                              ; preds = %126, %81
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %72, i32 %82, i32 1, i32 %6, i8* %4)
  %127 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %128 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %127, i64 %76, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = and i32 %129, -2048
  %131 = icmp eq i32 %70, %130
  br i1 %131, label %83, label %126

132:                                              ; preds = %52
  %133 = zext i32 %19 to i64
  %134 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %35, i64 %26, i32 4
  %135 = load i64, i64* %134, align 8
  %136 = add i64 %135, %133
  %137 = inttoptr i64 %136 to i32*
  store i32 %2, i32* %137, align 4
  %138 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %149, label %141

141:                                              ; preds = %132
  %142 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %19, i64 %142, i32 4, i32 2, i64 0)
  br label %149

143:                                              ; preds = %32, %143
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %19, i32 %33, i32 1, i32 %6, i8* %4)
  %144 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %145 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %144, i64 %26, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = and i32 %146, -2048
  %148 = icmp eq i32 %29, %147
  br i1 %148, label %34, label %143, !prof !3, !misexpect !5

149:                                              ; preds = %124, %115, %104, %99, %92, %43, %132, %50, %141
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkl_mmu(%struct.CPUX86State* %0, i64 %1, i32 %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %7 = zext i32 %3 to i64
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %7, i32 0)
  %8 = ptrtoint i8* %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %8, i64* %9, align 16
  %10 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %6, i32 1)
  br i1 %10, label %11, label %16

11:                                               ; preds = %5
  %12 = and i64 %1, -4096
  %13 = add i64 %12, %7
  %14 = tail call i64 @se_notdirty_mem_write(i64 %13, i32 4)
  %15 = inttoptr i64 %14 to i32*
  store i32 %2, i32* %15, align 4
  br label %17

16:                                               ; preds = %5
  tail call void @io_writel_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i32 %2, i32 %3, i8* %4)
  br label %17

17:                                               ; preds = %11, %16
  %18 = zext i32 %2 to i64
  %19 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %7, i64 %18, i32 4, i32 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  ret void
}

declare void @io_writel_mmu(%struct.CPUX86State*, i64, i32, i32, i8*) local_unnamed_addr #9

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldub_kernel(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = zext i32 %17 to i64
  %21 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %20, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, -33
  %24 = and i32 %14, -4096
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %29, label %26, !prof !3, !misexpect !4

26:                                               ; preds = %13
  %27 = tail call zeroext i8 @helper_ldb_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 0, i8* null)
  %28 = zext i8 %27 to i32
  br label %42

29:                                               ; preds = %13
  %30 = zext i32 %14 to i64
  %31 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %20, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %29
  %41 = zext i8 %35 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %41, i32 4, i32 0, i64 0)
  br label %42

42:                                               ; preds = %29, %40, %26
  %43 = phi i32 [ %28, %26 ], [ %36, %40 ], [ %36, %29 ]
  ret i32 %43
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stb_kernel(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %8, i32 4, i32 1)
  br label %9

9:                                                ; preds = %3, %7
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 0
  %21 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %20, align 8
  %22 = zext i32 %19 to i64
  %23 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %22, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, -33
  %26 = and i32 %16, -4096
  %27 = icmp eq i32 %25, %26
  br i1 %27, label %30, label %28, !prof !3, !misexpect !4

28:                                               ; preds = %15
  %29 = trunc i32 %2 to i8
  tail call void @helper_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %16, i8 zeroext %29, i32 0, i8* null)
  br label %42

30:                                               ; preds = %15
  %31 = zext i32 %16 to i64
  %32 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %22, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, %31
  %35 = inttoptr i64 %34 to i8*
  %36 = trunc i32 %2 to i8
  store i8 %36, i8* %35, align 1
  %37 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %30
  %41 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %41, i32 4, i32 2, i64 0)
  br label %42

42:                                               ; preds = %30, %40, %28
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @tss_load_seg(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = and i32 %2, 65532
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %140, label %6

6:                                                ; preds = %3
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 25
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 27
  %12 = select i1 %8, %struct.SegmentCache* %11, %struct.SegmentCache* %10
  %13 = or i32 %2, 7
  %14 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %12, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %6
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %0, i32 10, i32 %4, i64 0)
  unreachable

18:                                               ; preds = %6
  %19 = and i32 %2, -8
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %12, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %19
  %23 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %9, i32 %22)
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = add i32 %22, 4
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %24, i32 %25)
  %27 = and i32 %26, 4096
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %18
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %0, i32 10, i32 %4, i64 0)
  unreachable

30:                                               ; preds = %18
  %31 = and i32 %2, 3
  %32 = lshr i32 %26, 13
  %33 = and i32 %32, 3
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 3
  %37 = icmp eq i32 %1, 1
  br i1 %37, label %38, label %45

38:                                               ; preds = %30
  %39 = and i32 %26, 2048
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %4, i64 0)
  unreachable

42:                                               ; preds = %38
  %43 = icmp eq i32 %33, %31
  br i1 %43, label %67, label %44

44:                                               ; preds = %42
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %4, i64 0)
  unreachable

45:                                               ; preds = %30
  %46 = icmp eq i32 %1, 2
  %47 = and i32 %26, 2560
  br i1 %46, label %48, label %56

48:                                               ; preds = %45
  %49 = icmp eq i32 %47, 512
  br i1 %49, label %51, label %50

50:                                               ; preds = %48
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %4, i64 0)
  unreachable

51:                                               ; preds = %48
  %52 = icmp eq i32 %33, %36
  %53 = icmp eq i32 %33, %31
  %54 = and i1 %53, %52
  br i1 %54, label %67, label %55

55:                                               ; preds = %51
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %4, i64 0)
  unreachable

56:                                               ; preds = %45
  %57 = icmp eq i32 %47, 2048
  br i1 %57, label %58, label %59

58:                                               ; preds = %56
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %4, i64 0)
  unreachable

59:                                               ; preds = %56
  %60 = and i32 %26, 3072
  %61 = icmp eq i32 %60, 3072
  br i1 %61, label %67, label %62

62:                                               ; preds = %59
  %63 = icmp ult i32 %33, %36
  %64 = icmp ult i32 %33, %31
  %65 = or i1 %64, %63
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 10, i32 %4, i64 0)
  unreachable

67:                                               ; preds = %42, %62, %51, %59
  %68 = trunc i32 %26 to i16
  %69 = icmp slt i16 %68, 0
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 11, i32 %4, i64 0)
  unreachable

71:                                               ; preds = %67
  %72 = lshr i32 %23, 16
  %73 = shl i32 %26, 16
  %74 = and i32 %73, 16711680
  %75 = and i32 %26, -16777216
  %76 = or i32 %75, %72
  %77 = or i32 %76, %74
  %78 = and i32 %23, 65535
  %79 = and i32 %26, 983040
  %80 = or i32 %79, %78
  %81 = and i32 %26, 8388608
  %82 = icmp eq i32 %81, 0
  %83 = shl nuw i32 %80, 12
  %84 = or i32 %83, 4095
  %85 = select i1 %82, i32 %80, i32 %84
  %86 = sext i32 %1 to i64
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 0
  store i32 %2, i32* %87, align 4
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 1
  store i32 %77, i32* %88, align 4
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 2
  store i32 %85, i32* %89, align 4
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 3
  store i32 %26, i32* %90, align 4
  br i1 %37, label %93, label %91

91:                                               ; preds = %71
  %92 = load i32, i32* %34, align 4
  br label %101

93:                                               ; preds = %71
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = lshr i32 %95, 18
  %97 = and i32 %96, 16
  %98 = load i32, i32* %34, align 4
  %99 = and i32 %98, -32785
  %100 = or i32 %99, %97
  store i32 %100, i32* %34, align 4
  br label %101

101:                                              ; preds = %93, %91
  %102 = phi i32 [ %92, %91 ], [ %100, %93 ]
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 17
  %106 = and i32 %105, 32
  %107 = trunc i32 %102 to i16
  %108 = icmp slt i16 %107, 0
  br i1 %108, label %136, label %109

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %111 = load i32, i32* %110, align 16
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %122, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %116 = load i32, i32* %115, align 16
  %117 = and i32 %116, 131072
  %118 = icmp ne i32 %117, 0
  %119 = and i32 %102, 16
  %120 = icmp eq i32 %119, 0
  %121 = or i1 %120, %118
  br i1 %121, label %122, label %124

122:                                              ; preds = %114, %109
  %123 = or i32 %106, 64
  br label %136

124:                                              ; preds = %114
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = or i32 %128, %126
  %130 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = or i32 %129, %131
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, i32 0, i32 64
  %135 = or i32 %134, %106
  br label %136

136:                                              ; preds = %101, %122, %124
  %137 = phi i32 [ %106, %101 ], [ %123, %122 ], [ %135, %124 ]
  %138 = and i32 %102, -97
  %139 = or i32 %137, %138
  store i32 %139, i32* %34, align 4
  br label %144

140:                                              ; preds = %3
  %141 = add i32 %1, -1
  %142 = icmp ult i32 %141, 2
  br i1 %142, label %143, label %144

143:                                              ; preds = %140
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %0, i32 10, i32 0, i64 0)
  unreachable

144:                                              ; preds = %140, %136
  ret void
}

declare void @hw_breakpoint_remove(%struct.CPUX86State*, i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_stb_mmu(%struct.CPUX86State* %0, i32 %1, i8 zeroext %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = zext i8 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %11, i32 1, i32 1)
  br label %12

12:                                               ; preds = %5, %10
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i32 [ %17, %16 ], [ %1, %12 ]
  %20 = lshr i32 %19, 12
  %21 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %20, i32 0, i32 1048575, i32 0)
  %22 = and i32 %21, 1023
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %23
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %26 = zext i32 %22 to i64
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %26, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %19, -4096
  %30 = and i32 %28, -2048
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %34, label %32, !prof !3, !misexpect !5

32:                                               ; preds = %18
  %33 = shl i32 %21, 12
  br label %60

34:                                               ; preds = %60, %18
  %35 = phi %struct.CPUTLBEntry* [ %25, %18 ], [ %61, %60 ]
  %36 = phi i32 [ %28, %18 ], [ %63, %60 ]
  %37 = and i32 %36, 4063
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39, !prof !3, !misexpect !4

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %35, i64 %26
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %23, i64 %26
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %40, %struct.CPUTLBEntry** %43, align 8
  tail call void @io_write_chkb_mmu(%struct.CPUX86State* nonnull %0, i64 %42, i8 zeroext %2, i32 %19, i8* %4)
  %44 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %66, label %47

47:                                               ; preds = %39
  %48 = zext i8 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %19, i64 %48, i32 1, i32 3, i64 0)
  br label %66

49:                                               ; preds = %34
  %50 = zext i32 %19 to i64
  %51 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %35, i64 %26, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, %50
  %54 = inttoptr i64 %53 to i8*
  store i8 %2, i8* %54, align 1
  %55 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %49
  %59 = zext i8 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %19, i64 %59, i32 1, i32 2, i64 0)
  br label %66

60:                                               ; preds = %32, %60
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %19, i32 %33, i32 1, i32 %6, i8* %4)
  %61 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %62 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %61, i64 %26, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = and i32 %63, -2048
  %65 = icmp eq i32 %29, %64
  br i1 %65, label %34, label %60, !prof !3, !misexpect !5

66:                                               ; preds = %39, %49, %47, %58
  ret void
}

; Function Attrs: uwtable
define zeroext i8 @helper_ldb_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %10

10:                                               ; preds = %4, %9
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i32 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i32 %17, 12
  %19 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %18, i32 0, i32 1048575, i32 0)
  %20 = and i32 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %21
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %24 = zext i32 %20 to i64
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %24
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %17, -4096
  %29 = and i32 %27, -2048
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %33, label %31, !prof !3, !misexpect !5

31:                                               ; preds = %16
  %32 = shl i32 %19, 12
  br label %61

33:                                               ; preds = %61, %16
  %34 = phi %struct.CPUTLBEntry* [ %23, %16 ], [ %62, %61 ]
  %35 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %63, %61 ]
  %36 = phi i32 [ %27, %16 ], [ %65, %61 ]
  %37 = and i32 %36, 4063
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39, !prof !3, !misexpect !4

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %21, i64 %24
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %42, align 8
  %43 = tail call zeroext i8 @io_read_chkb_mmu(%struct.CPUX86State* nonnull %0, i64 %41, i32 %17, i8* %3)
  %44 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %68, label %47

47:                                               ; preds = %39
  %48 = zext i8 %43 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %48, i32 1, i32 1, i64 0)
  br label %68

49:                                               ; preds = %33
  %50 = zext i32 %17 to i64
  %51 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %24, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, %50
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54, align 1
  %56 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %68, label %59

59:                                               ; preds = %49
  %60 = zext i8 %55 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %60, i32 1, i32 0, i64 0)
  br label %68

61:                                               ; preds = %31, %61
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %17, i32 %32, i32 0, i32 %5, i8* %3)
  %62 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %63 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %62, i64 %24
  %64 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %63, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, -2048
  %67 = icmp eq i32 %28, %66
  br i1 %67, label %33, label %61, !prof !3, !misexpect !5

68:                                               ; preds = %39, %49, %47, %59
  %69 = phi i8 [ %43, %47 ], [ %43, %39 ], [ %55, %59 ], [ %55, %49 ]
  ret i8 %69
}

; Function Attrs: uwtable
define zeroext i8 @io_read_chkb_mmu(%struct.CPUX86State* %0, i64 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = alloca i8, align 1
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %7 = zext i32 %2 to i64
  %8 = ptrtoint i8* %3 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %8, i64* %9, align 16
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %7, i32 0)
  %10 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %6, i32 0)
  br i1 %10, label %11, label %19

11:                                               ; preds = %4
  %12 = trunc i64 %1 to i32
  %13 = and i32 %12, -4096
  %14 = add i32 %13, %2
  %15 = zext i32 %14 to i64
  %16 = tail call i64 @se_notdirty_mem_read(i64 %15)
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17, align 1
  store volatile i8 %18, i8* %5, align 1
  br label %21

19:                                               ; preds = %4
  %20 = tail call zeroext i8 @io_readb_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i32 %2, i8* %3)
  store volatile i8 %20, i8* %5, align 1
  br label %21

21:                                               ; preds = %11, %19
  %22 = load volatile i8, i8* %5, align 1
  %23 = zext i8 %22 to i64
  %24 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %7, i64 %23, i32 1, i32 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  %25 = load volatile i8, i8* %5, align 1
  ret i8 %25
}

declare zeroext i8 @io_readb_mmu(%struct.CPUX86State*, i64, i32, i8*) local_unnamed_addr #9

; Function Attrs: uwtable
define i32 @helper_ldl_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %10

10:                                               ; preds = %4, %9
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i32 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i32 %17, 12
  %19 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %18, i32 0, i32 1048575, i32 0)
  %20 = and i32 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %21
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %24 = zext i32 %20 to i64
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %24
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %17, -4096
  %29 = and i32 %27, -2048
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %33, label %31, !prof !3, !misexpect !5

31:                                               ; preds = %16
  %32 = shl i32 %19, 12
  br label %69

33:                                               ; preds = %69, %16
  %34 = phi %struct.CPUTLBEntry* [ %23, %16 ], [ %70, %69 ]
  %35 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %71, %69 ]
  %36 = phi i32 [ %27, %16 ], [ %73, %69 ]
  %37 = and i32 %36, 4063
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %52, label %39, !prof !3, !misexpect !4

39:                                               ; preds = %33
  %40 = and i32 %17, 3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %55

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %21, i64 %24
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %45, align 8
  %46 = tail call i32 @io_read_chkl_mmu(%struct.CPUX86State* nonnull %0, i64 %44, i32 %17, i8* %3)
  %47 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %76, label %50

50:                                               ; preds = %42
  %51 = zext i32 %46 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %51, i32 4, i32 1, i64 0)
  br label %76

52:                                               ; preds = %33
  %53 = and i32 %17, 4095
  %54 = icmp ugt i32 %53, 4092
  br i1 %54, label %55, label %57, !prof !6, !misexpect !4

55:                                               ; preds = %39, %52
  %56 = tail call fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* nonnull %0, i32 %17, i32 %5, i8* %3)
  br label %76

57:                                               ; preds = %52
  %58 = zext i32 %17 to i64
  %59 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %24, i32 4
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, %58
  %62 = inttoptr i64 %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %76, label %67

67:                                               ; preds = %57
  %68 = zext i32 %63 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %68, i32 4, i32 0, i64 0)
  br label %76

69:                                               ; preds = %31, %69
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %17, i32 %32, i32 0, i32 %5, i8* %3)
  %70 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %71 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %70, i64 %24
  %72 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %71, i64 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = and i32 %73, -2048
  %75 = icmp eq i32 %28, %74
  br i1 %75, label %33, label %69, !prof !3, !misexpect !5

76:                                               ; preds = %42, %57, %50, %67, %55
  %77 = phi i32 [ %56, %55 ], [ %46, %50 ], [ %46, %42 ], [ %63, %67 ], [ %63, %57 ]
  ret i32 %77
}

; Function Attrs: uwtable
define i32 @io_read_chkl_mmu(%struct.CPUX86State* %0, i64 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %8 = zext i32 %2 to i64
  %9 = ptrtoint i8* %3 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %9, i64* %10, align 16
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %8, i32 0)
  %11 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %7, i32 0)
  br i1 %11, label %12, label %20

12:                                               ; preds = %4
  %13 = trunc i64 %1 to i32
  %14 = and i32 %13, -4096
  %15 = add i32 %14, %2
  %16 = zext i32 %15 to i64
  %17 = tail call i64 @se_notdirty_mem_read(i64 %16)
  %18 = inttoptr i64 %17 to i32*
  %19 = load i32, i32* %18, align 4
  store volatile i32 %19, i32* %5, align 4
  br label %22

20:                                               ; preds = %4
  %21 = tail call i32 @io_readl_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i32 %2, i8* %3)
  store volatile i32 %21, i32* %5, align 4
  br label %22

22:                                               ; preds = %12, %20
  %23 = load volatile i32, i32* %5, align 4
  %24 = zext i32 %23 to i64
  %25 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %8, i64 %24, i32 4, i32 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  %26 = load volatile i32, i32* %5, align 4
  ret i32 %26
}

; Function Attrs: uwtable
define internal fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) unnamed_addr #3 {
  %5 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %9

9:                                                ; preds = %4, %8
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %20
  %22 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %23 = zext i32 %19 to i64
  %24 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %22, i64 %23
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %16, -4096
  %28 = and i32 %26, -2048
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %15
  %31 = shl i32 %18, 12
  br label %77

32:                                               ; preds = %77, %15
  %33 = phi %struct.CPUTLBEntry* [ %22, %15 ], [ %78, %77 ]
  %34 = phi %struct.CPUTLBEntry* [ %24, %15 ], [ %79, %77 ]
  %35 = phi i32 [ %26, %15 ], [ %81, %77 ]
  %36 = and i32 %35, 4063
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %32
  %39 = and i32 %16, 3
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %20, i64 %23
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %44, align 8
  %45 = tail call i32 @io_read_chkl_mmu(%struct.CPUX86State* nonnull %0, i64 %43, i32 %16, i8* %3)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %84, label %49

49:                                               ; preds = %41
  %50 = zext i32 %45 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %50, i32 4, i32 1, i64 0)
  br label %84

51:                                               ; preds = %32
  %52 = and i32 %16, 4095
  %53 = icmp ugt i32 %52, 4092
  br i1 %53, label %54, label %65

54:                                               ; preds = %38, %51
  %55 = and i32 %16, -4
  %56 = add i32 %55, 4
  %57 = tail call fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* nonnull %0, i32 %55, i32 %2, i8* %3)
  %58 = tail call fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* nonnull %0, i32 %56, i32 %2, i8* %3)
  %59 = shl i32 %16, 3
  %60 = and i32 %59, 24
  %61 = lshr i32 %57, %60
  %62 = sub nuw nsw i32 32, %60
  %63 = shl i32 %58, %62
  %64 = or i32 %63, %61
  ret i32 %64

65:                                               ; preds = %51
  %66 = zext i32 %16 to i64
  %67 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %23, i32 4
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, %66
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %84, label %75

75:                                               ; preds = %65
  %76 = zext i32 %71 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %76, i32 4, i32 0, i64 0)
  br label %84

77:                                               ; preds = %30, %77
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %16, i32 %31, i32 0, i32 %2, i8* %3)
  %78 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %79 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %78, i64 %23
  %80 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = and i32 %81, -2048
  %83 = icmp eq i32 %27, %82
  br i1 %83, label %32, label %77

84:                                               ; preds = %41, %65, %49, %75
  %85 = phi i32 [ %45, %49 ], [ %45, %41 ], [ %71, %75 ], [ %71, %65 ]
  ret i32 %85
}

declare i32 @io_readl_mmu(%struct.CPUX86State*, i64, i32, i8*) local_unnamed_addr #9

; Function Attrs: uwtable
define void @do_interrupt(%struct.CPUX86State* nocapture %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 95
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 59
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 58
  %7 = load i32, i32* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 60
  %9 = load i32, i32* %8, align 8
  %10 = load void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i64, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 2, i32 9), align 8
  %11 = zext i32 %9 to i64
  tail call void %10(i32 %3, i32 %5, i32 %7, i64 %11, i32 0)
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 64
  store i32 -1, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @do_interrupt_x86_hardirq(%struct.CPUX86State* nocapture readnone %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = load void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i64, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 2, i32 9), align 8
  tail call void %4(i32 %1, i32 0, i32 0, i64 0, i32 %2)
  ret void
}

; Function Attrs: noreturn uwtable
define void @raise_interrupt(%struct.CPUX86State* %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 0) #21
  unreachable
}

; Function Attrs: noreturn uwtable
define void @raise_exception(%struct.CPUX86State* %0, i32 %1) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* %0, i32 %1, i32 0, i32 0, i32 0, i64 0) #21
  unreachable
}

; Function Attrs: noreturn uwtable
define void @raise_exception_ra(%struct.CPUX86State* %0, i32 %1, i64 %2) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* %0, i32 %1, i32 0, i32 0, i32 0, i64 %2) #21
  unreachable
}

; Function Attrs: uwtable
define void @do_smm_enter(%struct.CPUX86State* %0) local_unnamed_addr #3 {
  store %struct.CPUX86State* %0, %struct.CPUX86State** @env, align 8
  %2 = load i32, i32* @loglevel, align 4
  %3 = and i32 %2, 16
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %6)
  %8 = load i32, i32* @loglevel, align 4
  %9 = and i32 %8, 16
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %5
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  tail call void @cpu_dump_state(%struct.CPUX86State* %12, %struct._IO_FILE* %13, i32 (%struct._IO_FILE*, i8*, ...)* nonnull @fprintf, i32 16)
  br label %14

14:                                               ; preds = %1, %5, %11
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 21
  %17 = load i32, i32* %16, align 4
  %18 = or i32 %17, 524288
  store i32 %18, i32* %16, align 4
  tail call fastcc void @cpu_smm_update()
  unreachable
}

declare void @cpu_dump_state(%struct.CPUX86State*, %struct._IO_FILE*, i32 (%struct._IO_FILE*, i8*, ...)*, i32) local_unnamed_addr #9

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @cpu_smm_update() unnamed_addr #12 {
  tail call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.19, i64 0, i64 0), i32 1657, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__PRETTY_FU
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #7

; Function Attrs: uwtable
define void @helper_rsm() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 63
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 65532
  %5 = zext i32 %4 to i64
  %6 = tail call i32 @ldl_phys(i64 %5)
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %1, i32 %6)
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = add i32 %3, 65528
  %9 = zext i32 %8 to i64
  %10 = tail call i32 @ldl_phys(i64 %9)
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %7, i32 %10)
  %11 = add i32 %3, 65524
  %12 = zext i32 %11 to i64
  %13 = tail call i32 @ldl_phys(i64 %12)
  %14 = and i32 %13, 2261
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i32 %14, i32* %16, align 4
  %17 = and i32 %13, 1024
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 1, i32 -1
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 19
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 20
  %22 = load i32, i32* %21, align 16
  %23 = and i32 %22, 3285
  %24 = and i32 %13, -3286
  %25 = or i32 %23, %24
  store i32 %25, i32* %21, align 16
  %26 = add i32 %3, 65520
  %27 = zext i32 %26 to i64
  %28 = tail call i32 @ldl_phys(i64 %27)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 18
  store i32 %28, i32* %30, align 8
  %31 = add i32 %3, 65516
  %32 = zext i32 %31 to i64
  %33 = tail call i32 @ldl_phys(i64 %32)
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 0, i64 7
  store i32 %33, i32* %35, align 4
  %36 = add i32 %3, 65512
  %37 = zext i32 %36 to i64
  %38 = tail call i32 @ldl_phys(i64 %37)
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 0, i64 6
  store i32 %38, i32* %40, align 8
  %41 = add i32 %3, 65508
  %42 = zext i32 %41 to i64
  %43 = tail call i32 @ldl_phys(i64 %42)
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 0, i64 5
  store i32 %43, i32* %45, align 4
  %46 = add i32 %3, 65504
  %47 = zext i32 %46 to i64
  %48 = tail call i32 @ldl_phys(i64 %47)
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %49, i64 0, i32 0, i64 4
  store i32 %48, i32* %50, align 16
  %51 = add i32 %3, 65500
  %52 = zext i32 %51 to i64
  %53 = tail call i32 @ldl_phys(i64 %52)
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 0, i64 3
  store i32 %53, i32* %55, align 4
  %56 = add i32 %3, 65496
  %57 = zext i32 %56 to i64
  %58 = tail call i32 @ldl_phys(i64 %57)
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %59, i64 0, i32 0, i64 2
  store i32 %58, i32* %60, align 8
  %61 = add i32 %3, 65492
  %62 = zext i32 %61 to i64
  %63 = tail call i32 @ldl_phys(i64 %62)
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 0, i64 1
  store i32 %63, i32* %65, align 4
  %66 = add i32 %3, 65488
  %67 = zext i32 %66 to i64
  %68 = tail call i32 @ldl_phys(i64 %67)
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %69, i64 0, i32 0, i64 0
  store i32 %68, i32* %70, align 16
  %71 = add i32 %3, 65484
  %72 = zext i32 %71 to i64
  %73 = tail call i32 @ldl_phys(i64 %72)
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 61, i64 6
  store i32 %73, i32* %75, align 4
  %76 = add i32 %3, 65480
  %77 = zext i32 %76 to i64
  %78 = tail call i32 @ldl_phys(i64 %77)
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %79, i64 0, i32 61, i64 7
  store i32 %78, i32* %80, align 4
  %81 = add i32 %3, 65476
  %82 = zext i32 %81 to i64
  %83 = tail call i32 @ldl_phys(i64 %82)
  %84 = and i32 %83, 65535
  %85 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 26, i32 0
  store i32 %84, i32* %86, align 16
  %87 = add i32 %3, 65380
  %88 = zext i32 %87 to i64
  %89 = tail call i32 @ldl_phys(i64 %88)
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 26, i32 1
  store i32 %89, i32* %91, align 4
  %92 = add i32 %3, 65376
  %93 = zext i32 %92 to i64
  %94 = tail call i32 @ldl_phys(i64 %93)
  %95 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 26, i32 2
  store i32 %94, i32* %96, align 8
  %97 = add i32 %3, 65372
  %98 = zext i32 %97 to i64
  %99 = tail call i32 @ldl_phys(i64 %98)
  %100 = shl i32 %99, 8
  %101 = and i32 %100, 15793920
  %102 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 26, i32 3
  store i32 %101, i32* %103, align 4
  %104 = add i32 %3, 65472
  %105 = zext i32 %104 to i64
  %106 = tail call i32 @ldl_phys(i64 %105)
  %107 = and i32 %106, 65535
  %108 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %108, i64 0, i32 25, i32 0
  store i32 %107, i32* %109, align 16
  %110 = add i32 %3, 65408
  %111 = zext i32 %110 to i64
  %112 = tail call i32 @ldl_phys(i64 %111)
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 25, i32 1
  store i32 %112, i32* %114, align 4
  %115 = add i32 %3, 65404
  %116 = zext i32 %115 to i64
  %117 = tail call i32 @ldl_phys(i64 %116)
  %118 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %118, i64 0, i32 25, i32 2
  store i32 %117, i32* %119, align 8
  %120 = add i32 %3, 65400
  %121 = zext i32 %120 to i64
  %122 = tail call i32 @ldl_phys(i64 %121)
  %123 = shl i32 %122, 8
  %124 = and i32 %123, 15793920
  %125 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %125, i64 0, i32 25, i32 3
  store i32 %124, i32* %126, align 4
  %127 = add i32 %3, 65396
  %128 = zext i32 %127 to i64
  %129 = tail call i32 @ldl_phys(i64 %128)
  %130 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %130, i64 0, i32 27, i32 1
  store i32 %129, i32* %131, align 4
  %132 = add i32 %3, 65392
  %133 = zext i32 %132 to i64
  %134 = tail call i32 @ldl_phys(i64 %133)
  %135 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %136 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %135, i64 0, i32 27, i32 2
  store i32 %134, i32* %136, align 8
  %137 = add i32 %3, 65368
  %138 = zext i32 %137 to i64
  %139 = tail call i32 @ldl_phys(i64 %138)
  %140 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %141 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %140, i64 0, i32 28, i32 1
  store i32 %139, i32* %141, align 4
  %142 = add i32 %3, 65364
  %143 = zext i32 %142 to i64
  %144 = tail call i32 @ldl_phys(i64 %143)
  %145 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 28, i32 2
  store i32 %144, i32* %146, align 8
  %147 = add i32 %3, 65448
  %148 = add i32 %3, 32768
  %149 = zext i32 %147 to i64
  %150 = tail call i32 @ldl_phys(i64 %149)
  %151 = and i32 %150, 65535
  %152 = add i32 %3, 65412
  %153 = add i32 %3, 65420
  %154 = zext i32 %153 to i64
  %155 = tail call i32 @ldl_phys(i64 %154)
  %156 = add i32 %3, 65416
  %157 = zext i32 %156 to i64
  %158 = tail call i32 @ldl_phys(i64 %157)
  %159 = zext i32 %152 to i64
  %160 = tail call i32 @ldl_phys(i64 %159)
  %161 = shl i32 %160, 8
  %162 = and i32 %161, 15793920
  %163 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 0, i32 0
  store i32 %151, i32* %163, align 4
  %164 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 0, i32 1
  store i32 %155, i32* %164, align 4
  %165 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 0, i32 2
  store i32 %158, i32* %165, align 4
  %166 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 0, i32 3
  store i32 %162, i32* %166, align 4
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 21
  %168 = load i32, i32* %167, align 4
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 2, i32 3
  %170 = load i32, i32* %169, align 4
  %171 = lshr i32 %170, 17
  %172 = and i32 %171, 32
  %173 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 21
  %174 = trunc i32 %168 to i16
  %175 = icmp slt i16 %174, 0
  br i1 %175, label %203, label %176

176:                                              ; preds = %0
  %177 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 29, i64 0
  %178 = load i32, i32* %177, align 16
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %201, label %181

181:                                              ; preds = %176
  %182 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 20
  %183 = load i32, i32* %182, align 16
  %184 = and i32 %183, 131072
  %185 = icmp ne i32 %184, 0
  %186 = and i32 %168, 16
  %187 = icmp eq i32 %186, 0
  %188 = or i1 %187, %185
  br i1 %188, label %201, label %189

189:                                              ; preds = %181
  %190 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 3, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 0, i32 1
  %193 = load i32, i32* %192, align 4
  %194 = or i32 %193, %191
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 24, i64 2, i32 1
  %196 = load i32, i32* %195, align 4
  %197 = or i32 %194, %196
  %198 = icmp eq i32 %197, 0
  %199 = select i1 %198, i32 0, i32 64
  %200 = or i32 %199, %172
  br label %203

201:                                              ; preds = %181, %176
  %202 = or i32 %172, 64
  br label %203

203:                                              ; preds = %201, %189, %0
  %204 = phi i32 [ %172, %0 ], [ %202, %201 ], [ %200, %189 ]
  %205 = and i32 %168, -97
  %206 = or i32 %204, %205
  store i32 %206, i32* %173, align 4
  %207 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %208 = add i32 %3, 65452
  %209 = zext i32 %208 to i64
  %210 = tail call i32 @ldl_phys(i64 %209)
  %211 = and i32 %210, 65535
  %212 = add i32 %3, 65424
  %213 = add i32 %3, 65432
  %214 = zext i32 %213 to i64
  %215 = tail call i32 @ldl_phys(i64 %214)
  %216 = add i32 %3, 65428
  %217 = zext i32 %216 to i64
  %218 = tail call i32 @ldl_phys(i64 %217)
  %219 = zext i32 %212 to i64
  %220 = tail call i32 @ldl_phys(i64 %219)
  %221 = shl i32 %220, 8
  %222 = and i32 %221, 15793920
  %223 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 1, i32 0
  store i32 %211, i32* %223, align 4
  %224 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 1, i32 1
  store i32 %215, i32* %224, align 4
  %225 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 1, i32 2
  store i32 %218, i32* %225, align 4
  %226 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 1, i32 3
  store i32 %222, i32* %226, align 4
  %227 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 1, i32 3
  %228 = load i32, i32* %227, align 4
  %229 = lshr i32 %228, 18
  %230 = and i32 %229, 16
  %231 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 21
  %232 = load i32, i32* %231, align 4
  %233 = and i32 %232, -32785
  %234 = or i32 %233, %230
  store i32 %234, i32* %231, align 4
  %235 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 2, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = lshr i32 %236, 17
  %238 = and i32 %237, 32
  %239 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 21
  %240 = trunc i32 %234 to i16
  %241 = icmp slt i16 %240, 0
  br i1 %241, label %269, label %242

242:                                              ; preds = %203
  %243 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 29, i64 0
  %244 = load i32, i32* %243, align 16
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %267, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 20
  %249 = load i32, i32* %248, align 16
  %250 = and i32 %249, 131072
  %251 = icmp ne i32 %250, 0
  %252 = and i32 %234, 16
  %253 = icmp eq i32 %252, 0
  %254 = or i1 %253, %251
  br i1 %254, label %267, label %255

255:                                              ; preds = %247
  %256 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 3, i32 1
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 0, i32 1
  %259 = load i32, i32* %258, align 4
  %260 = or i32 %259, %257
  %261 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 24, i64 2, i32 1
  %262 = load i32, i32* %261, align 4
  %263 = or i32 %260, %262
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i32 0, i32 64
  %266 = or i32 %265, %238
  br label %269

267:                                              ; preds = %247, %242
  %268 = or i32 %238, 64
  br label %269

269:                                              ; preds = %267, %255, %203
  %270 = phi i32 [ %238, %203 ], [ %268, %267 ], [ %266, %255 ]
  %271 = and i32 %234, -97
  %272 = or i32 %270, %271
  store i32 %272, i32* %239, align 4
  %273 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %274

274:                                              ; preds = %339, %269
  %275 = phi %struct.CPUX86State* [ %273, %269 ], [ %345, %339 ]
  %276 = phi i64 [ 2, %269 ], [ %343, %339 ]
  %277 = icmp ult i64 %276, 3
  %278 = select i1 %277, i32 32644, i32 32520
  %279 = trunc i64 %276 to i32
  %280 = shl i32 %279, 2
  %281 = add i32 %147, %280
  %282 = zext i32 %281 to i64
  %283 = tail call i32 @ldl_phys(i64 %282)
  %284 = and i32 %283, 65535
  %285 = trunc i64 %276 to i32
  %286 = mul nuw nsw i32 %285, 12
  %287 = add i32 %148, %286
  %288 = add i32 %287, %278
  %289 = add i32 %288, 8
  %290 = zext i32 %289 to i64
  %291 = tail call i32 @ldl_phys(i64 %290)
  %292 = add i32 %288, 4
  %293 = zext i32 %292 to i64
  %294 = tail call i32 @ldl_phys(i64 %293)
  %295 = zext i32 %288 to i64
  %296 = tail call i32 @ldl_phys(i64 %295)
  %297 = shl i32 %296, 8
  %298 = and i32 %297, 15793920
  %299 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 %276, i32 0
  store i32 %284, i32* %299, align 4
  %300 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 %276, i32 1
  store i32 %291, i32* %300, align 4
  %301 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 %276, i32 2
  store i32 %294, i32* %301, align 4
  %302 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 %276, i32 3
  store i32 %298, i32* %302, align 4
  %303 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 21
  %304 = load i32, i32* %303, align 4
  %305 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 2, i32 3
  %306 = load i32, i32* %305, align 4
  %307 = lshr i32 %306, 17
  %308 = and i32 %307, 32
  %309 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 21
  %310 = trunc i32 %304 to i16
  %311 = icmp slt i16 %310, 0
  br i1 %311, label %339, label %312

312:                                              ; preds = %274
  %313 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 29, i64 0
  %314 = load i32, i32* %313, align 16
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %325, label %317

317:                                              ; preds = %312
  %318 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 20
  %319 = load i32, i32* %318, align 16
  %320 = and i32 %319, 131072
  %321 = icmp ne i32 %320, 0
  %322 = and i32 %304, 16
  %323 = icmp eq i32 %322, 0
  %324 = or i1 %323, %321
  br i1 %324, label %325, label %327

325:                                              ; preds = %317, %312
  %326 = or i32 %308, 64
  br label %339

327:                                              ; preds = %317
  %328 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 3, i32 1
  %329 = load i32, i32* %328, align 4
  %330 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 0, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = or i32 %331, %329
  %333 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %275, i64 0, i32 24, i64 2, i32 1
  %334 = load i32, i32* %333, align 4
  %335 = or i32 %332, %334
  %336 = icmp eq i32 %335, 0
  %337 = select i1 %336, i32 0, i32 64
  %338 = or i32 %337, %308
  br label %339

339:                                              ; preds = %274, %325, %327
  %340 = phi i32 [ %308, %274 ], [ %326, %325 ], [ %338, %327 ]
  %341 = and i32 %304, -97
  %342 = or i32 %340, %341
  store i32 %342, i32* %309, align 4
  %343 = add nuw nsw i64 %276, 1
  %344 = icmp eq i64 %343, 6
  %345 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %344, label %346, label %274, !llvm.loop !7

346:                                              ; preds = %339
  %347 = add i32 %3, 65300
  %348 = zext i32 %347 to i64
  %349 = tail call i32 @ldl_phys(i64 %348)
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %345, i32 %349)
  %350 = add i32 %3, 65276
  %351 = zext i32 %350 to i64
  %352 = tail call i32 @ldl_phys(i64 %351)
  %353 = and i32 %352, 131072
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %357

355:                                              ; preds = %346
  %356 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %364

357:                                              ; preds = %346
  %358 = add i32 %3, 65272
  %359 = zext i32 %358 to i64
  %360 = tail call i32 @ldl_phys(i64 %359)
  %361 = and i32 %360, -32768
  %362 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %363 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %362, i64 0, i32 63
  store i32 %361, i32* %363, align 16
  br label %364

364:                                              ; preds = %355, %357
  %365 = phi %struct.CPUX86State* [ %356, %355 ], [ %362, %357 ]
  %366 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %365, i64 0, i32 1
  store i32 1, i32* %366, align 16
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %365, i64 0, i32 21
  %368 = load i32, i32* %367, align 4
  %369 = and i32 %368, -524289
  store i32 %369, i32* %367, align 4
  tail call fastcc void @cpu_smm_update()
  unreachable
}

; Function Attrs: uwtable
define void @helper_divb_AL(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %0, 255
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

8:                                                ; preds = %1
  %9 = trunc i32 %4 to i16
  %10 = trunc i32 %5 to i16
  %11 = udiv i16 %9, %10
  %12 = urem i16 %9, %10
  %13 = icmp ugt i16 %11, 255
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

15:                                               ; preds = %8
  %16 = zext i16 %11 to i32
  %17 = and i32 %4, -65536
  %18 = shl nuw i16 %12, 8
  %19 = zext i16 %18 to i32
  %20 = or i32 %17, %16
  %21 = or i32 %20, %19
  store i32 %21, i32* %3, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_idivb_AL(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = shl i32 %4, 16
  %6 = ashr exact i32 %5, 16
  %7 = shl i32 %0, 24
  %8 = ashr exact i32 %7, 24
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

11:                                               ; preds = %1
  %12 = sdiv i32 %6, %8
  %13 = srem i32 %6, %8
  %14 = add nsw i32 %12, 128
  %15 = icmp ugt i32 %14, 255
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

17:                                               ; preds = %11
  %18 = and i32 %12, 255
  %19 = and i32 %4, -65536
  %20 = shl nsw i32 %13, 8
  %21 = and i32 %20, 65280
  %22 = or i32 %18, %19
  %23 = or i32 %22, %21
  store i32 %23, i32* %3, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_divw_AX(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 65535
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 16
  %9 = or i32 %8, %5
  %10 = and i32 %0, 65535
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

13:                                               ; preds = %1
  %14 = udiv i32 %9, %10
  %15 = urem i32 %9, %10
  %16 = icmp ugt i32 %14, 65535
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

18:                                               ; preds = %13
  %19 = and i32 %4, -65536
  %20 = or i32 %14, %19
  store i32 %20, i32* %3, align 16
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 0, i64 2
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, -65536
  %25 = or i32 %24, %15
  store i32 %25, i32* %22, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_idivw_AX(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 65535
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 16
  %9 = or i32 %8, %5
  %10 = shl i32 %0, 16
  %11 = ashr exact i32 %10, 16
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

14:                                               ; preds = %1
  %15 = sdiv i32 %9, %11
  %16 = srem i32 %9, %11
  %17 = add i32 %15, 32768
  %18 = icmp ugt i32 %17, 65535
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

20:                                               ; preds = %14
  %21 = and i32 %15, 65535
  %22 = and i32 %16, 65535
  %23 = and i32 %4, -65536
  %24 = or i32 %21, %23
  store i32 %24, i32* %3, align 16
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 0, i64 2
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, -65536
  %29 = or i32 %28, %22
  store i32 %29, i32* %26, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divl_EAX(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = shl nuw i64 %8, 32
  %10 = or i64 %9, %5
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

13:                                               ; preds = %1
  %14 = zext i32 %0 to i64
  %15 = udiv i64 %10, %14
  %16 = urem i64 %10, %14
  %17 = icmp ugt i64 %15, 4294967295
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

19:                                               ; preds = %13
  %20 = trunc i64 %16 to i32
  %21 = trunc i64 %15 to i32
  store i32 %21, i32* %3, align 16
  %22 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %22, i64 0, i32 0, i64 2
  store i32 %20, i32* %23, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_idivl_EAX(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = shl nuw i64 %8, 32
  %10 = or i64 %9, %5
  %11 = icmp eq i32 %0, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

13:                                               ; preds = %1
  %14 = sext i32 %0 to i64
  %15 = sdiv i64 %10, %14
  %16 = srem i64 %10, %14
  %17 = add i64 %15, 2147483648
  %18 = icmp ugt i64 %17, 4294967295
  br i1 %18, label %19, label %20

19:                                               ; preds = %13
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 0, i64 0) #21
  unreachable

20:                                               ; preds = %13
  %21 = trunc i64 %15 to i32
  %22 = trunc i64 %16 to i32
  store i32 %21, i32* %3, align 16
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 2
  store i32 %22, i32* %24, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_aam(i32 %0) local_unnamed_addr #2 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 255
  %6 = sdiv i32 %5, %0
  %7 = srem i32 %5, %0
  %8 = and i32 %4, -65536
  %9 = or i32 %7, %8
  %10 = shl nsw i32 %6, 8
  %11 = or i32 %9, %10
  store i32 %11, i32* %3, align 16
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 3
  store i32 %7, i32* %13, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_aad(i32 %0) local_unnamed_addr #2 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = lshr i32 %4, 8
  %6 = and i32 %5, 255
  %7 = mul nsw i32 %6, %0
  %8 = add i32 %7, %4
  %9 = and i32 %8, 255
  %10 = and i32 %4, -65536
  %11 = or i32 %9, %10
  store i32 %11, i32* %3, align 16
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 3
  store i32 %9, i32* %13, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_aaa() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32, i32* %2, align 16
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %7 = load i32, i32* %6, align 16
  %8 = lshr i32 %7, 8
  %9 = and i32 %7, 15
  %10 = icmp ugt i32 %9, 9
  %11 = icmp ne i32 %5, 0
  %12 = or i1 %11, %10
  br i1 %12, label %13, label %22

13:                                               ; preds = %0
  %14 = and i32 %7, 254
  %15 = icmp ugt i32 %14, 249
  %16 = zext i1 %15 to i32
  %17 = add i32 %7, 6
  %18 = and i32 %17, 15
  %19 = add nuw nsw i32 %8, 1
  %20 = add nuw nsw i32 %19, %16
  %21 = or i32 %4, 17
  br label %24

22:                                               ; preds = %0
  %23 = and i32 %4, -18
  br label %24

24:                                               ; preds = %22, %13
  %25 = phi i32 [ %20, %13 ], [ %8, %22 ]
  %26 = phi i32 [ %18, %13 ], [ %9, %22 ]
  %27 = phi i32 [ %21, %13 ], [ %23, %22 ]
  %28 = and i32 %7, -65536
  %29 = or i32 %26, %28
  %30 = shl i32 %25, 8
  %31 = and i32 %30, 65280
  %32 = or i32 %29, %31
  store i32 %32, i32* %6, align 16
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 2
  store i32 %27, i32* %34, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_aas() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32, i32* %2, align 16
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %7 = load i32, i32* %6, align 16
  %8 = lshr i32 %7, 8
  %9 = and i32 %7, 15
  %10 = icmp ugt i32 %9, 9
  %11 = icmp ne i32 %5, 0
  %12 = or i1 %11, %10
  br i1 %12, label %13, label %22

13:                                               ; preds = %0
  %14 = and i32 %7, 254
  %15 = icmp ult i32 %14, 6
  %16 = zext i1 %15 to i32
  %17 = add i32 %7, 10
  %18 = and i32 %17, 15
  %19 = xor i32 %16, 255
  %20 = add nuw nsw i32 %19, %8
  %21 = or i32 %4, 17
  br label %24

22:                                               ; preds = %0
  %23 = and i32 %4, -18
  br label %24

24:                                               ; preds = %22, %13
  %25 = phi i32 [ %20, %13 ], [ %8, %22 ]
  %26 = phi i32 [ %18, %13 ], [ %9, %22 ]
  %27 = phi i32 [ %21, %13 ], [ %23, %22 ]
  %28 = and i32 %7, -65536
  %29 = or i32 %26, %28
  %30 = shl i32 %25, 8
  %31 = and i32 %30, 65280
  %32 = or i32 %29, %31
  store i32 %32, i32* %6, align 16
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 2
  store i32 %27, i32* %34, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_daa() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32, i32* %2, align 16
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 1
  %6 = and i32 %4, 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %8 = load i32, i32* %7, align 16
  %9 = and i32 %8, 255
  %10 = and i32 %8, 14
  %11 = icmp ugt i32 %10, 9
  %12 = icmp ne i32 %6, 0
  %13 = or i1 %12, %11
  %14 = add i32 %8, 6
  %15 = and i32 %14, 255
  %16 = select i1 %13, i32 %15, i32 %9
  %17 = select i1 %13, i32 16, i32 0
  %18 = icmp ugt i32 %9, 153
  %19 = icmp ne i32 %5, 0
  %20 = or i1 %19, %18
  %21 = add nuw nsw i32 %16, 96
  %22 = and i32 %21, 255
  %23 = select i1 %20, i32 %22, i32 %16
  %24 = zext i1 %18 to i32
  %25 = or i32 %5, %24
  %26 = and i32 %8, -256
  %27 = or i32 %23, %26
  store i32 %27, i32* %7, align 16
  %28 = icmp eq i32 %23, 0
  %29 = select i1 %28, i32 64, i32 0
  %30 = zext i32 %23 to i64
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %23, 128
  %35 = or i32 %25, %33
  %36 = or i32 %35, %17
  %37 = or i32 %36, %34
  %38 = or i32 %37, %29
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 2
  store i32 %38, i32* %40, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_das() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32, i32* %2, align 16
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = and i32 %4, 1
  %6 = and i32 %4, 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %8 = load i32, i32* %7, align 16
  %9 = and i32 %8, 255
  %10 = and i32 %8, 14
  %11 = icmp ugt i32 %10, 9
  %12 = icmp ne i32 %6, 0
  %13 = or i1 %12, %11
  br i1 %13, label %14, label %21

14:                                               ; preds = %0
  %15 = icmp ult i32 %9, 6
  %16 = icmp ne i32 %5, 0
  %17 = or i1 %16, %15
  %18 = select i1 %17, i32 17, i32 16
  %19 = add i32 %8, 250
  %20 = and i32 %19, 255
  br label %21

21:                                               ; preds = %0, %14
  %22 = phi i32 [ %20, %14 ], [ %9, %0 ]
  %23 = phi i32 [ %18, %14 ], [ 0, %0 ]
  %24 = icmp ugt i32 %9, 153
  %25 = icmp ne i32 %5, 0
  %26 = or i1 %25, %24
  %27 = add nuw nsw i32 %22, 160
  %28 = and i32 %27, 255
  %29 = select i1 %26, i32 %28, i32 %22
  %30 = zext i1 %24 to i32
  %31 = or i32 %5, %30
  %32 = or i32 %31, %23
  %33 = and i32 %8, -256
  %34 = or i32 %29, %33
  store i32 %34, i32* %7, align 16
  %35 = icmp eq i32 %29, 0
  %36 = select i1 %35, i32 64, i32 0
  %37 = zext i32 %29 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = and i32 %29, 128
  %42 = or i32 %32, %40
  %43 = or i32 %42, %41
  %44 = or i32 %43, %36
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 2
  store i32 %44, i32* %46, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_into(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 16
  %5 = tail call i32 @helper_cc_compute_all(i32 %4)
  %6 = and i32 %5, 2048
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @raise_interrupt(%struct.CPUX86State* %2, i32 4, i32 1, i32 0, i32 %0) #21
  unreachable

9:                                                ; preds = %1
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpxchg8b(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 16
  %5 = tail call i32 @helper_cc_compute_all(i32 %4)
  %6 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %2, i32 %0)
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 0, i64 2
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = shl nuw i64 %10, 32
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 0, i64 0
  %13 = load i32, i32* %12, align 16
  %14 = zext i32 %13 to i64
  %15 = or i64 %11, %14
  %16 = icmp eq i64 %6, %15
  br i1 %16, label %17, label %27

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %20, 32
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %21, %24
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %7, i32 %0, i64 %25)
  %26 = or i32 %5, 64
  br label %35

27:                                               ; preds = %1
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %7, i32 %0, i64 %6)
  %28 = lshr i64 %6, 32
  %29 = trunc i64 %28 to i32
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 0, i64 2
  store i32 %29, i32* %31, align 8
  %32 = trunc i64 %6 to i32
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 0, i64 0
  store i32 %32, i32* %33, align 16
  %34 = and i32 %5, -65
  br label %35

35:                                               ; preds = %27, %17
  %36 = phi i32 [ %26, %17 ], [ %34, %27 ]
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %37, i64 0, i32 2
  store i32 %36, i32* %38, align 4
  ret void
}

; Function Attrs: uwtable
define internal fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %17 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, -33
  %29 = and i32 %14, -4089
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %34, label %31, !prof !3, !misexpect !4

31:                                               ; preds = %13
  %32 = zext i1 %21 to i32
  %33 = tail call i64 @helper_ldq_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 %32, i8* null)
  br label %45

34:                                               ; preds = %13
  %35 = zext i32 %14 to i64
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %35
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %34
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %40, i32 8, i32 0, i64 0)
  br label %45

45:                                               ; preds = %34, %44, %31
  %46 = phi i64 [ %33, %31 ], [ %40, %44 ], [ %40, %34 ]
  ret i64 %46
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stq_data(%struct.CPUX86State* %0, i32 %1, i64 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %2, i32 8, i32 1)
  br label %8

8:                                                ; preds = %3, %7
  %9 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %14

14:                                               ; preds = %8, %12
  %15 = phi i32 [ %13, %12 ], [ %1, %8 ]
  %16 = lshr i32 %15, 12
  %17 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %16, i32 0, i32 1048575, i32 0)
  %18 = and i32 %17, 1023
  %19 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 3
  %22 = icmp eq i32 %21, 3
  %23 = zext i1 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %23
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %26 = zext i32 %18 to i64
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %26, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, -33
  %30 = and i32 %15, -4089
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %34, label %32, !prof !3, !misexpect !4

32:                                               ; preds = %14
  %33 = zext i1 %22 to i32
  tail call void @helper_stq_mmu(%struct.CPUX86State* nonnull %0, i32 %15, i64 %2, i32 %33, i8* null)
  br label %44

34:                                               ; preds = %14
  %35 = zext i32 %15 to i64
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %26, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %35
  %39 = inttoptr i64 %38 to i64*
  store i64 %2, i64* %39, align 8
  %40 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %34
  tail call void @tcg_llvm_after_memory_access(i32 %15, i64 %2, i32 8, i32 2, i64 0)
  br label %44

44:                                               ; preds = %34, %43, %32
  ret void
}

; Function Attrs: uwtable
define void @helper_stq_mmu(%struct.CPUX86State* %0, i32 %1, i64 %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %5
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %2, i32 8, i32 1)
  br label %11

11:                                               ; preds = %5, %10
  %12 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i32 [ %16, %15 ], [ %1, %11 ]
  %19 = lshr i32 %18, 12
  %20 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %19, i32 0, i32 1048575, i32 0)
  %21 = and i32 %20, 1023
  %22 = zext i32 %6 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %21 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %18, -4096
  %29 = and i32 %27, -2048
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %33, label %31, !prof !3, !misexpect !5

31:                                               ; preds = %17
  %32 = shl i32 %20, 12
  br label %149

33:                                               ; preds = %149, %17
  %34 = phi %struct.CPUTLBEntry* [ %24, %17 ], [ %150, %149 ]
  %35 = phi i32 [ %27, %17 ], [ %152, %149 ]
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %25
  %37 = and i32 %35, 4063
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %50, label %39, !prof !3, !misexpect !4

39:                                               ; preds = %33
  %40 = and i32 %18, 7
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %22, i64 %25
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %36, %struct.CPUTLBEntry** %45, align 8
  tail call void @io_write_chkq_mmu(%struct.CPUX86State* nonnull %0, i64 %44, i64 %2, i32 %18, i8* %4)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %155, label %49

49:                                               ; preds = %42
  tail call void @tcg_llvm_after_memory_access(i32 %18, i64 %2, i32 8, i32 3, i64 0)
  br label %155

50:                                               ; preds = %33
  %51 = and i32 %18, 4095
  %52 = icmp ugt i32 %51, 4088
  br i1 %52, label %53, label %139, !prof !6, !misexpect !4

53:                                               ; preds = %39, %50
  %54 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %53
  tail call void @tcg_llvm_before_memory_access(i32 %18, i64 %2, i32 8, i32 1)
  br label %58

58:                                               ; preds = %57, %53
  %59 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %58
  %63 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %18, i32 0, i32 -1, i32 0)
  %64 = lshr i32 %63, 12
  %65 = and i32 %63, -4096
  br label %66

66:                                               ; preds = %62, %58
  %67 = phi i32 [ %65, %62 ], [ %28, %58 ]
  %68 = phi i32 [ %64, %62 ], [ %19, %58 ]
  %69 = phi i32 [ %63, %62 ], [ %18, %58 ]
  %70 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %68, i32 0, i32 1048575, i32 0)
  %71 = and i32 %70, 1023
  %72 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %73 = zext i32 %71 to i64
  %74 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %72, i64 %73, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = and i32 %75, -2048
  %77 = icmp eq i32 %67, %76
  br i1 %77, label %80, label %78

78:                                               ; preds = %66
  %79 = shl i32 %70, 12
  br label %133

80:                                               ; preds = %133, %66
  %81 = phi %struct.CPUTLBEntry* [ %72, %66 ], [ %134, %133 ]
  %82 = phi i32 [ %75, %66 ], [ %136, %133 ]
  %83 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %81, i64 %73
  %84 = and i32 %82, 4063
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %97, label %86

86:                                               ; preds = %80
  %87 = and i32 %69, 7
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %100

89:                                               ; preds = %86
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %22, i64 %73
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %83, %struct.CPUTLBEntry** %92, align 8
  tail call void @io_write_chkq_mmu(%struct.CPUX86State* nonnull %0, i64 %91, i64 %2, i32 %69, i8* %4)
  %93 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %155, label %96

96:                                               ; preds = %89
  tail call void @tcg_llvm_after_memory_access(i32 %69, i64 %2, i32 8, i32 3, i64 0)
  br label %155

97:                                               ; preds = %80
  %98 = and i32 %69, 4095
  %99 = icmp ugt i32 %98, 4088
  br i1 %99, label %100, label %123

100:                                              ; preds = %97, %86
  %101 = add i32 %69, 7
  %102 = lshr i64 %2, 56
  %103 = trunc i64 %102 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %101, i8 zeroext %103, i32 %6, i8* %4)
  %104 = add i32 %69, 6
  %105 = lshr i64 %2, 48
  %106 = trunc i64 %105 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %104, i8 zeroext %106, i32 %6, i8* %4)
  %107 = add i32 %69, 5
  %108 = lshr i64 %2, 40
  %109 = trunc i64 %108 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %107, i8 zeroext %109, i32 %6, i8* %4)
  %110 = add i32 %69, 4
  %111 = lshr i64 %2, 32
  %112 = trunc i64 %111 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %110, i8 zeroext %112, i32 %6, i8* %4)
  %113 = add i32 %69, 3
  %114 = lshr i64 %2, 24
  %115 = trunc i64 %114 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %113, i8 zeroext %115, i32 %6, i8* %4)
  %116 = add i32 %69, 2
  %117 = lshr i64 %2, 16
  %118 = trunc i64 %117 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %116, i8 zeroext %118, i32 %6, i8* %4)
  %119 = add i32 %69, 1
  %120 = lshr i64 %2, 8
  %121 = trunc i64 %120 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %119, i8 zeroext %121, i32 %6, i8* %4)
  %122 = trunc i64 %2 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %69, i8 zeroext %122, i32 %6, i8* %4)
  br label %155

123:                                              ; preds = %97
  %124 = zext i32 %69 to i64
  %125 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %81, i64 %73, i32 4
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, %124
  %128 = inttoptr i64 %127 to i64*
  store i64 %2, i64* %128, align 8
  %129 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %155, label %132

132:                                              ; preds = %123
  tail call void @tcg_llvm_after_memory_access(i32 %69, i64 %2, i32 8, i32 2, i64 0)
  br label %155

133:                                              ; preds = %133, %78
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %69, i32 %79, i32 1, i32 %6, i8* %4)
  %134 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %135 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %134, i64 %73, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = and i32 %136, -2048
  %138 = icmp eq i32 %67, %137
  br i1 %138, label %80, label %133

139:                                              ; preds = %50
  %140 = zext i32 %18 to i64
  %141 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %25, i32 4
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, %140
  %144 = inttoptr i64 %143 to i64*
  store i64 %2, i64* %144, align 8
  %145 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %155, label %148

148:                                              ; preds = %139
  tail call void @tcg_llvm_after_memory_access(i32 %18, i64 %2, i32 8, i32 2, i64 0)
  br label %155

149:                                              ; preds = %31, %149
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %18, i32 %32, i32 1, i32 %6, i8* %4)
  %150 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %151 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %150, i64 %25, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = and i32 %152, -2048
  %154 = icmp eq i32 %28, %153
  br i1 %154, label %33, label %149, !prof !3, !misexpect !5

155:                                              ; preds = %132, %123, %100, %96, %89, %42, %139, %49, %148
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkq_mmu(%struct.CPUX86State* %0, i64 %1, i64 %2, i32 %3, i8* %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %7 = and i64 %1, -4096
  %8 = zext i32 %3 to i64
  %9 = add i64 %7, %8
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %8, i32 0)
  %10 = ptrtoint i8* %4 to i64
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %10, i64* %11, align 16
  %12 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %6, i32 1)
  br i1 %12, label %13, label %22

13:                                               ; preds = %5
  %14 = tail call i64 @se_notdirty_mem_write(i64 %9, i32 8)
  %15 = trunc i64 %2 to i32
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16, align 4
  %17 = add i64 %9, 4
  %18 = tail call i64 @se_notdirty_mem_write(i64 %17, i32 8)
  %19 = lshr i64 %2, 32
  %20 = trunc i64 %19 to i32
  %21 = inttoptr i64 %18 to i32*
  store i32 %20, i32* %21, align 4
  br label %23

22:                                               ; preds = %5
  tail call void @io_writeq_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i64 %2, i32 %3, i8* %4)
  br label %23

23:                                               ; preds = %13, %22
  %24 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %8, i64 %2, i32 8, i32 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  ret void
}

declare void @io_writeq_mmu(%struct.CPUX86State*, i64, i64, i32, i8*) local_unnamed_addr #9

; Function Attrs: uwtable
define i64 @helper_ldq_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %10

10:                                               ; preds = %4, %9
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i32 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i32 %17, 12
  %19 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %18, i32 0, i32 1048575, i32 0)
  %20 = and i32 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %21
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %24 = zext i32 %20 to i64
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %24
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %17, -4096
  %29 = and i32 %27, -2048
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %33, label %31, !prof !3, !misexpect !5

31:                                               ; preds = %16
  %32 = shl i32 %19, 12
  br label %67

33:                                               ; preds = %67, %16
  %34 = phi %struct.CPUTLBEntry* [ %23, %16 ], [ %68, %67 ]
  %35 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %69, %67 ]
  %36 = phi i32 [ %27, %16 ], [ %71, %67 ]
  %37 = and i32 %36, 4063
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %51, label %39, !prof !3, !misexpect !4

39:                                               ; preds = %33
  %40 = and i32 %17, 7
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %21, i64 %24
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %45, align 8
  %46 = tail call i64 @io_read_chkq_mmu(%struct.CPUX86State* nonnull %0, i64 %44, i32 %17, i8* %3)
  %47 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %74, label %50

50:                                               ; preds = %42
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %46, i32 8, i32 1, i64 0)
  br label %74

51:                                               ; preds = %33
  %52 = and i32 %17, 4095
  %53 = icmp ugt i32 %52, 4088
  br i1 %53, label %54, label %56, !prof !6, !misexpect !4

54:                                               ; preds = %39, %51
  %55 = tail call fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* nonnull %0, i32 %17, i32 %5, i8* %3)
  br label %74

56:                                               ; preds = %51
  %57 = zext i32 %17 to i64
  %58 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %24, i32 4
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, %57
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %56
  tail call void @tcg_llvm_after_memory_access(i32 %17, i64 %62, i32 8, i32 0, i64 0)
  br label %74

67:                                               ; preds = %31, %67
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %17, i32 %32, i32 0, i32 %5, i8* %3)
  %68 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %69 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %68, i64 %24
  %70 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, -2048
  %73 = icmp eq i32 %28, %72
  br i1 %73, label %33, label %67, !prof !3, !misexpect !5

74:                                               ; preds = %42, %56, %50, %66, %54
  %75 = phi i64 [ %55, %54 ], [ %46, %50 ], [ %46, %42 ], [ %62, %66 ], [ %62, %56 ]
  ret i64 %75
}

; Function Attrs: uwtable
define i64 @io_read_chkq_mmu(%struct.CPUX86State* %0, i64 %1, i32 %2, i8* %3) local_unnamed_addr #3 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 %1)
  %8 = zext i32 %2 to i64
  %9 = trunc i64 %1 to i32
  %10 = and i32 %9, -4096
  %11 = add i32 %10, %2
  %12 = ptrtoint i8* %3 to i64
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 72
  store i64 %12, i64* %13, align 16
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 %8, i32 0)
  %14 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* %7, i32 0)
  br i1 %14, label %15, label %30

15:                                               ; preds = %4
  %16 = zext i32 %11 to i64
  %17 = tail call i64 @se_notdirty_mem_read(i64 %16)
  %18 = inttoptr i64 %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = trunc i64 %19 to i32
  %21 = bitcast i64* %5 to i32*
  store i32 %20, i32* %21, align 8
  %22 = add i32 %11, 4
  %23 = zext i32 %22 to i64
  %24 = tail call i64 @se_notdirty_mem_read(i64 %23)
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds i8, i8* %6, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 4
  br label %32

30:                                               ; preds = %4
  %31 = tail call i64 @io_readq_mmu(%struct.CPUX86State* nonnull %0, i64 %1, i32 %2, i8* %3)
  store volatile i64 %31, i64* %5, align 8
  br label %32

32:                                               ; preds = %15, %30
  %33 = load volatile i64, i64* %5, align 8
  %34 = tail call i64 @tcg_llvm_trace_mmio_access(i64 %8, i64 %33, i32 8, i32 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 0, i32 1)
  %35 = load volatile i64, i64* %5, align 8
  ret i64 %35
}

; Function Attrs: uwtable
define internal fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* %0, i32 %1, i32 %2, i8* %3) unnamed_addr #3 {
  %5 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %9

9:                                                ; preds = %4, %8
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %20
  %22 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %23 = zext i32 %19 to i64
  %24 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %22, i64 %23
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %16, -4096
  %28 = and i32 %26, -2048
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %15
  %31 = shl i32 %18, 12
  br label %77

32:                                               ; preds = %77, %15
  %33 = phi %struct.CPUTLBEntry* [ %22, %15 ], [ %78, %77 ]
  %34 = phi %struct.CPUTLBEntry* [ %24, %15 ], [ %79, %77 ]
  %35 = phi i32 [ %26, %15 ], [ %81, %77 ]
  %36 = and i32 %35, 4063
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = and i32 %16, 7
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 80, i64 %20, i64 %23
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 86
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %44, align 8
  %45 = tail call i64 @io_read_chkq_mmu(%struct.CPUX86State* nonnull %0, i64 %43, i32 %16, i8* %3)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %84, label %49

49:                                               ; preds = %41
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %45, i32 8, i32 1, i64 0)
  br label %84

50:                                               ; preds = %32
  %51 = and i32 %16, 4095
  %52 = icmp ugt i32 %51, 4088
  br i1 %52, label %53, label %66

53:                                               ; preds = %38, %50
  %54 = and i32 %16, -8
  %55 = add i32 %54, 8
  %56 = tail call fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* nonnull %0, i32 %54, i32 %2, i8* %3)
  %57 = tail call fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* nonnull %0, i32 %55, i32 %2, i8* %3)
  %58 = shl i32 %16, 3
  %59 = and i32 %58, 56
  %60 = zext i32 %59 to i64
  %61 = lshr i64 %56, %60
  %62 = sub nuw nsw i32 64, %59
  %63 = zext i32 %62 to i64
  %64 = shl i64 %57, %63
  %65 = or i64 %64, %61
  ret i64 %65

66:                                               ; preds = %50
  %67 = zext i32 %16 to i64
  %68 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %23, i32 4
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, %67
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %84, label %76

76:                                               ; preds = %66
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %72, i32 8, i32 0, i64 0)
  br label %84

77:                                               ; preds = %30, %77
  tail call void @tlb_fill(%struct.CPUX86State* undef, i32 %16, i32 %31, i32 0, i32 %2, i8* %3)
  %78 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %79 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %78, i64 %23
  %80 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = and i32 %81, -2048
  %83 = icmp eq i32 %27, %82
  br i1 %83, label %32, label %77

84:                                               ; preds = %41, %66, %49, %76
  %85 = phi i64 [ %45, %49 ], [ %45, %41 ], [ %72, %76 ], [ %72, %66 ]
  ret i64 %85
}

declare i64 @io_readq_mmu(%struct.CPUX86State*, i64, i32, i8*) local_unnamed_addr #9

; Function Attrs: noreturn uwtable
define void @helper_single_step() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = tail call i32 @check_hw_breakpoints(%struct.CPUX86State* %1, i32 1)
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 61, i64 6
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 16384
  store i32 %6, i32* %4, align 4
  tail call void @raise_exception(%struct.CPUX86State* %3, i32 1) #21
  unreachable
}

declare i32 @check_hw_breakpoints(%struct.CPUX86State*, i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_cpuid() local_unnamed_addr #3 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast i32* %1 to i8*
  %6 = bitcast i32* %2 to i8*
  %7 = bitcast i32* %3 to i8*
  %8 = bitcast i32* %4 to i8*
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 21
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 2097152
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %20, label %14, !prof !3, !misexpect !5

14:                                               ; preds = %0
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 42
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, 262144
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %14
  tail call void @helper_vmexit(i32 114, i64 0)
  unreachable

20:                                               ; preds = %0, %14
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 0, i64 0
  %22 = load i32, i32* %21, align 16
  %23 = icmp eq i32 %22, 4
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 107
  br i1 %23, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 0, i64 1
  %27 = load i32, i32* %26, align 4
  call void @cpu_x86_cpuid(%struct.cpuid_t* nonnull %24, i32 4, i32 %27, i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)
  br label %29

28:                                               ; preds = %20
  call void @cpu_x86_cpuid(%struct.cpuid_t* nonnull %24, i32 %22, i32 0, i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)
  br label %29

29:                                               ; preds = %28, %25
  %30 = load i32, i32* %1, align 4
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 0, i64 0
  store i32 %30, i32* %32, align 16
  %33 = load i32, i32* %2, align 4
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 0, i64 3
  store i32 %33, i32* %35, align 4
  %36 = load i32, i32* %3, align 4
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 0, i64 1
  store i32 %36, i32* %37, align 4
  %38 = load i32, i32* %4, align 4
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 0, i64 2
  store i32 %38, i32* %40, align 8
  ret void
}

declare void @cpu_x86_cpuid(%struct.cpuid_t*, i32, i32, i32*, i32*, i32*, i32*) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_enter_level(i32 %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 4194304
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 65535, i32 -1
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 0, i64 5
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 0, i64 4
  %15 = load i32, i32* %14, align 16
  %16 = icmp eq i32 %1, 0
  %17 = icmp eq i32 %0, 1
  br i1 %16, label %52, label %18

18:                                               ; preds = %3
  %19 = add i32 %15, -8
  br i1 %17, label %47, label %20

20:                                               ; preds = %18
  %21 = add i32 %13, -4
  %22 = and i32 %19, %9
  %23 = add i32 %22, %11
  %24 = and i32 %21, %9
  %25 = add i32 %24, %11
  %26 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* %4, i32 %25)
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %4, i32 %23, i32 %26)
  %27 = add nsw i32 %0, -2
  %28 = icmp eq i32 %27, 0
  %29 = add i32 %15, -12
  br i1 %28, label %44, label %30

30:                                               ; preds = %20, %30
  %31 = phi i32 [ %43, %30 ], [ %29, %20 ]
  %32 = phi i32 [ %41, %30 ], [ %27, %20 ]
  %33 = phi i32 [ %35, %30 ], [ %21, %20 ]
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = add i32 %33, -4
  %36 = and i32 %31, %9
  %37 = add i32 %36, %11
  %38 = and i32 %35, %9
  %39 = add i32 %38, %11
  %40 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* %34, i32 %39)
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %34, i32 %37, i32 %40)
  %41 = add nsw i32 %32, -1
  %42 = icmp eq i32 %41, 0
  %43 = add i32 %31, -4
  br i1 %42, label %44, label %30

44:                                               ; preds = %30, %20
  %45 = phi i32 [ %29, %20 ], [ %43, %30 ]
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %47

47:                                               ; preds = %44, %18
  %48 = phi %struct.CPUX86State* [ %4, %18 ], [ %46, %44 ]
  %49 = phi i32 [ %19, %18 ], [ %45, %44 ]
  %50 = and i32 %49, %9
  %51 = add i32 %50, %11
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %48, i32 %51, i32 %2)
  br label %86

52:                                               ; preds = %3
  %53 = add i32 %15, -4
  br i1 %17, label %81, label %54

54:                                               ; preds = %52
  %55 = add i32 %13, -2
  %56 = and i32 %53, %9
  %57 = add i32 %56, %11
  %58 = and i32 %55, %9
  %59 = add i32 %58, %11
  %60 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %4, i32 %59)
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %4, i32 %57, i32 %60)
  %61 = add nsw i32 %0, -2
  %62 = icmp eq i32 %61, 0
  %63 = add i32 %15, -6
  br i1 %62, label %78, label %64

64:                                               ; preds = %54, %64
  %65 = phi i32 [ %77, %64 ], [ %63, %54 ]
  %66 = phi i32 [ %75, %64 ], [ %61, %54 ]
  %67 = phi i32 [ %69, %64 ], [ %55, %54 ]
  %68 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %69 = add i32 %67, -2
  %70 = and i32 %65, %9
  %71 = add i32 %70, %11
  %72 = and i32 %69, %9
  %73 = add i32 %72, %11
  %74 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %68, i32 %73)
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %68, i32 %71, i32 %74)
  %75 = add nsw i32 %66, -1
  %76 = icmp eq i32 %75, 0
  %77 = add i32 %65, -2
  br i1 %76, label %78, label %64

78:                                               ; preds = %64, %54
  %79 = phi i32 [ %63, %54 ], [ %77, %64 ]
  %80 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %81

81:                                               ; preds = %78, %52
  %82 = phi %struct.CPUX86State* [ %4, %52 ], [ %80, %78 ]
  %83 = phi i32 [ %53, %52 ], [ %79, %78 ]
  %84 = and i32 %83, %9
  %85 = add i32 %84, %11
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %82, i32 %85, i32 %2)
  br label %86

86:                                               ; preds = %81, %47
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldl_data(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %17 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, -33
  %29 = and i32 %14, -4093
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %34, label %31, !prof !3, !misexpect !4

31:                                               ; preds = %13
  %32 = zext i1 %21 to i32
  %33 = tail call i32 @helper_ldl_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 %32, i8* null)
  br label %46

34:                                               ; preds = %13
  %35 = zext i32 %14 to i64
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %35
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %34
  %45 = zext i32 %40 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %45, i32 4, i32 0, i64 0)
  br label %46

46:                                               ; preds = %34, %44, %31
  %47 = phi i32 [ %33, %31 ], [ %40, %44 ], [ %40, %34 ]
  ret i32 %47
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stl_data(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %8, i32 4, i32 1)
  br label %9

9:                                                ; preds = %3, %7
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 3
  %23 = icmp eq i32 %22, 3
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %24
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %25, align 8
  %27 = zext i32 %19 to i64
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %27, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, -33
  %31 = and i32 %16, -4093
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %35, label %33, !prof !3, !misexpect !4

33:                                               ; preds = %15
  %34 = zext i1 %23 to i32
  tail call void @helper_stl_mmu(%struct.CPUX86State* nonnull %0, i32 %16, i32 %2, i32 %34, i8* null)
  br label %46

35:                                               ; preds = %15
  %36 = zext i32 %16 to i64
  %37 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %27, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, %36
  %40 = inttoptr i64 %39 to i32*
  store i32 %2, i32* %40, align 4
  %41 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %35
  %45 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %45, i32 4, i32 2, i64 0)
  br label %46

46:                                               ; preds = %35, %44, %33
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %17 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, -33
  %29 = and i32 %14, -4095
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %35, label %31, !prof !3, !misexpect !4

31:                                               ; preds = %13
  %32 = zext i1 %21 to i32
  %33 = tail call zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 %32, i8* null)
  %34 = zext i16 %33 to i32
  br label %48

35:                                               ; preds = %13
  %36 = zext i32 %14 to i64
  %37 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, %36
  %40 = inttoptr i64 %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %35
  %47 = zext i16 %41 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %47, i32 4, i32 0, i64 0)
  br label %48

48:                                               ; preds = %35, %46, %31
  %49 = phi i32 [ %34, %31 ], [ %42, %46 ], [ %42, %35 ]
  ret i32 %49
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stw_data(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %8, i32 4, i32 1)
  br label %9

9:                                                ; preds = %3, %7
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 3
  %23 = icmp eq i32 %22, 3
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %24
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %25, align 8
  %27 = zext i32 %19 to i64
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %27, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, -33
  %31 = and i32 %16, -4095
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %36, label %33, !prof !3, !misexpect !4

33:                                               ; preds = %15
  %34 = zext i1 %23 to i32
  %35 = trunc i32 %2 to i16
  tail call void @helper_stw_mmu(%struct.CPUX86State* nonnull %0, i32 %16, i16 zeroext %35, i32 %34, i8* null)
  br label %48

36:                                               ; preds = %15
  %37 = zext i32 %16 to i64
  %38 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %27, i32 4
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %37
  %41 = trunc i32 %2 to i16
  %42 = inttoptr i64 %40 to i16*
  store i16 %41, i16* %42, align 2
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %36
  %47 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %47, i32 4, i32 2, i64 0)
  br label %48

48:                                               ; preds = %36, %46, %33
  ret void
}

; Function Attrs: uwtable
define void @helper_lldt(i32 %0) local_unnamed_addr #3 {
  %2 = and i32 %0, 65535
  %3 = and i32 %0, 65532
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 25, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 25, i32 2
  store i32 0, i32* %8, align 8
  br label %56

9:                                                ; preds = %1
  %10 = and i32 %0, 4
  %11 = icmp eq i32 %10, 0
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %11, label %14, label %13

13:                                               ; preds = %9
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %12, i32 13, i32 %3, i64 0) #21
  unreachable

14:                                               ; preds = %9
  %15 = and i32 %0, 65528
  %16 = or i32 %15, 7
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 27, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp ugt i32 %16, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %14
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %12, i32 13, i32 %3, i64 0) #21
  unreachable

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 27, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, %15
  %25 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %12, i32 %24)
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = add i32 %24, 4
  %28 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %26, i32 %27)
  %29 = and i32 %28, 7936
  %30 = icmp eq i32 %29, 512
  br i1 %30, label %33, label %31

31:                                               ; preds = %21
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %32, i32 13, i32 %3, i64 0) #21
  unreachable

33:                                               ; preds = %21
  %34 = trunc i32 %28 to i16
  %35 = icmp slt i16 %34, 0
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %35, label %38, label %37

37:                                               ; preds = %33
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 11, i32 %3, i64 0) #21
  unreachable

38:                                               ; preds = %33
  %39 = lshr i32 %25, 16
  %40 = shl i32 %28, 16
  %41 = and i32 %40, 16711680
  %42 = and i32 %28, -16777216
  %43 = or i32 %42, %39
  %44 = or i32 %43, %41
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 25, i32 1
  store i32 %44, i32* %45, align 4
  %46 = and i32 %25, 65535
  %47 = and i32 %28, 983040
  %48 = or i32 %47, %46
  %49 = and i32 %28, 8388608
  %50 = icmp eq i32 %49, 0
  %51 = shl nuw i32 %48, 12
  %52 = or i32 %51, 4095
  %53 = select i1 %50, i32 %48, i32 %52
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 25, i32 2
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 25, i32 3
  store i32 %28, i32* %55, align 4
  br label %56

56:                                               ; preds = %38, %5
  %57 = phi %struct.CPUX86State* [ %36, %38 ], [ %6, %5 ]
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 25, i32 0
  store i32 %2, i32* %58, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_ltr(i32 %0) local_unnamed_addr #3 {
  %2 = and i32 %0, 65535
  %3 = and i32 %0, 65532
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 26, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 26, i32 2
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 26, i32 3
  store i32 0, i32* %9, align 4
  br label %64

10:                                               ; preds = %1
  %11 = and i32 %0, 4
  %12 = icmp eq i32 %11, 0
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %12, label %15, label %14

14:                                               ; preds = %10
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %13, i32 13, i32 %3, i64 0) #21
  unreachable

15:                                               ; preds = %10
  %16 = and i32 %0, 65528
  %17 = or i32 %16, 7
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 27, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %13, i32 13, i32 %3, i64 0) #21
  unreachable

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 27, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add i32 %24, %16
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %13, i32 %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = add i32 %25, 4
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %27, i32 %28)
  %30 = and i32 %29, 4096
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %22
  %33 = lshr i32 %29, 8
  %34 = and i32 %33, 7
  %35 = or i32 %34, 8
  %36 = icmp eq i32 %35, 9
  br i1 %36, label %39, label %37

37:                                               ; preds = %32, %22
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %38, i32 13, i32 %3, i64 0) #21
  unreachable

39:                                               ; preds = %32
  %40 = trunc i32 %29 to i16
  %41 = icmp slt i16 %40, 0
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %41, label %44, label %43

43:                                               ; preds = %39
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %42, i32 11, i32 %3, i64 0) #21
  unreachable

44:                                               ; preds = %39
  %45 = lshr i32 %26, 16
  %46 = shl i32 %29, 16
  %47 = and i32 %46, 16711680
  %48 = and i32 %29, -16777216
  %49 = or i32 %48, %45
  %50 = or i32 %49, %47
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 26, i32 1
  store i32 %50, i32* %51, align 4
  %52 = and i32 %26, 65535
  %53 = and i32 %29, 983040
  %54 = or i32 %53, %52
  %55 = and i32 %29, 8388608
  %56 = icmp eq i32 %55, 0
  %57 = shl nuw i32 %54, 12
  %58 = or i32 %57, 4095
  %59 = select i1 %56, i32 %54, i32 %58
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 26, i32 2
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 26, i32 3
  store i32 %29, i32* %61, align 4
  %62 = or i32 %29, 512
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %42, i32 %28, i32 %62)
  %63 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %64

64:                                               ; preds = %44, %5
  %65 = phi %struct.CPUX86State* [ %63, %44 ], [ %6, %5 ]
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %65, i64 0, i32 26, i32 0
  store i32 %2, i32* %66, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_load_seg(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = and i32 %1, 65535
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 21
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 3
  %8 = and i32 %1, 65532
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %65

10:                                               ; preds = %2
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %4, i32 13, i32 0, i64 0) #21
  unreachable

13:                                               ; preds = %10
  %14 = sext i32 %0 to i64
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 %14, i32 0
  store i32 %3, i32* %15, align 4
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 %14, i32 1
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 %14, i32 2
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 %14, i32 3
  store i32 0, i32* %18, align 4
  %19 = icmp eq i32 %0, 1
  br i1 %19, label %22, label %20

20:                                               ; preds = %13
  %21 = load i32, i32* %5, align 4
  br label %30

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 1, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = lshr i32 %24, 18
  %26 = and i32 %25, 16
  %27 = load i32, i32* %5, align 4
  %28 = and i32 %27, -32785
  %29 = or i32 %28, %26
  store i32 %29, i32* %5, align 4
  br label %30

30:                                               ; preds = %22, %20
  %31 = phi i32 [ %21, %20 ], [ %29, %22 ]
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = lshr i32 %33, 17
  %35 = and i32 %34, 32
  %36 = trunc i32 %31 to i16
  %37 = icmp slt i16 %36, 0
  br i1 %37, label %202, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 29, i64 0
  %40 = load i32, i32* %39, align 16
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 20
  %45 = load i32, i32* %44, align 16
  %46 = and i32 %45, 131072
  %47 = icmp ne i32 %46, 0
  %48 = and i32 %31, 16
  %49 = icmp eq i32 %48, 0
  %50 = or i1 %49, %47
  br i1 %50, label %51, label %53

51:                                               ; preds = %43, %38
  %52 = or i32 %35, 64
  br label %202

53:                                               ; preds = %43
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 3, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = or i32 %57, %55
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = or i32 %58, %60
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i32 0, i32 64
  %64 = or i32 %63, %35
  br label %202

65:                                               ; preds = %2
  %66 = and i32 %1, 4
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 25
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 27
  %70 = select i1 %67, %struct.SegmentCache* %69, %struct.SegmentCache* %68
  %71 = and i32 %1, 65528
  %72 = or i32 %71, 7
  %73 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %70, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = icmp ugt i32 %72, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %65
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %4, i32 13, i32 %8, i64 0) #21
  unreachable

77:                                               ; preds = %65
  %78 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %70, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, %71
  %81 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %4, i32 %80)
  %82 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %83 = add i32 %80, 4
  %84 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %82, i32 %83)
  %85 = and i32 %84, 4096
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %77
  %88 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %88, i32 13, i32 %8, i64 0) #21
  unreachable

89:                                               ; preds = %77
  %90 = and i32 %1, 3
  %91 = lshr i32 %84, 13
  %92 = and i32 %91, 3
  %93 = icmp eq i32 %0, 2
  %94 = and i32 %84, 2560
  br i1 %93, label %95, label %105

95:                                               ; preds = %89
  %96 = icmp eq i32 %94, 512
  br i1 %96, label %99, label %97

97:                                               ; preds = %95
  %98 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %98, i32 13, i32 %8, i64 0) #21
  unreachable

99:                                               ; preds = %95
  %100 = icmp eq i32 %90, %7
  %101 = icmp eq i32 %92, %7
  %102 = and i1 %100, %101
  br i1 %102, label %118, label %103

103:                                              ; preds = %99
  %104 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %104, i32 13, i32 %8, i64 0) #21
  unreachable

105:                                              ; preds = %89
  %106 = icmp eq i32 %94, 2048
  br i1 %106, label %107, label %109

107:                                              ; preds = %105
  %108 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %108, i32 13, i32 %8, i64 0) #21
  unreachable

109:                                              ; preds = %105
  %110 = and i32 %84, 3072
  %111 = icmp eq i32 %110, 3072
  br i1 %111, label %118, label %112

112:                                              ; preds = %109
  %113 = icmp ult i32 %92, %7
  %114 = icmp ult i32 %92, %90
  %115 = or i1 %113, %114
  br i1 %115, label %116, label %118

116:                                              ; preds = %112
  %117 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %117, i32 13, i32 %8, i64 0) #21
  unreachable

118:                                              ; preds = %109, %112, %99
  %119 = trunc i32 %84 to i16
  %120 = icmp slt i16 %119, 0
  br i1 %120, label %125, label %121

121:                                              ; preds = %118
  %122 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %93, label %123, label %124

123:                                              ; preds = %121
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %122, i32 12, i32 %8, i64 0) #21
  unreachable

124:                                              ; preds = %121
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %122, i32 11, i32 %8, i64 0) #21
  unreachable

125:                                              ; preds = %118
  %126 = and i32 %84, 256
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %131

128:                                              ; preds = %125
  %129 = or i32 %84, 256
  %130 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %130, i32 %83, i32 %129)
  br label %131

131:                                              ; preds = %125, %128
  %132 = phi i32 [ %84, %125 ], [ %129, %128 ]
  %133 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %134 = lshr i32 %81, 16
  %135 = shl i32 %132, 16
  %136 = and i32 %135, 16711680
  %137 = and i32 %132, -16777216
  %138 = or i32 %137, %134
  %139 = or i32 %138, %136
  %140 = and i32 %81, 65535
  %141 = and i32 %132, 983040
  %142 = or i32 %141, %140
  %143 = and i32 %132, 8388608
  %144 = icmp eq i32 %143, 0
  %145 = shl nuw i32 %142, 12
  %146 = or i32 %145, 4095
  %147 = select i1 %144, i32 %142, i32 %146
  %148 = sext i32 %0 to i64
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 %148, i32 0
  store i32 %3, i32* %149, align 4
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 %148, i32 1
  store i32 %139, i32* %150, align 4
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 %148, i32 2
  store i32 %147, i32* %151, align 4
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 %148, i32 3
  store i32 %132, i32* %152, align 4
  %153 = icmp eq i32 %0, 1
  br i1 %153, label %157, label %154

154:                                              ; preds = %131
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 21
  %156 = load i32, i32* %155, align 4
  br label %166

157:                                              ; preds = %131
  %158 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 1, i32 3
  %159 = load i32, i32* %158, align 4
  %160 = lshr i32 %159, 18
  %161 = and i32 %160, 16
  %162 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 21
  %163 = load i32, i32* %162, align 4
  %164 = and i32 %163, -32785
  %165 = or i32 %164, %161
  store i32 %165, i32* %162, align 4
  br label %166

166:                                              ; preds = %157, %154
  %167 = phi i32 [ %156, %154 ], [ %165, %157 ]
  %168 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 2, i32 3
  %169 = load i32, i32* %168, align 4
  %170 = lshr i32 %169, 17
  %171 = and i32 %170, 32
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 21
  %173 = trunc i32 %167 to i16
  %174 = icmp slt i16 %173, 0
  br i1 %174, label %202, label %175

175:                                              ; preds = %166
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 29, i64 0
  %177 = load i32, i32* %176, align 16
  %178 = and i32 %177, 1
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %188, label %180

180:                                              ; preds = %175
  %181 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 20
  %182 = load i32, i32* %181, align 16
  %183 = and i32 %182, 131072
  %184 = icmp ne i32 %183, 0
  %185 = and i32 %167, 16
  %186 = icmp eq i32 %185, 0
  %187 = or i1 %186, %184
  br i1 %187, label %188, label %190

188:                                              ; preds = %180, %175
  %189 = or i32 %171, 64
  br label %202

190:                                              ; preds = %180
  %191 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 3, i32 1
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = or i32 %194, %192
  %196 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 24, i64 2, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = or i32 %195, %197
  %199 = icmp eq i32 %198, 0
  %200 = select i1 %199, i32 0, i32 64
  %201 = or i32 %200, %171
  br label %202

202:                                              ; preds = %190, %188, %166, %53, %51, %30
  %203 = phi i32 [ %31, %30 ], [ %31, %51 ], [ %31, %53 ], [ %167, %166 ], [ %167, %188 ], [ %167, %190 ]
  %204 = phi i32 [ %35, %30 ], [ %52, %51 ], [ %64, %53 ], [ %171, %166 ], [ %189, %188 ], [ %201, %190 ]
  %205 = phi i32* [ %5, %30 ], [ %5, %51 ], [ %5, %53 ], [ %172, %166 ], [ %172, %188 ], [ %172, %190 ]
  %206 = and i32 %203, -97
  %207 = or i32 %204, %206
  store i32 %207, i32* %205, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_ljmp_protected(i32 %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = and i32 %0, 65532
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %7, i32 13, i32 0, i64 0) #21
  unreachable

8:                                                ; preds = %3
  %9 = and i32 %0, 4
  %10 = icmp eq i32 %9, 0
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 25
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 27
  %14 = select i1 %10, %struct.SegmentCache* %13, %struct.SegmentCache* %12
  %15 = or i32 %0, 7
  %16 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %11, i32 13, i32 %4, i64 0) #21
  unreachable

20:                                               ; preds = %8
  %21 = and i32 %0, -8
  %22 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, %21
  %25 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %11, i32 %24)
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = add i32 %24, 4
  %28 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %26, i32 %27)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 21
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, 3
  %33 = and i32 %28, 4096
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %124, label %35

35:                                               ; preds = %20
  %36 = and i32 %28, 2048
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

39:                                               ; preds = %35
  %40 = lshr i32 %28, 13
  %41 = and i32 %40, 3
  %42 = and i32 %28, 1024
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %39
  %45 = icmp ugt i32 %41, %32
  br i1 %45, label %46, label %54

46:                                               ; preds = %44
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

47:                                               ; preds = %39
  %48 = and i32 %0, 3
  %49 = icmp ugt i32 %48, %32
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

51:                                               ; preds = %47
  %52 = icmp eq i32 %41, %32
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

54:                                               ; preds = %51, %44
  %55 = trunc i32 %28 to i16
  %56 = icmp slt i16 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 11, i32 %4, i64 0) #21
  unreachable

58:                                               ; preds = %54
  %59 = and i32 %25, 65535
  %60 = and i32 %28, 983040
  %61 = or i32 %60, %59
  %62 = and i32 %28, 8388608
  %63 = icmp eq i32 %62, 0
  %64 = shl nuw i32 %61, 12
  %65 = or i32 %64, 4095
  %66 = select i1 %63, i32 %61, i32 %65
  %67 = icmp ult i32 %66, %1
  %68 = and i32 %31, 16384
  %69 = and i32 %28, 2097152
  %70 = or i32 %68, %69
  %71 = icmp eq i32 %70, 0
  %72 = and i1 %71, %67
  br i1 %72, label %73, label %74

73:                                               ; preds = %58
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

74:                                               ; preds = %58
  %75 = or i32 %32, %4
  %76 = lshr i32 %25, 16
  %77 = shl i32 %28, 16
  %78 = and i32 %77, 16711680
  %79 = and i32 %28, -16777216
  %80 = or i32 %79, %76
  %81 = or i32 %80, %78
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 1, i32 0
  store i32 %75, i32* %82, align 4
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 1, i32 1
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 1, i32 2
  store i32 %66, i32* %84, align 4
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 1, i32 3
  store i32 %28, i32* %85, align 4
  %86 = lshr i32 %28, 18
  %87 = and i32 %86, 16
  %88 = and i32 %31, -32785
  %89 = or i32 %88, %87
  store i32 %89, i32* %30, align 4
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 2, i32 3
  %91 = load i32, i32* %90, align 4
  %92 = lshr i32 %91, 17
  %93 = and i32 %92, 32
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 29, i64 0
  %95 = load i32, i32* %94, align 16
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %105, label %98

98:                                               ; preds = %74
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 20
  %100 = load i32, i32* %99, align 16
  %101 = and i32 %100, 131072
  %102 = icmp ne i32 %101, 0
  %103 = icmp eq i32 %87, 0
  %104 = or i1 %103, %102
  br i1 %104, label %105, label %107

105:                                              ; preds = %98, %74
  %106 = or i32 %93, 64
  br label %119

107:                                              ; preds = %98
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 3, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 0, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = or i32 %111, %109
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 24, i64 2, i32 1
  %114 = load i32, i32* %113, align 4
  %115 = or i32 %112, %114
  %116 = icmp eq i32 %115, 0
  %117 = select i1 %116, i32 0, i32 64
  %118 = or i32 %117, %93
  br label %119

119:                                              ; preds = %105, %107
  %120 = phi i32 [ %106, %105 ], [ %118, %107 ]
  %121 = and i32 %89, -32865
  %122 = or i32 %120, %121
  store i32 %122, i32* %30, align 4
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 18
  store i32 %1, i32* %123, align 8
  br label %267

124:                                              ; preds = %20
  %125 = lshr i32 %28, 13
  %126 = and i32 %125, 3
  %127 = and i32 %0, 3
  %128 = lshr i32 %28, 8
  %129 = and i32 %128, 15
  switch i32 %129, label %266 [
    i32 1, label %130
    i32 9, label %130
    i32 5, label %130
    i32 4, label %141
    i32 12, label %141
  ]

130:                                              ; preds = %124, %124, %124
  %131 = icmp ult i32 %126, %32
  %132 = icmp ult i32 %126, %127
  %133 = or i1 %132, %131
  br i1 %133, label %134, label %135

134:                                              ; preds = %130
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

135:                                              ; preds = %130
  %136 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 18
  %137 = load i32, i32* %136, align 8
  %138 = add i32 %137, %2
  tail call fastcc void @switch_tss(%struct.CPUX86State* %29, i32 %0, i32 %25, i32 %28, i32 0, i32 %138)
  %139 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 1
  store i32 1, i32* %140, align 16
  br label %267

141:                                              ; preds = %124, %124
  %142 = icmp ult i32 %126, %32
  %143 = icmp ult i32 %126, %127
  %144 = or i1 %143, %142
  br i1 %144, label %145, label %146

145:                                              ; preds = %141
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

146:                                              ; preds = %141
  %147 = trunc i32 %28 to i16
  %148 = icmp slt i16 %147, 0
  br i1 %148, label %150, label %149

149:                                              ; preds = %146
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 11, i32 %4, i64 0) #21
  unreachable

150:                                              ; preds = %146
  %151 = lshr i32 %25, 16
  %152 = and i32 %25, 65535
  %153 = icmp eq i32 %129, 12
  %154 = and i32 %28, -65536
  %155 = select i1 %153, i32 %154, i32 0
  %156 = or i32 %155, %152
  %157 = and i32 %25, 262144
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 25
  %160 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 27
  %161 = select i1 %158, %struct.SegmentCache* %160, %struct.SegmentCache* %159
  %162 = or i32 %151, 7
  %163 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %161, i64 0, i32 2
  %164 = load i32, i32* %163, align 4
  %165 = icmp ugt i32 %162, %164
  br i1 %165, label %166, label %168

166:                                              ; preds = %150
  %167 = and i32 %151, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %167, i64 0) #21
  unreachable

168:                                              ; preds = %150
  %169 = and i32 %151, 65528
  %170 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %161, i64 0, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = add i32 %171, %169
  %173 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %29, i32 %172)
  %174 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %175 = add i32 %172, 4
  %176 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %174, i32 %175)
  %177 = lshr i32 %176, 13
  %178 = and i32 %177, 3
  %179 = and i32 %176, 6144
  %180 = icmp eq i32 %179, 6144
  br i1 %180, label %184, label %181

181:                                              ; preds = %168
  %182 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %183 = and i32 %151, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %182, i32 13, i32 %183, i64 0) #21
  unreachable

184:                                              ; preds = %168
  %185 = and i32 %176, 1024
  %186 = icmp ne i32 %185, 0
  %187 = icmp ugt i32 %178, %32
  %188 = and i1 %186, %187
  %189 = icmp eq i32 %178, %32
  %190 = or i1 %186, %189
  %191 = xor i1 %188, %190
  br i1 %191, label %195, label %192

192:                                              ; preds = %184
  %193 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %194 = and i32 %151, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %193, i32 13, i32 %194, i64 0) #21
  unreachable

195:                                              ; preds = %184
  %196 = trunc i32 %176 to i16
  %197 = icmp slt i16 %196, 0
  br i1 %197, label %201, label %198

198:                                              ; preds = %195
  %199 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %200 = and i32 %151, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %199, i32 13, i32 %200, i64 0) #21
  unreachable

201:                                              ; preds = %195
  %202 = and i32 %173, 65535
  %203 = and i32 %176, 983040
  %204 = or i32 %203, %202
  %205 = and i32 %176, 8388608
  %206 = icmp eq i32 %205, 0
  %207 = shl nuw i32 %204, 12
  %208 = or i32 %207, 4095
  %209 = select i1 %206, i32 %204, i32 %208
  %210 = icmp ugt i32 %156, %209
  %211 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %210, label %212, label %213

212:                                              ; preds = %201
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %211, i32 13, i32 0, i64 0) #21
  unreachable

213:                                              ; preds = %201
  %214 = and i32 %151, 65532
  %215 = or i32 %32, %214
  %216 = lshr i32 %173, 16
  %217 = shl i32 %176, 16
  %218 = and i32 %217, 16711680
  %219 = and i32 %176, -16777216
  %220 = or i32 %219, %216
  %221 = or i32 %220, %218
  %222 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 0
  store i32 %215, i32* %222, align 4
  %223 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 1
  store i32 %221, i32* %223, align 4
  %224 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 2
  store i32 %209, i32* %224, align 4
  %225 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 3
  store i32 %176, i32* %225, align 4
  %226 = lshr i32 %176, 18
  %227 = and i32 %226, 16
  %228 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 21
  %229 = load i32, i32* %228, align 4
  %230 = and i32 %229, -32785
  %231 = or i32 %230, %227
  store i32 %231, i32* %228, align 4
  %232 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 2, i32 3
  %233 = load i32, i32* %232, align 4
  %234 = lshr i32 %233, 17
  %235 = and i32 %234, 32
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 29, i64 0
  %237 = load i32, i32* %236, align 16
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %247, label %240

240:                                              ; preds = %213
  %241 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 20
  %242 = load i32, i32* %241, align 16
  %243 = and i32 %242, 131072
  %244 = icmp ne i32 %243, 0
  %245 = icmp eq i32 %227, 0
  %246 = or i1 %245, %244
  br i1 %246, label %247, label %249

247:                                              ; preds = %240, %213
  %248 = or i32 %235, 64
  br label %261

249:                                              ; preds = %240
  %250 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 3, i32 1
  %251 = load i32, i32* %250, align 4
  %252 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = or i32 %253, %251
  %255 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 2, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = or i32 %254, %256
  %258 = icmp eq i32 %257, 0
  %259 = select i1 %258, i32 0, i32 64
  %260 = or i32 %259, %235
  br label %261

261:                                              ; preds = %247, %249
  %262 = phi i32 [ %248, %247 ], [ %260, %249 ]
  %263 = and i32 %231, -32865
  %264 = or i32 %262, %263
  store i32 %264, i32* %228, align 4
  %265 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 18
  store i32 %156, i32* %265, align 8
  br label %267

266:                                              ; preds = %124
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %29, i32 13, i32 %4, i64 0) #21
  unreachable

267:                                              ; preds = %135, %261, %119
  ret void
}

; Function Attrs: uwtable
define void @helper_lcall_real(i32 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #3 {
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 4
  %7 = load i32, i32* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 2, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 4194304
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 65535, i32 -1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 2, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %4
  %17 = add i32 %7, -4
  %18 = and i32 %12, %17
  %19 = add i32 %18, %14
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 1, i32 0
  %21 = load i32, i32* %20, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %5, i32 %19, i32 %21)
  %22 = add i32 %7, -8
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = and i32 %12, %22
  %25 = add i32 %24, %14
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %23, i32 %25, i32 %3)
  br label %36

26:                                               ; preds = %4
  %27 = add i32 %7, -2
  %28 = and i32 %12, %27
  %29 = add i32 %28, %14
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 1, i32 0
  %31 = load i32, i32* %30, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %5, i32 %29, i32 %31)
  %32 = add i32 %7, -4
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = and i32 %12, %32
  %35 = add i32 %34, %14
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %33, i32 %35, i32 %3)
  br label %36

36:                                               ; preds = %26, %16
  %37 = phi i32 [ %34, %26 ], [ %24, %16 ]
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 0, i64 4
  %40 = load i32, i32* %39, align 16
  %41 = xor i32 %12, -1
  %42 = and i32 %40, %41
  %43 = or i32 %42, %37
  store i32 %43, i32* %39, align 16
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 18
  store i32 %1, i32* %44, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 24, i64 1, i32 0
  store i32 %0, i32* %45, align 16
  %46 = shl i32 %0, 4
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 24, i64 1, i32 1
  store i32 %46, i32* %47, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_lcall_protected(i32 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  store i32 0, i32* %5, align 4
  %8 = bitcast i32* %6 to i8*
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 18
  %11 = load i32, i32* %10, align 8
  %12 = add i32 %11, %3
  %13 = and i32 %0, 65532
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %4
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %9, i32 13, i32 0, i64 0) #21
  unreachable

16:                                               ; preds = %4
  %17 = and i32 %0, 4
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 25
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 27
  %21 = select i1 %18, %struct.SegmentCache* %20, %struct.SegmentCache* %19
  %22 = or i32 %0, 7
  %23 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %21, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp ugt i32 %22, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %16
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %9, i32 13, i32 %13, i64 0) #21
  unreachable

27:                                               ; preds = %16
  %28 = and i32 %0, -8
  %29 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %21, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, %28
  %32 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %9, i32 %31)
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = add i32 %31, 4
  %35 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %33, i32 %34)
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 21
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 3
  %40 = and i32 %35, 4096
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %167, label %42

42:                                               ; preds = %27
  %43 = and i32 %35, 2048
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

46:                                               ; preds = %42
  %47 = lshr i32 %35, 13
  %48 = and i32 %47, 3
  %49 = and i32 %35, 1024
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = icmp ugt i32 %48, %39
  br i1 %52, label %53, label %61

53:                                               ; preds = %51
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

54:                                               ; preds = %46
  %55 = and i32 %0, 3
  %56 = icmp ugt i32 %55, %39
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

58:                                               ; preds = %54
  %59 = icmp eq i32 %48, %39
  br i1 %59, label %61, label %60

60:                                               ; preds = %58
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

61:                                               ; preds = %58, %51
  %62 = trunc i32 %35 to i16
  %63 = icmp slt i16 %62, 0
  br i1 %63, label %65, label %64

64:                                               ; preds = %61
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 11, i32 %13, i64 0) #21
  unreachable

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 0, i64 4
  %67 = load i32, i32* %66, align 16
  store i32 %67, i32* %6, align 4
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 24, i64 2, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, 4194304
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, i32 65535, i32 -1
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 24, i64 2, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %2, 0
  br i1 %75, label %86, label %76

76:                                               ; preds = %65
  %77 = add i32 %67, -4
  %78 = and i32 %72, %77
  %79 = add i32 %78, %74
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 24, i64 1, i32 0
  %81 = load i32, i32* %80, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %36, i32 %79, i32 %81)
  %82 = add i32 %67, -8
  store i32 %82, i32* %6, align 4
  %83 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %84 = and i32 %82, %72
  %85 = add i32 %84, %74
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %83, i32 %85, i32 %12)
  br label %96

86:                                               ; preds = %65
  %87 = add i32 %67, -2
  %88 = and i32 %72, %87
  %89 = add i32 %88, %74
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 24, i64 1, i32 0
  %91 = load i32, i32* %90, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %36, i32 %89, i32 %91)
  %92 = add i32 %67, -4
  store i32 %92, i32* %6, align 4
  %93 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %94 = and i32 %92, %72
  %95 = add i32 %94, %74
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %93, i32 %95, i32 %12)
  br label %96

96:                                               ; preds = %86, %76
  %97 = phi i32 [ %92, %86 ], [ %82, %76 ]
  %98 = and i32 %32, 65535
  %99 = and i32 %35, 983040
  %100 = or i32 %99, %98
  %101 = and i32 %35, 8388608
  %102 = icmp eq i32 %101, 0
  %103 = shl nuw i32 %100, 12
  %104 = or i32 %103, 4095
  %105 = select i1 %102, i32 %100, i32 %104
  %106 = icmp ult i32 %105, %1
  %107 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %106, label %108, label %109

108:                                              ; preds = %96
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %107, i32 13, i32 %13, i64 0) #21
  unreachable

109:                                              ; preds = %96
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 0, i64 4
  %111 = load i32, i32* %110, align 16
  %112 = xor i32 %72, -1
  %113 = and i32 %111, %112
  %114 = and i32 %97, %72
  %115 = or i32 %114, %113
  store i32 %115, i32* %110, align 16
  %116 = or i32 %39, %13
  %117 = lshr i32 %32, 16
  %118 = shl i32 %35, 16
  %119 = and i32 %118, 16711680
  %120 = and i32 %35, -16777216
  %121 = or i32 %120, %117
  %122 = or i32 %121, %119
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 1, i32 0
  store i32 %116, i32* %123, align 4
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 1, i32 1
  store i32 %122, i32* %124, align 4
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 1, i32 2
  store i32 %105, i32* %125, align 4
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 1, i32 3
  store i32 %35, i32* %126, align 4
  %127 = lshr i32 %35, 18
  %128 = and i32 %127, 16
  %129 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 21
  %130 = load i32, i32* %129, align 4
  %131 = and i32 %130, -32785
  %132 = or i32 %131, %128
  store i32 %132, i32* %129, align 4
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 2, i32 3
  %134 = load i32, i32* %133, align 4
  %135 = lshr i32 %134, 17
  %136 = and i32 %135, 32
  %137 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 29, i64 0
  %138 = load i32, i32* %137, align 16
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %148, label %141

141:                                              ; preds = %109
  %142 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 20
  %143 = load i32, i32* %142, align 16
  %144 = and i32 %143, 131072
  %145 = icmp ne i32 %144, 0
  %146 = icmp eq i32 %128, 0
  %147 = or i1 %146, %145
  br i1 %147, label %148, label %150

148:                                              ; preds = %141, %109
  %149 = or i32 %136, 64
  br label %162

150:                                              ; preds = %141
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 3, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = or i32 %154, %152
  %156 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 24, i64 2, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = or i32 %155, %157
  %159 = icmp eq i32 %158, 0
  %160 = select i1 %159, i32 0, i32 64
  %161 = or i32 %160, %136
  br label %162

162:                                              ; preds = %148, %150
  %163 = phi i32 [ %149, %148 ], [ %161, %150 ]
  %164 = and i32 %132, -32865
  %165 = or i32 %163, %164
  store i32 %165, i32* %129, align 4
  %166 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 18
  store i32 %1, i32* %166, align 8
  br label %575

167:                                              ; preds = %27
  %168 = lshr i32 %35, 8
  %169 = and i32 %168, 31
  %170 = lshr i32 %35, 13
  %171 = and i32 %170, 3
  %172 = and i32 %0, 3
  switch i32 %169, label %181 [
    i32 1, label %173
    i32 9, label %173
    i32 5, label %173
    i32 4, label %182
    i32 12, label %182
  ]

173:                                              ; preds = %167, %167, %167
  %174 = icmp ult i32 %171, %39
  %175 = icmp ult i32 %171, %172
  %176 = or i1 %175, %174
  br i1 %176, label %177, label %178

177:                                              ; preds = %173
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

178:                                              ; preds = %173
  tail call fastcc void @switch_tss(%struct.CPUX86State* %36, i32 %0, i32 %32, i32 %35, i32 2, i32 %12)
  %179 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %180 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %179, i64 0, i32 1
  store i32 1, i32* %180, align 16
  br label %575

181:                                              ; preds = %167
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

182:                                              ; preds = %167, %167
  %183 = lshr i32 %169, 3
  %184 = icmp ult i32 %171, %39
  %185 = icmp ult i32 %171, %172
  %186 = or i1 %185, %184
  br i1 %186, label %187, label %188

187:                                              ; preds = %182
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %13, i64 0) #21
  unreachable

188:                                              ; preds = %182
  %189 = trunc i32 %35 to i16
  %190 = icmp slt i16 %189, 0
  br i1 %190, label %192, label %191

191:                                              ; preds = %188
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 11, i32 %13, i64 0) #21
  unreachable

192:                                              ; preds = %188
  %193 = lshr i32 %32, 16
  %194 = and i32 %35, -65536
  %195 = and i32 %32, 65535
  %196 = or i32 %194, %195
  %197 = and i32 %35, 31
  %198 = and i32 %193, 65532
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %192
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 0, i64 0) #21
  unreachable

201:                                              ; preds = %192
  %202 = and i32 %32, 262144
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 25
  %205 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 27
  %206 = select i1 %203, %struct.SegmentCache* %205, %struct.SegmentCache* %204
  %207 = or i32 %193, 7
  %208 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %206, i64 0, i32 2
  %209 = load i32, i32* %208, align 4
  %210 = icmp ugt i32 %207, %209
  br i1 %210, label %211, label %212

211:                                              ; preds = %201
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %36, i32 13, i32 %198, i64 0) #21
  unreachable

212:                                              ; preds = %201
  %213 = and i32 %193, 65528
  %214 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %206, i64 0, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = add i32 %215, %213
  %217 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %36, i32 %216)
  %218 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %219 = add i32 %216, 4
  %220 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %218, i32 %219)
  %221 = and i32 %220, 6144
  %222 = icmp eq i32 %221, 6144
  br i1 %222, label %225, label %223

223:                                              ; preds = %212
  %224 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %224, i32 13, i32 %198, i64 0) #21
  unreachable

225:                                              ; preds = %212
  %226 = lshr i32 %220, 13
  %227 = and i32 %226, 3
  %228 = icmp ugt i32 %227, %39
  br i1 %228, label %229, label %231

229:                                              ; preds = %225
  %230 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %230, i32 13, i32 %198, i64 0) #21
  unreachable

231:                                              ; preds = %225
  %232 = trunc i32 %220 to i16
  %233 = icmp slt i16 %232, 0
  br i1 %233, label %236, label %234

234:                                              ; preds = %231
  %235 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %235, i32 11, i32 %198, i64 0) #21
  unreachable

236:                                              ; preds = %231
  %237 = and i32 %220, 1024
  %238 = icmp eq i32 %237, 0
  %239 = icmp ult i32 %227, %39
  %240 = and i1 %238, %239
  %241 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %240, label %242, label %368

242:                                              ; preds = %236
  call fastcc void @get_ss_esp_from_tss(%struct.CPUX86State* %241, i32* nonnull %5, i32* nonnull %6, i32 %227)
  %243 = load i32, i32* %5, align 4
  %244 = and i32 %243, 65532
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %248

246:                                              ; preds = %242
  %247 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %247, i32 10, i32 0, i64 0) #21
  unreachable

248:                                              ; preds = %242
  %249 = and i32 %243, 3
  %250 = icmp eq i32 %249, %227
  br i1 %250, label %253, label %251

251:                                              ; preds = %248
  %252 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %252, i32 10, i32 %244, i64 0) #21
  unreachable

253:                                              ; preds = %248
  %254 = and i32 %243, 4
  %255 = icmp eq i32 %254, 0
  %256 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 25
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 27
  %259 = select i1 %255, %struct.SegmentCache* %258, %struct.SegmentCache* %257
  %260 = or i32 %243, 7
  %261 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %259, i64 0, i32 2
  %262 = load i32, i32* %261, align 4
  %263 = icmp ugt i32 %260, %262
  br i1 %263, label %264, label %265

264:                                              ; preds = %253
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %256, i32 10, i32 %244, i64 0) #21
  unreachable

265:                                              ; preds = %253
  %266 = and i32 %243, -8
  %267 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %259, i64 0, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = add i32 %268, %266
  %270 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %256, i32 %269)
  %271 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %272 = add i32 %269, 4
  %273 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %271, i32 %272)
  %274 = lshr i32 %273, 13
  %275 = and i32 %274, 3
  %276 = icmp eq i32 %275, %227
  br i1 %276, label %279, label %277

277:                                              ; preds = %265
  %278 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %278, i32 10, i32 %244, i64 0) #21
  unreachable

279:                                              ; preds = %265
  %280 = and i32 %273, 6656
  %281 = icmp eq i32 %280, 4608
  br i1 %281, label %284, label %282

282:                                              ; preds = %279
  %283 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %283, i32 10, i32 %244, i64 0) #21
  unreachable

284:                                              ; preds = %279
  %285 = trunc i32 %273 to i16
  %286 = icmp slt i16 %285, 0
  %287 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %286, label %289, label %288

288:                                              ; preds = %284
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %287, i32 10, i32 %244, i64 0) #21
  unreachable

289:                                              ; preds = %284
  %290 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 24, i64 2, i32 3
  %291 = load i32, i32* %290, align 4
  %292 = and i32 %291, 4194304
  %293 = icmp eq i32 %292, 0
  %294 = select i1 %293, i32 65535, i32 -1
  %295 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 24, i64 2, i32 1
  %296 = load i32, i32* %295, align 4
  %297 = and i32 %273, 4194304
  %298 = icmp eq i32 %297, 0
  %299 = select i1 %298, i32 65535, i32 -1
  %300 = lshr i32 %270, 16
  %301 = shl i32 %273, 16
  %302 = and i32 %301, 16711680
  %303 = and i32 %273, -16777216
  %304 = or i32 %303, %300
  %305 = or i32 %304, %302
  %306 = icmp eq i32 %183, 0
  %307 = load i32, i32* %6, align 4
  br i1 %306, label %338, label %308

308:                                              ; preds = %289
  %309 = add i32 %307, -4
  %310 = and i32 %309, %299
  %311 = add i32 %310, %305
  %312 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 24, i64 2, i32 0
  %313 = load i32, i32* %312, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* nonnull %287, i32 %311, i32 %313)
  %314 = add i32 %307, -8
  store i32 %314, i32* %6, align 4
  %315 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %316 = and i32 %314, %299
  %317 = add i32 %316, %305
  %318 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %315, i64 0, i32 0, i64 4
  %319 = load i32, i32* %318, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %315, i32 %317, i32 %319)
  %320 = icmp eq i32 %197, 0
  br i1 %320, label %389, label %321

321:                                              ; preds = %308, %321
  %322 = phi i32 [ %333, %321 ], [ %314, %308 ]
  %323 = phi i32 [ %324, %321 ], [ %197, %308 ]
  %324 = add nsw i32 %323, -1
  %325 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %326 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %325, i64 0, i32 0, i64 4
  %327 = load i32, i32* %326, align 16
  %328 = shl i32 %324, 2
  %329 = add i32 %327, %328
  %330 = and i32 %329, %294
  %331 = add i32 %330, %296
  %332 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %325, i32 %331)
  %333 = add i32 %322, -4
  %334 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %335 = and i32 %333, %299
  %336 = add i32 %335, %305
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %334, i32 %336, i32 %332)
  %337 = icmp sgt i32 %323, 1
  br i1 %337, label %321, label %379

338:                                              ; preds = %289
  %339 = add i32 %307, -2
  %340 = and i32 %339, %299
  %341 = add i32 %340, %305
  %342 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 24, i64 2, i32 0
  %343 = load i32, i32* %342, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* nonnull %287, i32 %341, i32 %343)
  %344 = add i32 %307, -4
  store i32 %344, i32* %6, align 4
  %345 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %346 = and i32 %344, %299
  %347 = add i32 %346, %305
  %348 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %345, i64 0, i32 0, i64 4
  %349 = load i32, i32* %348, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %345, i32 %347, i32 %349)
  %350 = icmp eq i32 %197, 0
  br i1 %350, label %407, label %351

351:                                              ; preds = %338, %351
  %352 = phi i32 [ %363, %351 ], [ %344, %338 ]
  %353 = phi i32 [ %354, %351 ], [ %197, %338 ]
  %354 = add nsw i32 %353, -1
  %355 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %356 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %355, i64 0, i32 0, i64 4
  %357 = load i32, i32* %356, align 16
  %358 = shl i32 %354, 1
  %359 = add i32 %357, %358
  %360 = and i32 %359, %294
  %361 = add i32 %360, %296
  %362 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* %355, i32 %361)
  %363 = add i32 %352, -2
  %364 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %365 = and i32 %363, %299
  %366 = add i32 %365, %305
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %364, i32 %366, i32 %362)
  %367 = icmp sgt i32 %353, 1
  br i1 %367, label %351, label %378

368:                                              ; preds = %236
  %369 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %241, i64 0, i32 0, i64 4
  %370 = load i32, i32* %369, align 16
  store i32 %370, i32* %6, align 4
  %371 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %241, i64 0, i32 24, i64 2, i32 3
  %372 = load i32, i32* %371, align 4
  %373 = and i32 %372, 4194304
  %374 = icmp eq i32 %373, 0
  %375 = select i1 %374, i32 65535, i32 -1
  %376 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %241, i64 0, i32 24, i64 2, i32 1
  %377 = load i32, i32* %376, align 4
  br label %380

378:                                              ; preds = %351
  store i32 %363, i32* %6, align 4
  br label %380

379:                                              ; preds = %321
  store i32 %333, i32* %6, align 4
  br label %380

380:                                              ; preds = %379, %378, %368
  %381 = phi i32 [ 0, %368 ], [ %243, %378 ], [ %243, %379 ]
  %382 = phi i32 [ %370, %368 ], [ %363, %378 ], [ %333, %379 ]
  %383 = phi i32 [ 0, %368 ], [ %270, %378 ], [ %270, %379 ]
  %384 = phi i32 [ 0, %368 ], [ %273, %378 ], [ %273, %379 ]
  %385 = phi i32 [ %375, %368 ], [ %299, %378 ], [ %299, %379 ]
  %386 = phi i32 [ %377, %368 ], [ %305, %378 ], [ %305, %379 ]
  %387 = phi i32 [ 0, %368 ], [ 1, %378 ], [ 1, %379 ]
  %388 = icmp eq i32 %183, 0
  br i1 %388, label %407, label %389

389:                                              ; preds = %308, %380
  %390 = phi i32 [ %387, %380 ], [ 1, %308 ]
  %391 = phi i32 [ %386, %380 ], [ %305, %308 ]
  %392 = phi i32 [ %385, %380 ], [ %299, %308 ]
  %393 = phi i32 [ %384, %380 ], [ %273, %308 ]
  %394 = phi i32 [ %383, %380 ], [ %270, %308 ]
  %395 = phi i32 [ %382, %380 ], [ %314, %308 ]
  %396 = phi i32 [ %381, %380 ], [ %243, %308 ]
  %397 = add i32 %395, -4
  %398 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %399 = and i32 %397, %392
  %400 = add i32 %399, %391
  %401 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %398, i64 0, i32 24, i64 1, i32 0
  %402 = load i32, i32* %401, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %398, i32 %400, i32 %402)
  %403 = add i32 %395, -8
  store i32 %403, i32* %6, align 4
  %404 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %405 = and i32 %403, %392
  %406 = add i32 %405, %391
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* %404, i32 %406, i32 %12)
  br label %425

407:                                              ; preds = %338, %380
  %408 = phi i32 [ %387, %380 ], [ 1, %338 ]
  %409 = phi i32 [ %386, %380 ], [ %305, %338 ]
  %410 = phi i32 [ %385, %380 ], [ %299, %338 ]
  %411 = phi i32 [ %384, %380 ], [ %273, %338 ]
  %412 = phi i32 [ %383, %380 ], [ %270, %338 ]
  %413 = phi i32 [ %382, %380 ], [ %344, %338 ]
  %414 = phi i32 [ %381, %380 ], [ %243, %338 ]
  %415 = add i32 %413, -2
  %416 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %417 = and i32 %415, %410
  %418 = add i32 %417, %409
  %419 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %416, i64 0, i32 24, i64 1, i32 0
  %420 = load i32, i32* %419, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %416, i32 %418, i32 %420)
  %421 = add i32 %413, -4
  store i32 %421, i32* %6, align 4
  %422 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %423 = and i32 %421, %410
  %424 = add i32 %423, %409
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* %422, i32 %424, i32 %12)
  br label %425

425:                                              ; preds = %407, %389
  %426 = phi i32 [ %408, %407 ], [ %390, %389 ]
  %427 = phi i32 [ %409, %407 ], [ %391, %389 ]
  %428 = phi i32 [ %410, %407 ], [ %392, %389 ]
  %429 = phi i32 [ %411, %407 ], [ %393, %389 ]
  %430 = phi i32 [ %412, %407 ], [ %394, %389 ]
  %431 = phi i32 [ %414, %407 ], [ %396, %389 ]
  %432 = phi i32 [ %421, %407 ], [ %403, %389 ]
  %433 = icmp eq i32 %426, 0
  br i1 %433, label %434, label %442

434:                                              ; preds = %425
  %435 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %436 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %435, i64 0, i32 21
  %437 = load i32, i32* %436, align 4
  %438 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %435, i64 0, i32 24, i64 2, i32 3
  %439 = load i32, i32* %438, align 4
  %440 = lshr i32 %439, 17
  %441 = and i32 %440, 32
  br label %493

442:                                              ; preds = %425
  %443 = and i32 %431, -4
  %444 = or i32 %443, %227
  store i32 %444, i32* %5, align 4
  %445 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %446 = and i32 %430, 65535
  %447 = and i32 %429, 983040
  %448 = or i32 %447, %446
  %449 = and i32 %429, 8388608
  %450 = icmp eq i32 %449, 0
  %451 = shl nuw i32 %448, 12
  %452 = or i32 %451, 4095
  %453 = select i1 %450, i32 %448, i32 %452
  %454 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 0
  store i32 %444, i32* %454, align 4
  %455 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 1
  store i32 %427, i32* %455, align 4
  %456 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 2
  store i32 %453, i32* %456, align 4
  %457 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 3
  store i32 %429, i32* %457, align 4
  %458 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 21
  %459 = load i32, i32* %458, align 4
  %460 = lshr i32 %429, 17
  %461 = and i32 %460, 32
  %462 = trunc i32 %459 to i16
  %463 = icmp slt i16 %462, 0
  br i1 %463, label %489, label %464

464:                                              ; preds = %442
  %465 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 29, i64 0
  %466 = load i32, i32* %465, align 16
  %467 = and i32 %466, 1
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %477, label %469

469:                                              ; preds = %464
  %470 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 20
  %471 = load i32, i32* %470, align 16
  %472 = and i32 %471, 131072
  %473 = icmp ne i32 %472, 0
  %474 = and i32 %459, 16
  %475 = icmp eq i32 %474, 0
  %476 = or i1 %475, %473
  br i1 %476, label %477, label %479

477:                                              ; preds = %469, %464
  %478 = or i32 %461, 64
  br label %489

479:                                              ; preds = %469
  %480 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 3, i32 1
  %481 = load i32, i32* %480, align 4
  %482 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 0, i32 1
  %483 = load i32, i32* %482, align 4
  %484 = or i32 %481, %427
  %485 = or i32 %484, %483
  %486 = icmp eq i32 %485, 0
  %487 = select i1 %486, i32 0, i32 64
  %488 = or i32 %487, %461
  br label %489

489:                                              ; preds = %442, %477, %479
  %490 = phi i32 [ %461, %442 ], [ %478, %477 ], [ %488, %479 ]
  %491 = and i32 %459, -97
  %492 = or i32 %490, %491
  store i32 %492, i32* %458, align 4
  br label %493

493:                                              ; preds = %434, %489
  %494 = phi i32 [ %441, %434 ], [ %461, %489 ]
  %495 = phi i32 [ %437, %434 ], [ %492, %489 ]
  %496 = phi %struct.CPUX86State* [ %435, %434 ], [ %445, %489 ]
  %497 = or i32 %227, %198
  %498 = lshr i32 %217, 16
  %499 = shl i32 %220, 16
  %500 = and i32 %499, 16711680
  %501 = and i32 %220, -16777216
  %502 = or i32 %501, %498
  %503 = or i32 %502, %500
  %504 = and i32 %217, 65535
  %505 = and i32 %220, 983040
  %506 = or i32 %505, %504
  %507 = and i32 %220, 8388608
  %508 = icmp eq i32 %507, 0
  %509 = shl nuw i32 %506, 12
  %510 = or i32 %509, 4095
  %511 = select i1 %508, i32 %506, i32 %510
  %512 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 1, i32 0
  store i32 %497, i32* %512, align 4
  %513 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 1, i32 1
  store i32 %503, i32* %513, align 4
  %514 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 1, i32 2
  store i32 %511, i32* %514, align 4
  %515 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 1, i32 3
  store i32 %220, i32* %515, align 4
  %516 = lshr i32 %220, 18
  %517 = and i32 %516, 16
  %518 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 21
  %519 = and i32 %495, -32785
  %520 = or i32 %519, %517
  store i32 %520, i32* %518, align 4
  %521 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 29, i64 0
  %522 = load i32, i32* %521, align 16
  %523 = and i32 %522, 1
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %532, label %525

525:                                              ; preds = %493
  %526 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 20
  %527 = load i32, i32* %526, align 16
  %528 = and i32 %527, 131072
  %529 = icmp ne i32 %528, 0
  %530 = icmp eq i32 %517, 0
  %531 = or i1 %530, %529
  br i1 %531, label %532, label %534

532:                                              ; preds = %525, %493
  %533 = or i32 %494, 64
  br label %546

534:                                              ; preds = %525
  %535 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 3, i32 1
  %536 = load i32, i32* %535, align 4
  %537 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 0, i32 1
  %538 = load i32, i32* %537, align 4
  %539 = or i32 %538, %536
  %540 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %496, i64 0, i32 24, i64 2, i32 1
  %541 = load i32, i32* %540, align 4
  %542 = or i32 %539, %541
  %543 = icmp eq i32 %542, 0
  %544 = select i1 %543, i32 0, i32 64
  %545 = or i32 %544, %494
  br label %546

546:                                              ; preds = %532, %534
  %547 = phi i32 [ %533, %532 ], [ %545, %534 ]
  %548 = and i32 %520, -32865
  %549 = or i32 %547, %548
  store i32 %549, i32* %518, align 4
  %550 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %551 = load i32, i32* %550, align 4
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %558, label %553, !prof !3, !misexpect !4

553:                                              ; preds = %546
  %554 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %555 = and i32 %495, 3
  tail call void %554(i32 %555, i32 %227)
  %556 = load i32, i32* %518, align 4
  %557 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %558

558:                                              ; preds = %546, %553
  %559 = phi %struct.CPUX86State* [ %496, %546 ], [ %557, %553 ]
  %560 = phi i32 [ %549, %546 ], [ %556, %553 ]
  %561 = and i32 %560, -4
  %562 = or i32 %561, %227
  store i32 %562, i32* %518, align 4
  %563 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %559, i64 0, i32 0, i64 4
  %564 = load i32, i32* %563, align 16
  %565 = xor i32 %428, -1
  %566 = and i32 %564, %565
  %567 = and i32 %432, %428
  %568 = or i32 %567, %566
  store i32 %568, i32* %563, align 16
  %569 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %559, i64 0, i32 18
  store i32 %196, i32* %569, align 8
  %570 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %571 = load i32, i32* %570, align 4
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %575, label %573, !prof !3, !misexpect !4

573:                                              ; preds = %558
  %574 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %574(i32 %39, i32 %227)
  br label %575

575:                                              ; preds = %162, %573, %558, %178
  ret void
}

; Function Attrs: uwtable
define void @helper_iret_real(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 4
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %0, 1
  %8 = and i32 %4, 65535
  %9 = add i32 %6, %8
  br i1 %7, label %10, label %23

10:                                               ; preds = %1
  %11 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %2, i32 %9)
  %12 = add i32 %4, 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = and i32 %12, 65535
  %15 = add i32 %14, %6
  %16 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %13, i32 %15)
  %17 = add i32 %4, 8
  %18 = and i32 %16, 65535
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = and i32 %17, 65535
  %21 = add i32 %20, %6
  %22 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %19, i32 %21)
  br label %35

23:                                               ; preds = %1
  %24 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* %2, i32 %9)
  %25 = add i32 %4, 2
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = and i32 %25, 65535
  %28 = add i32 %27, %6
  %29 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* %26, i32 %28)
  %30 = add i32 %4, 4
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = and i32 %30, 65535
  %33 = add i32 %32, %6
  %34 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* %31, i32 %33)
  br label %35

35:                                               ; preds = %23, %10
  %36 = phi i32 [ 6, %23 ], [ 12, %10 ]
  %37 = phi i32 [ %24, %23 ], [ %11, %10 ]
  %38 = phi i32 [ %34, %23 ], [ %22, %10 ]
  %39 = phi i32 [ %29, %23 ], [ %18, %10 ]
  %40 = add i32 %4, %36
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 0, i64 4
  %43 = load i32, i32* %42, align 16
  %44 = and i32 %43, -65536
  %45 = and i32 %40, 65535
  %46 = or i32 %44, %45
  store i32 %46, i32* %42, align 16
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 24, i64 1, i32 0
  store i32 %39, i32* %47, align 16
  %48 = shl i32 %39, 4
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 24, i64 1, i32 1
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 18
  store i32 %37, i32* %50, align 8
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 20
  %52 = load i32, i32* %51, align 16
  %53 = and i32 %52, 131072
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, i32 2454272, i32 2441984
  %56 = icmp eq i32 %0, 0
  %57 = and i32 %55, 29440
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = and i32 %38, 2261
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 2
  store i32 %59, i32* %60, align 4
  %61 = and i32 %38, 1024
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i32 1, i32 -1
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 19
  store i32 %63, i32* %64, align 4
  %65 = xor i32 %58, -1
  %66 = and i32 %52, %65
  %67 = and i32 %58, %38
  %68 = or i32 %66, %67
  store i32 %68, i32* %51, align 16
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 22
  %70 = load i32, i32* %69, align 8
  %71 = and i32 %70, -5
  store i32 %71, i32* %69, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_iret_protected(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 20
  %5 = load i32, i32* %4, align 16
  %6 = and i32 %5, 16384
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %39, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 26, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* %3, i32 %10)
  %12 = and i32 %11, 4
  %13 = icmp eq i32 %12, 0
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %13, label %17, label %15

15:                                               ; preds = %8
  %16 = and i32 %11, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %14, i32 10, i32 %16, i64 0) #21
  unreachable

17:                                               ; preds = %8
  %18 = or i32 %11, 7
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 27, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = and i32 %11, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %14, i32 10, i32 %23, i64 0) #21
  unreachable

24:                                               ; preds = %17
  %25 = and i32 %11, -8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 27, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, %25
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %14, i32 %28)
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = add i32 %28, 4
  %32 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %30, i32 %31)
  %33 = and i32 %32, 5888
  %34 = icmp eq i32 %33, 768
  %35 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %34, label %38, label %36

36:                                               ; preds = %24
  %37 = and i32 %11, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %35, i32 10, i32 %37, i64 0) #21
  unreachable

38:                                               ; preds = %24
  tail call fastcc void @switch_tss(%struct.CPUX86State* %35, i32 %11, i32 %29, i32 %32, i32 1, i32 %1)
  br label %40

39:                                               ; preds = %2
  tail call fastcc void @helper_ret_protected(%struct.CPUX86State* %3, i32 %0, i32 1, i32 0)
  br label %40

40:                                               ; preds = %39, %38
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 22
  %43 = load i32, i32* %42, align 8
  %44 = and i32 %43, -5
  store i32 %44, i32* %42, align 8
  ret void
}

; Function Attrs: inlinehint uwtable
define internal fastcc void @helper_ret_protected(%struct.CPUX86State* %0, i32 %1, i32 %2, i32 %3) unnamed_addr #10 {
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 3
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 4194304
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 65535, i32 -1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %14 = load i32, i32* %13, align 16
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %1, 1
  %18 = and i32 %12, %14
  %19 = add i32 %18, %16
  br i1 %17, label %20, label %36

20:                                               ; preds = %4
  %21 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %19)
  %22 = add i32 %14, 4
  %23 = and i32 %12, %22
  %24 = add i32 %23, %16
  %25 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %24)
  %26 = add i32 %14, 8
  %27 = and i32 %25, 65535
  %28 = icmp eq i32 %2, 0
  br i1 %28, label %49, label %29

29:                                               ; preds = %20
  %30 = and i32 %12, %26
  %31 = add i32 %30, %16
  %32 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %31)
  %33 = add i32 %14, 12
  %34 = and i32 %32, 131072
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %49, label %613

36:                                               ; preds = %4
  %37 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %19)
  %38 = add i32 %14, 2
  %39 = and i32 %12, %38
  %40 = add i32 %39, %16
  %41 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %40)
  %42 = add i32 %14, 4
  %43 = icmp eq i32 %2, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %36
  %45 = and i32 %12, %42
  %46 = add i32 %45, %16
  %47 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %46)
  %48 = add i32 %14, 6
  br label %49

49:                                               ; preds = %29, %20, %36, %44
  %50 = phi i32 [ %32, %29 ], [ 0, %20 ], [ %47, %44 ], [ 0, %36 ]
  %51 = phi i32 [ %27, %29 ], [ %27, %20 ], [ %41, %44 ], [ %41, %36 ]
  %52 = phi i32 [ %33, %29 ], [ %26, %20 ], [ %48, %44 ], [ %42, %36 ]
  %53 = phi i32 [ %21, %29 ], [ %21, %20 ], [ %37, %44 ], [ %37, %36 ]
  %54 = and i32 %51, 65532
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %49
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 0, i64 0) #21
  unreachable

57:                                               ; preds = %49
  %58 = and i32 %51, 4
  %59 = icmp eq i32 %58, 0
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 25
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 27
  %63 = select i1 %59, %struct.SegmentCache* %62, %struct.SegmentCache* %61
  %64 = or i32 %51, 7
  %65 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %63, i64 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = icmp ugt i32 %64, %66
  br i1 %67, label %68, label %69

68:                                               ; preds = %57
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %54, i64 0) #21
  unreachable

69:                                               ; preds = %57
  %70 = and i32 %51, -8
  %71 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %63, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %72, %70
  %74 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %60, i32 %73)
  %75 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %76 = add i32 %73, 4
  %77 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %75, i32 %76)
  %78 = and i32 %77, 6144
  %79 = icmp eq i32 %78, 6144
  br i1 %79, label %81, label %80

80:                                               ; preds = %69
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %54, i64 0) #21
  unreachable

81:                                               ; preds = %69
  %82 = and i32 %51, 3
  %83 = icmp ult i32 %82, %7
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %54, i64 0) #21
  unreachable

85:                                               ; preds = %81
  %86 = lshr i32 %77, 13
  %87 = and i32 %86, 3
  %88 = and i32 %77, 1024
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %93, label %90

90:                                               ; preds = %85
  %91 = icmp ugt i32 %87, %82
  br i1 %91, label %92, label %96

92:                                               ; preds = %90
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %54, i64 0) #21
  unreachable

93:                                               ; preds = %85
  %94 = icmp eq i32 %87, %82
  br i1 %94, label %96, label %95

95:                                               ; preds = %93
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %54, i64 0) #21
  unreachable

96:                                               ; preds = %93, %90
  %97 = trunc i32 %77 to i16
  %98 = icmp slt i16 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %96
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 11, i32 %54, i64 0) #21
  unreachable

100:                                              ; preds = %96
  %101 = add i32 %52, %3
  %102 = icmp eq i32 %82, %7
  br i1 %102, label %103, label %163

103:                                              ; preds = %100
  %104 = load i32, i32* %5, align 4
  %105 = trunc i32 %104 to i16
  %106 = icmp sgt i16 %105, -1
  %107 = icmp eq i32 %2, 0
  %108 = or i1 %107, %106
  br i1 %108, label %109, label %163

109:                                              ; preds = %103
  %110 = lshr i32 %74, 16
  %111 = shl i32 %77, 16
  %112 = and i32 %111, 16711680
  %113 = and i32 %77, -16777216
  %114 = or i32 %113, %110
  %115 = or i32 %114, %112
  %116 = and i32 %74, 65535
  %117 = and i32 %77, 983040
  %118 = or i32 %117, %116
  %119 = and i32 %77, 8388608
  %120 = icmp eq i32 %119, 0
  %121 = shl nuw i32 %118, 12
  %122 = or i32 %121, 4095
  %123 = select i1 %120, i32 %118, i32 %122
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  store i32 %51, i32* %124, align 4
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 1
  store i32 %115, i32* %125, align 4
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  store i32 %123, i32* %126, align 4
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  store i32 %77, i32* %127, align 4
  %128 = lshr i32 %77, 18
  %129 = and i32 %128, 16
  %130 = and i32 %104, -32785
  %131 = or i32 %130, %129
  store i32 %131, i32* %5, align 4
  %132 = load i32, i32* %8, align 4
  %133 = lshr i32 %132, 17
  %134 = and i32 %133, 32
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %136 = load i32, i32* %135, align 16
  %137 = and i32 %136, 1
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %146, label %139

139:                                              ; preds = %109
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %141 = load i32, i32* %140, align 16
  %142 = and i32 %141, 131072
  %143 = icmp ne i32 %142, 0
  %144 = icmp eq i32 %129, 0
  %145 = or i1 %144, %143
  br i1 %145, label %146, label %148

146:                                              ; preds = %139, %109
  %147 = or i32 %134, 64
  br label %159

148:                                              ; preds = %139
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = or i32 %152, %150
  %154 = load i32, i32* %15, align 4
  %155 = or i32 %153, %154
  %156 = icmp eq i32 %155, 0
  %157 = select i1 %156, i32 0, i32 64
  %158 = or i32 %157, %134
  br label %159

159:                                              ; preds = %146, %148
  %160 = phi i32 [ %147, %146 ], [ %158, %148 ]
  %161 = and i32 %131, -32865
  %162 = or i32 %160, %161
  store i32 %162, i32* %5, align 4
  br label %570

163:                                              ; preds = %103, %100
  %164 = and i32 %101, %12
  %165 = add i32 %164, %16
  br i1 %17, label %166, label %173

166:                                              ; preds = %163
  %167 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %165)
  %168 = add i32 %101, 4
  %169 = and i32 %168, %12
  %170 = add i32 %169, %16
  %171 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %170)
  %172 = and i32 %171, 65535
  br label %179

173:                                              ; preds = %163
  %174 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %165)
  %175 = add i32 %101, 2
  %176 = and i32 %175, %12
  %177 = add i32 %176, %16
  %178 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* nonnull %0, i32 %177)
  br label %179

179:                                              ; preds = %166, %173
  %180 = phi i32 [ %172, %166 ], [ %178, %173 ]
  %181 = phi i32 [ %167, %166 ], [ %174, %173 ]
  %182 = and i32 %180, 65532
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %179
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 0, i64 0) #21
  unreachable

185:                                              ; preds = %179
  %186 = and i32 %180, 3
  %187 = icmp eq i32 %186, %82
  br i1 %187, label %189, label %188

188:                                              ; preds = %185
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %182, i64 0) #21
  unreachable

189:                                              ; preds = %185
  %190 = and i32 %180, 4
  %191 = icmp eq i32 %190, 0
  %192 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %193 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %192, i64 0, i32 25
  %194 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %192, i64 0, i32 27
  %195 = select i1 %191, %struct.SegmentCache* %194, %struct.SegmentCache* %193
  %196 = or i32 %180, 7
  %197 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %195, i64 0, i32 2
  %198 = load i32, i32* %197, align 4
  %199 = icmp ugt i32 %196, %198
  br i1 %199, label %200, label %201

200:                                              ; preds = %189
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %182, i64 0) #21
  unreachable

201:                                              ; preds = %189
  %202 = and i32 %180, -8
  %203 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %195, i64 0, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = add i32 %204, %202
  %206 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %192, i32 %205)
  %207 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %208 = add i32 %205, 4
  %209 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %207, i32 %208)
  %210 = and i32 %209, 6656
  %211 = icmp eq i32 %210, 4608
  br i1 %211, label %213, label %212

212:                                              ; preds = %201
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %182, i64 0) #21
  unreachable

213:                                              ; preds = %201
  %214 = lshr i32 %209, 13
  %215 = and i32 %214, 3
  %216 = icmp eq i32 %215, %82
  br i1 %216, label %218, label %217

217:                                              ; preds = %213
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 13, i32 %182, i64 0) #21
  unreachable

218:                                              ; preds = %213
  %219 = trunc i32 %209 to i16
  %220 = icmp slt i16 %219, 0
  br i1 %220, label %222, label %221

221:                                              ; preds = %218
  tail call void @raise_exception_err_ra(%struct.CPUX86State* nonnull %0, i32 11, i32 %182, i64 0) #21
  unreachable

222:                                              ; preds = %218
  %223 = lshr i32 %206, 16
  %224 = shl i32 %209, 16
  %225 = and i32 %224, 16711680
  %226 = and i32 %209, -16777216
  %227 = or i32 %226, %223
  %228 = or i32 %227, %225
  %229 = and i32 %206, 65535
  %230 = and i32 %209, 983040
  %231 = or i32 %230, %229
  %232 = and i32 %209, 8388608
  %233 = icmp eq i32 %232, 0
  %234 = shl nuw i32 %231, 12
  %235 = or i32 %234, 4095
  %236 = select i1 %233, i32 %231, i32 %235
  %237 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  store i32 %180, i32* %237, align 4
  store i32 %228, i32* %15, align 4
  %238 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 2
  store i32 %236, i32* %238, align 4
  store i32 %209, i32* %8, align 4
  %239 = load i32, i32* %5, align 4
  %240 = lshr i32 %209, 17
  %241 = and i32 %240, 32
  %242 = trunc i32 %239 to i16
  %243 = icmp slt i16 %242, 0
  %244 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %245 = load i32, i32* %244, align 16
  %246 = and i32 %245, 1
  br i1 %243, label %269, label %247

247:                                              ; preds = %222
  %248 = icmp eq i32 %246, 0
  br i1 %248, label %257, label %249

249:                                              ; preds = %247
  %250 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %251 = load i32, i32* %250, align 16
  %252 = and i32 %251, 131072
  %253 = icmp ne i32 %252, 0
  %254 = and i32 %239, 16
  %255 = icmp eq i32 %254, 0
  %256 = or i1 %255, %253
  br i1 %256, label %257, label %259

257:                                              ; preds = %249, %247
  %258 = or i32 %241, 64
  br label %269

259:                                              ; preds = %249
  %260 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %263 = load i32, i32* %262, align 4
  %264 = or i32 %261, %228
  %265 = or i32 %264, %263
  %266 = icmp eq i32 %265, 0
  %267 = select i1 %266, i32 0, i32 64
  %268 = or i32 %267, %241
  br label %269

269:                                              ; preds = %222, %259, %257
  %270 = phi i32 [ 1, %259 ], [ %246, %257 ], [ %246, %222 ]
  %271 = phi i32 [ %268, %259 ], [ %258, %257 ], [ %241, %222 ]
  %272 = and i32 %239, -32881
  %273 = lshr i32 %74, 16
  %274 = shl i32 %77, 16
  %275 = and i32 %274, 16711680
  %276 = and i32 %77, -16777216
  %277 = or i32 %276, %273
  %278 = or i32 %277, %275
  %279 = and i32 %74, 65535
  %280 = and i32 %77, 983040
  %281 = or i32 %280, %279
  %282 = and i32 %77, 8388608
  %283 = icmp eq i32 %282, 0
  %284 = shl nuw i32 %281, 12
  %285 = or i32 %284, 4095
  %286 = select i1 %283, i32 %281, i32 %285
  %287 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  store i32 %51, i32* %287, align 4
  %288 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 1
  store i32 %278, i32* %288, align 4
  %289 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  store i32 %286, i32* %289, align 4
  %290 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  store i32 %77, i32* %290, align 4
  %291 = lshr i32 %77, 18
  %292 = and i32 %291, 16
  %293 = and i32 %271, -32785
  %294 = or i32 %293, %272
  %295 = or i32 %294, %292
  store i32 %295, i32* %5, align 4
  %296 = icmp eq i32 %270, 0
  br i1 %296, label %304, label %297

297:                                              ; preds = %269
  %298 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %299 = load i32, i32* %298, align 16
  %300 = and i32 %299, 131072
  %301 = icmp ne i32 %300, 0
  %302 = icmp eq i32 %292, 0
  %303 = or i1 %302, %301
  br i1 %303, label %304, label %306

304:                                              ; preds = %297, %269
  %305 = or i32 %241, 64
  br label %316

306:                                              ; preds = %297
  %307 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %308 = load i32, i32* %307, align 4
  %309 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %310 = load i32, i32* %309, align 4
  %311 = or i32 %308, %228
  %312 = or i32 %311, %310
  %313 = icmp eq i32 %312, 0
  %314 = select i1 %313, i32 0, i32 64
  %315 = or i32 %314, %241
  br label %316

316:                                              ; preds = %304, %306
  %317 = phi i32 [ %305, %304 ], [ %315, %306 ]
  %318 = and i32 %295, -32865
  %319 = or i32 %317, %318
  store i32 %319, i32* %5, align 4
  %320 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %321 = load i32, i32* %320, align 4
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %327, label %323, !prof !3, !misexpect !4

323:                                              ; preds = %316
  %324 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %325 = and i32 %239, 3
  tail call void %324(i32 %325, i32 %82)
  %326 = load i32, i32* %5, align 4
  br label %327

327:                                              ; preds = %316, %323
  %328 = phi i32 [ %319, %316 ], [ %326, %323 ]
  %329 = and i32 %328, -4
  %330 = or i32 %329, %82
  store i32 %330, i32* %5, align 4
  %331 = and i32 %209, 4194304
  %332 = icmp eq i32 %331, 0
  %333 = select i1 %332, i32 65535, i32 -1
  %334 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %335 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 0, i32 3
  %336 = load i32, i32* %335, align 4
  %337 = lshr i32 %336, 13
  %338 = and i32 %337, 3
  %339 = and i32 %336, 3072
  %340 = icmp ne i32 %339, 3072
  %341 = icmp ult i32 %338, %82
  %342 = and i1 %340, %341
  br i1 %342, label %343, label %389

343:                                              ; preds = %327
  %344 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 0, i32 0
  %345 = bitcast i32* %344 to i8*
  br label %346

346:                                              ; preds = %349, %343
  %347 = phi i64 [ 0, %343 ], [ %351, %349 ]
  %348 = icmp ult i64 %347, 16
  br i1 %348, label %349, label %352

349:                                              ; preds = %346
  %350 = getelementptr i8, i8* %345, i64 %347
  store i8 0, i8* %350
  %351 = add i64 %347, 1
  br label %346

352:                                              ; preds = %346
  %353 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 21
  %354 = load i32, i32* %353, align 4
  %355 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 3
  %356 = load i32, i32* %355, align 4
  %357 = lshr i32 %356, 17
  %358 = and i32 %357, 32
  %359 = trunc i32 %354 to i16
  %360 = icmp slt i16 %359, 0
  br i1 %360, label %385, label %361

361:                                              ; preds = %352
  %362 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 29, i64 0
  %363 = load i32, i32* %362, align 16
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %374, label %366

366:                                              ; preds = %361
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 20
  %368 = load i32, i32* %367, align 16
  %369 = and i32 %368, 131072
  %370 = icmp ne i32 %369, 0
  %371 = and i32 %354, 16
  %372 = icmp eq i32 %371, 0
  %373 = or i1 %372, %370
  br i1 %373, label %374, label %376

374:                                              ; preds = %366, %361
  %375 = or i32 %358, 64
  br label %385

376:                                              ; preds = %366
  %377 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 3, i32 1
  %378 = load i32, i32* %377, align 4
  %379 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 1
  %380 = load i32, i32* %379, align 4
  %381 = or i32 %378, %380
  %382 = icmp eq i32 %381, 0
  %383 = select i1 %382, i32 0, i32 64
  %384 = or i32 %383, %358
  br label %385

385:                                              ; preds = %376, %374, %352
  %386 = phi i32 [ %358, %352 ], [ %375, %374 ], [ %384, %376 ]
  %387 = and i32 %354, -97
  %388 = or i32 %386, %387
  store i32 %388, i32* %353, align 4
  br label %389

389:                                              ; preds = %327, %385
  %390 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 3, i32 3
  %391 = load i32, i32* %390, align 4
  %392 = lshr i32 %391, 13
  %393 = and i32 %392, 3
  %394 = and i32 %391, 3072
  %395 = icmp ne i32 %394, 3072
  %396 = icmp ult i32 %393, %82
  %397 = and i1 %395, %396
  br i1 %397, label %398, label %444

398:                                              ; preds = %389
  %399 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 3, i32 0
  %400 = bitcast i32* %399 to i8*
  br label %401

401:                                              ; preds = %404, %398
  %402 = phi i64 [ 0, %398 ], [ %406, %404 ]
  %403 = icmp ult i64 %402, 16
  br i1 %403, label %404, label %407

404:                                              ; preds = %401
  %405 = getelementptr i8, i8* %400, i64 %402
  store i8 0, i8* %405
  %406 = add i64 %402, 1
  br label %401

407:                                              ; preds = %401
  %408 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 21
  %409 = load i32, i32* %408, align 4
  %410 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 3
  %411 = load i32, i32* %410, align 4
  %412 = lshr i32 %411, 17
  %413 = and i32 %412, 32
  %414 = trunc i32 %409 to i16
  %415 = icmp slt i16 %414, 0
  br i1 %415, label %440, label %416

416:                                              ; preds = %407
  %417 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 29, i64 0
  %418 = load i32, i32* %417, align 16
  %419 = and i32 %418, 1
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %429, label %421

421:                                              ; preds = %416
  %422 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 20
  %423 = load i32, i32* %422, align 16
  %424 = and i32 %423, 131072
  %425 = icmp ne i32 %424, 0
  %426 = and i32 %409, 16
  %427 = icmp eq i32 %426, 0
  %428 = or i1 %427, %425
  br i1 %428, label %429, label %431

429:                                              ; preds = %421, %416
  %430 = or i32 %413, 64
  br label %440

431:                                              ; preds = %421
  %432 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 0, i32 1
  %433 = load i32, i32* %432, align 4
  %434 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 1
  %435 = load i32, i32* %434, align 4
  %436 = or i32 %433, %435
  %437 = icmp eq i32 %436, 0
  %438 = select i1 %437, i32 0, i32 64
  %439 = or i32 %438, %413
  br label %440

440:                                              ; preds = %431, %429, %407
  %441 = phi i32 [ %413, %407 ], [ %430, %429 ], [ %439, %431 ]
  %442 = and i32 %409, -97
  %443 = or i32 %441, %442
  store i32 %443, i32* %408, align 4
  br label %444

444:                                              ; preds = %389, %440
  %445 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 4, i32 0
  %446 = load i32, i32* %445, align 16
  %447 = and i32 %446, 65532
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %506, label %449

449:                                              ; preds = %444
  %450 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 4, i32 3
  %451 = load i32, i32* %450, align 4
  %452 = lshr i32 %451, 13
  %453 = and i32 %452, 3
  %454 = and i32 %451, 3072
  %455 = icmp ne i32 %454, 3072
  %456 = icmp ult i32 %453, %82
  %457 = and i1 %455, %456
  br i1 %457, label %458, label %506

458:                                              ; preds = %449
  %459 = bitcast i32* %445 to i8*
  br label %460

460:                                              ; preds = %463, %458
  %461 = phi i64 [ 0, %458 ], [ %465, %463 ]
  %462 = icmp ult i64 %461, 16
  br i1 %462, label %463, label %466

463:                                              ; preds = %460
  %464 = getelementptr i8, i8* %459, i64 %461
  store i8 0, i8* %464
  %465 = add i64 %461, 1
  br label %460

466:                                              ; preds = %460
  %467 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 21
  %468 = load i32, i32* %467, align 4
  %469 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 3
  %470 = load i32, i32* %469, align 4
  %471 = lshr i32 %470, 17
  %472 = and i32 %471, 32
  %473 = trunc i32 %468 to i16
  %474 = icmp slt i16 %473, 0
  br i1 %474, label %502, label %475

475:                                              ; preds = %466
  %476 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 29, i64 0
  %477 = load i32, i32* %476, align 16
  %478 = and i32 %477, 1
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %488, label %480

480:                                              ; preds = %475
  %481 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 20
  %482 = load i32, i32* %481, align 16
  %483 = and i32 %482, 131072
  %484 = icmp ne i32 %483, 0
  %485 = and i32 %468, 16
  %486 = icmp eq i32 %485, 0
  %487 = or i1 %486, %484
  br i1 %487, label %488, label %490

488:                                              ; preds = %480, %475
  %489 = or i32 %472, 64
  br label %502

490:                                              ; preds = %480
  %491 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 3, i32 1
  %492 = load i32, i32* %491, align 4
  %493 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 0, i32 1
  %494 = load i32, i32* %493, align 4
  %495 = or i32 %494, %492
  %496 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 1
  %497 = load i32, i32* %496, align 4
  %498 = or i32 %495, %497
  %499 = icmp eq i32 %498, 0
  %500 = select i1 %499, i32 0, i32 64
  %501 = or i32 %500, %472
  br label %502

502:                                              ; preds = %490, %488, %466
  %503 = phi i32 [ %472, %466 ], [ %489, %488 ], [ %501, %490 ]
  %504 = and i32 %468, -97
  %505 = or i32 %503, %504
  store i32 %505, i32* %467, align 4
  br label %506

506:                                              ; preds = %444, %449, %502
  %507 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 5, i32 0
  %508 = load i32, i32* %507, align 16
  %509 = and i32 %508, 65532
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %568, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 5, i32 3
  %513 = load i32, i32* %512, align 4
  %514 = lshr i32 %513, 13
  %515 = and i32 %514, 3
  %516 = and i32 %513, 3072
  %517 = icmp ne i32 %516, 3072
  %518 = icmp ult i32 %515, %82
  %519 = and i1 %517, %518
  br i1 %519, label %520, label %568

520:                                              ; preds = %511
  %521 = bitcast i32* %507 to i8*
  br label %522

522:                                              ; preds = %525, %520
  %523 = phi i64 [ 0, %520 ], [ %527, %525 ]
  %524 = icmp ult i64 %523, 16
  br i1 %524, label %525, label %528

525:                                              ; preds = %522
  %526 = getelementptr i8, i8* %521, i64 %523
  store i8 0, i8* %526
  %527 = add i64 %523, 1
  br label %522

528:                                              ; preds = %522
  %529 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 21
  %530 = load i32, i32* %529, align 4
  %531 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 3
  %532 = load i32, i32* %531, align 4
  %533 = lshr i32 %532, 17
  %534 = and i32 %533, 32
  %535 = trunc i32 %530 to i16
  %536 = icmp slt i16 %535, 0
  br i1 %536, label %564, label %537

537:                                              ; preds = %528
  %538 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 29, i64 0
  %539 = load i32, i32* %538, align 16
  %540 = and i32 %539, 1
  %541 = icmp eq i32 %540, 0
  br i1 %541, label %550, label %542

542:                                              ; preds = %537
  %543 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 20
  %544 = load i32, i32* %543, align 16
  %545 = and i32 %544, 131072
  %546 = icmp ne i32 %545, 0
  %547 = and i32 %530, 16
  %548 = icmp eq i32 %547, 0
  %549 = or i1 %548, %546
  br i1 %549, label %550, label %552

550:                                              ; preds = %542, %537
  %551 = or i32 %534, 64
  br label %564

552:                                              ; preds = %542
  %553 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 3, i32 1
  %554 = load i32, i32* %553, align 4
  %555 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 0, i32 1
  %556 = load i32, i32* %555, align 4
  %557 = or i32 %556, %554
  %558 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %334, i64 0, i32 24, i64 2, i32 1
  %559 = load i32, i32* %558, align 4
  %560 = or i32 %557, %559
  %561 = icmp eq i32 %560, 0
  %562 = select i1 %561, i32 0, i32 64
  %563 = or i32 %562, %534
  br label %564

564:                                              ; preds = %552, %550, %528
  %565 = phi i32 [ %534, %528 ], [ %551, %550 ], [ %563, %552 ]
  %566 = and i32 %530, -97
  %567 = or i32 %565, %566
  store i32 %567, i32* %529, align 4
  br label %568

568:                                              ; preds = %506, %511, %564
  %569 = add i32 %181, %3
  br label %570

570:                                              ; preds = %568, %159
  %571 = phi i32 [ %569, %568 ], [ %101, %159 ]
  %572 = phi i32 [ %333, %568 ], [ %12, %159 ]
  %573 = load i32, i32* %13, align 16
  %574 = xor i32 %572, -1
  %575 = and i32 %573, %574
  %576 = and i32 %572, %571
  %577 = or i32 %575, %576
  store i32 %577, i32* %13, align 16
  %578 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  store i32 %53, i32* %578, align 8
  %579 = icmp eq i32 %2, 0
  br i1 %579, label %606, label %580

580:                                              ; preds = %570
  %581 = icmp eq i32 %7, 0
  %582 = select i1 %581, i32 2453760, i32 2441472
  %583 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %584 = load i32, i32* %583, align 16
  %585 = lshr i32 %584, 12
  %586 = and i32 %585, 3
  %587 = icmp ugt i32 %7, %586
  %588 = or i32 %582, 512
  %589 = select i1 %587, i32 %582, i32 %588
  %590 = icmp eq i32 %1, 0
  %591 = and i32 %589, 29440
  %592 = select i1 %590, i32 %591, i32 %589
  %593 = and i32 %50, 2261
  %594 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %595 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %594, i64 0, i32 2
  store i32 %593, i32* %595, align 4
  %596 = and i32 %50, 1024
  %597 = icmp eq i32 %596, 0
  %598 = select i1 %597, i32 1, i32 -1
  %599 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %594, i64 0, i32 19
  store i32 %598, i32* %599, align 4
  %600 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %594, i64 0, i32 20
  %601 = load i32, i32* %600, align 16
  %602 = xor i32 %592, -1
  %603 = and i32 %601, %602
  %604 = and i32 %592, %50
  %605 = or i32 %603, %604
  store i32 %605, i32* %600, align 16
  br label %606

606:                                              ; preds = %570, %580
  br i1 %102, label %834, label %607

607:                                              ; preds = %606
  %608 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %609 = load i32, i32* %608, align 4
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %834, label %611, !prof !3, !misexpect !4

611:                                              ; preds = %607
  %612 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %612(i32 %7, i32 %82)
  br label %834

613:                                              ; preds = %29
  %614 = and i32 %12, %33
  %615 = add i32 %614, %16
  %616 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %615)
  %617 = add i32 %14, 16
  %618 = and i32 %12, %617
  %619 = add i32 %618, %16
  %620 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %619)
  %621 = add i32 %14, 20
  %622 = and i32 %12, %621
  %623 = add i32 %622, %16
  %624 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %623)
  %625 = add i32 %14, 24
  %626 = and i32 %12, %625
  %627 = add i32 %626, %16
  %628 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %627)
  %629 = add i32 %14, 28
  %630 = and i32 %12, %629
  %631 = add i32 %630, %16
  %632 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %631)
  %633 = add i32 %14, 32
  %634 = and i32 %12, %633
  %635 = add i32 %634, %16
  %636 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* nonnull %0, i32 %635)
  %637 = and i32 %32, 2261
  %638 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %639 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 2
  store i32 %637, i32* %639, align 4
  %640 = and i32 %32, 1024
  %641 = icmp eq i32 %640, 0
  %642 = select i1 %641, i32 1, i32 -1
  %643 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 19
  store i32 %642, i32* %643, align 4
  %644 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 20
  %645 = load i32, i32* %644, align 16
  %646 = and i32 %645, -4092673
  %647 = and i32 %32, 4092672
  %648 = or i32 %646, %647
  store i32 %648, i32* %644, align 16
  %649 = shl nuw nsw i32 %27, 4
  %650 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 24, i64 1, i32 0
  store i32 %27, i32* %650, align 4
  %651 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 24, i64 1, i32 1
  store i32 %649, i32* %651, align 4
  %652 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 24, i64 1, i32 2
  store i32 65535, i32* %652, align 4
  %653 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 24, i64 1, i32 3
  store i32 0, i32* %653, align 4
  %654 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 21
  %655 = load i32, i32* %654, align 4
  %656 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 24, i64 2, i32 3
  %657 = load i32, i32* %656, align 4
  %658 = lshr i32 %657, 17
  %659 = and i32 %658, 32
  %660 = and i32 %655, -32881
  %661 = or i32 %660, %659
  %662 = or i32 %661, 64
  store i32 %662, i32* %654, align 4
  %663 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %664 = load i32, i32* %663, align 4
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %671, label %666, !prof !3, !misexpect !4

666:                                              ; preds = %613
  %667 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %668 = load i32, i32* %5, align 4
  %669 = and i32 %668, 3
  tail call void %667(i32 %669, i32 3)
  %670 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %671

671:                                              ; preds = %613, %666
  %672 = phi %struct.CPUX86State* [ %638, %613 ], [ %670, %666 ]
  %673 = load i32, i32* %5, align 4
  %674 = or i32 %673, 3
  store i32 %674, i32* %5, align 4
  %675 = and i32 %620, 65535
  %676 = shl nuw nsw i32 %675, 4
  %677 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 2, i32 0
  store i32 %675, i32* %677, align 4
  %678 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 2, i32 1
  store i32 %676, i32* %678, align 4
  %679 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 2, i32 2
  store i32 65535, i32* %679, align 4
  %680 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 2, i32 3
  store i32 0, i32* %680, align 4
  %681 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 21
  %682 = load i32, i32* %681, align 4
  %683 = trunc i32 %682 to i16
  %684 = icmp slt i16 %683, 0
  br i1 %684, label %707, label %685

685:                                              ; preds = %671
  %686 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 29, i64 0
  %687 = load i32, i32* %686, align 16
  %688 = and i32 %687, 1
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %707, label %690

690:                                              ; preds = %685
  %691 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 20
  %692 = load i32, i32* %691, align 16
  %693 = and i32 %692, 131072
  %694 = icmp ne i32 %693, 0
  %695 = and i32 %682, 16
  %696 = icmp eq i32 %695, 0
  %697 = or i1 %696, %694
  br i1 %697, label %707, label %698

698:                                              ; preds = %690
  %699 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 3, i32 1
  %700 = load i32, i32* %699, align 4
  %701 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 0, i32 1
  %702 = load i32, i32* %701, align 4
  %703 = or i32 %700, %676
  %704 = or i32 %703, %702
  %705 = icmp eq i32 %704, 0
  %706 = select i1 %705, i32 0, i32 64
  br label %707

707:                                              ; preds = %685, %690, %671, %698
  %708 = phi i32 [ 0, %671 ], [ %706, %698 ], [ 64, %690 ], [ 64, %685 ]
  %709 = and i32 %682, -97
  %710 = or i32 %708, %709
  store i32 %710, i32* %681, align 4
  %711 = and i32 %624, 65535
  %712 = shl nuw nsw i32 %711, 4
  %713 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 0, i32 0
  store i32 %711, i32* %713, align 4
  %714 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 0, i32 1
  store i32 %712, i32* %714, align 4
  %715 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 0, i32 2
  store i32 65535, i32* %715, align 4
  %716 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 0, i32 3
  store i32 0, i32* %716, align 4
  br i1 %684, label %737, label %717

717:                                              ; preds = %707
  %718 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 29, i64 0
  %719 = load i32, i32* %718, align 16
  %720 = and i32 %719, 1
  %721 = icmp eq i32 %720, 0
  br i1 %721, label %737, label %722

722:                                              ; preds = %717
  %723 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 20
  %724 = load i32, i32* %723, align 16
  %725 = and i32 %724, 131072
  %726 = icmp ne i32 %725, 0
  %727 = and i32 %682, 16
  %728 = icmp eq i32 %727, 0
  %729 = or i1 %728, %726
  br i1 %729, label %737, label %730

730:                                              ; preds = %722
  %731 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 3, i32 1
  %732 = load i32, i32* %731, align 4
  %733 = or i32 %732, %712
  %734 = or i32 %733, %676
  %735 = icmp eq i32 %734, 0
  %736 = select i1 %735, i32 0, i32 64
  br label %737

737:                                              ; preds = %717, %722, %707, %730
  %738 = phi i32 [ 0, %707 ], [ %736, %730 ], [ 64, %722 ], [ 64, %717 ]
  %739 = or i32 %738, %709
  store i32 %739, i32* %681, align 4
  %740 = and i32 %628, 65535
  %741 = shl nuw nsw i32 %740, 4
  %742 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 3, i32 0
  store i32 %740, i32* %742, align 4
  %743 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 3, i32 1
  store i32 %741, i32* %743, align 4
  %744 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 3, i32 2
  store i32 65535, i32* %744, align 4
  %745 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 3, i32 3
  store i32 0, i32* %745, align 4
  %746 = trunc i32 %682 to i16
  %747 = icmp slt i16 %746, 0
  br i1 %747, label %766, label %748

748:                                              ; preds = %737
  %749 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 29, i64 0
  %750 = load i32, i32* %749, align 16
  %751 = and i32 %750, 1
  %752 = icmp eq i32 %751, 0
  br i1 %752, label %766, label %753

753:                                              ; preds = %748
  %754 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 20
  %755 = load i32, i32* %754, align 16
  %756 = and i32 %755, 131072
  %757 = icmp ne i32 %756, 0
  %758 = and i32 %682, 16
  %759 = icmp eq i32 %758, 0
  %760 = or i1 %759, %757
  br i1 %760, label %766, label %761

761:                                              ; preds = %753
  %762 = or i32 %712, %741
  %763 = or i32 %762, %676
  %764 = icmp eq i32 %763, 0
  %765 = select i1 %764, i32 0, i32 64
  br label %766

766:                                              ; preds = %748, %753, %737, %761
  %767 = phi i32 [ 0, %737 ], [ %765, %761 ], [ 64, %753 ], [ 64, %748 ]
  %768 = or i32 %767, %709
  store i32 %768, i32* %681, align 4
  %769 = and i32 %632, 65535
  %770 = shl nuw nsw i32 %769, 4
  %771 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 4, i32 0
  store i32 %769, i32* %771, align 4
  %772 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 4, i32 1
  store i32 %770, i32* %772, align 4
  %773 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 4, i32 2
  store i32 65535, i32* %773, align 4
  %774 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 4, i32 3
  store i32 0, i32* %774, align 4
  %775 = trunc i32 %682 to i16
  %776 = icmp slt i16 %775, 0
  br i1 %776, label %795, label %777

777:                                              ; preds = %766
  %778 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 29, i64 0
  %779 = load i32, i32* %778, align 16
  %780 = and i32 %779, 1
  %781 = icmp eq i32 %780, 0
  br i1 %781, label %795, label %782

782:                                              ; preds = %777
  %783 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 20
  %784 = load i32, i32* %783, align 16
  %785 = and i32 %784, 131072
  %786 = icmp ne i32 %785, 0
  %787 = and i32 %682, 16
  %788 = icmp eq i32 %787, 0
  %789 = or i1 %788, %786
  br i1 %789, label %795, label %790

790:                                              ; preds = %782
  %791 = or i32 %712, %741
  %792 = or i32 %791, %676
  %793 = icmp eq i32 %792, 0
  %794 = select i1 %793, i32 0, i32 64
  br label %795

795:                                              ; preds = %777, %782, %766, %790
  %796 = phi i32 [ 0, %766 ], [ %794, %790 ], [ 64, %782 ], [ 64, %777 ]
  %797 = or i32 %796, %709
  store i32 %797, i32* %681, align 4
  %798 = and i32 %636, 65535
  %799 = shl nuw nsw i32 %798, 4
  %800 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 5, i32 0
  store i32 %798, i32* %800, align 4
  %801 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 5, i32 1
  store i32 %799, i32* %801, align 4
  %802 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 5, i32 2
  store i32 65535, i32* %802, align 4
  %803 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 24, i64 5, i32 3
  store i32 0, i32* %803, align 4
  %804 = trunc i32 %682 to i16
  %805 = icmp slt i16 %804, 0
  br i1 %805, label %824, label %806

806:                                              ; preds = %795
  %807 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 29, i64 0
  %808 = load i32, i32* %807, align 16
  %809 = and i32 %808, 1
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %824, label %811

811:                                              ; preds = %806
  %812 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %672, i64 0, i32 20
  %813 = load i32, i32* %812, align 16
  %814 = and i32 %813, 131072
  %815 = icmp ne i32 %814, 0
  %816 = and i32 %682, 16
  %817 = icmp eq i32 %816, 0
  %818 = or i1 %817, %815
  br i1 %818, label %824, label %819

819:                                              ; preds = %811
  %820 = or i32 %712, %741
  %821 = or i32 %820, %676
  %822 = icmp eq i32 %821, 0
  %823 = select i1 %822, i32 0, i32 64
  br label %824

824:                                              ; preds = %806, %811, %795, %819
  %825 = phi i32 [ 0, %795 ], [ %823, %819 ], [ 64, %811 ], [ 64, %806 ]
  %826 = or i32 %825, %709
  store i32 %826, i32* %681, align 4
  %827 = and i32 %21, 65535
  %828 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  store i32 %827, i32* %828, align 8
  store i32 %616, i32* %13, align 16
  %829 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %830 = load i32, i32* %829, align 4
  %831 = icmp eq i32 %830, 0
  br i1 %831, label %834, label %832, !prof !3, !misexpect !4

832:                                              ; preds = %824
  %833 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %833(i32 %7, i32 3)
  br label %834

834:                                              ; preds = %832, %824, %611, %606, %607
  ret void
}

; Function Attrs: uwtable
define void @helper_lret_protected(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call fastcc void @helper_ret_protected(%struct.CPUX86State* %3, i32 %0, i32 0, i32 %1)
  ret void
}

; Function Attrs: uwtable
define void @helper_sysenter() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 3
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 34
  %6 = load i32, i32* %5, align 16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %0
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %1, i32 13, i32 0, i64 0) #21
  unreachable

9:                                                ; preds = %0
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %11 = load i32, i32* %10, align 16
  %12 = and i32 %11, -197121
  store i32 %12, i32* %10, align 16
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16, !prof !3, !misexpect !4

16:                                               ; preds = %9
  %17 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %17(i32 %4, i32 0)
  %18 = load i32, i32* %2, align 4
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %20

20:                                               ; preds = %16, %9
  %21 = phi %struct.CPUX86State* [ %19, %16 ], [ %1, %9 ]
  %22 = phi i32 [ %18, %16 ], [ %3, %9 ]
  %23 = and i32 %22, -4
  store i32 %23, i32* %2, align 4
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 34
  %25 = load i32, i32* %24, align 16
  %26 = and i32 %25, 65532
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 0
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 1
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %29, align 4
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 3
  store i32 12622592, i32* %30, align 4
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 21
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, -32785
  %34 = or i32 %33, 16
  store i32 %34, i32* %31, align 4
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = lshr i32 %36, 17
  %38 = and i32 %37, 32
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 29, i64 0
  %40 = load i32, i32* %39, align 16
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %20
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 20
  %45 = load i32, i32* %44, align 16
  %46 = and i32 %45, 131072
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %43, %20
  %49 = or i32 %38, 64
  br label %62

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 3, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = or i32 %54, %52
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = or i32 %55, %57
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i32 0, i32 64
  %61 = or i32 %60, %38
  br label %62

62:                                               ; preds = %48, %50
  %63 = phi i32 [ %49, %48 ], [ %61, %50 ]
  %64 = and i32 %34, -32865
  %65 = or i32 %63, %64
  store i32 %65, i32* %31, align 4
  %66 = add i32 %25, 8
  %67 = and i32 %66, 65532
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 0
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 1
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %70, align 4
  store i32 12620544, i32* %35, align 4
  %71 = trunc i32 %63 to i16
  %72 = icmp slt i16 %71, 0
  %73 = or i1 %72, %42
  %74 = select i1 %72, i32 32, i32 96
  br i1 %73, label %88, label %75

75:                                               ; preds = %62
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 20
  %77 = load i32, i32* %76, align 16
  %78 = and i32 %77, 131072
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %88

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 3, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = or i32 %84, %82
  %86 = icmp eq i32 %85, 0
  %87 = select i1 %86, i32 32, i32 96
  br label %88

88:                                               ; preds = %62, %75, %80
  %89 = phi i32 [ %74, %62 ], [ %87, %80 ], [ 96, %75 ]
  %90 = or i32 %89, %64
  store i32 %90, i32* %31, align 4
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 35
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 0, i64 4
  store i32 %92, i32* %93, align 16
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 36
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 18
  store i32 %95, i32* %96, align 8
  %97 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %102, label %100, !prof !3, !misexpect !4

100:                                              ; preds = %88
  %101 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %101(i32 %4, i32 0)
  br label %102

102:                                              ; preds = %88, %100
  ret void
}

; Function Attrs: uwtable
define void @helper_sysexit(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 3
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 34
  %7 = load i32, i32* %6, align 16
  %8 = icmp eq i32 %7, 0
  %9 = icmp ne i32 %5, 0
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %2, i32 13, i32 0, i64 0) #21
  unreachable

12:                                               ; preds = %1
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16, !prof !3, !misexpect !4

16:                                               ; preds = %12
  %17 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %17(i32 0, i32 3)
  %18 = load i32, i32* %3, align 4
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %20

20:                                               ; preds = %16, %12
  %21 = phi %struct.CPUX86State* [ %19, %16 ], [ %2, %12 ]
  %22 = phi i32 [ %18, %16 ], [ %4, %12 ]
  %23 = or i32 %22, 3
  store i32 %23, i32* %3, align 4
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 34
  %25 = load i32, i32* %24, align 16
  %26 = add i32 %25, 16
  %27 = and i32 %26, 65532
  %28 = or i32 %27, 3
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 0
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 1
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %31, align 4
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 3
  store i32 12647168, i32* %32, align 4
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 21
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, -32785
  %36 = or i32 %35, 16
  store i32 %36, i32* %33, align 4
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = lshr i32 %38, 17
  %40 = and i32 %39, 32
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 29, i64 0
  %42 = load i32, i32* %41, align 16
  %43 = and i32 %42, 1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %20
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 20
  %47 = load i32, i32* %46, align 16
  %48 = and i32 %47, 131072
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %45, %20
  %51 = or i32 %40, 64
  br label %64

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 3, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = or i32 %56, %54
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = or i32 %57, %59
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, i32 0, i32 64
  %63 = or i32 %62, %40
  br label %64

64:                                               ; preds = %50, %52
  %65 = phi i32 [ %51, %50 ], [ %63, %52 ]
  %66 = and i32 %36, -32865
  %67 = or i32 %65, %66
  store i32 %67, i32* %33, align 4
  %68 = add i32 %25, 24
  %69 = and i32 %68, 65532
  %70 = or i32 %69, 3
  %71 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 0
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 1
  store i32 0, i32* %72, align 4
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %73, align 4
  store i32 12645120, i32* %37, align 4
  %74 = trunc i32 %65 to i16
  %75 = icmp slt i16 %74, 0
  %76 = or i1 %75, %44
  %77 = select i1 %75, i32 32, i32 96
  br i1 %76, label %91, label %78

78:                                               ; preds = %64
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 20
  %80 = load i32, i32* %79, align 16
  %81 = and i32 %80, 131072
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %91

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 3, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = or i32 %87, %85
  %89 = icmp eq i32 %88, 0
  %90 = select i1 %89, i32 32, i32 96
  br label %91

91:                                               ; preds = %64, %78, %83
  %92 = phi i32 [ %77, %64 ], [ %90, %83 ], [ 96, %78 ]
  %93 = or i32 %92, %66
  store i32 %93, i32* %33, align 4
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 0, i64 1
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 0, i64 4
  store i32 %95, i32* %96, align 16
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 0, i64 2
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 18
  store i32 %98, i32* %99, align 8
  %100 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %105, label %103, !prof !3, !misexpect !4

103:                                              ; preds = %91
  %104 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %104(i32 0, i32 3)
  br label %105

105:                                              ; preds = %91, %103
  ret void
}

; Function Attrs: uwtable
define i32 @helper_read_crN(i32 %0) local_unnamed_addr #3 {
  tail call void @helper_svm_check_intercept_param(i32 %0, i64 0)
  %2 = icmp eq i32 %0, 8
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %2, label %8, label %4

4:                                                ; preds = %1
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 29, i64 %5
  %7 = load i32, i32* %6, align 4
  br label %12

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 48
  %10 = load i8, i8* %9, align 4
  %11 = zext i8 %10 to i32
  br label %12

12:                                               ; preds = %8, %4
  %13 = phi i32 [ %11, %8 ], [ %7, %4 ]
  ret i32 %13
}

; Function Attrs: uwtable
define void @helper_write_crN(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = add nsw i32 %0, 16
  tail call void @helper_svm_check_intercept_param(i32 %3, i64 0)
  switch i32 %0, label %15 [
    i32 0, label %4
    i32 3, label %6
    i32 4, label %8
    i32 8, label %10
  ]

4:                                                ; preds = %2
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %5, i32 %1)
  br label %19

6:                                                ; preds = %2
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %7, i32 %1)
  br label %19

8:                                                ; preds = %2
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %9, i32 %1)
  br label %19

10:                                               ; preds = %2
  %11 = trunc i32 %1 to i8
  %12 = and i8 %11, 15
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 48
  store i8 %12, i8* %14, align 4
  tail call void @cpu_exit(%struct.CPUX86State* %13)
  br label %19

15:                                               ; preds = %2
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = sext i32 %0 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 29, i64 %17
  store i32 %1, i32* %18, align 4
  br label %19

19:                                               ; preds = %15, %10, %8, %6, %4
  ret void
}

declare void @cpu_exit(%struct.CPUX86State*) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_movl_drN_T0(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = icmp slt i32 %0, 4
  br i1 %3, label %4, label %10

4:                                                ; preds = %2
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %5, i32 %0)
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 61, i64 %7
  store i32 %1, i32* %8, align 4
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %9, i32 %0)
  br label %25

10:                                               ; preds = %2
  %11 = icmp eq i32 %0, 7
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %11, label %13, label %22

13:                                               ; preds = %10
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %12, i32 0)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %14, i32 1)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %15, i32 2)
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* %16, i32 3)
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 61, i64 7
  store i32 %1, i32* %18, align 4
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %17, i32 0)
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %19, i32 1)
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %20, i32 2)
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* %21, i32 3)
  br label %25

22:                                               ; preds = %10
  %23 = zext i32 %0 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 61, i64 %23
  store i32 %1, i32* %24, align 4
  br label %25

25:                                               ; preds = %13, %22, %4
  ret void
}

declare void @hw_breakpoint_insert(%struct.CPUX86State*, i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_lmsw(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 29, i64 0
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, -15
  %6 = and i32 %0, 15
  %7 = or i32 %5, %6
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 2097152
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !3, !misexpect !5

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 44
  %14 = load i16, i16* %13, align 2
  %15 = and i16 %14, 1
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  tail call void @helper_vmexit(i32 16, i64 0)
  unreachable

18:                                               ; preds = %1, %12
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %2, i32 %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_clts() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 0
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 16
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, -2049
  store i32 %7, i32* %5, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_invlpg(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !3, !misexpect !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 33554432
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 121, i64 0)
  unreachable

13:                                               ; preds = %1, %7
  tail call void @tlb_flush_page(%struct.CPUX86State* %2, i32 %0)
  ret void
}

declare void @tlb_flush_page(%struct.CPUX86State*, i32) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_rdtsc() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 4
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 3
  %9 = icmp eq i32 %8, 0
  %10 = or i1 %5, %9
  br i1 %10, label %12, label %11

11:                                               ; preds = %0
  tail call void @raise_exception_ra(%struct.CPUX86State* nonnull %1, i32 13, i64 0) #21
  unreachable

12:                                               ; preds = %0
  %13 = and i32 %7, 2097152
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15, !prof !3, !misexpect !5

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %17, 16384
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  tail call void @helper_vmexit(i32 110, i64 0)
  unreachable

21:                                               ; preds = %12, %15
  %22 = tail call i64 @cpu_get_tsc()
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 41
  %25 = load i64, i64* %24, align 16
  %26 = add i64 %25, %22
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 0
  store i32 %27, i32* %28, align 16
  %29 = lshr i64 %26, 32
  %30 = trunc i64 %29 to i32
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 0, i64 2
  store i32 %30, i32* %32, align 8
  ret void
}

declare i64 @cpu_get_tsc() local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_rdtscp() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 4
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 3
  %9 = icmp eq i32 %8, 0
  %10 = or i1 %5, %9
  br i1 %10, label %12, label %11

11:                                               ; preds = %0
  tail call void @raise_exception_ra(%struct.CPUX86State* nonnull %1, i32 13, i64 0) #21
  unreachable

12:                                               ; preds = %0
  %13 = and i32 %7, 2097152
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15, !prof !3, !misexpect !5

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %17, 16384
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  tail call void @helper_vmexit(i32 110, i64 0)
  unreachable

21:                                               ; preds = %12, %15
  %22 = tail call i64 @cpu_get_tsc()
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 41
  %25 = load i64, i64* %24, align 16
  %26 = add i64 %25, %22
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 0
  store i32 %27, i32* %28, align 16
  %29 = lshr i64 %26, 32
  %30 = trunc i64 %29 to i32
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 0, i64 2
  store i32 %30, i32* %32, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 117
  %34 = load i64, i64* %33, align 8
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 0, i64 1
  store i32 %35, i32* %36, align 4
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_rdpmc() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 4
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, 256
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @raise_exception_ra(%struct.CPUX86State* nonnull %1, i32 13, i64 0) #21
  unreachable

12:                                               ; preds = %6, %0
  tail call void @helper_svm_check_intercept_param(i32 111, i64 0)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* %13, i32 6, i32 0, i64 0) #21
  unreachable
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_wrmsr_v(i32 %0, i64 %1) local_unnamed_addr #2 {
  switch i32 %0, label %112 [
    i32 372, label %3
    i32 373, label %8
    i32 374, label %12
    i32 27, label %16
    i32 -1073741696, label %19
    i32 -1073741695, label %55
    i32 631, label %58
    i32 -1073676009, label %61
    i32 512, label %64
    i32 514, label %64
    i32 516, label %64
    i32 518, label %64
    i32 520, label %64
    i32 522, label %64
    i32 524, label %64
    i32 526, label %64
    i32 513, label %70
    i32 515, label %70
    i32 517, label %70
    i32 519, label %70
    i32 521, label %70
    i32 523, label %70
    i32 525, label %70
    i32 527, label %70
    i32 592, label %76
    i32 600, label %79
    i32 601, label %79
    i32 616, label %84
    i32 617, label %84
    i32 618, label %84
    i32 619, label %84
    i32 620, label %84
    i32 621, label %84
    i32 622, label %84
    i32 623, label %84
    i32 767, label %89
    i32 378, label %92
    i32 379, label %95
    i32 -1073741565, label %106
    i32 416, label %109
  ]

3:                                                ; preds = %2
  %4 = trunc i64 %1 to i32
  %5 = and i32 %4, 65535
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 34
  store i32 %5, i32* %7, align 16
  br label %133

8:                                                ; preds = %2
  %9 = trunc i64 %1 to i32
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 35
  store i32 %9, i32* %11, align 4
  br label %133

12:                                               ; preds = %2
  %13 = trunc i64 %1 to i32
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 36
  store i32 %13, i32* %15, align 8
  br label %133

16:                                               ; preds = %2
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 50
  store i64 %1, i64* %18, align 16
  br label %133

19:                                               ; preds = %2
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 107, i32 9
  %22 = load i32, i32* %21, align 8
  %23 = lshr i32 %22, 11
  %24 = and i32 %23, 1
  %25 = lshr i32 %22, 21
  %26 = and i32 %25, 256
  %27 = or i32 %26, %24
  %28 = lshr i32 %22, 9
  %29 = and i32 %28, 2048
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 107, i32 10
  %31 = load i32, i32* %30, align 4
  %32 = shl i32 %31, 10
  %33 = and i32 %32, 4096
  %34 = or i32 %33, %29
  %35 = and i32 %23, 16384
  %36 = or i32 %35, %27
  %37 = or i32 %36, %34
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 37
  %40 = load i64, i64* %39, align 16
  %41 = xor i64 %38, -1
  %42 = and i64 %40, %41
  %43 = and i64 %38, %1
  %44 = or i64 %42, %43
  store i64 %44, i64* %39, align 16
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 21
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, -1064961
  %48 = trunc i64 %44 to i32
  %49 = shl i32 %48, 4
  %50 = and i32 %49, 16384
  %51 = or i32 %50, %47
  %52 = shl i32 %48, 8
  %53 = and i32 %52, 1048576
  %54 = or i32 %51, %53
  store i32 %54, i32* %45, align 4
  br label %133

55:                                               ; preds = %2
  %56 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %56, i64 0, i32 38
  store i64 %1, i64* %57, align 8
  br label %133

58:                                               ; preds = %2
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %59, i64 0, i32 106
  store i64 %1, i64* %60, align 16
  br label %133

61:                                               ; preds = %2
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 39
  store i64 %1, i64* %63, align 16
  br label %133

64:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %65 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %66 = add nsw i32 %0, -512
  %67 = lshr i32 %66, 1
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %65, i64 0, i32 110, i64 %68, i32 0
  store i64 %1, i64* %69, align 8
  br label %133

70:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %71 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %72 = add nsw i32 %0, -513
  %73 = lshr i32 %72, 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 110, i64 %74, i32 1
  store i64 %1, i64* %75, align 8
  br label %133

76:                                               ; preds = %2
  %77 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 108, i64 0
  store i64 %1, i64* %78, align 8
  br label %133

79:                                               ; preds = %2, %2
  %80 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %81 = add nsw i32 %0, -599
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %80, i64 0, i32 108, i64 %82
  store i64 %1, i64* %83, align 8
  br label %133

84:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %85 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %86 = add nsw i32 %0, -613
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 108, i64 %87
  store i64 %1, i64* %88, align 8
  br label %133

89:                                               ; preds = %2
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 109
  store i64 %1, i64* %91, align 16
  br label %133

92:                                               ; preds = %2
  %93 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 56
  store i64 %1, i64* %94, align 16
  br label %133

95:                                               ; preds = %2
  %96 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 114
  %98 = load i64, i64* %97, align 8
  %99 = and i64 %98, 256
  %100 = icmp ne i64 %99, 0
  %101 = add i64 %1, 1
  %102 = icmp ult i64 %101, 2
  %103 = and i1 %102, %100
  br i1 %103, label %104, label %133

104:                                              ; preds = %95
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 115
  store i64 %1, i64* %105, align 16
  br label %133

106:                                              ; preds = %2
  %107 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 117
  store i64 %1, i64* %108, align 8
  br label %133

109:                                              ; preds = %2
  %110 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %110, i64 0, i32 57
  store i64 %1, i64* %111, align 8
  br label %133

112:                                              ; preds = %2
  %113 = icmp ugt i32 %0, 1023
  br i1 %113, label %114, label %133

114:                                              ; preds = %112
  %115 = zext i32 %0 to i64
  %116 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 114
  %118 = load i64, i64* %117, align 8
  %119 = shl i64 %118, 2
  %120 = and i64 %119, 252
  %121 = or i64 %120, 1024
  %122 = icmp ugt i64 %121, %115
  br i1 %122, label %123, label %133

123:                                              ; preds = %114
  %124 = add i32 %0, -1024
  %125 = and i32 %124, 3
  %126 = icmp ne i32 %125, 0
  %127 = add i64 %1, 1
  %128 = icmp ult i64 %127, 2
  %129 = or i1 %128, %126
  br i1 %129, label %130, label %133

130:                                              ; preds = %123
  %131 = zext i32 %124 to i64
  %132 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 116, i64 %131
  store i64 %1, i64* %132, align 8
  br label %133

133:                                              ; preds = %130, %123, %95, %112, %114, %104, %109, %106, %92, %89, %84, %79, %76, %70, %64, %61, %58, %55, %19, %16, %12, %8, %3
  ret void
}

; Function Attrs: uwtable
define void @helper_wrmsr() local_unnamed_addr #3 {
  tail call void @helper_svm_check_intercept_param(i32 124, i64 1)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = or i64 %8, %4
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %11 = load i32, i32* %10, align 4
  tail call void @helper_wrmsr_v(i32 %11, i64 %9)
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i64 @helper_rdmsr_v(i64 %0) local_unnamed_addr #0 {
  %2 = trunc i64 %0 to i32
  switch i32 %2, label %100 [
    i32 372, label %3
    i32 373, label %8
    i32 374, label %13
    i32 27, label %18
    i32 -1073741696, label %22
    i32 -1073741695, label %26
    i32 631, label %30
    i32 -1073676009, label %34
    i32 408, label %116
    i32 512, label %38
    i32 514, label %38
    i32 516, label %38
    i32 518, label %38
    i32 520, label %38
    i32 522, label %38
    i32 524, label %38
    i32 526, label %38
    i32 513, label %45
    i32 515, label %45
    i32 517, label %45
    i32 519, label %45
    i32 521, label %45
    i32 523, label %45
    i32 525, label %45
    i32 527, label %45
    i32 592, label %52
    i32 600, label %56
    i32 601, label %56
    i32 616, label %62
    i32 617, label %62
    i32 618, label %62
    i32 619, label %62
    i32 620, label %62
    i32 621, label %62
    i32 622, label %62
    i32 623, label %62
    i32 767, label %68
    i32 254, label %72
    i32 377, label %79
    i32 379, label %83
    i32 378, label %92
    i32 416, label %96
  ]

3:                                                ; preds = %1
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 34
  %6 = load i32, i32* %5, align 16
  %7 = zext i32 %6 to i64
  br label %116

8:                                                ; preds = %1
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 35
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  br label %116

13:                                               ; preds = %1
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 36
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  br label %116

18:                                               ; preds = %1
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 50
  %21 = load i64, i64* %20, align 16
  br label %116

22:                                               ; preds = %1
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 37
  %25 = load i64, i64* %24, align 16
  br label %116

26:                                               ; preds = %1
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 38
  %29 = load i64, i64* %28, align 8
  br label %116

30:                                               ; preds = %1
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 106
  %33 = load i64, i64* %32, align 16
  br label %116

34:                                               ; preds = %1
  %35 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 39
  %37 = load i64, i64* %36, align 16
  br label %116

38:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i64 %0, 4294966784
  %41 = lshr i64 %40, 1
  %42 = and i64 %41, 2147483647
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 110, i64 %42, i32 0
  %44 = load i64, i64* %43, align 8
  br label %116

45:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = add i64 %0, 4294966783
  %48 = lshr i64 %47, 1
  %49 = and i64 %48, 2147483647
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 110, i64 %49, i32 1
  %51 = load i64, i64* %50, align 8
  br label %116

52:                                               ; preds = %1
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 108, i64 0
  %55 = load i64, i64* %54, align 8
  br label %116

56:                                               ; preds = %1, %1
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %58 = add i64 %0, 4294966697
  %59 = and i64 %58, 4294967295
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 108, i64 %59
  %61 = load i64, i64* %60, align 8
  br label %116

62:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %63 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %64 = add i64 %0, 4294966683
  %65 = and i64 %64, 4294967295
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 108, i64 %65
  %67 = load i64, i64* %66, align 8
  br label %116

68:                                               ; preds = %1
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %69, i64 0, i32 109
  %71 = load i64, i64* %70, align 16
  br label %116

72:                                               ; preds = %1
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 107, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = and i32 %75, 4096
  %77 = icmp eq i32 %76, 0
  %78 = select i1 %77, i64 0, i64 1288
  br label %116

79:                                               ; preds = %1
  %80 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %80, i64 0, i32 114
  %82 = load i64, i64* %81, align 8
  br label %116

83:                                               ; preds = %1
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 114
  %86 = load i64, i64* %85, align 8
  %87 = and i64 %86, 256
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %116, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 115
  %91 = load i64, i64* %90, align 16
  br label %116

92:                                               ; preds = %1
  %93 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 56
  %95 = load i64, i64* %94, align 16
  br label %116

96:                                               ; preds = %1
  %97 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %98 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 57
  %99 = load i64, i64* %98, align 8
  br label %116

100:                                              ; preds = %1
  %101 = icmp ugt i32 %2, 1023
  br i1 %101, label %102, label %116

102:                                              ; preds = %100
  %103 = and i64 %0, 4294967295
  %104 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %104, i64 0, i32 114
  %106 = load i64, i64* %105, align 8
  %107 = shl i64 %106, 2
  %108 = and i64 %107, 252
  %109 = or i64 %108, 1024
  %110 = icmp ult i64 %103, %109
  br i1 %110, label %111, label %116

111:                                              ; preds = %102
  %112 = add i64 %0, 4294966272
  %113 = and i64 %112, 4294967295
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %104, i64 0, i32 116, i64 %113
  %115 = load i64, i64* %114, align 8
  br label %116

116:                                              ; preds = %100, %102, %83, %72, %1, %89, %111, %96, %92, %79, %68, %62, %56, %52, %45, %38, %34, %30, %26, %22, %18, %13, %8, %3
  %117 = phi i64 [ %115, %111 ], [ %99, %96 ], [ %95, %92 ], [ %91, %89 ], [ %82, %79 ], [ %71, %68 ], [ %67, %62 ], [ %61, %56 ], [ %55, %52 ], [ %51, %45 ], [ %44, %38 ], [ %37, %34 ], [ %33, %30 ], [ %29, %26 ], [ %25, %22 ], [ %21, %18 ], [ %17, %13 
  ret i64 %117
}

; Function Attrs: uwtable
define void @helper_rdmsr() local_unnamed_addr #3 {
  tail call void @helper_svm_check_intercept_param(i32 124, i64 0)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = tail call i64 @helper_rdmsr_v(i64 %4)
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  store i32 %6, i32* %7, align 16
  %8 = lshr i64 %5, 32
  %9 = trunc i64 %8 to i32
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 0, i64 2
  store i32 %9, i32* %11, align 8
  ret void
}

; Function Attrs: uwtable
define i32 @helper_lsl(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 16
  %5 = tail call i32 @helper_cc_compute_all(i32 %4)
  %6 = and i32 %0, 65532
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %50, label %8

8:                                                ; preds = %1
  %9 = and i32 %0, 65528
  %10 = and i32 %0, 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 25
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 27
  %14 = select i1 %11, %struct.SegmentCache* %13, %struct.SegmentCache* %12
  %15 = or i32 %9, 7
  %16 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %50, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %9
  %23 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %2, i32 %22)
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = add i32 %22, 4
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %24, i32 %25)
  %27 = and i32 %0, 3
  %28 = lshr i32 %26, 13
  %29 = and i32 %28, 3
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 21
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 3
  %34 = and i32 %26, 4096
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %43, label %36

36:                                               ; preds = %19
  %37 = and i32 %26, 3072
  %38 = icmp eq i32 %37, 3072
  br i1 %38, label %53, label %39

39:                                               ; preds = %36
  %40 = icmp ult i32 %29, %33
  %41 = icmp ult i32 %29, %27
  %42 = or i1 %41, %40
  br i1 %42, label %50, label %53

43:                                               ; preds = %19
  %44 = lshr i32 %26, 8
  %45 = and i32 %44, 15
  switch i32 %45, label %50 [
    i32 1, label %46
    i32 2, label %46
    i32 3, label %46
    i32 9, label %46
    i32 11, label %46
  ]

46:                                               ; preds = %43, %43, %43, %43, %43
  %47 = icmp ult i32 %29, %33
  %48 = icmp ult i32 %29, %27
  %49 = or i1 %48, %47
  br i1 %49, label %50, label %53

50:                                               ; preds = %8, %46, %43, %39, %1
  %51 = phi %struct.CPUX86State* [ %2, %8 ], [ %30, %46 ], [ %30, %43 ], [ %30, %39 ], [ %2, %1 ]
  %52 = and i32 %5, -65
  br label %63

53:                                               ; preds = %36, %46, %39
  %54 = and i32 %23, 65535
  %55 = and i32 %26, 983040
  %56 = or i32 %55, %54
  %57 = and i32 %26, 8388608
  %58 = icmp eq i32 %57, 0
  %59 = shl nuw i32 %56, 12
  %60 = or i32 %59, 4095
  %61 = select i1 %58, i32 %56, i32 %60
  %62 = or i32 %5, 64
  br label %63

63:                                               ; preds = %53, %50
  %64 = phi %struct.CPUX86State* [ %30, %53 ], [ %51, %50 ]
  %65 = phi i32 [ %62, %53 ], [ %52, %50 ]
  %66 = phi i32 [ %61, %53 ], [ 0, %50 ]
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 2
  store i32 %65, i32* %67, align 4
  ret i32 %66
}

; Function Attrs: uwtable
define i32 @helper_lar(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 16
  %5 = tail call i32 @helper_cc_compute_all(i32 %4)
  %6 = and i32 %0, 65532
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %50, label %8

8:                                                ; preds = %1
  %9 = and i32 %0, 65528
  %10 = and i32 %0, 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 25
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 27
  %14 = select i1 %11, %struct.SegmentCache* %13, %struct.SegmentCache* %12
  %15 = or i32 %9, 7
  %16 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %50, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %9
  %23 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %2, i32 %22)
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = add i32 %22, 4
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %24, i32 %25)
  %27 = and i32 %0, 3
  %28 = lshr i32 %26, 13
  %29 = and i32 %28, 3
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 21
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 3
  %34 = and i32 %26, 4096
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %43, label %36

36:                                               ; preds = %19
  %37 = and i32 %26, 3072
  %38 = icmp eq i32 %37, 3072
  br i1 %38, label %54, label %39

39:                                               ; preds = %36
  %40 = icmp ult i32 %29, %33
  %41 = icmp ult i32 %29, %27
  %42 = or i1 %41, %40
  br i1 %42, label %50, label %54

43:                                               ; preds = %19
  %44 = lshr i32 %26, 8
  %45 = and i32 %44, 15
  switch i32 %45, label %50 [
    i32 1, label %46
    i32 2, label %46
    i32 3, label %46
    i32 4, label %46
    i32 5, label %46
    i32 9, label %46
    i32 11, label %46
    i32 12, label %46
  ]

46:                                               ; preds = %43, %43, %43, %43, %43, %43, %43, %43
  %47 = icmp ult i32 %29, %33
  %48 = icmp ult i32 %29, %27
  %49 = or i1 %48, %47
  br i1 %49, label %50, label %54

50:                                               ; preds = %8, %46, %43, %39, %1
  %51 = phi %struct.CPUX86State* [ %2, %8 ], [ %30, %46 ], [ %30, %43 ], [ %30, %39 ], [ %2, %1 ]
  %52 = and i32 %5, -65
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 2
  store i32 %52, i32* %53, align 4
  br label %58

54:                                               ; preds = %36, %46, %39
  %55 = or i32 %5, 64
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 2
  store i32 %55, i32* %56, align 4
  %57 = and i32 %26, 15793920
  br label %58

58:                                               ; preds = %54, %50
  %59 = phi i32 [ 0, %50 ], [ %57, %54 ]
  ret i32 %59
}

; Function Attrs: uwtable
define void @helper_verr(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 16
  %5 = tail call i32 @helper_cc_compute_all(i32 %4)
  %6 = and i32 %0, 65532
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %55, label %8

8:                                                ; preds = %1
  %9 = and i32 %0, 65528
  %10 = and i32 %0, 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 25
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 27
  %14 = select i1 %11, %struct.SegmentCache* %13, %struct.SegmentCache* %12
  %15 = or i32 %9, 7
  %16 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %55, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %9
  %23 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %2, i32 %22)
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = add i32 %22, 4
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %24, i32 %25)
  %27 = and i32 %26, 4096
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %19
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %55

31:                                               ; preds = %19
  %32 = and i32 %0, 3
  %33 = lshr i32 %26, 13
  %34 = and i32 %33, 3
  %35 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 21
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 3
  %39 = and i32 %26, 2048
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %31
  %42 = and i32 %26, 512
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %55, label %44

44:                                               ; preds = %41
  %45 = and i32 %26, 1024
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %58

47:                                               ; preds = %44
  %48 = icmp ult i32 %34, %38
  %49 = icmp ult i32 %34, %32
  %50 = or i1 %49, %48
  br i1 %50, label %55, label %58

51:                                               ; preds = %31
  %52 = icmp ult i32 %34, %38
  %53 = icmp ult i32 %34, %32
  %54 = or i1 %53, %52
  br i1 %54, label %55, label %58

55:                                               ; preds = %29, %8, %41, %51, %47, %1
  %56 = phi %struct.CPUX86State* [ %30, %29 ], [ %2, %8 ], [ %35, %41 ], [ %35, %51 ], [ %35, %47 ], [ %2, %1 ]
  %57 = and i32 %5, -65
  br label %60

58:                                               ; preds = %51, %47, %44
  %59 = or i32 %5, 64
  br label %60

60:                                               ; preds = %58, %55
  %61 = phi %struct.CPUX86State* [ %35, %58 ], [ %56, %55 ]
  %62 = phi i32 [ %59, %58 ], [ %57, %55 ]
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 2
  store i32 %62, i32* %63, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_verw(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 16
  %5 = tail call i32 @helper_cc_compute_all(i32 %4)
  %6 = and i32 %0, 65532
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %48, label %8

8:                                                ; preds = %1
  %9 = and i32 %0, 65528
  %10 = and i32 %0, 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 25
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 27
  %14 = select i1 %11, %struct.SegmentCache* %13, %struct.SegmentCache* %12
  %15 = or i32 %9, 7
  %16 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %48, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %9
  %23 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %2, i32 %22)
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = add i32 %22, 4
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* %24, i32 %25)
  %27 = and i32 %26, 4096
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %19
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %48

31:                                               ; preds = %19
  %32 = lshr i32 %26, 13
  %33 = and i32 %32, 3
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = and i32 %26, 2048
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %48

37:                                               ; preds = %31
  %38 = and i32 %0, 3
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 21
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, 3
  %42 = icmp ult i32 %33, %41
  %43 = icmp ult i32 %33, %38
  %44 = or i1 %43, %42
  %45 = and i32 %26, 512
  %46 = icmp eq i32 %45, 0
  %47 = or i1 %46, %44
  br i1 %47, label %48, label %51

48:                                               ; preds = %29, %8, %31, %37, %1
  %49 = phi %struct.CPUX86State* [ %30, %29 ], [ %2, %8 ], [ %34, %31 ], [ %34, %37 ], [ %2, %1 ]
  %50 = and i32 %5, -65
  br label %53

51:                                               ; preds = %37
  %52 = or i32 %5, 64
  br label %53

53:                                               ; preds = %51, %48
  %54 = phi %struct.CPUX86State* [ %34, %51 ], [ %49, %48 ]
  %55 = phi i32 [ %52, %51 ], [ %50, %48 ]
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 2
  store i32 %55, i32* %56, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_flds_FT0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %4 = tail call { i64, i16 } @float32_to_floatx80(i32 %0, %struct.float_status* nonnull %3)
  %5 = extractvalue { i64, i16 } %4, 0
  %6 = extractvalue { i64, i16 } %4, 1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  store i16 %6, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fldl_FT0(i64 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %4 = tail call { i64, i16 } @float64_to_floatx80(i64 %0, %struct.float_status* nonnull %3)
  %5 = extractvalue { i64, i16 } %4, 0
  %6 = extractvalue { i64, i16 } %4, 1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  store i16 %6, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fildl_FT0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %4 = tail call { i64, i16 } @int32_to_floatx80(i32 %0, %struct.float_status* nonnull %3)
  %5 = extractvalue { i64, i16 } %4, 0
  %6 = extractvalue { i64, i16 } %4, 1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  store i16 %6, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_flds_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @float32_to_floatx80(i32 %0, %struct.float_status* nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fldl_ST0(i64 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @float64_to_floatx80(i64 %0, %struct.float_status* nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fildl_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @int32_to_floatx80(i32 %0, %struct.float_status* nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fildll_ST0(i64 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @int64_to_floatx80(i64 %0, %struct.float_status* nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define i32 @helper_fsts_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_float32(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  ret i32 %10
}

; Function Attrs: uwtable
define i64 @helper_fstl_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i64 @floatx80_to_float64(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  ret i64 %10
}

; Function Attrs: uwtable
define i32 @helper_fist_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  %11 = add i32 %10, 32768
  %12 = icmp ugt i32 %11, 65535
  %13 = select i1 %12, i32 -32768, i32 %10
  ret i32 %13
}

; Function Attrs: uwtable
define i32 @helper_fistl_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  ret i32 %10
}

; Function Attrs: uwtable
define i64 @helper_fistll_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i64 @floatx80_to_int64(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  ret i64 %10
}

; Function Attrs: uwtable
define i32 @helper_fistt_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32_round_to_zero(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  %11 = add i32 %10, 32768
  %12 = icmp ugt i32 %11, 65535
  %13 = select i1 %12, i32 -32768, i32 %10
  ret i32 %13
}

; Function Attrs: uwtable
define i32 @helper_fisttl_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32_round_to_zero(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  ret i32 %10
}

; Function Attrs: uwtable
define i64 @helper_fisttll_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i64 @floatx80_to_int64_round_to_zero(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  ret i64 %10
}

; Function Attrs: uwtable
define void @helper_fldt_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %2, i32 %0)
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = add i32 %0, 8
  %11 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %9, i32 %10)
  %12 = trunc i32 %11 to i16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %8, i64* %13, align 16
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %12, i16* %14, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  store i32 %6, i32* %16, align 16
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 8, i64 %7
  store i8 0, i8* %17, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fstt_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %2, i32 %0, i64 %7)
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = add i32 %0, 8
  %12 = zext i16 %9 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %10, i32 %11, i32 %12)
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fpush() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 7
  %5 = and i32 %4, 7
  store i32 %5, i32* %2, align 16
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 %6
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fpop() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 %4
  store i8 1, i8* %5, align 1
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 5
  %8 = load i32, i32* %7, align 16
  %9 = add i32 %8, 1
  %10 = and i32 %9, 7
  store i32 %10, i32* %7, align 16
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fdecstp() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 7
  %5 = and i32 %4, 7
  store i32 %5, i32* %2, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %7 = load i16, i16* %6, align 4
  %8 = and i16 %7, -18177
  store i16 %8, i16* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fincstp() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  store i32 %5, i32* %2, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %7 = load i16, i16* %6, align 4
  %8 = and i16 %7, -18177
  store i16 %8, i16* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_ffree_STN(i32 %0) local_unnamed_addr #2 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 8, i64 %7
  store i8 1, i8* %8, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fmov_ST0_FT0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11
  %7 = bitcast %struct.floatx80* %5 to i8*
  %8 = bitcast %struct.floatx80* %6 to i8*
  br label %9

9:                                                ; preds = %12, %0
  %10 = phi i64 [ 0, %0 ], [ %16, %12 ]
  %11 = icmp ult i64 %10, 16
  br i1 %11, label %12, label %17

12:                                               ; preds = %9
  %13 = getelementptr i8, i8* %8, i64 %10
  %14 = load i8, i8* %13
  %15 = getelementptr i8, i8* %7, i64 %10
  store i8 %14, i8* %15
  %16 = add i64 %10, 1
  br label %9

17:                                               ; preds = %9
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #11

; Function Attrs: nounwind uwtable
define void @helper_fmov_FT0_STN(i32 %0) local_unnamed_addr #13 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %5 = load i32, i32* %4, align 16
  %6 = add i32 %5, %0
  %7 = and i32 %6, 7
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0
  %10 = bitcast %struct.floatx80* %3 to i8*
  %11 = bitcast %struct.floatx80* %9 to i8*
  br label %12

12:                                               ; preds = %15, %1
  %13 = phi i64 [ 0, %1 ], [ %19, %15 ]
  %14 = icmp ult i64 %13, 16
  br i1 %14, label %15, label %20

15:                                               ; preds = %12
  %16 = getelementptr i8, i8* %11, i64 %13
  %17 = load i8, i8* %16
  %18 = getelementptr i8, i8* %10, i64 %13
  store i8 %17, i8* %18
  %19 = add i64 %13, 1
  br label %12

20:                                               ; preds = %12
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fmov_ST0_STN(i32 %0) local_unnamed_addr #13 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0
  %7 = add i32 %4, %0
  %8 = and i32 %7, 7
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %9, i32 0
  %11 = bitcast %struct.floatx80* %6 to i8*
  %12 = bitcast %struct.floatx80* %10 to i8*
  br label %13

13:                                               ; preds = %16, %1
  %14 = phi i64 [ 0, %1 ], [ %20, %16 ]
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = getelementptr i8, i8* %12, i64 %14
  %18 = load i8, i8* %17
  %19 = getelementptr i8, i8* %11, i64 %14
  store i8 %18, i8* %19
  %20 = add i64 %14, 1
  br label %13

21:                                               ; preds = %13
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fmov_STN_ST0(i32 %0) local_unnamed_addr #13 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0
  %9 = zext i32 %4 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %9, i32 0
  %11 = bitcast %struct.floatx80* %8 to i8*
  %12 = bitcast %struct.floatx80* %10 to i8*
  br label %13

13:                                               ; preds = %16, %1
  %14 = phi i64 [ 0, %1 ], [ %20, %16 ]
  %15 = icmp ult i64 %14, 16
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = getelementptr i8, i8* %12, i64 %14
  %18 = load i8, i8* %17
  %19 = getelementptr i8, i8* %11, i64 %14
  store i8 %18, i8* %19
  %20 = add i64 %14, 1
  br label %13

21:                                               ; preds = %13
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fxchg_ST0_STN(i32 %0) local_unnamed_addr #13 {
  %2 = alloca %struct.floatx80, align 8
  %3 = bitcast %struct.floatx80* %2 to i8*
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 16
  %7 = add i32 %6, %0
  %8 = and i32 %7, 7
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 9, i64 %9, i32 0
  %11 = bitcast %struct.floatx80* %10 to i8*
  br label %12

12:                                               ; preds = %15, %1
  %13 = phi i64 [ 0, %1 ], [ %19, %15 ]
  %14 = icmp ult i64 %13, 16
  br i1 %14, label %15, label %20

15:                                               ; preds = %12
  %16 = getelementptr i8, i8* %11, i64 %13
  %17 = load i8, i8* %16
  %18 = getelementptr i8, i8* %3, i64 %13
  store i8 %17, i8* %18
  %19 = add i64 %13, 1
  br label %12

20:                                               ; preds = %12
  %21 = zext i32 %6 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 9, i64 %21, i32 0
  %23 = bitcast %struct.floatx80* %22 to i8*
  br label %24

24:                                               ; preds = %27, %20
  %25 = phi i64 [ 0, %20 ], [ %31, %27 ]
  %26 = icmp ult i64 %25, 16
  br i1 %26, label %27, label %32

27:                                               ; preds = %24
  %28 = getelementptr i8, i8* %23, i64 %25
  %29 = load i8, i8* %28
  %30 = getelementptr i8, i8* %11, i64 %25
  store i8 %29, i8* %30
  %31 = add i64 %25, 1
  br label %24

32:                                               ; preds = %24, %35
  %33 = phi i64 [ %39, %35 ], [ 0, %24 ]
  %34 = icmp ult i64 %33, 16
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = getelementptr i8, i8* %3, i64 %33
  %37 = load i8, i8* %36
  %38 = getelementptr i8, i8* %23, i64 %33
  store i8 %37, i8* %38
  %39 = add i64 %33, 1
  br label %32

40:                                               ; preds = %32
  ret void
}

; Function Attrs: uwtable
define void @helper_fcom_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %17 = load i16, i16* %16, align 4
  %18 = and i16 %17, -17665
  %19 = add nsw i32 %14, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* @fcom_ccval, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i16
  %24 = or i16 %18, %23
  store i16 %24, i16* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fucom_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare_quiet(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %17 = load i16, i16* %16, align 4
  %18 = and i16 %17, -17665
  %19 = add nsw i32 %14, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* @fcom_ccval, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i16
  %24 = or i16 %18, %23
  store i16 %24, i16* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fcomi_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 1
  %17 = load i32, i32* %16, align 16
  %18 = tail call i32 @helper_cc_compute_all(i32 %17)
  %19 = and i32 %18, -70
  %20 = add nsw i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = or i32 %19, %23
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fucomi_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare_quiet(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 1
  %17 = load i32, i32* %16, align 16
  %18 = tail call i32 @helper_cc_compute_all(i32 %17)
  %19 = and i32 %18, -70
  %20 = add nsw i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = or i32 %19, %23
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fadd_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_add(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fmul_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_mul(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsub_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_sub(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsubr_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_sub(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fdiv_ST0_FT0() local_unnamed_addr #3 {
  %1 = alloca [6 x i8], align 2
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5
  %7 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %9 = load i64, i64* %8, align 16
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 32767
  %17 = icmp ne i16 %16, 0
  %18 = icmp ne i64 %13, 0
  %19 = or i1 %18, %17
  br i1 %19, label %32, label %20

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 6
  %22 = load i16, i16* %21, align 4
  %23 = or i16 %22, 4
  store i16 %23, i16* %21, align 4
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 7
  %25 = load i16, i16* %24, align 2
  %26 = and i16 %25, 63
  %27 = xor i16 %26, 63
  %28 = and i16 %27, %23
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %20
  %31 = or i16 %22, -32636
  store i16 %31, i16* %21, align 4
  br label %32

32:                                               ; preds = %0, %20, %30
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %34 = tail call { i64, i16 } @floatx80_div(i64 %9, i16 %11, i64 %13, i16 %15, %struct.float_status* nonnull %33)
  %35 = extractvalue { i64, i16 } %34, 0
  %36 = extractvalue { i64, i16 } %34, 1
  %37 = getelementptr inbounds %union.FPReg, %union.FPReg* %6, i64 0, i32 0, i32 0
  store i64 %35, i64* %37, align 16
  store i16 %36, i16* %10, align 8
  %38 = bitcast %union.FPReg* %6 to i8*
  %39 = getelementptr inbounds i8, i8* %38, i64 10
  br label %40

40:                                               ; preds = %43, %32
  %41 = phi i64 [ 0, %32 ], [ %47, %43 ]
  %42 = icmp ult i64 %41, 6
  br i1 %42, label %43, label %48

43:                                               ; preds = %40
  %44 = getelementptr i8, i8* %7, i64 %41
  %45 = load i8, i8* %44
  %46 = getelementptr i8, i8* %39, i64 %41
  store i8 %45, i8* %46
  %47 = add i64 %41, 1
  br label %40

48:                                               ; preds = %40
  ret void
}

; Function Attrs: uwtable
define void @helper_fdivr_ST0_FT0() local_unnamed_addr #3 {
  %1 = alloca [6 x i8], align 2
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5
  %7 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %13 = load i64, i64* %12, align 16
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 32767
  %17 = icmp ne i16 %16, 0
  %18 = icmp ne i64 %13, 0
  %19 = or i1 %18, %17
  br i1 %19, label %32, label %20

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 6
  %22 = load i16, i16* %21, align 4
  %23 = or i16 %22, 4
  store i16 %23, i16* %21, align 4
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 7
  %25 = load i16, i16* %24, align 2
  %26 = and i16 %25, 63
  %27 = xor i16 %26, 63
  %28 = and i16 %27, %23
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %20
  %31 = or i16 %22, -32636
  store i16 %31, i16* %21, align 4
  br label %32

32:                                               ; preds = %0, %20, %30
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %34 = tail call { i64, i16 } @floatx80_div(i64 %9, i16 %11, i64 %13, i16 %15, %struct.float_status* nonnull %33)
  %35 = extractvalue { i64, i16 } %34, 0
  %36 = extractvalue { i64, i16 } %34, 1
  %37 = getelementptr inbounds %union.FPReg, %union.FPReg* %6, i64 0, i32 0, i32 0
  store i64 %35, i64* %37, align 16
  store i16 %36, i16* %14, align 8
  %38 = bitcast %union.FPReg* %6 to i8*
  %39 = getelementptr inbounds i8, i8* %38, i64 10
  br label %40

40:                                               ; preds = %43, %32
  %41 = phi i64 [ 0, %32 ], [ %47, %43 ]
  %42 = icmp ult i64 %41, 6
  br i1 %42, label %43, label %48

43:                                               ; preds = %40
  %44 = getelementptr i8, i8* %7, i64 %41
  %45 = load i8, i8* %44
  %46 = getelementptr i8, i8* %39, i64 %41
  store i8 %45, i8* %46
  %47 = add i64 %41, 1
  br label %40

48:                                               ; preds = %40
  ret void
}

; Function Attrs: uwtable
define void @helper_fadd_STN_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_add(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fmul_STN_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_mul(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsub_STN_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_sub(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsubr_STN_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_sub(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fdiv_STN_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [6 x i8], align 2
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 5
  %5 = load i32, i32* %4, align 16
  %6 = add i32 %5, %0
  %7 = and i32 %6, 7
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 16
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %8, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %8
  %14 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 0
  %15 = zext i32 %5 to i64
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 16
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %15, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = and i16 %19, 32767
  %21 = icmp ne i16 %20, 0
  %22 = icmp ne i64 %17, 0
  %23 = or i1 %22, %21
  br i1 %23, label %36, label %24

24:                                               ; preds = %1
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 6
  %26 = load i16, i16* %25, align 4
  %27 = or i16 %26, 4
  store i16 %27, i16* %25, align 4
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 7
  %29 = load i16, i16* %28, align 2
  %30 = and i16 %29, 63
  %31 = xor i16 %30, 63
  %32 = and i16 %31, %27
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %24
  %35 = or i16 %26, -32636
  store i16 %35, i16* %25, align 4
  br label %36

36:                                               ; preds = %1, %24, %34
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  %38 = tail call { i64, i16 } @floatx80_div(i64 %10, i16 %12, i64 %17, i16 %19, %struct.float_status* nonnull %37)
  %39 = extractvalue { i64, i16 } %38, 0
  %40 = extractvalue { i64, i16 } %38, 1
  %41 = getelementptr inbounds %union.FPReg, %union.FPReg* %13, i64 0, i32 0, i32 0
  store i64 %39, i64* %41, align 16
  store i16 %40, i16* %11, align 8
  %42 = bitcast %union.FPReg* %13 to i8*
  %43 = getelementptr inbounds i8, i8* %42, i64 10
  br label %44

44:                                               ; preds = %47, %36
  %45 = phi i64 [ 0, %36 ], [ %51, %47 ]
  %46 = icmp ult i64 %45, 6
  br i1 %46, label %47, label %52

47:                                               ; preds = %44
  %48 = getelementptr i8, i8* %14, i64 %45
  %49 = load i8, i8* %48
  %50 = getelementptr i8, i8* %43, i64 %45
  store i8 %49, i8* %50
  %51 = add i64 %45, 1
  br label %44

52:                                               ; preds = %44
  ret void
}

; Function Attrs: uwtable
define void @helper_fdivr_STN_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [6 x i8], align 2
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 5
  %5 = load i32, i32* %4, align 16
  %6 = add i32 %5, %0
  %7 = and i32 %6, 7
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 16
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %8, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %8
  %14 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 0
  %15 = zext i32 %5 to i64
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 16
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %15, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = and i16 %12, 32767
  %21 = icmp ne i16 %20, 0
  %22 = icmp ne i64 %10, 0
  %23 = or i1 %22, %21
  br i1 %23, label %36, label %24

24:                                               ; preds = %1
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 6
  %26 = load i16, i16* %25, align 4
  %27 = or i16 %26, 4
  store i16 %27, i16* %25, align 4
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 7
  %29 = load i16, i16* %28, align 2
  %30 = and i16 %29, 63
  %31 = xor i16 %30, 63
  %32 = and i16 %31, %27
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %24
  %35 = or i16 %26, -32636
  store i16 %35, i16* %25, align 4
  br label %36

36:                                               ; preds = %1, %24, %34
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  %38 = tail call { i64, i16 } @floatx80_div(i64 %17, i16 %19, i64 %10, i16 %12, %struct.float_status* nonnull %37)
  %39 = extractvalue { i64, i16 } %38, 0
  %40 = extractvalue { i64, i16 } %38, 1
  %41 = getelementptr inbounds %union.FPReg, %union.FPReg* %13, i64 0, i32 0, i32 0
  store i64 %39, i64* %41, align 16
  store i16 %40, i16* %11, align 8
  %42 = bitcast %union.FPReg* %13 to i8*
  %43 = getelementptr inbounds i8, i8* %42, i64 10
  br label %44

44:                                               ; preds = %47, %36
  %45 = phi i64 [ 0, %36 ], [ %51, %47 ]
  %46 = icmp ult i64 %45, 6
  br i1 %46, label %47, label %52

47:                                               ; preds = %44
  %48 = getelementptr i8, i8* %14, i64 %45
  %49 = load i8, i8* %48
  %50 = getelementptr i8, i8* %43, i64 %45
  store i8 %49, i8* %50
  %51 = add i64 %45, 1
  br label %44

52:                                               ; preds = %44
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fchs_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = xor i16 %8, -32768
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %6, i64* %10, align 16
  store i16 %9, i16* %7, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fabs_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = and i16 %8, 32767
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %6, i64* %10, align 16
  store i16 %9, i16* %7, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fld1_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -9223372036854775808, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16383, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldl2t_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -3127054724296373506, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16384, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldl2e_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -5140230975865229124, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16383, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldpi_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -3958705157555305931, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16384, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldlg2_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -7340697496662837351, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16381, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldln2_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -5660435428506895956, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16382, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldz_ST0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 0, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 0, i16* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_fldz_FT0() local_unnamed_addr #13 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  store i16 0, i16* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_fnstsw() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %3 = load i16, i16* %2, align 4
  %4 = and i16 %3, -14337
  %5 = zext i16 %4 to i32
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %7 = load i32, i32* %6, align 16
  %8 = shl i32 %7, 11
  %9 = and i32 %8, 14336
  %10 = or i32 %9, %5
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_fnstcw() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i16, i16* %2, align 2
  %4 = zext i16 %3 to i32
  ret i32 %4
}

; Function Attrs: uwtable
define void @helper_fldcw(i32 %0) local_unnamed_addr #3 {
  %2 = trunc i32 %0 to i16
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 7
  store i16 %2, i16* %4, align 2
  %5 = lshr i32 %0, 10
  %6 = and i32 %5, 3
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  tail call void @set_float_rounding_mode(i32 %6, %struct.float_status* nonnull %7)
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 7
  %10 = load i16, i16* %9, align 2
  %11 = lshr i16 %10, 8
  %12 = and i16 %11, 3
  %13 = icmp eq i16 %12, 2
  %14 = select i1 %13, i32 64, i32 80
  %15 = icmp eq i16 %12, 0
  %16 = select i1 %15, i32 32, i32 %14
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 10
  tail call void @set_floatx80_rounding_precision(i32 %16, %struct.float_status* nonnull %17)
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fclex() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %3 = load i16, i16* %2, align 4
  %4 = and i16 %3, 32512
  store i16 %4, i16* %2, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fwait() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %3 = load i16, i16* %2, align 4
  %4 = trunc i16 %3 to i8
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 0
  %8 = load i32, i32* %7, align 16
  %9 = and i32 %8, 32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @raise_exception_ra(%struct.CPUX86State* nonnull %1, i32 16, i64 0) #21
  unreachable

12:                                               ; preds = %6
  tail call void @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i64 0, i64 0)) #24
  br label %13

13:                                               ; preds = %12, %0
  ret void
}

; Function Attrs: nofree nounwind
declare void @perror(i8* nocapture readonly) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fninit() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  store i16 0, i16* %2, align 4
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  store i32 0, i32* %3, align 16
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 7
  store i16 895, i16* %4, align 2
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 0
  %6 = bitcast i8* %5 to i64*
  store i64 72340172838076673, i64* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fbld_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [6 x i8], align 2
  %3 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 0
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = add i32 %0, 8
  %6 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %4, i32 %5)
  %7 = lshr i32 %6, 4
  %8 = mul nuw i32 %7, 10
  %9 = zext i32 %8 to i64
  %10 = and i32 %6, 15
  %11 = zext i32 %10 to i64
  %12 = add nuw nsw i64 %11, %9
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = add i32 %0, 7
  %15 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %13, i32 %14)
  %16 = mul nuw nsw i64 %12, 100
  %17 = lshr i32 %15, 4
  %18 = mul nuw i32 %17, 10
  %19 = zext i32 %18 to i64
  %20 = and i32 %15, 15
  %21 = zext i32 %20 to i64
  %22 = add nuw nsw i64 %16, %21
  %23 = add nuw nsw i64 %22, %19
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = add i32 %0, 6
  %26 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %24, i32 %25)
  %27 = mul nuw nsw i64 %23, 100
  %28 = lshr i32 %26, 4
  %29 = mul nuw i32 %28, 10
  %30 = zext i32 %29 to i64
  %31 = and i32 %26, 15
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %27, %32
  %34 = add nuw nsw i64 %33, %30
  %35 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %36 = add i32 %0, 5
  %37 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %35, i32 %36)
  %38 = mul nuw nsw i64 %34, 100
  %39 = lshr i32 %37, 4
  %40 = mul nuw i32 %39, 10
  %41 = zext i32 %40 to i64
  %42 = and i32 %37, 15
  %43 = zext i32 %42 to i64
  %44 = add nuw nsw i64 %38, %43
  %45 = add nuw nsw i64 %44, %41
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = add i32 %0, 4
  %48 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %46, i32 %47)
  %49 = mul nuw nsw i64 %45, 100
  %50 = lshr i32 %48, 4
  %51 = mul nuw i32 %50, 10
  %52 = zext i32 %51 to i64
  %53 = and i32 %48, 15
  %54 = zext i32 %53 to i64
  %55 = add nuw nsw i64 %49, %54
  %56 = add nuw nsw i64 %55, %52
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %58 = add i32 %0, 3
  %59 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %57, i32 %58)
  %60 = mul i64 %56, 100
  %61 = lshr i32 %59, 4
  %62 = mul nuw i32 %61, 10
  %63 = zext i32 %62 to i64
  %64 = and i32 %59, 15
  %65 = zext i32 %64 to i64
  %66 = add i64 %60, %65
  %67 = add i64 %66, %63
  %68 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %69 = add i32 %0, 2
  %70 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %68, i32 %69)
  %71 = mul i64 %67, 100
  %72 = lshr i32 %70, 4
  %73 = mul nuw i32 %72, 10
  %74 = zext i32 %73 to i64
  %75 = and i32 %70, 15
  %76 = zext i32 %75 to i64
  %77 = add i64 %71, %76
  %78 = add i64 %77, %74
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = add i32 %0, 1
  %81 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %79, i32 %80)
  %82 = mul i64 %78, 100
  %83 = lshr i32 %81, 4
  %84 = mul nuw i32 %83, 10
  %85 = zext i32 %84 to i64
  %86 = and i32 %81, 15
  %87 = zext i32 %86 to i64
  %88 = add i64 %82, %87
  %89 = add i64 %88, %85
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %90, i32 %0)
  %92 = mul i64 %89, 100
  %93 = lshr i32 %91, 4
  %94 = mul nuw i32 %93, 10
  %95 = zext i32 %94 to i64
  %96 = and i32 %91, 15
  %97 = zext i32 %96 to i64
  %98 = add i64 %92, %97
  %99 = add i64 %98, %95
  %100 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %101 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %100, i64 0, i32 10
  %102 = tail call { i64, i16 } @int64_to_floatx80(i64 %99, %struct.float_status* nonnull %101)
  %103 = extractvalue { i64, i16 } %102, 0
  %104 = extractvalue { i64, i16 } %102, 1
  %105 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %106 = add i32 %0, 9
  %107 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %105, i32 %106)
  %108 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %108, i64 0, i32 5
  %110 = load i32, i32* %109, align 16
  %111 = add i32 %110, 7
  %112 = and i32 %111, 7
  store i32 %112, i32* %109, align 16
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %108, i64 0, i32 8, i64 %113
  store i8 0, i8* %114, align 1
  %115 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 5
  %117 = load i32, i32* %116, align 16
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 9, i64 %118
  %120 = getelementptr inbounds %union.FPReg, %union.FPReg* %119, i64 0, i32 0, i32 0
  store i64 %103, i64* %120, align 16
  %121 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 9, i64 %118, i32 0, i32 1
  store i16 %104, i16* %121, align 8
  %122 = bitcast %union.FPReg* %119 to i8*
  %123 = getelementptr inbounds i8, i8* %122, i64 10
  br label %124

124:                                              ; preds = %127, %1
  %125 = phi i64 [ 0, %1 ], [ %131, %127 ]
  %126 = icmp ult i64 %125, 6
  br i1 %126, label %127, label %132

127:                                              ; preds = %124
  %128 = getelementptr i8, i8* %3, i64 %125
  %129 = load i8, i8* %128
  %130 = getelementptr i8, i8* %123, i64 %125
  store i8 %129, i8* %130
  %131 = add i64 %125, 1
  br label %124

132:                                              ; preds = %124
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldub_data(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %17 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, -33
  %29 = and i32 %14, -4096
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %35, label %31, !prof !3, !misexpect !4

31:                                               ; preds = %13
  %32 = zext i1 %21 to i32
  %33 = tail call zeroext i8 @helper_ldb_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 %32, i8* null)
  %34 = zext i8 %33 to i32
  br label %48

35:                                               ; preds = %13
  %36 = zext i32 %14 to i64
  %37 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, %36
  %40 = inttoptr i64 %39 to i8*
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %35
  %47 = zext i8 %41 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %47, i32 4, i32 0, i64 0)
  br label %48

48:                                               ; preds = %35, %46, %31
  %49 = phi i32 [ %34, %31 ], [ %42, %46 ], [ %42, %35 ]
  ret i32 %49
}

; Function Attrs: uwtable
define void @helper_fbst_ST0(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = tail call i64 @floatx80_to_int64(i64 %8, i16 %10, %struct.float_status* nonnull %6)
  %12 = add i32 %0, 9
  %13 = icmp slt i64 %11, 0
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %13, label %15, label %17

15:                                               ; preds = %1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %14, i32 %12, i32 128)
  %16 = sub nsw i64 0, %11
  br label %18

17:                                               ; preds = %1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %14, i32 %12, i32 0)
  br label %18

18:                                               ; preds = %17, %15
  %19 = phi i64 [ %16, %15 ], [ %11, %17 ]
  %20 = icmp ugt i32 %0, -10
  %21 = icmp eq i64 %19, 0
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %26, %18
  %24 = phi i32 [ %0, %18 ], [ %37, %26 ]
  %25 = icmp ult i32 %24, %12
  br i1 %25, label %42, label %47

26:                                               ; preds = %18, %26
  %27 = phi i64 [ %31, %26 ], [ %19, %18 ]
  %28 = phi i32 [ %37, %26 ], [ %0, %18 ]
  %29 = srem i64 %27, 100
  %30 = trunc i64 %29 to i32
  %31 = sdiv i64 %27, 100
  %32 = sdiv i32 %30, 10
  %33 = shl nsw i32 %32, 4
  %34 = srem i32 %30, 10
  %35 = or i32 %33, %34
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = add nuw i32 %28, 1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %36, i32 %28, i32 %35)
  %38 = icmp uge i32 %37, %12
  %39 = add i64 %27, 99
  %40 = icmp ult i64 %39, 199
  %41 = or i1 %38, %40
  br i1 %41, label %23, label %26

42:                                               ; preds = %23, %42
  %43 = phi i32 [ %45, %42 ], [ %24, %23 ]
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = add i32 %43, 1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %44, i32 %43, i32 0)
  %46 = icmp eq i32 %45, %12
  br i1 %46, label %47, label %42

47:                                               ; preds = %42, %23
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stb_data(%struct.CPUX86State* %0, i32 %1, i32 %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 %8, i32 4, i32 1)
  br label %9

9:                                                ; preds = %3, %7
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i32 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i32 %16, 12
  %18 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %17, i32 0, i32 1048575, i32 0)
  %19 = and i32 %18, 1023
  %20 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 3
  %23 = icmp eq i32 %22, 3
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %24
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %25, align 8
  %27 = zext i32 %19 to i64
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %27, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, -33
  %31 = and i32 %16, -4096
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %36, label %33, !prof !3, !misexpect !4

33:                                               ; preds = %15
  %34 = zext i1 %23 to i32
  %35 = trunc i32 %2 to i8
  tail call void @helper_stb_mmu(%struct.CPUX86State* nonnull %0, i32 %16, i8 zeroext %35, i32 %34, i8* null)
  br label %48

36:                                               ; preds = %15
  %37 = zext i32 %16 to i64
  %38 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %27, i32 4
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %37
  %41 = inttoptr i64 %40 to i8*
  %42 = trunc i32 %2 to i8
  store i8 %42, i8* %41, align 1
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %36
  %47 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %16, i64 %47, i32 4, i32 2, i64 0)
  br label %48

48:                                               ; preds = %36, %46, %33
  ret void
}

; Function Attrs: uwtable
define void @helper_f2xm1() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = tail call double @exp2(double %11) #5
  %13 = fadd double %12, -1.000000e+00
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  %16 = load i32, i32* %15, align 16
  %17 = zext i32 %16 to i64
  %18 = bitcast double %13 to i64
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 10
  %20 = tail call { i64, i16 } @float64_to_floatx80(i64 %18, %struct.float_status* nonnull %19)
  %21 = extractvalue { i64, i16 } %20, 0
  %22 = extractvalue { i64, i16 } %20, 1
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 0
  store i64 %21, i64* %23, align 16
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 1
  store i16 %22, i16* %24, align 8
  ret void
}

declare double @exp2(double) local_unnamed_addr

; Function Attrs: uwtable
define void @helper_fyl2x() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0.000000e+00
  br i1 %12, label %13, label %53

13:                                               ; preds = %0
  %14 = tail call double @log(double %11) #23
  %15 = fdiv double %14, 0x3FE62E42FEFA39EF
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 5
  %18 = load i32, i32* %17, align 16
  %19 = add i32 %18, 1
  %20 = and i32 %19, 7
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 9, i64 %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 16
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 9, i64 %21, i32 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 10
  %27 = tail call i64 @floatx80_to_float64(i64 %23, i16 %25, %struct.float_status* nonnull %26)
  %28 = bitcast i64 %27 to double
  %29 = fmul double %15, %28
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 5
  %32 = load i32, i32* %31, align 16
  %33 = add i32 %32, 1
  %34 = and i32 %33, 7
  %35 = zext i32 %34 to i64
  %36 = bitcast double %29 to i64
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 10
  %38 = tail call { i64, i16 } @float64_to_floatx80(i64 %36, %struct.float_status* nonnull %37)
  %39 = extractvalue { i64, i16 } %38, 0
  %40 = extractvalue { i64, i16 } %38, 1
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 9, i64 %35, i32 0, i32 0
  store i64 %39, i64* %41, align 16
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 9, i64 %35, i32 0, i32 1
  store i16 %40, i16* %42, align 8
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 5
  %45 = load i32, i32* %44, align 16
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 8, i64 %46
  store i8 1, i8* %47, align 1
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 5
  %50 = load i32, i32* %49, align 16
  %51 = add i32 %50, 1
  %52 = and i32 %51, 7
  store i32 %52, i32* %49, align 16
  br label %59

53:                                               ; preds = %0
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 6
  %56 = load i16, i16* %55, align 4
  %57 = and i16 %56, -18177
  %58 = or i16 %57, 1024
  store i16 %58, i16* %55, align 4
  br label %59

59:                                               ; preds = %53, %13
  ret void
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #5

; Function Attrs: uwtable
define void @helper_fptan() local_unnamed_addr #3 {
  %1 = alloca [6 x i8], align 2
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %11 = tail call i64 @floatx80_to_float64(i64 %7, i16 %9, %struct.float_status* nonnull %10)
  %12 = bitcast i64 %11 to double
  %13 = fcmp ogt double %12, 0x43E0000000000000
  %14 = fcmp olt double %12, 0xC3E0000000000000
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %21

16:                                               ; preds = %0
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 6
  %19 = load i16, i16* %18, align 4
  %20 = or i16 %19, 1024
  store i16 %20, i16* %18, align 4
  br label %64

21:                                               ; preds = %0
  %22 = tail call double @tan(double %12) #23
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 5
  %25 = load i32, i32* %24, align 16
  %26 = zext i32 %25 to i64
  %27 = bitcast double %22 to i64
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 10
  %29 = tail call { i64, i16 } @float64_to_floatx80(i64 %27, %struct.float_status* nonnull %28)
  %30 = extractvalue { i64, i16 } %29, 0
  %31 = extractvalue { i64, i16 } %29, 1
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 9, i64 %26, i32 0, i32 0
  store i64 %30, i64* %32, align 16
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 9, i64 %26, i32 0, i32 1
  store i16 %31, i16* %33, align 8
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 5
  %36 = load i32, i32* %35, align 16
  %37 = add i32 %36, 7
  %38 = and i32 %37, 7
  store i32 %38, i32* %35, align 16
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 8, i64 %39
  store i8 0, i8* %40, align 1
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 5
  %43 = load i32, i32* %42, align 16
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 9, i64 %44
  %46 = getelementptr inbounds %union.FPReg, %union.FPReg* %45, i64 0, i32 0, i32 0
  store i64 -9223372036854775808, i64* %46, align 16
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 9, i64 %44, i32 0, i32 1
  store i16 16383, i16* %47, align 8
  %48 = bitcast %union.FPReg* %45 to i8*
  %49 = getelementptr inbounds i8, i8* %48, i64 10
  %50 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  br label %51

51:                                               ; preds = %54, %21
  %52 = phi i64 [ 0, %21 ], [ %58, %54 ]
  %53 = icmp ult i64 %52, 6
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = getelementptr i8, i8* %50, i64 %52
  %56 = load i8, i8* %55
  %57 = getelementptr i8, i8* %49, i64 %52
  store i8 %56, i8* %57
  %58 = add i64 %52, 1
  br label %51

59:                                               ; preds = %51
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 6
  %62 = load i16, i16* %61, align 4
  %63 = and i16 %62, -1025
  store i16 %63, i16* %61, align 4
  br label %64

64:                                               ; preds = %59, %16
  ret void
}

; Function Attrs: nofree nounwind
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: uwtable
define void @helper_fpatan() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %12 = tail call i64 @floatx80_to_float64(i64 %8, i16 %10, %struct.float_status* nonnull %11)
  %13 = bitcast i64 %12 to double
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  %16 = load i32, i32* %15, align 16
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 10
  %23 = tail call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* nonnull %22)
  %24 = bitcast i64 %23 to double
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 5
  %27 = load i32, i32* %26, align 16
  %28 = add i32 %27, 1
  %29 = and i32 %28, 7
  %30 = zext i32 %29 to i64
  %31 = tail call double @atan2(double %13, double %24) #23
  %32 = bitcast double %31 to i64
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 10
  %35 = tail call { i64, i16 } @float64_to_floatx80(i64 %32, %struct.float_status* nonnull %34)
  %36 = extractvalue { i64, i16 } %35, 0
  %37 = extractvalue { i64, i16 } %35, 1
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 9, i64 %30, i32 0, i32 0
  store i64 %36, i64* %38, align 16
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 9, i64 %30, i32 0, i32 1
  store i16 %37, i16* %39, align 8
  %40 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 5
  %42 = load i32, i32* %41, align 16
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 8, i64 %43
  store i8 1, i8* %44, align 1
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 5
  %47 = load i32, i32* %46, align 16
  %48 = add i32 %47, 1
  %49 = and i32 %48, 7
  store i32 %49, i32* %46, align 16
  ret void
}

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #5

; Function Attrs: uwtable
define void @helper_fxtract() local_unnamed_addr #3 {
  %1 = alloca [6 x i8], align 2
  %2 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 5
  %5 = load i32, i32* %4, align 16
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %6
  %8 = getelementptr inbounds %union.FPReg, %union.FPReg* %7, i64 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 16
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %6, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = bitcast %union.FPReg* %7 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 10
  br label %14

14:                                               ; preds = %17, %0
  %15 = phi i64 [ 0, %0 ], [ %21, %17 ]
  %16 = icmp ult i64 %15, 6
  br i1 %16, label %17, label %22

17:                                               ; preds = %14
  %18 = getelementptr i8, i8* %13, i64 %15
  %19 = load i8, i8* %18
  %20 = getelementptr i8, i8* %2, i64 %15
  store i8 %19, i8* %20
  %21 = add i64 %15, 1
  br label %14

22:                                               ; preds = %14
  %23 = and i16 %11, 32767
  %24 = icmp ne i16 %23, 0
  %25 = icmp ne i64 %9, 0
  %26 = or i1 %24, %25
  br i1 %26, label %46, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  %29 = tail call { i64, i16 } @floatx80_div(i64 -9223372036854775808, i16 -16385, i64 0, i16 0, %struct.float_status* nonnull %28)
  %30 = extractvalue { i64, i16 } %29, 0
  %31 = extractvalue { i64, i16 } %29, 1
  store i64 %30, i64* %8, align 16
  store i16 %31, i16* %10, align 8
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 5
  %34 = load i32, i32* %33, align 16
  %35 = add i32 %34, 7
  %36 = and i32 %35, 7
  store i32 %36, i32* %33, align 16
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 8, i64 %37
  store i8 0, i8* %38, align 1
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 5
  %41 = load i32, i32* %40, align 16
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 9, i64 %42
  %44 = getelementptr inbounds %union.FPReg, %union.FPReg* %43, i64 0, i32 0, i32 0
  store i64 0, i64* %44, align 16
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 9, i64 %42, i32 0, i32 1
  br label %69

46:                                               ; preds = %22
  %47 = zext i16 %23 to i32
  %48 = add nsw i32 %47, -16383
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  %50 = tail call { i64, i16 } @int32_to_floatx80(i32 %48, %struct.float_status* nonnull %49)
  %51 = extractvalue { i64, i16 } %50, 0
  %52 = extractvalue { i64, i16 } %50, 1
  store i64 %51, i64* %8, align 16
  store i16 %52, i16* %10, align 8
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 5
  %55 = load i32, i32* %54, align 16
  %56 = add i32 %55, 7
  %57 = and i32 %56, 7
  store i32 %57, i32* %54, align 16
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 8, i64 %58
  store i8 0, i8* %59, align 1
  %60 = and i16 %11, -32768
  %61 = or i16 %60, 16383
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 5
  %64 = load i32, i32* %63, align 16
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 9, i64 %65
  %67 = getelementptr inbounds %union.FPReg, %union.FPReg* %66, i64 0, i32 0, i32 0
  store i64 %9, i64* %67, align 16
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 9, i64 %65, i32 0, i32 1
  br label %69

69:                                               ; preds = %46, %27
  %70 = phi i16* [ %68, %46 ], [ %45, %27 ]
  %71 = phi i16 [ %61, %46 ], [ %11, %27 ]
  %72 = phi %union.FPReg* [ %66, %46 ], [ %43, %27 ]
  store i16 %71, i16* %70, align 8
  %73 = bitcast %union.FPReg* %72 to i8*
  %74 = getelementptr inbounds i8, i8* %73, i64 10
  br label %75

75:                                               ; preds = %78, %69
  %76 = phi i64 [ 0, %69 ], [ %82, %78 ]
  %77 = icmp ult i64 %76, 6
  br i1 %77, label %78, label %83

78:                                               ; preds = %75
  %79 = getelementptr i8, i8* %2, i64 %76
  %80 = load i8, i8* %79
  %81 = getelementptr i8, i8* %74, i64 %76
  store i8 %80, i8* %81
  %82 = add i64 %76, 1
  br label %75

83:                                               ; preds = %75
  ret void
}

; Function Attrs: uwtable
define void @helper_fprem1() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 5
  %14 = load i32, i32* %13, align 16
  %15 = add i32 %14, 1
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 10
  %23 = tail call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* nonnull %22)
  %24 = bitcast i64 %23 to double
  %25 = call double @fabs(double %11)
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  %27 = fcmp uno double %11, 0.000000e+00
  %28 = or i1 %27, %26
  %29 = fcmp ueq double %24, 0.000000e+00
  %30 = or i1 %28, %29
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 5
  %33 = load i32, i32* %32, align 16
  %34 = zext i32 %33 to i64
  br i1 %30, label %35, label %46

35:                                               ; preds = %0
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 10
  %37 = tail call { i64, i16 } @float64_to_floatx80(i64 9221120237041090560, %struct.float_status* nonnull %36)
  %38 = extractvalue { i64, i16 } %37, 0
  %39 = extractvalue { i64, i16 } %37, 1
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 0
  store i64 %38, i64* %40, align 16
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 1
  store i16 %39, i16* %41, align 8
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 6
  %44 = load i16, i16* %43, align 4
  %45 = and i16 %44, -18177
  store i16 %45, i16* %43, align 4
  br label %119

46:                                               ; preds = %0
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 1
  %48 = load i16, i16* %47, align 8
  %49 = add i32 %33, 1
  %50 = and i32 %49, 7
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %51, i32 0, i32 1
  %53 = load i16, i16* %52, align 8
  %54 = and i16 %48, 32767
  %55 = zext i16 %54 to i32
  %56 = and i16 %53, 32767
  %57 = zext i16 %56 to i32
  %58 = sub nsw i32 %55, %57
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %46
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 6
  %62 = load i16, i16* %61, align 4
  %63 = and i16 %62, -18177
  store i16 %63, i16* %61, align 4
  br label %119

64:                                               ; preds = %46
  %65 = icmp slt i32 %58, 53
  br i1 %65, label %66, label %87

66:                                               ; preds = %64
  %67 = fdiv double %11, %24
  %68 = call double @rint(double %67)
  %69 = fmul double %68, %24
  %70 = fcmp olt double %68, 0.000000e+00
  %71 = fneg double %68
  %72 = select i1 %70, double %71, double %68
  %73 = fptosi double %72 to i64
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 6
  %75 = load i16, i16* %74, align 4
  %76 = and i16 %75, -18177
  %77 = trunc i64 %73 to i16
  %78 = shl i16 %77, 6
  %79 = and i16 %78, 256
  %80 = shl i16 %77, 13
  %81 = and i16 %80, 16384
  %82 = shl i16 %77, 9
  %83 = and i16 %82, 512
  %84 = or i16 %81, %79
  %85 = or i16 %84, %83
  %86 = or i16 %85, %76
  store i16 %86, i16* %74, align 4
  br label %107

87:                                               ; preds = %64
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 6
  %89 = load i16, i16* %88, align 4
  %90 = or i16 %89, 1024
  store i16 %90, i16* %88, align 4
  %91 = add nsw i32 %58, -50
  %92 = tail call double @ldexp(double 1.000000e+00, i32 %91) #5
  %93 = fdiv double %11, %24
  %94 = fdiv double %93, %92
  %95 = fcmp olt double %94, 0.000000e+00
  %96 = call double @fabs(double %94)
  %97 = call double @floor(double %96)
  %98 = fneg double %97
  %99 = call double @floor(double %94)
  %100 = select i1 %95, double %98, double %99
  %101 = fmul double %100, %24
  %102 = fmul double %92, %101
  %103 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %103, i64 0, i32 5
  %105 = load i32, i32* %104, align 16
  %106 = zext i32 %105 to i64
  br label %107

107:                                              ; preds = %87, %66
  %108 = phi i64 [ %106, %87 ], [ %34, %66 ]
  %109 = phi %struct.CPUX86State* [ %103, %87 ], [ %31, %66 ]
  %110 = phi double [ %102, %87 ], [ %69, %66 ]
  %111 = fsub double %11, %110
  %112 = bitcast double %111 to i64
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %109, i64 0, i32 10
  %114 = tail call { i64, i16 } @float64_to_floatx80(i64 %112, %struct.float_status* nonnull %113)
  %115 = extractvalue { i64, i16 } %114, 0
  %116 = extractvalue { i64, i16 } %114, 1
  %117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %109, i64 0, i32 9, i64 %108, i32 0, i32 0
  store i64 %115, i64* %117, align 16
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %109, i64 0, i32 9, i64 %108, i32 0, i32 1
  store i16 %116, i16* %118, align 8
  br label %119

119:                                              ; preds = %107, %60, %35
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #14

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #14

declare double @ldexp(double, i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #14

; Function Attrs: uwtable
define void @helper_fprem() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 5
  %14 = load i32, i32* %13, align 16
  %15 = add i32 %14, 1
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 10
  %23 = tail call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* nonnull %22)
  %24 = bitcast i64 %23 to double
  %25 = call double @fabs(double %11)
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  %27 = fcmp uno double %11, 0.000000e+00
  %28 = or i1 %27, %26
  %29 = fcmp ueq double %24, 0.000000e+00
  %30 = or i1 %28, %29
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 5
  %33 = load i32, i32* %32, align 16
  %34 = zext i32 %33 to i64
  br i1 %30, label %35, label %46

35:                                               ; preds = %0
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 10
  %37 = tail call { i64, i16 } @float64_to_floatx80(i64 9221120237041090560, %struct.float_status* nonnull %36)
  %38 = extractvalue { i64, i16 } %37, 0
  %39 = extractvalue { i64, i16 } %37, 1
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 0
  store i64 %38, i64* %40, align 16
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 1
  store i16 %39, i16* %41, align 8
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 6
  %44 = load i16, i16* %43, align 4
  %45 = and i16 %44, -18177
  store i16 %45, i16* %43, align 4
  br label %124

46:                                               ; preds = %0
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 1
  %48 = load i16, i16* %47, align 8
  %49 = add i32 %33, 1
  %50 = and i32 %49, 7
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %51, i32 0, i32 1
  %53 = load i16, i16* %52, align 8
  %54 = and i16 %48, 32767
  %55 = zext i16 %54 to i32
  %56 = and i16 %53, 32767
  %57 = zext i16 %56 to i32
  %58 = sub nsw i32 %55, %57
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %46
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 6
  %62 = load i16, i16* %61, align 4
  %63 = and i16 %62, -18177
  store i16 %63, i16* %61, align 4
  br label %124

64:                                               ; preds = %46
  %65 = icmp slt i32 %58, 53
  br i1 %65, label %66, label %90

66:                                               ; preds = %64
  %67 = fdiv double %11, %24
  %68 = fcmp olt double %67, 0.000000e+00
  %69 = call double @ceil(double %67)
  %70 = call double @floor(double %67)
  %71 = select i1 %68, double %69, double %70
  %72 = fmul double %71, %24
  %73 = fcmp olt double %71, 0.000000e+00
  %74 = fneg double %71
  %75 = select i1 %73, double %74, double %71
  %76 = fptosi double %75 to i64
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 6
  %78 = load i16, i16* %77, align 4
  %79 = and i16 %78, -18177
  %80 = trunc i64 %76 to i16
  %81 = shl i16 %80, 6
  %82 = and i16 %81, 256
  %83 = shl i16 %80, 13
  %84 = and i16 %83, 16384
  %85 = shl i16 %80, 9
  %86 = and i16 %85, 512
  %87 = or i16 %84, %82
  %88 = or i16 %87, %86
  %89 = or i16 %88, %79
  store i16 %89, i16* %77, align 4
  br label %112

90:                                               ; preds = %64
  %91 = and i32 %58, 31
  %92 = or i32 %91, 32
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 6
  %94 = load i16, i16* %93, align 4
  %95 = or i16 %94, 1024
  store i16 %95, i16* %93, align 4
  %96 = sub nsw i32 %58, %92
  %97 = tail call double @ldexp(double 1.000000e+00, i32 %96) #5
  %98 = fdiv double %11, %24
  %99 = fdiv double %98, %97
  %100 = fcmp olt double %99, 0.000000e+00
  %101 = call double @fabs(double %99)
  %102 = call double @floor(double %101)
  %103 = fneg double %102
  %104 = call double @floor(double %99)
  %105 = select i1 %100, double %103, double %104
  %106 = fmul double %105, %24
  %107 = fmul double %97, %106
  %108 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %108, i64 0, i32 5
  %110 = load i32, i32* %109, align 16
  %111 = zext i32 %110 to i64
  br label %112

112:                                              ; preds = %90, %66
  %113 = phi i64 [ %111, %90 ], [ %34, %66 ]
  %114 = phi %struct.CPUX86State* [ %108, %90 ], [ %31, %66 ]
  %115 = phi double [ %107, %90 ], [ %72, %66 ]
  %116 = fsub double %11, %115
  %117 = bitcast double %116 to i64
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 10
  %119 = tail call { i64, i16 } @float64_to_floatx80(i64 %117, %struct.float_status* nonnull %118)
  %120 = extractvalue { i64, i16 } %119, 0
  %121 = extractvalue { i64, i16 } %119, 1
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 9, i64 %113, i32 0, i32 0
  store i64 %120, i64* %122, align 16
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 9, i64 %113, i32 0, i32 1
  store i16 %121, i16* %123, align 8
  br label %124

124:                                              ; preds = %112, %60, %35
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #14

; Function Attrs: uwtable
define void @helper_fyl2xp1() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fadd double %11, 1.000000e+00
  %13 = fcmp ogt double %12, 0.000000e+00
  br i1 %13, label %14, label %54

14:                                               ; preds = %0
  %15 = tail call double @log(double %12) #23
  %16 = fdiv double %15, 0x3FE62E42FEFA39EF
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 5
  %19 = load i32, i32* %18, align 16
  %20 = add i32 %19, 1
  %21 = and i32 %20, 7
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 9, i64 %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 16
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 9, i64 %22, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 10
  %28 = tail call i64 @floatx80_to_float64(i64 %24, i16 %26, %struct.float_status* nonnull %27)
  %29 = bitcast i64 %28 to double
  %30 = fmul double %16, %29
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 5
  %33 = load i32, i32* %32, align 16
  %34 = add i32 %33, 1
  %35 = and i32 %34, 7
  %36 = zext i32 %35 to i64
  %37 = bitcast double %30 to i64
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 10
  %39 = tail call { i64, i16 } @float64_to_floatx80(i64 %37, %struct.float_status* nonnull %38)
  %40 = extractvalue { i64, i16 } %39, 0
  %41 = extractvalue { i64, i16 } %39, 1
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %36, i32 0, i32 0
  store i64 %40, i64* %42, align 16
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %36, i32 0, i32 1
  store i16 %41, i16* %43, align 8
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 5
  %46 = load i32, i32* %45, align 16
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 8, i64 %47
  store i8 1, i8* %48, align 1
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %49, i64 0, i32 5
  %51 = load i32, i32* %50, align 16
  %52 = add i32 %51, 1
  %53 = and i32 %52, 7
  store i32 %53, i32* %50, align 16
  br label %60

54:                                               ; preds = %0
  %55 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 6
  %57 = load i16, i16* %56, align 4
  %58 = and i16 %57, -18177
  %59 = or i16 %58, 1024
  store i16 %59, i16* %56, align 4
  br label %60

60:                                               ; preds = %54, %14
  ret void
}

; Function Attrs: uwtable
define void @helper_fsqrt() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %13, label %8

8:                                                ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %10 = load i16, i16* %9, align 4
  %11 = and i16 %10, -18177
  %12 = or i16 %11, 1024
  store i16 %12, i16* %9, align 4
  br label %13

13:                                               ; preds = %0, %8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %16 = load i64, i64* %15, align 16
  %17 = tail call { i64, i16 } @floatx80_sqrt(i64 %16, i16 %6, %struct.float_status* nonnull %14)
  %18 = extractvalue { i64, i16 } %17, 0
  %19 = extractvalue { i64, i16 } %17, 1
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %18, i64* %20, align 16
  store i16 %19, i16* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsincos() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %14, label %16, label %20

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %57

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  %22 = load i32, i32* %21, align 16
  %23 = zext i32 %22 to i64
  %24 = tail call double @sin(double %11) #23
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 %25, %struct.float_status* nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = add i32 %35, 7
  %37 = and i32 %36, 7
  store i32 %37, i32* %34, align 16
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 8, i64 %38
  store i8 0, i8* %39, align 1
  %40 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 5
  %42 = load i32, i32* %41, align 16
  %43 = zext i32 %42 to i64
  %44 = tail call double @cos(double %11) #23
  %45 = bitcast double %44 to i64
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 10
  %48 = tail call { i64, i16 } @float64_to_floatx80(i64 %45, %struct.float_status* nonnull %47)
  %49 = extractvalue { i64, i16 } %48, 0
  %50 = extractvalue { i64, i16 } %48, 1
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 9, i64 %43, i32 0, i32 0
  store i64 %49, i64* %51, align 16
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 9, i64 %43, i32 0, i32 1
  store i16 %50, i16* %52, align 8
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 6
  %55 = load i16, i16* %54, align 4
  %56 = and i16 %55, -1025
  store i16 %56, i16* %54, align 4
  br label %57

57:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: uwtable
define void @helper_frndint() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call { i64, i16 } @floatx80_round_to_int(i64 %7, i16 %9, %struct.float_status* nonnull %5)
  %11 = extractvalue { i64, i16 } %10, 0
  %12 = extractvalue { i64, i16 } %10, 1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %11, i64* %13, align 16
  store i16 %12, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fscale() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = and i16 %10, 32767
  %12 = icmp ne i16 %11, 32767
  %13 = and i64 %8, 9223372036854775807
  %14 = icmp eq i64 %13, 0
  %15 = or i1 %14, %12
  br i1 %15, label %30, label %16

16:                                               ; preds = %0
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %17, i32 0
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0
  %20 = bitcast %struct.floatx80* %18 to i8*
  %21 = bitcast %struct.floatx80* %19 to i8*
  br label %22

22:                                               ; preds = %25, %16
  %23 = phi i64 [ 0, %16 ], [ %29, %25 ]
  %24 = icmp ult i64 %23, 16
  br i1 %24, label %25, label %46

25:                                               ; preds = %22
  %26 = getelementptr i8, i8* %21, i64 %23
  %27 = load i8, i8* %26
  %28 = getelementptr i8, i8* %20, i64 %23
  store i8 %27, i8* %28
  %29 = add i64 %23, 1
  br label %22

30:                                               ; preds = %0
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %32 = tail call i32 @floatx80_to_int32_round_to_zero(i64 %8, i16 %10, %struct.float_status* nonnull %31)
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 10
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 0
  %39 = load i64, i64* %38, align 16
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 1
  %41 = load i16, i16* %40, align 8
  %42 = tail call { i64, i16 } @floatx80_scalbn(i64 %39, i16 %41, i32 %32, %struct.float_status* nonnull %37)
  %43 = extractvalue { i64, i16 } %42, 0
  %44 = extractvalue { i64, i16 } %42, 1
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 0
  store i64 %43, i64* %45, align 16
  store i16 %44, i16* %40, align 8
  br label %46

46:                                               ; preds = %22, %30
  ret void
}

; Function Attrs: uwtable
define void @helper_fsin() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %14, label %16, label %20

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %37

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  %22 = load i32, i32* %21, align 16
  %23 = zext i32 %22 to i64
  %24 = tail call double @sin(double %11) #23
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 %25, %struct.float_status* nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %35 = load i16, i16* %34, align 4
  %36 = and i16 %35, -1025
  store i16 %36, i16* %34, align 4
  br label %37

37:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: uwtable
define void @helper_fcos() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %14, label %16, label %20

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %37

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  %22 = load i32, i32* %21, align 16
  %23 = zext i32 %22 to i64
  %24 = tail call double @cos(double %11) #23
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 %25, %struct.float_status* nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %35 = load i16, i16* %34, align 4
  %36 = and i16 %35, -1025
  store i16 %36, i16* %34, align 4
  br label %37

37:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_fxam_ST0() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %10 = load i16, i16* %9, align 4
  %11 = and i16 %10, -18177
  %12 = icmp slt i16 %8, 0
  %13 = or i16 %11, 512
  %14 = select i1 %12, i16 %13, i16 %11
  store i16 %14, i16* %9, align 4
  %15 = and i16 %8, 32767
  switch i16 %15, label %22 [
    i16 32767, label %16
    i16 0, label %19
  ]

16:                                               ; preds = %0
  %17 = icmp eq i64 %6, -9223372036854775808
  %18 = select i1 %17, i16 1280, i16 256
  br label %22

19:                                               ; preds = %0
  %20 = icmp eq i64 %6, 0
  %21 = select i1 %20, i16 16384, i16 17408
  br label %22

22:                                               ; preds = %0, %19, %16
  %23 = phi i16 [ %18, %16 ], [ %21, %19 ], [ 1024, %0 ]
  %24 = or i16 %14, %23
  store i16 %24, i16* %9, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fstenv(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 6
  %5 = load i16, i16* %4, align 4
  %6 = and i16 %5, -14337
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 5
  %8 = load i32, i32* %7, align 16
  %9 = shl i32 %8, 11
  %10 = and i32 %9, 14336
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 7
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %27

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 7, i32 0, i32 0
  %16 = load i64, i64* %15, align 16
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 7, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = and i16 %18, 32767
  %20 = icmp eq i16 %19, 0
  %21 = icmp eq i64 %16, 0
  %22 = and i1 %21, %20
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  switch i16 %18, label %24 [
    i16 -1, label %26
    i16 -32768, label %26
    i16 32767, label %26
    i16 0, label %26
  ]

24:                                               ; preds = %23
  %25 = icmp sgt i64 %16, -1
  br i1 %25, label %26, label %27

26:                                               ; preds = %23, %23, %23, %23, %24
  br label %27

27:                                               ; preds = %14, %2, %24, %26
  %28 = phi i32 [ 8, %26 ], [ 0, %24 ], [ 12, %2 ], [ 4, %14 ]
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 6
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %61, label %59

32:                                               ; preds = %221
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* nonnull %3, i32 %0, i32 %228)
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = add i32 %0, 4
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %33, i32 %34, i32 %224)
  %35 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %36 = add i32 %0, 8
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %35, i32 %36, i32 %222)
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = add i32 %0, 12
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %37, i32 %38, i32 0)
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i32 %0, 16
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %39, i32 %40, i32 0)
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = add i32 %0, 20
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %41, i32 %42, i32 0)
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = add i32 %0, 24
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %43, i32 %44, i32 0)
  br label %58

45:                                               ; preds = %221
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* nonnull %3, i32 %0, i32 %228)
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = add i32 %0, 2
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %46, i32 %47, i32 %224)
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = add i32 %0, 4
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %48, i32 %49, i32 %222)
  %50 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %51 = add i32 %0, 6
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %50, i32 %51, i32 0)
  %52 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %53 = add i32 %0, 8
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %52, i32 %53, i32 0)
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = add i32 %0, 10
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %54, i32 %55, i32 0)
  %56 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %57 = add i32 %0, 12
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %56, i32 %57, i32 0)
  br label %58

58:                                               ; preds = %45, %32
  ret void

59:                                               ; preds = %27
  %60 = or i32 %28, 3
  br label %77

61:                                               ; preds = %27
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 6, i32 0, i32 0
  %63 = load i64, i64* %62, align 16
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 6, i32 0, i32 1
  %65 = load i16, i16* %64, align 8
  %66 = and i16 %65, 32767
  %67 = icmp eq i16 %66, 0
  %68 = icmp eq i64 %63, 0
  %69 = and i1 %68, %67
  br i1 %69, label %75, label %70

70:                                               ; preds = %61
  switch i16 %65, label %71 [
    i16 -1, label %73
    i16 -32768, label %73
    i16 32767, label %73
    i16 0, label %73
  ]

71:                                               ; preds = %70
  %72 = icmp sgt i64 %63, -1
  br i1 %72, label %73, label %77

73:                                               ; preds = %71, %70, %70, %70, %70
  %74 = or i32 %28, 2
  br label %77

75:                                               ; preds = %61
  %76 = or i32 %28, 1
  br label %77

77:                                               ; preds = %75, %73, %71, %59
  %78 = phi i32 [ %60, %59 ], [ %76, %75 ], [ %74, %73 ], [ %28, %71 ]
  %79 = shl nsw i32 %78, 2
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 5
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = or i32 %79, 3
  br label %101

85:                                               ; preds = %77
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 5, i32 0, i32 0
  %87 = load i64, i64* %86, align 16
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 5, i32 0, i32 1
  %89 = load i16, i16* %88, align 8
  %90 = and i16 %89, 32767
  %91 = icmp eq i16 %90, 0
  %92 = icmp eq i64 %87, 0
  %93 = and i1 %92, %91
  br i1 %93, label %99, label %94

94:                                               ; preds = %85
  switch i16 %89, label %95 [
    i16 -1, label %97
    i16 -32768, label %97
    i16 32767, label %97
    i16 0, label %97
  ]

95:                                               ; preds = %94
  %96 = icmp sgt i64 %87, -1
  br i1 %96, label %97, label %101

97:                                               ; preds = %95, %94, %94, %94, %94
  %98 = or i32 %79, 2
  br label %101

99:                                               ; preds = %85
  %100 = or i32 %79, 1
  br label %101

101:                                              ; preds = %99, %97, %95, %83
  %102 = phi i32 [ %84, %83 ], [ %100, %99 ], [ %98, %97 ], [ %79, %95 ]
  %103 = shl i32 %102, 2
  %104 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 4
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %101
  %108 = or i32 %103, 3
  br label %125

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 4, i32 0, i32 0
  %111 = load i64, i64* %110, align 16
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 4, i32 0, i32 1
  %113 = load i16, i16* %112, align 8
  %114 = and i16 %113, 32767
  %115 = icmp eq i16 %114, 0
  %116 = icmp eq i64 %111, 0
  %117 = and i1 %116, %115
  br i1 %117, label %123, label %118

118:                                              ; preds = %109
  switch i16 %113, label %119 [
    i16 -1, label %121
    i16 -32768, label %121
    i16 32767, label %121
    i16 0, label %121
  ]

119:                                              ; preds = %118
  %120 = icmp sgt i64 %111, -1
  br i1 %120, label %121, label %125

121:                                              ; preds = %119, %118, %118, %118, %118
  %122 = or i32 %103, 2
  br label %125

123:                                              ; preds = %109
  %124 = or i32 %103, 1
  br label %125

125:                                              ; preds = %123, %121, %119, %107
  %126 = phi i32 [ %108, %107 ], [ %124, %123 ], [ %122, %121 ], [ %103, %119 ]
  %127 = shl i32 %126, 2
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %133, label %131

131:                                              ; preds = %125
  %132 = or i32 %127, 3
  br label %149

133:                                              ; preds = %125
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 3, i32 0, i32 0
  %135 = load i64, i64* %134, align 16
  %136 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 3, i32 0, i32 1
  %137 = load i16, i16* %136, align 8
  %138 = and i16 %137, 32767
  %139 = icmp eq i16 %138, 0
  %140 = icmp eq i64 %135, 0
  %141 = and i1 %140, %139
  br i1 %141, label %147, label %142

142:                                              ; preds = %133
  switch i16 %137, label %143 [
    i16 -1, label %145
    i16 -32768, label %145
    i16 32767, label %145
    i16 0, label %145
  ]

143:                                              ; preds = %142
  %144 = icmp sgt i64 %135, -1
  br i1 %144, label %145, label %149

145:                                              ; preds = %143, %142, %142, %142, %142
  %146 = or i32 %127, 2
  br label %149

147:                                              ; preds = %133
  %148 = or i32 %127, 1
  br label %149

149:                                              ; preds = %147, %145, %143, %131
  %150 = phi i32 [ %132, %131 ], [ %148, %147 ], [ %146, %145 ], [ %127, %143 ]
  %151 = shl i32 %150, 2
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 2
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %149
  %156 = or i32 %151, 3
  br label %173

157:                                              ; preds = %149
  %158 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 2, i32 0, i32 0
  %159 = load i64, i64* %158, align 16
  %160 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 2, i32 0, i32 1
  %161 = load i16, i16* %160, align 8
  %162 = and i16 %161, 32767
  %163 = icmp eq i16 %162, 0
  %164 = icmp eq i64 %159, 0
  %165 = and i1 %164, %163
  br i1 %165, label %171, label %166

166:                                              ; preds = %157
  switch i16 %161, label %167 [
    i16 -1, label %169
    i16 -32768, label %169
    i16 32767, label %169
    i16 0, label %169
  ]

167:                                              ; preds = %166
  %168 = icmp sgt i64 %159, -1
  br i1 %168, label %169, label %173

169:                                              ; preds = %167, %166, %166, %166, %166
  %170 = or i32 %151, 2
  br label %173

171:                                              ; preds = %157
  %172 = or i32 %151, 1
  br label %173

173:                                              ; preds = %171, %169, %167, %155
  %174 = phi i32 [ %156, %155 ], [ %172, %171 ], [ %170, %169 ], [ %151, %167 ]
  %175 = shl i32 %174, 2
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 1
  %177 = load i8, i8* %176, align 1
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %181, label %179

179:                                              ; preds = %173
  %180 = or i32 %175, 3
  br label %197

181:                                              ; preds = %173
  %182 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 1, i32 0, i32 0
  %183 = load i64, i64* %182, align 16
  %184 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 1, i32 0, i32 1
  %185 = load i16, i16* %184, align 8
  %186 = and i16 %185, 32767
  %187 = icmp eq i16 %186, 0
  %188 = icmp eq i64 %183, 0
  %189 = and i1 %188, %187
  br i1 %189, label %195, label %190

190:                                              ; preds = %181
  switch i16 %185, label %191 [
    i16 -1, label %193
    i16 -32768, label %193
    i16 32767, label %193
    i16 0, label %193
  ]

191:                                              ; preds = %190
  %192 = icmp sgt i64 %183, -1
  br i1 %192, label %193, label %197

193:                                              ; preds = %191, %190, %190, %190, %190
  %194 = or i32 %175, 2
  br label %197

195:                                              ; preds = %181
  %196 = or i32 %175, 1
  br label %197

197:                                              ; preds = %195, %193, %191, %179
  %198 = phi i32 [ %180, %179 ], [ %196, %195 ], [ %194, %193 ], [ %175, %191 ]
  %199 = shl i32 %198, 2
  %200 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 0
  %201 = load i8, i8* %200, align 1
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %205, label %203

203:                                              ; preds = %197
  %204 = or i32 %199, 3
  br label %221

205:                                              ; preds = %197
  %206 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 0, i32 0, i32 0
  %207 = load i64, i64* %206, align 16
  %208 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 0, i32 0, i32 1
  %209 = load i16, i16* %208, align 8
  %210 = and i16 %209, 32767
  %211 = icmp eq i16 %210, 0
  %212 = icmp eq i64 %207, 0
  %213 = and i1 %212, %211
  br i1 %213, label %219, label %214

214:                                              ; preds = %205
  switch i16 %209, label %215 [
    i16 -1, label %217
    i16 -32768, label %217
    i16 32767, label %217
    i16 0, label %217
  ]

215:                                              ; preds = %214
  %216 = icmp sgt i64 %207, -1
  br i1 %216, label %217, label %221

217:                                              ; preds = %215, %214, %214, %214, %214
  %218 = or i32 %199, 2
  br label %221

219:                                              ; preds = %205
  %220 = or i32 %199, 1
  br label %221

221:                                              ; preds = %219, %217, %215, %203
  %222 = phi i32 [ %204, %203 ], [ %220, %219 ], [ %218, %217 ], [ %199, %215 ]
  %223 = zext i16 %6 to i32
  %224 = or i32 %10, %223
  %225 = icmp eq i32 %1, 0
  %226 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 7
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  br i1 %225, label %45, label %32
}

; Function Attrs: uwtable
define void @helper_fldenv(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = icmp eq i32 %1, 0
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %4, i32 %0)
  %6 = trunc i32 %5 to i16
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 7
  store i16 %6, i16* %8, align 2
  %9 = select i1 %3, i32 2, i32 4
  %10 = select i1 %3, i32 4, i32 8
  %11 = add i32 %9, %0
  %12 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %7, i32 %11)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = add i32 %10, %0
  %15 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %13, i32 %14)
  %16 = lshr i32 %12, 11
  %17 = and i32 %16, 7
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 5
  store i32 %17, i32* %19, align 16
  %20 = trunc i32 %12 to i16
  %21 = and i16 %20, -14337
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 6
  store i16 %21, i16* %22, align 4
  %23 = and i32 %15, 3
  %24 = icmp eq i32 %23, 3
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 0
  store i8 %25, i8* %26, align 1
  %27 = and i32 %15, 12
  %28 = icmp eq i32 %27, 12
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 1
  store i8 %29, i8* %30, align 1
  %31 = and i32 %15, 48
  %32 = icmp eq i32 %31, 48
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 2
  store i8 %33, i8* %34, align 1
  %35 = and i32 %15, 192
  %36 = icmp eq i32 %35, 192
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 3
  store i8 %37, i8* %38, align 1
  %39 = and i32 %15, 768
  %40 = icmp eq i32 %39, 768
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 4
  store i8 %41, i8* %42, align 1
  %43 = and i32 %15, 3072
  %44 = icmp eq i32 %43, 3072
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 5
  store i8 %45, i8* %46, align 1
  %47 = and i32 %15, 12288
  %48 = icmp eq i32 %47, 12288
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 6
  store i8 %49, i8* %50, align 1
  %51 = and i32 %15, 49152
  %52 = icmp eq i32 %51, 49152
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 7
  store i8 %53, i8* %54, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fsave(i32 %0, i32 %1) local_unnamed_addr #3 {
  tail call void @helper_fstenv(i32 %0, i32 %1)
  %3 = shl i32 14, %1
  %4 = add i32 %3, %0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 5
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, 7
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 9, i64 %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 9, i64 %9, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %5, i32 %4, i64 %11)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = add i32 %4, 8
  %16 = zext i16 %13 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %14, i32 %15, i32 %16)
  %17 = add i32 %4, 10
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 5
  %20 = load i32, i32* %19, align 16
  %21 = add i32 %20, 1
  %22 = and i32 %21, 7
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 9, i64 %23, i32 0, i32 0
  %25 = load i64, i64* %24, align 16
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 9, i64 %23, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %18, i32 %17, i64 %25)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = add i32 %4, 18
  %30 = zext i16 %27 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %28, i32 %29, i32 %30)
  %31 = add i32 %4, 20
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 5
  %34 = load i32, i32* %33, align 16
  %35 = add i32 %34, 2
  %36 = and i32 %35, 7
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 9, i64 %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 16
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 9, i64 %37, i32 0, i32 1
  %41 = load i16, i16* %40, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %32, i32 %31, i64 %39)
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %43 = add i32 %4, 28
  %44 = zext i16 %41 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %42, i32 %43, i32 %44)
  %45 = add i32 %4, 30
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 5
  %48 = load i32, i32* %47, align 16
  %49 = add i32 %48, 3
  %50 = and i32 %49, 7
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 9, i64 %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 16
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 9, i64 %51, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %46, i32 %45, i64 %53)
  %56 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %57 = add i32 %4, 38
  %58 = zext i16 %55 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %56, i32 %57, i32 %58)
  %59 = add i32 %4, 40
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 5
  %62 = load i32, i32* %61, align 16
  %63 = add i32 %62, 4
  %64 = and i32 %63, 7
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 9, i64 %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 16
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 9, i64 %65, i32 0, i32 1
  %69 = load i16, i16* %68, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %60, i32 %59, i64 %67)
  %70 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %71 = add i32 %4, 48
  %72 = zext i16 %69 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %70, i32 %71, i32 %72)
  %73 = add i32 %4, 50
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 5
  %76 = load i32, i32* %75, align 16
  %77 = add i32 %76, 5
  %78 = and i32 %77, 7
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 9, i64 %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 16
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 9, i64 %79, i32 0, i32 1
  %83 = load i16, i16* %82, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %74, i32 %73, i64 %81)
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = add i32 %4, 58
  %86 = zext i16 %83 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %84, i32 %85, i32 %86)
  %87 = add i32 %4, 60
  %88 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %88, i64 0, i32 5
  %90 = load i32, i32* %89, align 16
  %91 = add i32 %90, 6
  %92 = and i32 %91, 7
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %88, i64 0, i32 9, i64 %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 16
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %88, i64 0, i32 9, i64 %93, i32 0, i32 1
  %97 = load i16, i16* %96, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %88, i32 %87, i64 %95)
  %98 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %99 = add i32 %4, 68
  %100 = zext i16 %97 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %98, i32 %99, i32 %100)
  %101 = add i32 %4, 70
  %102 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 5
  %104 = load i32, i32* %103, align 16
  %105 = add i32 %104, 7
  %106 = and i32 %105, 7
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 9, i64 %107, i32 0, i32 0
  %109 = load i64, i64* %108, align 16
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 9, i64 %107, i32 0, i32 1
  %111 = load i16, i16* %110, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %102, i32 %101, i64 %109)
  %112 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %113 = add i32 %4, 78
  %114 = zext i16 %111 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %112, i32 %113, i32 %114)
  %115 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 6
  store i16 0, i16* %116, align 4
  %117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 5
  store i32 0, i32* %117, align 16
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 7
  store i16 895, i16* %118, align 2
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 8, i64 0
  %120 = bitcast i8* %119 to i64*
  store i64 72340172838076673, i64* %120, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_frstor(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = alloca [6 x i8], align 2
  %4 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i64 0, i64 0
  tail call void @helper_fldenv(i32 %0, i32 %1)
  %5 = shl i32 14, %1
  %6 = add i32 %5, %0
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %7, i32 %6)
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = add i32 %6, 8
  %11 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %9, i32 %10)
  %12 = trunc i32 %11 to i16
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 5
  %15 = load i32, i32* %14, align 16
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 9, i64 %17, i32 0, i32 0
  store i64 %8, i64* %18, align 16
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 9, i64 %17, i32 0, i32 1
  store i16 %12, i16* %19, align 8
  %20 = add i32 %6, 10
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %21, i32 %20)
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = add i32 %6, 18
  %25 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %23, i32 %24)
  %26 = trunc i32 %25 to i16
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 5
  %29 = load i32, i32* %28, align 16
  %30 = add i32 %29, 1
  %31 = and i32 %30, 7
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 9, i64 %32, i32 0, i32 0
  store i64 %22, i64* %33, align 16
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 9, i64 %32, i32 0, i32 1
  store i16 %26, i16* %34, align 8
  %35 = add i32 %6, 20
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %36, i32 %35)
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = add i32 %6, 28
  %40 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %38, i32 %39)
  %41 = trunc i32 %40 to i16
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 5
  %44 = load i32, i32* %43, align 16
  %45 = add i32 %44, 2
  %46 = and i32 %45, 7
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 9, i64 %47, i32 0, i32 0
  store i64 %37, i64* %48, align 16
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 9, i64 %47, i32 0, i32 1
  store i16 %41, i16* %49, align 8
  %50 = add i32 %6, 30
  %51 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %52 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %51, i32 %50)
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = add i32 %6, 38
  %55 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %53, i32 %54)
  %56 = trunc i32 %55 to i16
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 5
  %59 = load i32, i32* %58, align 16
  %60 = add i32 %59, 3
  %61 = and i32 %60, 7
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 9, i64 %62, i32 0, i32 0
  store i64 %52, i64* %63, align 16
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 9, i64 %62, i32 0, i32 1
  store i16 %56, i16* %64, align 8
  %65 = add i32 %6, 40
  %66 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %67 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %66, i32 %65)
  %68 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %69 = add i32 %6, 48
  %70 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %68, i32 %69)
  %71 = trunc i32 %70 to i16
  %72 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 5
  %74 = load i32, i32* %73, align 16
  %75 = add i32 %74, 4
  %76 = and i32 %75, 7
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 9, i64 %77
  %79 = getelementptr inbounds %union.FPReg, %union.FPReg* %78, i64 0, i32 0, i32 0
  store i64 %67, i64* %79, align 16
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 9, i64 %77, i32 0, i32 1
  store i16 %71, i16* %80, align 8
  %81 = bitcast %union.FPReg* %78 to i8*
  %82 = getelementptr inbounds i8, i8* %81, i64 10
  br label %83

83:                                               ; preds = %86, %2
  %84 = phi i64 [ 0, %2 ], [ %90, %86 ]
  %85 = icmp ult i64 %84, 6
  br i1 %85, label %86, label %91

86:                                               ; preds = %83
  %87 = getelementptr i8, i8* %4, i64 %84
  %88 = load i8, i8* %87
  %89 = getelementptr i8, i8* %82, i64 %84
  store i8 %88, i8* %89
  %90 = add i64 %84, 1
  br label %83

91:                                               ; preds = %83
  %92 = add i32 %6, 50
  %93 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %94 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %93, i32 %92)
  %95 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %96 = add i32 %6, 58
  %97 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %95, i32 %96)
  %98 = trunc i32 %97 to i16
  %99 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 5
  %101 = load i32, i32* %100, align 16
  %102 = add i32 %101, 5
  %103 = and i32 %102, 7
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 9, i64 %104
  %106 = getelementptr inbounds %union.FPReg, %union.FPReg* %105, i64 0, i32 0, i32 0
  store i64 %94, i64* %106, align 16
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 9, i64 %104, i32 0, i32 1
  store i16 %98, i16* %107, align 8
  %108 = bitcast %union.FPReg* %105 to i8*
  %109 = getelementptr inbounds i8, i8* %108, i64 10
  br label %110

110:                                              ; preds = %113, %91
  %111 = phi i64 [ 0, %91 ], [ %117, %113 ]
  %112 = icmp ult i64 %111, 6
  br i1 %112, label %113, label %118

113:                                              ; preds = %110
  %114 = getelementptr i8, i8* %4, i64 %111
  %115 = load i8, i8* %114
  %116 = getelementptr i8, i8* %109, i64 %111
  store i8 %115, i8* %116
  %117 = add i64 %111, 1
  br label %110

118:                                              ; preds = %110
  %119 = add i32 %6, 60
  %120 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %121 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %120, i32 %119)
  %122 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %123 = add i32 %6, 68
  %124 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %122, i32 %123)
  %125 = trunc i32 %124 to i16
  %126 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %126, i64 0, i32 5
  %128 = load i32, i32* %127, align 16
  %129 = add i32 %128, 6
  %130 = and i32 %129, 7
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %126, i64 0, i32 9, i64 %131
  %133 = getelementptr inbounds %union.FPReg, %union.FPReg* %132, i64 0, i32 0, i32 0
  store i64 %121, i64* %133, align 16
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %126, i64 0, i32 9, i64 %131, i32 0, i32 1
  store i16 %125, i16* %134, align 8
  %135 = bitcast %union.FPReg* %132 to i8*
  %136 = getelementptr inbounds i8, i8* %135, i64 10
  br label %137

137:                                              ; preds = %140, %118
  %138 = phi i64 [ 0, %118 ], [ %144, %140 ]
  %139 = icmp ult i64 %138, 6
  br i1 %139, label %140, label %145

140:                                              ; preds = %137
  %141 = getelementptr i8, i8* %4, i64 %138
  %142 = load i8, i8* %141
  %143 = getelementptr i8, i8* %136, i64 %138
  store i8 %142, i8* %143
  %144 = add i64 %138, 1
  br label %137

145:                                              ; preds = %137
  %146 = add i32 %6, 70
  %147 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %148 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %147, i32 %146)
  %149 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %150 = add i32 %6, 78
  %151 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %149, i32 %150)
  %152 = trunc i32 %151 to i16
  %153 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %154 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %153, i64 0, i32 5
  %155 = load i32, i32* %154, align 16
  %156 = add i32 %155, 7
  %157 = and i32 %156, 7
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %153, i64 0, i32 9, i64 %158
  %160 = getelementptr inbounds %union.FPReg, %union.FPReg* %159, i64 0, i32 0, i32 0
  store i64 %148, i64* %160, align 16
  %161 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %153, i64 0, i32 9, i64 %158, i32 0, i32 1
  store i16 %152, i16* %161, align 8
  %162 = bitcast %union.FPReg* %159 to i8*
  %163 = getelementptr inbounds i8, i8* %162, i64 10
  br label %164

164:                                              ; preds = %167, %145
  %165 = phi i64 [ 0, %145 ], [ %171, %167 ]
  %166 = icmp ult i64 %165, 6
  br i1 %166, label %167, label %172

167:                                              ; preds = %164
  %168 = getelementptr i8, i8* %4, i64 %165
  %169 = load i8, i8* %168
  %170 = getelementptr i8, i8* %163, i64 %165
  store i8 %169, i8* %170
  %171 = add i64 %165, 1
  br label %164

172:                                              ; preds = %164
  ret void
}

; Function Attrs: uwtable
define void @helper_fxsave(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = and i32 %0, 15
  %4 = icmp eq i32 %3, 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %4, label %7, label %6

6:                                                ; preds = %2
  tail call void @raise_exception_ra(%struct.CPUX86State* %5, i32 13, i64 0) #21
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 6
  %9 = load i16, i16* %8, align 4
  %10 = and i16 %9, -14337
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 5
  %12 = load i32, i32* %11, align 16
  %13 = shl i32 %12, 11
  %14 = and i32 %13, 14336
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 0
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 1
  %22 = or i32 %21, %17
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 2
  %27 = or i32 %26, %22
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 3
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 4
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 5
  %42 = or i32 %41, %37
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 6
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 6
  %47 = or i32 %46, %42
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 7
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 7
  %52 = or i32 %51, %47
  %53 = zext i16 %10 to i32
  %54 = or i32 %14, %53
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 7
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* nonnull %5, i32 %0, i32 %57)
  %58 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %59 = add i32 %0, 2
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %58, i32 %59, i32 %54)
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = add i32 %0, 4
  %62 = xor i32 %52, 255
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %60, i32 %61, i32 %62)
  %63 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %64 = add i32 %0, 8
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %63, i32 %64, i32 0)
  %65 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %66 = add i32 %0, 12
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %65, i32 %66, i32 0)
  %67 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %68 = add i32 %0, 16
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %67, i32 %68, i32 0)
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = add i32 %0, 20
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %69, i32 %70, i32 0)
  %71 = add i32 %0, 32
  %72 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 5
  %74 = load i32, i32* %73, align 16
  %75 = and i32 %74, 7
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 9, i64 %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 16
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 9, i64 %76, i32 0, i32 1
  %80 = load i16, i16* %79, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %72, i32 %71, i64 %78)
  %81 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %82 = add i32 %0, 40
  %83 = zext i16 %80 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %81, i32 %82, i32 %83)
  %84 = add i32 %0, 48
  %85 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 5
  %87 = load i32, i32* %86, align 16
  %88 = add i32 %87, 1
  %89 = and i32 %88, 7
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 9, i64 %90, i32 0, i32 0
  %92 = load i64, i64* %91, align 16
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 9, i64 %90, i32 0, i32 1
  %94 = load i16, i16* %93, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %85, i32 %84, i64 %92)
  %95 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %96 = add i32 %0, 56
  %97 = zext i16 %94 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %95, i32 %96, i32 %97)
  %98 = add i32 %0, 64
  %99 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 5
  %101 = load i32, i32* %100, align 16
  %102 = add i32 %101, 2
  %103 = and i32 %102, 7
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 9, i64 %104, i32 0, i32 0
  %106 = load i64, i64* %105, align 16
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 9, i64 %104, i32 0, i32 1
  %108 = load i16, i16* %107, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %99, i32 %98, i64 %106)
  %109 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %110 = add i32 %0, 72
  %111 = zext i16 %108 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %109, i32 %110, i32 %111)
  %112 = add i32 %0, 80
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 5
  %115 = load i32, i32* %114, align 16
  %116 = add i32 %115, 3
  %117 = and i32 %116, 7
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 9, i64 %118, i32 0, i32 0
  %120 = load i64, i64* %119, align 16
  %121 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 9, i64 %118, i32 0, i32 1
  %122 = load i16, i16* %121, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %113, i32 %112, i64 %120)
  %123 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %124 = add i32 %0, 88
  %125 = zext i16 %122 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %123, i32 %124, i32 %125)
  %126 = add i32 %0, 96
  %127 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 5
  %129 = load i32, i32* %128, align 16
  %130 = add i32 %129, 4
  %131 = and i32 %130, 7
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 9, i64 %132, i32 0, i32 0
  %134 = load i64, i64* %133, align 16
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 9, i64 %132, i32 0, i32 1
  %136 = load i16, i16* %135, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %127, i32 %126, i64 %134)
  %137 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %138 = add i32 %0, 104
  %139 = zext i16 %136 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %137, i32 %138, i32 %139)
  %140 = add i32 %0, 112
  %141 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %142 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %141, i64 0, i32 5
  %143 = load i32, i32* %142, align 16
  %144 = add i32 %143, 5
  %145 = and i32 %144, 7
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %141, i64 0, i32 9, i64 %146, i32 0, i32 0
  %148 = load i64, i64* %147, align 16
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %141, i64 0, i32 9, i64 %146, i32 0, i32 1
  %150 = load i16, i16* %149, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %141, i32 %140, i64 %148)
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = add i32 %0, 120
  %153 = zext i16 %150 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %151, i32 %152, i32 %153)
  %154 = add i32 %0, 128
  %155 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %156 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %155, i64 0, i32 5
  %157 = load i32, i32* %156, align 16
  %158 = add i32 %157, 6
  %159 = and i32 %158, 7
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %155, i64 0, i32 9, i64 %160, i32 0, i32 0
  %162 = load i64, i64* %161, align 16
  %163 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %155, i64 0, i32 9, i64 %160, i32 0, i32 1
  %164 = load i16, i16* %163, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %155, i32 %154, i64 %162)
  %165 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %166 = add i32 %0, 136
  %167 = zext i16 %164 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %165, i32 %166, i32 %167)
  %168 = add i32 %0, 144
  %169 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %170 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %169, i64 0, i32 5
  %171 = load i32, i32* %170, align 16
  %172 = add i32 %171, 7
  %173 = and i32 %172, 7
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %169, i64 0, i32 9, i64 %174, i32 0, i32 0
  %176 = load i64, i64* %175, align 16
  %177 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %169, i64 0, i32 9, i64 %174, i32 0, i32 1
  %178 = load i16, i16* %177, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %169, i32 %168, i64 %176)
  %179 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %180 = add i32 %0, 152
  %181 = zext i16 %178 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* %179, i32 %180, i32 %181)
  %182 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %183 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %182, i64 0, i32 29, i64 4
  %184 = load i32, i32* %183, align 16
  %185 = and i32 %184, 512
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %223, label %187

187:                                              ; preds = %7
  %188 = add i32 %0, 24
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %182, i64 0, i32 14
  %190 = load i32, i32* %189, align 8
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* nonnull %182, i32 %188, i32 %190)
  %191 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %192 = add i32 %0, 28
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* %191, i32 %192, i32 65535)
  %193 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %194 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %193, i64 0, i32 21
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %193, i64 0, i32 37
  %197 = load i64, i64* %196, align 16
  %198 = and i64 %197, 16384
  %199 = icmp ne i64 %198, 0
  %200 = and i32 %195, 16387
  %201 = icmp eq i32 %200, 16384
  %202 = and i1 %201, %199
  br i1 %202, label %223, label %203

203:                                              ; preds = %187
  %204 = add i32 %0, 160
  %205 = trunc i32 %195 to i16
  %206 = icmp slt i16 %205, 0
  %207 = select i1 %206, i64 16, i64 8
  br label %208

208:                                              ; preds = %220, %203
  %209 = phi %struct.CPUX86State* [ %193, %203 ], [ %222, %220 ]
  %210 = phi i64 [ 0, %203 ], [ %218, %220 ]
  %211 = phi i32 [ %204, %203 ], [ %221, %220 ]
  %212 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %209, i64 0, i32 15, i64 %210, i32 0, i64 0
  %213 = load i64, i64* %212, align 16
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %209, i32 %211, i64 %213)
  %214 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %215 = add i32 %211, 8
  %216 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %214, i64 0, i32 15, i64 %210, i32 0, i64 1
  %217 = load i64, i64* %216, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* %214, i32 %215, i64 %217)
  %218 = add nuw nsw i64 %210, 1
  %219 = icmp ult i64 %218, %207
  br i1 %219, label %220, label %223

220:                                              ; preds = %208
  %221 = add i32 %211, 16
  %222 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %208

223:                                              ; preds = %208, %187, %7
  ret void
}

; Function Attrs: uwtable
define void @helper_fxrstor(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = alloca [6 x i8], align 2
  %4 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i64 0, i64 0
  %5 = and i32 %0, 15
  %6 = icmp eq i32 %5, 0
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %6, label %9, label %8

8:                                                ; preds = %2
  tail call void @raise_exception_ra(%struct.CPUX86State* %7, i32 13, i64 0) #21
  unreachable

9:                                                ; preds = %2
  %10 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %7, i32 %0)
  %11 = trunc i32 %10 to i16
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 7
  store i16 %11, i16* %13, align 2
  %14 = add i32 %0, 2
  %15 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %12, i32 %14)
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = add i32 %0, 4
  %18 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %16, i32 %17)
  %19 = lshr i32 %15, 11
  %20 = and i32 %19, 7
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 5
  store i32 %20, i32* %22, align 16
  %23 = trunc i32 %15 to i16
  %24 = and i16 %23, -14337
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 6
  store i16 %24, i16* %25, align 4
  %26 = xor i32 %18, 255
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 0
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %26, 1
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 1
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %26, 2
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 2
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %26, 3
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 3
  store i8 %40, i8* %41, align 1
  %42 = lshr i32 %26, 4
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 4
  store i8 %44, i8* %45, align 1
  %46 = lshr i32 %26, 5
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 5
  store i8 %48, i8* %49, align 1
  %50 = lshr i32 %26, 6
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 6
  store i8 %52, i8* %53, align 1
  %54 = lshr i32 %26, 7
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 8, i64 7
  store i8 %56, i8* %57, align 1
  %58 = add i32 %0, 32
  %59 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %21, i32 %58)
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = add i32 %0, 40
  %62 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %60, i32 %61)
  %63 = trunc i32 %62 to i16
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 5
  %66 = load i32, i32* %65, align 16
  %67 = and i32 %66, 7
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 9, i64 %68
  %70 = getelementptr inbounds %union.FPReg, %union.FPReg* %69, i64 0, i32 0, i32 0
  store i64 %59, i64* %70, align 16
  %71 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 9, i64 %68, i32 0, i32 1
  store i16 %63, i16* %71, align 8
  %72 = bitcast %union.FPReg* %69 to i8*
  %73 = getelementptr inbounds i8, i8* %72, i64 10
  br label %74

74:                                               ; preds = %77, %9
  %75 = phi i64 [ 0, %9 ], [ %81, %77 ]
  %76 = icmp ult i64 %75, 6
  br i1 %76, label %77, label %82

77:                                               ; preds = %74
  %78 = getelementptr i8, i8* %4, i64 %75
  %79 = load i8, i8* %78
  %80 = getelementptr i8, i8* %73, i64 %75
  store i8 %79, i8* %80
  %81 = add i64 %75, 1
  br label %74

82:                                               ; preds = %74
  %83 = add i32 %0, 48
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %84, i32 %83)
  %86 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %87 = add i32 %0, 56
  %88 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %86, i32 %87)
  %89 = trunc i32 %88 to i16
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 5
  %92 = load i32, i32* %91, align 16
  %93 = add i32 %92, 1
  %94 = and i32 %93, 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 9, i64 %95
  %97 = getelementptr inbounds %union.FPReg, %union.FPReg* %96, i64 0, i32 0, i32 0
  store i64 %85, i64* %97, align 16
  %98 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 9, i64 %95, i32 0, i32 1
  store i16 %89, i16* %98, align 8
  %99 = bitcast %union.FPReg* %96 to i8*
  %100 = getelementptr inbounds i8, i8* %99, i64 10
  br label %101

101:                                              ; preds = %104, %82
  %102 = phi i64 [ 0, %82 ], [ %108, %104 ]
  %103 = icmp ult i64 %102, 6
  br i1 %103, label %104, label %109

104:                                              ; preds = %101
  %105 = getelementptr i8, i8* %4, i64 %102
  %106 = load i8, i8* %105
  %107 = getelementptr i8, i8* %100, i64 %102
  store i8 %106, i8* %107
  %108 = add i64 %102, 1
  br label %101

109:                                              ; preds = %101
  %110 = add i32 %0, 64
  %111 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %112 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %111, i32 %110)
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = add i32 %0, 72
  %115 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %113, i32 %114)
  %116 = trunc i32 %115 to i16
  %117 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %117, i64 0, i32 5
  %119 = load i32, i32* %118, align 16
  %120 = add i32 %119, 2
  %121 = and i32 %120, 7
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %117, i64 0, i32 9, i64 %122
  %124 = getelementptr inbounds %union.FPReg, %union.FPReg* %123, i64 0, i32 0, i32 0
  store i64 %112, i64* %124, align 16
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %117, i64 0, i32 9, i64 %122, i32 0, i32 1
  store i16 %116, i16* %125, align 8
  %126 = bitcast %union.FPReg* %123 to i8*
  %127 = getelementptr inbounds i8, i8* %126, i64 10
  br label %128

128:                                              ; preds = %131, %109
  %129 = phi i64 [ 0, %109 ], [ %135, %131 ]
  %130 = icmp ult i64 %129, 6
  br i1 %130, label %131, label %136

131:                                              ; preds = %128
  %132 = getelementptr i8, i8* %4, i64 %129
  %133 = load i8, i8* %132
  %134 = getelementptr i8, i8* %127, i64 %129
  store i8 %133, i8* %134
  %135 = add i64 %129, 1
  br label %128

136:                                              ; preds = %128
  %137 = add i32 %0, 80
  %138 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %139 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %138, i32 %137)
  %140 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %141 = add i32 %0, 88
  %142 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %140, i32 %141)
  %143 = trunc i32 %142 to i16
  %144 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %145 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %144, i64 0, i32 5
  %146 = load i32, i32* %145, align 16
  %147 = add i32 %146, 3
  %148 = and i32 %147, 7
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %144, i64 0, i32 9, i64 %149
  %151 = getelementptr inbounds %union.FPReg, %union.FPReg* %150, i64 0, i32 0, i32 0
  store i64 %139, i64* %151, align 16
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %144, i64 0, i32 9, i64 %149, i32 0, i32 1
  store i16 %143, i16* %152, align 8
  %153 = bitcast %union.FPReg* %150 to i8*
  %154 = getelementptr inbounds i8, i8* %153, i64 10
  br label %155

155:                                              ; preds = %158, %136
  %156 = phi i64 [ 0, %136 ], [ %162, %158 ]
  %157 = icmp ult i64 %156, 6
  br i1 %157, label %158, label %163

158:                                              ; preds = %155
  %159 = getelementptr i8, i8* %4, i64 %156
  %160 = load i8, i8* %159
  %161 = getelementptr i8, i8* %154, i64 %156
  store i8 %160, i8* %161
  %162 = add i64 %156, 1
  br label %155

163:                                              ; preds = %155
  %164 = add i32 %0, 96
  %165 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %166 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %165, i32 %164)
  %167 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %168 = add i32 %0, 104
  %169 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %167, i32 %168)
  %170 = trunc i32 %169 to i16
  %171 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %171, i64 0, i32 5
  %173 = load i32, i32* %172, align 16
  %174 = add i32 %173, 4
  %175 = and i32 %174, 7
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %171, i64 0, i32 9, i64 %176
  %178 = getelementptr inbounds %union.FPReg, %union.FPReg* %177, i64 0, i32 0, i32 0
  store i64 %166, i64* %178, align 16
  %179 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %171, i64 0, i32 9, i64 %176, i32 0, i32 1
  store i16 %170, i16* %179, align 8
  %180 = bitcast %union.FPReg* %177 to i8*
  %181 = getelementptr inbounds i8, i8* %180, i64 10
  br label %182

182:                                              ; preds = %185, %163
  %183 = phi i64 [ 0, %163 ], [ %189, %185 ]
  %184 = icmp ult i64 %183, 6
  br i1 %184, label %185, label %190

185:                                              ; preds = %182
  %186 = getelementptr i8, i8* %4, i64 %183
  %187 = load i8, i8* %186
  %188 = getelementptr i8, i8* %181, i64 %183
  store i8 %187, i8* %188
  %189 = add i64 %183, 1
  br label %182

190:                                              ; preds = %182
  %191 = add i32 %0, 112
  %192 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %193 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %192, i32 %191)
  %194 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %195 = add i32 %0, 120
  %196 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %194, i32 %195)
  %197 = trunc i32 %196 to i16
  %198 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 5
  %200 = load i32, i32* %199, align 16
  %201 = add i32 %200, 5
  %202 = and i32 %201, 7
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 9, i64 %203
  %205 = getelementptr inbounds %union.FPReg, %union.FPReg* %204, i64 0, i32 0, i32 0
  store i64 %193, i64* %205, align 16
  %206 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 9, i64 %203, i32 0, i32 1
  store i16 %197, i16* %206, align 8
  %207 = bitcast %union.FPReg* %204 to i8*
  %208 = getelementptr inbounds i8, i8* %207, i64 10
  br label %209

209:                                              ; preds = %212, %190
  %210 = phi i64 [ 0, %190 ], [ %216, %212 ]
  %211 = icmp ult i64 %210, 6
  br i1 %211, label %212, label %217

212:                                              ; preds = %209
  %213 = getelementptr i8, i8* %4, i64 %210
  %214 = load i8, i8* %213
  %215 = getelementptr i8, i8* %208, i64 %210
  store i8 %214, i8* %215
  %216 = add i64 %210, 1
  br label %209

217:                                              ; preds = %209
  %218 = add i32 %0, 128
  %219 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %220 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %219, i32 %218)
  %221 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %222 = add i32 %0, 136
  %223 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %221, i32 %222)
  %224 = trunc i32 %223 to i16
  %225 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %226 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %225, i64 0, i32 5
  %227 = load i32, i32* %226, align 16
  %228 = add i32 %227, 6
  %229 = and i32 %228, 7
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %225, i64 0, i32 9, i64 %230
  %232 = getelementptr inbounds %union.FPReg, %union.FPReg* %231, i64 0, i32 0, i32 0
  store i64 %220, i64* %232, align 16
  %233 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %225, i64 0, i32 9, i64 %230, i32 0, i32 1
  store i16 %224, i16* %233, align 8
  %234 = bitcast %union.FPReg* %231 to i8*
  %235 = getelementptr inbounds i8, i8* %234, i64 10
  br label %236

236:                                              ; preds = %239, %217
  %237 = phi i64 [ 0, %217 ], [ %243, %239 ]
  %238 = icmp ult i64 %237, 6
  br i1 %238, label %239, label %244

239:                                              ; preds = %236
  %240 = getelementptr i8, i8* %4, i64 %237
  %241 = load i8, i8* %240
  %242 = getelementptr i8, i8* %235, i64 %237
  store i8 %241, i8* %242
  %243 = add i64 %237, 1
  br label %236

244:                                              ; preds = %236
  %245 = add i32 %0, 144
  %246 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %247 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %246, i32 %245)
  %248 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %249 = add i32 %0, 152
  %250 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* %248, i32 %249)
  %251 = trunc i32 %250 to i16
  %252 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %253 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 5
  %254 = load i32, i32* %253, align 16
  %255 = add i32 %254, 7
  %256 = and i32 %255, 7
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 9, i64 %257
  %259 = getelementptr inbounds %union.FPReg, %union.FPReg* %258, i64 0, i32 0, i32 0
  store i64 %247, i64* %259, align 16
  %260 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 9, i64 %257, i32 0, i32 1
  store i16 %251, i16* %260, align 8
  %261 = bitcast %union.FPReg* %258 to i8*
  %262 = getelementptr inbounds i8, i8* %261, i64 10
  br label %263

263:                                              ; preds = %266, %244
  %264 = phi i64 [ 0, %244 ], [ %270, %266 ]
  %265 = icmp ult i64 %264, 6
  br i1 %265, label %266, label %271

266:                                              ; preds = %263
  %267 = getelementptr i8, i8* %4, i64 %264
  %268 = load i8, i8* %267
  %269 = getelementptr i8, i8* %262, i64 %264
  store i8 %268, i8* %269
  %270 = add i64 %264, 1
  br label %263

271:                                              ; preds = %263
  %272 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %273 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %272, i64 0, i32 29, i64 4
  %274 = load i32, i32* %273, align 16
  %275 = and i32 %274, 512
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %313, label %277

277:                                              ; preds = %271
  %278 = add i32 %0, 24
  %279 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* %272, i32 %278)
  %280 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %281 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %280, i64 0, i32 14
  store i32 %279, i32* %281, align 8
  %282 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %280, i64 0, i32 21
  %283 = load i32, i32* %282, align 4
  %284 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %280, i64 0, i32 37
  %285 = load i64, i64* %284, align 16
  %286 = and i64 %285, 16384
  %287 = icmp ne i64 %286, 0
  %288 = and i32 %283, 16387
  %289 = icmp eq i32 %288, 16384
  %290 = and i1 %289, %287
  br i1 %290, label %313, label %291

291:                                              ; preds = %277
  %292 = add i32 %0, 160
  %293 = trunc i32 %283 to i16
  %294 = icmp slt i16 %293, 0
  %295 = select i1 %294, i64 16, i64 8
  br label %296

296:                                              ; preds = %310, %291
  %297 = phi %struct.CPUX86State* [ %280, %291 ], [ %312, %310 ]
  %298 = phi i64 [ 0, %291 ], [ %308, %310 ]
  %299 = phi i32 [ %292, %291 ], [ %311, %310 ]
  %300 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %297, i32 %299)
  %301 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %302 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %301, i64 0, i32 15, i64 %298, i32 0, i64 0
  store i64 %300, i64* %302, align 16
  %303 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %304 = add i32 %299, 8
  %305 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* %303, i32 %304)
  %306 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %307 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %306, i64 0, i32 15, i64 %298, i32 0, i64 1
  store i64 %305, i64* %307, align 8
  %308 = add nuw nsw i64 %298, 1
  %309 = icmp ult i64 %308, %295
  br i1 %309, label %310, label %313

310:                                              ; preds = %296
  %311 = add i32 %299, 16
  %312 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %296

313:                                              ; preds = %296, %277, %271
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @cpu_get_fp80(i64* nocapture %0, i16* nocapture %1, i64 %2, i16 %3) local_unnamed_addr #1 {
  store i64 %2, i64* %0, align 8
  store i16 %3, i16* %1, align 2
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define { i64, i16 } @cpu_set_fp80(i64 %0, i16 zeroext %1) local_unnamed_addr #15 {
  %3 = insertvalue { i64, i16 } undef, i64 %0, 0
  %4 = insertvalue { i64, i16 } %3, i16 %1, 1
  ret { i64, i16 } %4
}

; Function Attrs: noreturn uwtable
define void @helper_hlt(i32 %0) local_unnamed_addr #4 {
  tail call void @helper_svm_check_intercept_param(i32 120, i64 0)
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, %0
  store i32 %5, i32* %3, align 8
  tail call fastcc void @do_hlt()
  unreachable
}

; Function Attrs: noreturn uwtable
define internal fastcc void @do_hlt() unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 75
  store i32 1, i32* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 95
  store i32 65537, i32* %6, align 16
  tail call void @cpu_loop_exit(%struct.CPUX86State* %1) #21
  unreachable
}

; Function Attrs: uwtable
define void @helper_monitor(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 13, i64 0) #21
  unreachable

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 2097152
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !3, !misexpect !5

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 4398046511104
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  tail call void @helper_vmexit(i32 138, i64 0)
  unreachable

18:                                               ; preds = %7, %12
  ret void
}

; Function Attrs: uwtable
define void @helper_mwait(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* %2, i32 13, i64 0) #21
  unreachable

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 2097152
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !3, !misexpect !5

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 8796093022208
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  tail call void @helper_vmexit(i32 139, i64 0)
  unreachable

18:                                               ; preds = %7, %12
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  %20 = load i32, i32* %19, align 8
  %21 = add i32 %20, %0
  store i32 %21, i32* %19, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 97
  %23 = load i32, i32* %22, align 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 96
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** %26, align 8
  %28 = icmp eq %struct.CPUX86State* %27, null
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  tail call fastcc void @do_hlt()
  unreachable

30:                                               ; preds = %25, %18
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_debug() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 95
  store i32 65538, i32* %2, align 16
  tail call void @cpu_loop_exit(%struct.CPUX86State* %1) #21
  unreachable
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_reset_rf() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, -65537
  store i32 %4, i32* %2, align 16
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_raise_interrupt(i32 %0, i32 %1) local_unnamed_addr #4 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_interrupt(%struct.CPUX86State* %3, i32 %0, i32 1, i32 0, i32 %1) #21
  unreachable
}

; Function Attrs: noreturn uwtable
define void @helper_raise_exception(i32 %0) local_unnamed_addr #4 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception(%struct.CPUX86State* %2, i32 %0) #21
  unreachable
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_cli() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, -513
  store i32 %4, i32* %2, align 16
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_sti() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i32, i32* %2, align 16
  %4 = or i32 %3, 512
  store i32 %4, i32* %2, align 16
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_set_inhibit_irq() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = or i32 %3, 8
  store i32 %4, i32* %2, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_reset_inhibit_irq() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_boundw(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = tail call fastcc i32 @cpu_ldsw_data(%struct.CPUX86State* %3, i32 %0)
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = add i32 %0, 2
  %7 = tail call fastcc i32 @cpu_ldsw_data(%struct.CPUX86State* %5, i32 %6)
  %8 = shl i32 %1, 16
  %9 = ashr exact i32 %8, 16
  %10 = icmp slt i32 %9, %4
  %11 = icmp sgt i32 %9, %7
  %12 = or i1 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* %14, i32 5, i64 0) #21
  unreachable

15:                                               ; preds = %2
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldsw_data(%struct.CPUX86State* %0, i32 %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i32 %1, i64 0, i32 4, i32 0)
  br label %7

7:                                                ; preds = %2, %6
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %1, i32 0, i32 -1, i32 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i32 %14, 12
  %16 = tail call i32 @tcg_llvm_fork_and_concretize(i32 %15, i32 0, i32 1048575, i32 0)
  %17 = and i32 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 78, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = zext i32 %17 to i64
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, -33
  %29 = and i32 %14, -4095
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %35, label %31, !prof !3, !misexpect !4

31:                                               ; preds = %13
  %32 = zext i1 %21 to i32
  %33 = tail call zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* nonnull %0, i32 %14, i32 %32, i8* null)
  %34 = sext i16 %33 to i32
  br label %48

35:                                               ; preds = %13
  %36 = zext i32 %14 to i64
  %37 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %25, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, %36
  %40 = inttoptr i64 %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %35
  %47 = sext i16 %41 to i64
  tail call void @tcg_llvm_after_memory_access(i32 %14, i64 %47, i32 4, i32 0, i64 0)
  br label %48

48:                                               ; preds = %35, %46, %31
  %49 = phi i32 [ %34, %31 ], [ %42, %46 ], [ %42, %35 ]
  ret i32 %49
}

; Function Attrs: uwtable
define void @helper_boundl(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* %3, i32 %0)
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = add i32 %0, 4
  %7 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* %5, i32 %6)
  %8 = icmp sgt i32 %4, %1
  %9 = icmp slt i32 %7, %1
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* %12, i32 5, i64 0) #21
  unreachable

13:                                               ; preds = %2
  ret void
}

; Function Attrs: uwtable
define void @helper_vmrun(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 21
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 3
  %7 = and i32 %5, 2097152
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9, !prof !3, !misexpect !5

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 42
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 4294967296
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  tail call void @helper_vmexit(i32 128, i64 0)
  unreachable

15:                                               ; preds = %2, %9
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 0, i64 0
  %17 = load i32, i32* %16, align 16
  %18 = load i32, i32* @loglevel, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %15
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i32 %17)
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %25

25:                                               ; preds = %15, %21
  %26 = phi %struct.CPUX86State* [ %3, %15 ], [ %24, %21 ]
  %27 = zext i32 %17 to i64
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 40
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 39
  %30 = load i64, i64* %29, align 16
  %31 = add i64 %30, 1128
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 27, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  tail call void @stq_phys(i64 %31, i64 %34)
  %35 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 39
  %37 = load i64, i64* %36, align 16
  %38 = add i64 %37, 1124
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 27, i32 2
  %40 = load i32, i32* %39, align 8
  tail call void @stl_phys(i64 %38, i32 %40)
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 39
  %43 = load i64, i64* %42, align 16
  %44 = add i64 %43, 1160
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 28, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i64
  tail call void @stq_phys(i64 %44, i64 %47)
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 39
  %50 = load i64, i64* %49, align 16
  %51 = add i64 %50, 1156
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 28, i32 2
  %53 = load i32, i32* %52, align 8
  tail call void @stl_phys(i64 %51, i32 %53)
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 39
  %56 = load i64, i64* %55, align 16
  %57 = add i64 %56, 1368
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 29, i64 0
  %59 = load i32, i32* %58, align 16
  %60 = zext i32 %59 to i64
  tail call void @stq_phys(i64 %57, i64 %60)
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 39
  %63 = load i64, i64* %62, align 16
  %64 = add i64 %63, 1600
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 29, i64 2
  %66 = load i32, i32* %65, align 8
  %67 = zext i32 %66 to i64
  tail call void @stq_phys(i64 %64, i64 %67)
  %68 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %68, i64 0, i32 39
  %70 = load i64, i64* %69, align 16
  %71 = add i64 %70, 1360
  %72 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %68, i64 0, i32 29, i64 3
  %73 = load i32, i32* %72, align 4
  %74 = zext i32 %73 to i64
  tail call void @stq_phys(i64 %71, i64 %74)
  %75 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 39
  %77 = load i64, i64* %76, align 16
  %78 = add i64 %77, 1352
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 29, i64 4
  %80 = load i32, i32* %79, align 16
  %81 = zext i32 %80 to i64
  tail call void @stq_phys(i64 %78, i64 %81)
  %82 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %82, i64 0, i32 39
  %84 = load i64, i64* %83, align 16
  %85 = add i64 %84, 1384
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %82, i64 0, i32 61, i64 6
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i64
  tail call void @stq_phys(i64 %85, i64 %88)
  %89 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 39
  %91 = load i64, i64* %90, align 16
  %92 = add i64 %91, 1376
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 61, i64 7
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  tail call void @stq_phys(i64 %92, i64 %95)
  %96 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 39
  %98 = load i64, i64* %97, align 16
  %99 = add i64 %98, 1232
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 37
  %101 = load i64, i64* %100, align 16
  tail call void @stq_phys(i64 %99, i64 %101)
  %102 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 39
  %104 = load i64, i64* %103, align 16
  %105 = add i64 %104, 1392
  %106 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 20
  %107 = load i32, i32* %106, align 16
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 1
  %109 = load i32, i32* %108, align 16
  %110 = tail call i32 @helper_cc_compute_all(i32 %109) #23
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 19
  %112 = load i32, i32* %111, align 4
  %113 = and i32 %112, 1024
  %114 = or i32 %107, %110
  %115 = or i32 %114, %113
  %116 = or i32 %115, 2
  %117 = zext i32 %116 to i64
  tail call void @stq_phys(i64 %105, i64 %117)
  %118 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %118, i64 0, i32 39
  %120 = load i64, i64* %119, align 16
  %121 = add i64 %120, 1024
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %118, i64 0, i32 24, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  tail call void @stw_phys(i64 %121, i32 %123)
  %124 = add i64 %120, 1032
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %118, i64 0, i32 24, i64 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  tail call void @stq_phys(i64 %124, i64 %127)
  %128 = add i64 %120, 1028
  %129 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %118, i64 0, i32 24, i64 0, i32 2
  %130 = load i32, i32* %129, align 4
  tail call void @stl_phys(i64 %128, i32 %130)
  %131 = add i64 %120, 1026
  %132 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %118, i64 0, i32 24, i64 0, i32 3
  %133 = load i32, i32* %132, align 4
  %134 = lshr i32 %133, 8
  %135 = and i32 %134, 255
  %136 = lshr i32 %133, 12
  %137 = and i32 %136, 3840
  %138 = or i32 %135, %137
  tail call void @stw_phys(i64 %131, i32 %138)
  %139 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 39
  %141 = load i64, i64* %140, align 16
  %142 = add i64 %141, 1040
  %143 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 24, i64 1, i32 0
  %144 = load i32, i32* %143, align 4
  tail call void @stw_phys(i64 %142, i32 %144)
  %145 = add i64 %141, 1048
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 24, i64 1, i32 1
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  tail call void @stq_phys(i64 %145, i64 %148)
  %149 = add i64 %141, 1044
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 24, i64 1, i32 2
  %151 = load i32, i32* %150, align 4
  tail call void @stl_phys(i64 %149, i32 %151)
  %152 = add i64 %141, 1042
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 24, i64 1, i32 3
  %154 = load i32, i32* %153, align 4
  %155 = lshr i32 %154, 8
  %156 = and i32 %155, 255
  %157 = lshr i32 %154, 12
  %158 = and i32 %157, 3840
  %159 = or i32 %156, %158
  tail call void @stw_phys(i64 %152, i32 %159)
  %160 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %161 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 39
  %162 = load i64, i64* %161, align 16
  %163 = add i64 %162, 1056
  %164 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 24, i64 2, i32 0
  %165 = load i32, i32* %164, align 4
  tail call void @stw_phys(i64 %163, i32 %165)
  %166 = add i64 %162, 1064
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 24, i64 2, i32 1
  %168 = load i32, i32* %167, align 4
  %169 = zext i32 %168 to i64
  tail call void @stq_phys(i64 %166, i64 %169)
  %170 = add i64 %162, 1060
  %171 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 24, i64 2, i32 2
  %172 = load i32, i32* %171, align 4
  tail call void @stl_phys(i64 %170, i32 %172)
  %173 = add i64 %162, 1058
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 24, i64 2, i32 3
  %175 = load i32, i32* %174, align 4
  %176 = lshr i32 %175, 8
  %177 = and i32 %176, 255
  %178 = lshr i32 %175, 12
  %179 = and i32 %178, 3840
  %180 = or i32 %177, %179
  tail call void @stw_phys(i64 %173, i32 %180)
  %181 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %182 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 39
  %183 = load i64, i64* %182, align 16
  %184 = add i64 %183, 1072
  %185 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 24, i64 3, i32 0
  %186 = load i32, i32* %185, align 4
  tail call void @stw_phys(i64 %184, i32 %186)
  %187 = add i64 %183, 1080
  %188 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 24, i64 3, i32 1
  %189 = load i32, i32* %188, align 4
  %190 = zext i32 %189 to i64
  tail call void @stq_phys(i64 %187, i64 %190)
  %191 = add i64 %183, 1076
  %192 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 24, i64 3, i32 2
  %193 = load i32, i32* %192, align 4
  tail call void @stl_phys(i64 %191, i32 %193)
  %194 = add i64 %183, 1074
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 24, i64 3, i32 3
  %196 = load i32, i32* %195, align 4
  %197 = lshr i32 %196, 8
  %198 = and i32 %197, 255
  %199 = lshr i32 %196, 12
  %200 = and i32 %199, 3840
  %201 = or i32 %198, %200
  tail call void @stw_phys(i64 %194, i32 %201)
  %202 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 39
  %204 = load i64, i64* %203, align 16
  %205 = add i64 %204, 1400
  %206 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 18
  %207 = load i32, i32* %206, align 8
  %208 = add i32 %207, %1
  %209 = zext i32 %208 to i64
  tail call void @stq_phys(i64 %205, i64 %209)
  %210 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %211 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %210, i64 0, i32 39
  %212 = load i64, i64* %211, align 16
  %213 = add i64 %212, 1496
  %214 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %210, i64 0, i32 0, i64 4
  %215 = load i32, i32* %214, align 16
  %216 = zext i32 %215 to i64
  tail call void @stq_phys(i64 %213, i64 %216)
  %217 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %218 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %217, i64 0, i32 39
  %219 = load i64, i64* %218, align 16
  %220 = add i64 %219, 1528
  %221 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %217, i64 0, i32 0, i64 0
  %222 = load i32, i32* %221, align 16
  %223 = zext i32 %222 to i64
  tail call void @stq_phys(i64 %220, i64 %223)
  %224 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %225 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 40
  %226 = load i64, i64* %225, align 8
  %227 = add i64 %226, 12
  %228 = tail call i64 @ldq_phys(i64 %227)
  %229 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %230 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %229, i64 0, i32 42
  store i64 %228, i64* %230, align 8
  %231 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %229, i64 0, i32 40
  %232 = load i64, i64* %231, align 8
  %233 = tail call i32 @lduw_phys(i64 %232)
  %234 = trunc i32 %233 to i16
  %235 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 43
  store i16 %234, i16* %236, align 16
  %237 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 40
  %238 = load i64, i64* %237, align 8
  %239 = add i64 %238, 2
  %240 = tail call i32 @lduw_phys(i64 %239)
  %241 = trunc i32 %240 to i16
  %242 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %243 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %242, i64 0, i32 44
  store i16 %241, i16* %243, align 2
  %244 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %242, i64 0, i32 40
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %245, 4
  %247 = tail call i32 @lduw_phys(i64 %246)
  %248 = trunc i32 %247 to i16
  %249 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %250 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %249, i64 0, i32 45
  store i16 %248, i16* %250, align 4
  %251 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %249, i64 0, i32 40
  %252 = load i64, i64* %251, align 8
  %253 = add i64 %252, 6
  %254 = tail call i32 @lduw_phys(i64 %253)
  %255 = trunc i32 %254 to i16
  %256 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 46
  store i16 %255, i16* %257, align 2
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %256, i64 0, i32 40
  %259 = load i64, i64* %258, align 8
  %260 = add i64 %259, 8
  %261 = tail call i32 @ldl_phys(i64 %260)
  %262 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %263 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %262, i64 0, i32 47
  store i32 %261, i32* %263, align 8
  %264 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %262, i64 0, i32 21
  %265 = load i32, i32* %264, align 4
  %266 = or i32 %265, 2097152
  store i32 %266, i32* %264, align 4
  %267 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %262, i64 0, i32 40
  %268 = load i64, i64* %267, align 8
  %269 = add i64 %268, 80
  %270 = tail call i64 @ldq_phys(i64 %269)
  %271 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %272 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %271, i64 0, i32 41
  store i64 %270, i64* %272, align 16
  %273 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %271, i64 0, i32 40
  %274 = load i64, i64* %273, align 8
  %275 = add i64 %274, 1128
  %276 = tail call i64 @ldq_phys(i64 %275)
  %277 = trunc i64 %276 to i32
  %278 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %279 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %278, i64 0, i32 27, i32 1
  store i32 %277, i32* %279, align 4
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %278, i64 0, i32 40
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %281, 1124
  %283 = tail call i32 @ldl_phys(i64 %282)
  %284 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %285 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %284, i64 0, i32 27, i32 2
  store i32 %283, i32* %285, align 8
  %286 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %284, i64 0, i32 40
  %287 = load i64, i64* %286, align 8
  %288 = add i64 %287, 1160
  %289 = tail call i64 @ldq_phys(i64 %288)
  %290 = trunc i64 %289 to i32
  %291 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %292 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %291, i64 0, i32 28, i32 1
  store i32 %290, i32* %292, align 4
  %293 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %291, i64 0, i32 40
  %294 = load i64, i64* %293, align 8
  %295 = add i64 %294, 1156
  %296 = tail call i32 @ldl_phys(i64 %295)
  %297 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %298 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 28, i32 2
  store i32 %296, i32* %298, align 8
  %299 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 40
  %300 = load i64, i64* %299, align 8
  %301 = add i64 %300, 128
  tail call void @stq_phys(i64 %301, i64 0)
  %302 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %303 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %302, i64 0, i32 40
  %304 = load i64, i64* %303, align 8
  %305 = add i64 %304, 1368
  %306 = tail call i64 @ldq_phys(i64 %305)
  %307 = trunc i64 %306 to i32
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* %302, i32 %307)
  %308 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %309 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %308, i64 0, i32 40
  %310 = load i64, i64* %309, align 8
  %311 = add i64 %310, 1352
  %312 = tail call i64 @ldq_phys(i64 %311)
  %313 = trunc i64 %312 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* %308, i32 %313)
  %314 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %315 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %314, i64 0, i32 40
  %316 = load i64, i64* %315, align 8
  %317 = add i64 %316, 1360
  %318 = tail call i64 @ldq_phys(i64 %317)
  %319 = trunc i64 %318 to i32
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* %314, i32 %319)
  %320 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %321 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 40
  %322 = load i64, i64* %321, align 8
  %323 = add i64 %322, 1600
  %324 = tail call i64 @ldq_phys(i64 %323)
  %325 = trunc i64 %324 to i32
  %326 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %327 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %326, i64 0, i32 29, i64 2
  store i32 %325, i32* %327, align 8
  %328 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %326, i64 0, i32 40
  %329 = load i64, i64* %328, align 8
  %330 = add i64 %329, 96
  %331 = tail call i32 @ldl_phys(i64 %330)
  %332 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %333 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %332, i64 0, i32 22
  %334 = load i32, i32* %333, align 8
  %335 = and i32 %334, -11
  store i32 %335, i32* %333, align 8
  %336 = and i32 %331, 16777216
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %349, label %338

338:                                              ; preds = %25
  %339 = trunc i32 %331 to i8
  %340 = and i8 %339, 15
  %341 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %332, i64 0, i32 48
  store i8 %340, i8* %341, align 4
  %342 = or i32 %335, 8
  store i32 %342, i32* %333, align 8
  %343 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %332, i64 0, i32 20
  %344 = load i32, i32* %343, align 16
  %345 = and i32 %344, 512
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %349, label %347

347:                                              ; preds = %338
  %348 = or i32 %334, 10
  store i32 %348, i32* %333, align 8
  br label %349

349:                                              ; preds = %338, %25, %347
  %350 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %332, i64 0, i32 40
  %351 = load i64, i64* %350, align 8
  %352 = add i64 %351, 1232
  %353 = tail call i64 @ldq_phys(i64 %352)
  %354 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %332, i64 0, i32 37
  store i64 %353, i64* %354, align 16
  %355 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %332, i64 0, i32 21
  %356 = load i32, i32* %355, align 4
  %357 = and i32 %356, -1064961
  %358 = trunc i64 %353 to i32
  %359 = shl i32 %358, 4
  %360 = and i32 %359, 16384
  %361 = or i32 %357, %360
  %362 = shl i32 %358, 8
  %363 = and i32 %362, 1048576
  %364 = or i32 %361, %363
  store i32 %364, i32* %355, align 4
  %365 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %366 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %365, i64 0, i32 20
  store i32 0, i32* %366, align 16
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %365, i64 0, i32 40
  %368 = load i64, i64* %367, align 8
  %369 = add i64 %368, 1392
  %370 = tail call i64 @ldq_phys(i64 %369)
  %371 = trunc i64 %370 to i32
  %372 = and i32 %371, 2261
  %373 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %374 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 2
  store i32 %372, i32* %374, align 4
  %375 = and i32 %371, 1024
  %376 = icmp eq i32 %375, 0
  %377 = select i1 %376, i32 1, i32 -1
  %378 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 19
  store i32 %377, i32* %378, align 4
  %379 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 20
  %380 = load i32, i32* %379, align 16
  %381 = and i32 %380, 3285
  %382 = and i32 %371, -3286
  %383 = or i32 %381, %382
  store i32 %383, i32* %379, align 16
  %384 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 1
  store i32 1, i32* %384, align 16
  %385 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 40
  %386 = load i64, i64* %385, align 8
  %387 = add i64 %386, 1024
  %388 = tail call i32 @lduw_phys(i64 %387)
  %389 = add i64 %386, 1032
  %390 = tail call i64 @ldq_phys(i64 %389)
  %391 = trunc i64 %390 to i32
  %392 = add i64 %386, 1028
  %393 = tail call i32 @ldl_phys(i64 %392)
  %394 = add i64 %386, 1026
  %395 = tail call i32 @lduw_phys(i64 %394)
  %396 = shl i32 %395, 8
  %397 = and i32 %396, 65280
  %398 = shl i32 %395, 12
  %399 = and i32 %398, 15728640
  %400 = or i32 %397, %399
  %401 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 0, i32 0
  store i32 %388, i32* %401, align 4
  %402 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 0, i32 1
  store i32 %391, i32* %402, align 4
  %403 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 0, i32 2
  store i32 %393, i32* %403, align 4
  %404 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 0, i32 3
  store i32 %400, i32* %404, align 4
  %405 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 21
  %406 = load i32, i32* %405, align 4
  %407 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 2, i32 3
  %408 = load i32, i32* %407, align 4
  %409 = lshr i32 %408, 17
  %410 = and i32 %409, 32
  %411 = trunc i32 %406 to i16
  %412 = icmp slt i16 %411, 0
  br i1 %412, label %437, label %413

413:                                              ; preds = %349
  %414 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 29, i64 0
  %415 = load i32, i32* %414, align 16
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  br i1 %417, label %425, label %418

418:                                              ; preds = %413
  %419 = load i32, i32* %379, align 16
  %420 = and i32 %419, 131072
  %421 = icmp ne i32 %420, 0
  %422 = and i32 %406, 16
  %423 = icmp eq i32 %422, 0
  %424 = or i1 %423, %421
  br i1 %424, label %425, label %427

425:                                              ; preds = %418, %413
  %426 = or i32 %410, 64
  br label %437

427:                                              ; preds = %418
  %428 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 3, i32 1
  %429 = load i32, i32* %428, align 4
  %430 = or i32 %429, %391
  %431 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %373, i64 0, i32 24, i64 2, i32 1
  %432 = load i32, i32* %431, align 4
  %433 = or i32 %430, %432
  %434 = icmp eq i32 %433, 0
  %435 = select i1 %434, i32 0, i32 64
  %436 = or i32 %435, %410
  br label %437

437:                                              ; preds = %349, %425, %427
  %438 = phi i32 [ %410, %349 ], [ %426, %425 ], [ %436, %427 ]
  %439 = and i32 %406, -97
  %440 = or i32 %438, %439
  store i32 %440, i32* %405, align 4
  %441 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %442 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %441, i64 0, i32 40
  %443 = load i64, i64* %442, align 8
  %444 = add i64 %443, 1040
  tail call fastcc void @svm_load_seg_cache(i64 %444, %struct.CPUX86State* %441, i32 1)
  %445 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %446 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 40
  %447 = load i64, i64* %446, align 8
  %448 = add i64 %447, 1056
  %449 = tail call i32 @lduw_phys(i64 %448)
  %450 = add i64 %447, 1064
  %451 = tail call i64 @ldq_phys(i64 %450)
  %452 = trunc i64 %451 to i32
  %453 = add i64 %447, 1060
  %454 = tail call i32 @ldl_phys(i64 %453)
  %455 = add i64 %447, 1058
  %456 = tail call i32 @lduw_phys(i64 %455)
  %457 = shl i32 %456, 8
  %458 = and i32 %457, 65280
  %459 = shl i32 %456, 12
  %460 = and i32 %459, 15728640
  %461 = or i32 %458, %460
  %462 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 0
  store i32 %449, i32* %462, align 4
  %463 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 1
  store i32 %452, i32* %463, align 4
  %464 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 2
  store i32 %454, i32* %464, align 4
  %465 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 2, i32 3
  store i32 %461, i32* %465, align 4
  %466 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 21
  %467 = load i32, i32* %466, align 4
  %468 = lshr exact i32 %460, 17
  %469 = and i32 %468, 32
  %470 = trunc i32 %467 to i16
  %471 = icmp slt i16 %470, 0
  br i1 %471, label %497, label %472

472:                                              ; preds = %437
  %473 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 29, i64 0
  %474 = load i32, i32* %473, align 16
  %475 = and i32 %474, 1
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %485, label %477

477:                                              ; preds = %472
  %478 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 20
  %479 = load i32, i32* %478, align 16
  %480 = and i32 %479, 131072
  %481 = icmp ne i32 %480, 0
  %482 = and i32 %467, 16
  %483 = icmp eq i32 %482, 0
  %484 = or i1 %483, %481
  br i1 %484, label %485, label %487

485:                                              ; preds = %477, %472
  %486 = or i32 %469, 64
  br label %497

487:                                              ; preds = %477
  %488 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 3, i32 1
  %489 = load i32, i32* %488, align 4
  %490 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 24, i64 0, i32 1
  %491 = load i32, i32* %490, align 4
  %492 = or i32 %489, %452
  %493 = or i32 %492, %491
  %494 = icmp eq i32 %493, 0
  %495 = select i1 %494, i32 0, i32 64
  %496 = or i32 %495, %469
  br label %497

497:                                              ; preds = %437, %485, %487
  %498 = phi i32 [ %469, %437 ], [ %486, %485 ], [ %496, %487 ]
  %499 = and i32 %467, -97
  %500 = or i32 %498, %499
  store i32 %500, i32* %466, align 4
  %501 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %502 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 40
  %503 = load i64, i64* %502, align 8
  %504 = add i64 %503, 1072
  %505 = tail call i32 @lduw_phys(i64 %504)
  %506 = add i64 %503, 1080
  %507 = tail call i64 @ldq_phys(i64 %506)
  %508 = trunc i64 %507 to i32
  %509 = add i64 %503, 1076
  %510 = tail call i32 @ldl_phys(i64 %509)
  %511 = add i64 %503, 1074
  %512 = tail call i32 @lduw_phys(i64 %511)
  %513 = shl i32 %512, 8
  %514 = and i32 %513, 65280
  %515 = shl i32 %512, 12
  %516 = and i32 %515, 15728640
  %517 = or i32 %514, %516
  %518 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 3, i32 0
  store i32 %505, i32* %518, align 4
  %519 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 3, i32 1
  store i32 %508, i32* %519, align 4
  %520 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 3, i32 2
  store i32 %510, i32* %520, align 4
  %521 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 3, i32 3
  store i32 %517, i32* %521, align 4
  %522 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 21
  %523 = load i32, i32* %522, align 4
  %524 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 2, i32 3
  %525 = load i32, i32* %524, align 4
  %526 = lshr i32 %525, 17
  %527 = and i32 %526, 32
  %528 = trunc i32 %523 to i16
  %529 = icmp slt i16 %528, 0
  br i1 %529, label %555, label %530

530:                                              ; preds = %497
  %531 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 29, i64 0
  %532 = load i32, i32* %531, align 16
  %533 = and i32 %532, 1
  %534 = icmp eq i32 %533, 0
  br i1 %534, label %543, label %535

535:                                              ; preds = %530
  %536 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 20
  %537 = load i32, i32* %536, align 16
  %538 = and i32 %537, 131072
  %539 = icmp ne i32 %538, 0
  %540 = and i32 %523, 16
  %541 = icmp eq i32 %540, 0
  %542 = or i1 %541, %539
  br i1 %542, label %543, label %545

543:                                              ; preds = %535, %530
  %544 = or i32 %527, 64
  br label %555

545:                                              ; preds = %535
  %546 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 0, i32 1
  %547 = load i32, i32* %546, align 4
  %548 = or i32 %547, %508
  %549 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %501, i64 0, i32 24, i64 2, i32 1
  %550 = load i32, i32* %549, align 4
  %551 = or i32 %548, %550
  %552 = icmp eq i32 %551, 0
  %553 = select i1 %552, i32 0, i32 64
  %554 = or i32 %553, %527
  br label %555

555:                                              ; preds = %497, %543, %545
  %556 = phi i32 [ %527, %497 ], [ %544, %543 ], [ %554, %545 ]
  %557 = and i32 %523, -97
  %558 = or i32 %556, %557
  store i32 %558, i32* %522, align 4
  %559 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %560 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %559, i64 0, i32 40
  %561 = load i64, i64* %560, align 8
  %562 = add i64 %561, 1400
  %563 = tail call i64 @ldq_phys(i64 %562)
  %564 = trunc i64 %563 to i32
  %565 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %566 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %565, i64 0, i32 18
  store i32 %564, i32* %566, align 8
  %567 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %565, i64 0, i32 40
  %568 = load i64, i64* %567, align 8
  %569 = add i64 %568, 1496
  %570 = tail call i64 @ldq_phys(i64 %569)
  %571 = trunc i64 %570 to i32
  %572 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %573 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %572, i64 0, i32 0, i64 4
  store i32 %571, i32* %573, align 16
  %574 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %572, i64 0, i32 40
  %575 = load i64, i64* %574, align 8
  %576 = add i64 %575, 1528
  %577 = tail call i64 @ldq_phys(i64 %576)
  %578 = trunc i64 %577 to i32
  %579 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %580 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %579, i64 0, i32 0, i64 0
  store i32 %578, i32* %580, align 16
  %581 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %582 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %581, i64 0, i32 40
  %583 = load i64, i64* %582, align 8
  %584 = add i64 %583, 1376
  %585 = tail call i64 @ldq_phys(i64 %584)
  %586 = trunc i64 %585 to i32
  %587 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %588 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %587, i64 0, i32 61, i64 7
  store i32 %586, i32* %588, align 4
  %589 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %587, i64 0, i32 40
  %590 = load i64, i64* %589, align 8
  %591 = add i64 %590, 1384
  %592 = tail call i64 @ldq_phys(i64 %591)
  %593 = trunc i64 %592 to i32
  %594 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %595 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %594, i64 0, i32 61, i64 6
  store i32 %593, i32* %595, align 4
  %596 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %594, i64 0, i32 40
  %597 = load i64, i64* %596, align 8
  %598 = add i64 %597, 1227
  %599 = tail call i32 @ldub_phys(i64 %598)
  %600 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %601 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %602 = load i32, i32* %601, align 4
  %603 = icmp eq i32 %602, 0
  br i1 %603, label %610, label %604, !prof !3, !misexpect !4

604:                                              ; preds = %555
  %605 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %606 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %600, i64 0, i32 21
  %607 = load i32, i32* %606, align 4
  %608 = and i32 %607, 3
  tail call void %605(i32 %608, i32 %599)
  %609 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %610

610:                                              ; preds = %555, %604
  %611 = phi %struct.CPUX86State* [ %600, %555 ], [ %609, %604 ]
  %612 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %600, i64 0, i32 21
  %613 = load i32, i32* %612, align 4
  %614 = and i32 %613, -4
  %615 = or i32 %614, %599
  store i32 %615, i32* %612, align 4
  %616 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %611, i64 0, i32 40
  %617 = load i64, i64* %616, align 8
  %618 = add i64 %617, 92
  %619 = tail call i32 @ldub_phys(i64 %618)
  %620 = icmp eq i32 %619, 1
  br i1 %620, label %621, label %623

621:                                              ; preds = %610
  %622 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @tlb_flush(%struct.CPUX86State* %622, i32 1)
  br label %623

623:                                              ; preds = %610, %621
  %624 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %625 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %624, i64 0, i32 22
  %626 = load i32, i32* %625, align 8
  %627 = or i32 %626, 1
  store i32 %627, i32* %625, align 8
  %628 = and i32 %331, 256
  %629 = icmp eq i32 %628, 0
  br i1 %629, label %634, label %630

630:                                              ; preds = %623
  %631 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %624, i64 0, i32 76
  %632 = load i32, i32* %631, align 4
  %633 = or i32 %632, 256
  store i32 %633, i32* %631, align 4
  br label %634

634:                                              ; preds = %623, %630
  %635 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %636 = load i32, i32* %635, align 4
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %641, label %638, !prof !3, !misexpect !4

638:                                              ; preds = %634
  %639 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %639(i32 %6, i32 %599)
  %640 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %641

641:                                              ; preds = %634, %638
  %642 = phi %struct.CPUX86State* [ %624, %634 ], [ %640, %638 ]
  %643 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %642, i64 0, i32 40
  %644 = load i64, i64* %643, align 8
  %645 = add i64 %644, 168
  %646 = tail call i32 @ldl_phys(i64 %645)
  %647 = icmp slt i32 %646, 0
  br i1 %647, label %648, label %742

648:                                              ; preds = %641
  %649 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %650 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %649, i64 0, i32 40
  %651 = load i64, i64* %650, align 8
  %652 = add i64 %651, 172
  %653 = tail call i32 @ldl_phys(i64 %652)
  %654 = load i32, i32* @loglevel, align 4
  %655 = and i32 %654, 2
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %661, label %657

657:                                              ; preds = %648
  %658 = and i32 %646, 2048
  %659 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %660 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %659, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i32 %658)
  br label %661

661:                                              ; preds = %648, %657
  %662 = lshr i32 %646, 8
  %663 = and i32 %662, 7
  switch i32 %663, label %730 [
    i32 0, label %664
    i32 2, label %679
    i32 3, label %696
    i32 4, label %712
  ]

664:                                              ; preds = %661
  %665 = and i32 %646, 255
  %666 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %667 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %666, i64 0, i32 95
  store i32 %665, i32* %667, align 16
  %668 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %666, i64 0, i32 58
  store i32 %653, i32* %668, align 16
  %669 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %666, i64 0, i32 59
  store i32 0, i32* %669, align 4
  %670 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %666, i64 0, i32 60
  store i32 -1, i32* %670, align 8
  %671 = load i32, i32* @loglevel, align 4
  %672 = and i32 %671, 2
  %673 = icmp eq i32 %672, 0
  br i1 %673, label %677, label %674

674:                                              ; preds = %664
  %675 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %676 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %675)
  br label %677

677:                                              ; preds = %664, %674
  %678 = load void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i64, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 2, i32 9), align 8
  tail call void %678(i32 %665, i32 0, i32 0, i64 0, i32 1)
  br label %730

679:                                              ; preds = %661
  %680 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %681 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %680, i64 0, i32 95
  store i32 2, i32* %681, align 16
  %682 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %680, i64 0, i32 58
  store i32 %653, i32* %682, align 16
  %683 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %680, i64 0, i32 59
  store i32 0, i32* %683, align 4
  %684 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %680, i64 0, i32 18
  %685 = load i32, i32* %684, align 8
  %686 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %680, i64 0, i32 60
  store i32 %685, i32* %686, align 8
  %687 = load i32, i32* @loglevel, align 4
  %688 = and i32 %687, 2
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %694, label %690

690:                                              ; preds = %679
  %691 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %692 = tail call i64 @fwrite(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i64 3, i64 1, %struct._IO_FILE* %691)
  %693 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %694

694:                                              ; preds = %679, %690
  %695 = phi %struct.CPUX86State* [ %680, %679 ], [ %693, %690 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* %695) #21
  unreachable

696:                                              ; preds = %661
  %697 = and i32 %646, 255
  %698 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %699 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %698, i64 0, i32 95
  store i32 %697, i32* %699, align 16
  %700 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %698, i64 0, i32 58
  store i32 %653, i32* %700, align 16
  %701 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %698, i64 0, i32 59
  store i32 0, i32* %701, align 4
  %702 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %698, i64 0, i32 60
  store i32 -1, i32* %702, align 8
  %703 = load i32, i32* @loglevel, align 4
  %704 = and i32 %703, 2
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %710, label %706

706:                                              ; preds = %696
  %707 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %708 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %707)
  %709 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %710

710:                                              ; preds = %696, %706
  %711 = phi %struct.CPUX86State* [ %698, %696 ], [ %709, %706 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* %711) #21
  unreachable

712:                                              ; preds = %661
  %713 = and i32 %646, 255
  %714 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %715 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %714, i64 0, i32 95
  store i32 %713, i32* %715, align 16
  %716 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %714, i64 0, i32 58
  store i32 %653, i32* %716, align 16
  %717 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %714, i64 0, i32 59
  store i32 1, i32* %717, align 4
  %718 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %714, i64 0, i32 18
  %719 = load i32, i32* %718, align 8
  %720 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %714, i64 0, i32 60
  store i32 %719, i32* %720, align 8
  %721 = load i32, i32* @loglevel, align 4
  %722 = and i32 %721, 2
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %728, label %724

724:                                              ; preds = %712
  %725 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %726 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %725)
  %727 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %728

728:                                              ; preds = %712, %724
  %729 = phi %struct.CPUX86State* [ %714, %712 ], [ %727, %724 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* %729) #21
  unreachable

730:                                              ; preds = %677, %661
  %731 = load i32, i32* @loglevel, align 4
  %732 = and i32 %731, 2
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %742, label %734

734:                                              ; preds = %730
  %735 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %736 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %737 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %736, i64 0, i32 95
  %738 = load i32, i32* %737, align 16
  %739 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %736, i64 0, i32 58
  %740 = load i32, i32* %739, align 16
  %741 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %735, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 %738, i32 %740)
  br label %742

742:                                              ; preds = %734, %730, %641
  ret void
}

declare void @tlb_flush(%struct.CPUX86State*, i32) local_unnamed_addr #9

; Function Attrs: noreturn uwtable
define void @helper_vmmcall() local_unnamed_addr #4 {
  tail call void @helper_svm_check_intercept_param(i32 129, i64 0)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* %1, i32 6, i64 0) #21
  unreachable
}

; Function Attrs: uwtable
define void @helper_vmload(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !3, !misexpect !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 17179869184
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 130, i64 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %15 = load i32, i32* %14, align 16
  %16 = load i32, i32* @loglevel, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = zext i32 %15 to i64
  %21 = add nuw nsw i64 %20, 1096
  br label %32

22:                                               ; preds = %13
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %24 = zext i32 %15 to i64
  %25 = add nuw nsw i64 %24, 1096
  %26 = tail call i64 @ldq_phys(i64 %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 24, i64 4, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0), i32 %15, i64 %26, i32 %29)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %32

32:                                               ; preds = %19, %22
  %33 = phi i64 [ %21, %19 ], [ %25, %22 ]
  %34 = phi i64 [ %20, %19 ], [ %24, %22 ]
  %35 = phi %struct.CPUX86State* [ %2, %19 ], [ %31, %22 ]
  %36 = add nuw nsw i64 %34, 1088
  %37 = tail call i32 @lduw_phys(i64 %36)
  %38 = tail call i64 @ldq_phys(i64 %33)
  %39 = trunc i64 %38 to i32
  %40 = add nuw nsw i64 %34, 1092
  %41 = tail call i32 @ldl_phys(i64 %40)
  %42 = add nuw nsw i64 %34, 1090
  %43 = tail call i32 @lduw_phys(i64 %42)
  %44 = shl i32 %43, 8
  %45 = and i32 %44, 65280
  %46 = shl i32 %43, 12
  %47 = and i32 %46, 15728640
  %48 = or i32 %45, %47
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 0
  store i32 %37, i32* %49, align 4
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 1
  store i32 %39, i32* %50, align 4
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 2
  store i32 %41, i32* %51, align 4
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 3
  store i32 %48, i32* %52, align 4
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 21
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 2, i32 3
  %56 = load i32, i32* %55, align 4
  %57 = lshr i32 %56, 17
  %58 = and i32 %57, 32
  %59 = trunc i32 %54 to i16
  %60 = icmp slt i16 %59, 0
  br i1 %60, label %88, label %61

61:                                               ; preds = %32
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 29, i64 0
  %63 = load i32, i32* %62, align 16
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 20
  %68 = load i32, i32* %67, align 16
  %69 = and i32 %68, 131072
  %70 = icmp ne i32 %69, 0
  %71 = and i32 %54, 16
  %72 = icmp eq i32 %71, 0
  %73 = or i1 %72, %70
  br i1 %73, label %74, label %76

74:                                               ; preds = %66, %61
  %75 = or i32 %58, 64
  br label %88

76:                                               ; preds = %66
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 3, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = or i32 %80, %78
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 2, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = or i32 %81, %83
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i32 0, i32 64
  %87 = or i32 %86, %58
  br label %88

88:                                               ; preds = %32, %74, %76
  %89 = phi i32 [ %58, %32 ], [ %75, %74 ], [ %87, %76 ]
  %90 = and i32 %54, -97
  %91 = or i32 %89, %90
  store i32 %91, i32* %53, align 4
  %92 = add nuw nsw i64 %34, 1104
  %93 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %94 = tail call i32 @lduw_phys(i64 %92)
  %95 = add nuw nsw i64 %34, 1112
  %96 = tail call i64 @ldq_phys(i64 %95)
  %97 = trunc i64 %96 to i32
  %98 = add nuw nsw i64 %34, 1108
  %99 = tail call i32 @ldl_phys(i64 %98)
  %100 = add nuw nsw i64 %34, 1106
  %101 = tail call i32 @lduw_phys(i64 %100)
  %102 = shl i32 %101, 8
  %103 = and i32 %102, 65280
  %104 = shl i32 %101, 12
  %105 = and i32 %104, 15728640
  %106 = or i32 %103, %105
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 5, i32 0
  store i32 %94, i32* %107, align 4
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 5, i32 1
  store i32 %97, i32* %108, align 4
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 5, i32 2
  store i32 %99, i32* %109, align 4
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 5, i32 3
  store i32 %106, i32* %110, align 4
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 21
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 2, i32 3
  %114 = load i32, i32* %113, align 4
  %115 = lshr i32 %114, 17
  %116 = and i32 %115, 32
  %117 = trunc i32 %112 to i16
  %118 = icmp slt i16 %117, 0
  br i1 %118, label %146, label %119

119:                                              ; preds = %88
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 29, i64 0
  %121 = load i32, i32* %120, align 16
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %132, label %124

124:                                              ; preds = %119
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 20
  %126 = load i32, i32* %125, align 16
  %127 = and i32 %126, 131072
  %128 = icmp ne i32 %127, 0
  %129 = and i32 %112, 16
  %130 = icmp eq i32 %129, 0
  %131 = or i1 %130, %128
  br i1 %131, label %132, label %134

132:                                              ; preds = %124, %119
  %133 = or i32 %116, 64
  br label %146

134:                                              ; preds = %124
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 3, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 0, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = or i32 %138, %136
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 24, i64 2, i32 1
  %141 = load i32, i32* %140, align 4
  %142 = or i32 %139, %141
  %143 = icmp eq i32 %142, 0
  %144 = select i1 %143, i32 0, i32 64
  %145 = or i32 %144, %116
  br label %146

146:                                              ; preds = %88, %132, %134
  %147 = phi i32 [ %116, %88 ], [ %133, %132 ], [ %145, %134 ]
  %148 = and i32 %112, -97
  %149 = or i32 %147, %148
  store i32 %149, i32* %111, align 4
  %150 = add nuw nsw i64 %34, 1168
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = tail call i32 @lduw_phys(i64 %150)
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 26, i32 0
  store i32 %152, i32* %153, align 4
  %154 = add nuw nsw i64 %34, 1176
  %155 = tail call i64 @ldq_phys(i64 %154)
  %156 = trunc i64 %155 to i32
  %157 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 26, i32 1
  store i32 %156, i32* %157, align 4
  %158 = add nuw nsw i64 %34, 1172
  %159 = tail call i32 @ldl_phys(i64 %158)
  %160 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 26, i32 2
  store i32 %159, i32* %160, align 4
  %161 = add nuw nsw i64 %34, 1170
  %162 = tail call i32 @lduw_phys(i64 %161)
  %163 = shl i32 %162, 8
  %164 = and i32 %163, 65280
  %165 = shl i32 %162, 12
  %166 = and i32 %165, 15728640
  %167 = or i32 %164, %166
  %168 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 26, i32 3
  store i32 %167, i32* %168, align 4
  %169 = add nuw nsw i64 %34, 1136
  %170 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %171 = tail call i32 @lduw_phys(i64 %169)
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %170, i64 0, i32 25, i32 0
  store i32 %171, i32* %172, align 4
  %173 = add nuw nsw i64 %34, 1144
  %174 = tail call i64 @ldq_phys(i64 %173)
  %175 = trunc i64 %174 to i32
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %170, i64 0, i32 25, i32 1
  store i32 %175, i32* %176, align 4
  %177 = add nuw nsw i64 %34, 1140
  %178 = tail call i32 @ldl_phys(i64 %177)
  %179 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %170, i64 0, i32 25, i32 2
  store i32 %178, i32* %179, align 4
  %180 = add nuw nsw i64 %34, 1138
  %181 = tail call i32 @lduw_phys(i64 %180)
  %182 = shl i32 %181, 8
  %183 = and i32 %182, 65280
  %184 = shl i32 %181, 12
  %185 = and i32 %184, 15728640
  %186 = or i32 %183, %185
  %187 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %170, i64 0, i32 25, i32 3
  store i32 %186, i32* %187, align 4
  %188 = add nuw nsw i64 %34, 1536
  %189 = tail call i64 @ldq_phys(i64 %188)
  %190 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %191 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %190, i64 0, i32 38
  store i64 %189, i64* %191, align 8
  %192 = add nuw nsw i64 %34, 1576
  %193 = tail call i64 @ldq_phys(i64 %192)
  %194 = trunc i64 %193 to i32
  %195 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %196 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %195, i64 0, i32 34
  store i32 %194, i32* %196, align 16
  %197 = add nuw nsw i64 %34, 1584
  %198 = tail call i64 @ldq_phys(i64 %197)
  %199 = trunc i64 %198 to i32
  %200 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %201 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %200, i64 0, i32 35
  store i32 %199, i32* %201, align 4
  %202 = add nuw nsw i64 %34, 1592
  %203 = tail call i64 @ldq_phys(i64 %202)
  %204 = trunc i64 %203 to i32
  %205 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %206 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %205, i64 0, i32 36
  store i32 %204, i32* %206, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_vmsave(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !3, !misexpect !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 34359738368
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 131, i64 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %15 = load i32, i32* %14, align 16
  %16 = load i32, i32* @loglevel, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = zext i32 %15 to i64
  %21 = add nuw nsw i64 %20, 1096
  br label %32

22:                                               ; preds = %13
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %24 = zext i32 %15 to i64
  %25 = add nuw nsw i64 %24, 1096
  %26 = tail call i64 @ldq_phys(i64 %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 24, i64 4, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i64 0, i64 0), i32 %15, i64 %26, i32 %29)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %32

32:                                               ; preds = %19, %22
  %33 = phi i64 [ %21, %19 ], [ %25, %22 ]
  %34 = phi i64 [ %20, %19 ], [ %24, %22 ]
  %35 = phi %struct.CPUX86State* [ %2, %19 ], [ %31, %22 ]
  %36 = add nuw nsw i64 %34, 1088
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 0
  %38 = load i32, i32* %37, align 4
  tail call void @stw_phys(i64 %36, i32 %38)
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  tail call void @stq_phys(i64 %33, i64 %41)
  %42 = add nuw nsw i64 %34, 1092
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 2
  %44 = load i32, i32* %43, align 4
  tail call void @stl_phys(i64 %42, i32 %44)
  %45 = add nuw nsw i64 %34, 1090
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = lshr i32 %47, 8
  %49 = and i32 %48, 255
  %50 = lshr i32 %47, 12
  %51 = and i32 %50, 3840
  %52 = or i32 %49, %51
  tail call void @stw_phys(i64 %45, i32 %52)
  %53 = add nuw nsw i64 %34, 1104
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 24, i64 5, i32 0
  %56 = load i32, i32* %55, align 4
  tail call void @stw_phys(i64 %53, i32 %56)
  %57 = add nuw nsw i64 %34, 1112
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 24, i64 5, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  tail call void @stq_phys(i64 %57, i64 %60)
  %61 = add nuw nsw i64 %34, 1108
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 24, i64 5, i32 2
  %63 = load i32, i32* %62, align 4
  tail call void @stl_phys(i64 %61, i32 %63)
  %64 = add nuw nsw i64 %34, 1106
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 24, i64 5, i32 3
  %66 = load i32, i32* %65, align 4
  %67 = lshr i32 %66, 8
  %68 = and i32 %67, 255
  %69 = lshr i32 %66, 12
  %70 = and i32 %69, 3840
  %71 = or i32 %68, %70
  tail call void @stw_phys(i64 %64, i32 %71)
  %72 = add nuw nsw i64 %34, 1168
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 26, i32 0
  %75 = load i32, i32* %74, align 4
  tail call void @stw_phys(i64 %72, i32 %75)
  %76 = add nuw nsw i64 %34, 1176
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 26, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  tail call void @stq_phys(i64 %76, i64 %79)
  %80 = add nuw nsw i64 %34, 1172
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 26, i32 2
  %82 = load i32, i32* %81, align 4
  tail call void @stl_phys(i64 %80, i32 %82)
  %83 = add nuw nsw i64 %34, 1170
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 26, i32 3
  %85 = load i32, i32* %84, align 4
  %86 = lshr i32 %85, 8
  %87 = and i32 %86, 255
  %88 = lshr i32 %85, 12
  %89 = and i32 %88, 3840
  %90 = or i32 %87, %89
  tail call void @stw_phys(i64 %83, i32 %90)
  %91 = add nuw nsw i64 %34, 1136
  %92 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 25, i32 0
  %94 = load i32, i32* %93, align 4
  tail call void @stw_phys(i64 %91, i32 %94)
  %95 = add nuw nsw i64 %34, 1144
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 25, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  tail call void @stq_phys(i64 %95, i64 %98)
  %99 = add nuw nsw i64 %34, 1140
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 25, i32 2
  %101 = load i32, i32* %100, align 4
  tail call void @stl_phys(i64 %99, i32 %101)
  %102 = add nuw nsw i64 %34, 1138
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 25, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 8
  %106 = and i32 %105, 255
  %107 = lshr i32 %104, 12
  %108 = and i32 %107, 3840
  %109 = or i32 %106, %108
  tail call void @stw_phys(i64 %102, i32 %109)
  %110 = add nuw nsw i64 %34, 1536
  %111 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %111, i64 0, i32 38
  %113 = load i64, i64* %112, align 8
  tail call void @stq_phys(i64 %110, i64 %113)
  %114 = add nuw nsw i64 %34, 1576
  %115 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 34
  %117 = load i32, i32* %116, align 16
  %118 = zext i32 %117 to i64
  tail call void @stq_phys(i64 %114, i64 %118)
  %119 = add nuw nsw i64 %34, 1584
  %120 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %121 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %120, i64 0, i32 35
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  tail call void @stq_phys(i64 %119, i64 %123)
  %124 = add nuw nsw i64 %34, 1592
  %125 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %125, i64 0, i32 36
  %127 = load i32, i32* %126, align 8
  %128 = zext i32 %127 to i64
  tail call void @stq_phys(i64 %124, i64 %128)
  ret void
}

; Function Attrs: uwtable
define void @helper_stgi() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 2097152
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6, !prof !3, !misexpect !5

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 68719476736
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @helper_vmexit(i32 132, i64 0)
  unreachable

12:                                               ; preds = %0, %6
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 22
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 1
  store i32 %15, i32* %13, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_clgi() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 2097152
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6, !prof !3, !misexpect !5

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 137438953472
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @helper_vmexit(i32 133, i64 0)
  unreachable

12:                                               ; preds = %0, %6
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 22
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, -2
  store i32 %15, i32* %13, align 8
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_skinit() local_unnamed_addr #4 {
  tail call void @helper_svm_check_intercept_param(i32 134, i64 0)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* %1, i32 6, i64 0) #21
  unreachable
}

; Function Attrs: uwtable
define void @helper_invlpga(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !3, !misexpect !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 67108864
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 122, i64 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %15 = load i32, i32* %14, align 16
  tail call void @tlb_flush_page(%struct.CPUX86State* %2, i32 %15)
  ret void
}

; Function Attrs: uwtable
define void @svm_check_intercept(%struct.CPUX86State* %0, i32 %1) local_unnamed_addr #3 {
  %3 = load i64, i64* bitcast (%struct.CPUX86State** @env to i64*), align 8
  store %struct.CPUX86State* %0, %struct.CPUX86State** @env, align 8
  tail call void @helper_svm_check_intercept_param(i32 %1, i64 0)
  store i64 %3, i64* bitcast (%struct.CPUX86State** @env to i64*), align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_svm_check_io(i32 %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 42
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 134217728
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %39, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 40
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 64
  %13 = tail call i64 @ldq_phys(i64 %12)
  %14 = lshr i32 %1, 4
  %15 = and i32 %14, 7
  %16 = shl nsw i32 -1, %15
  %17 = lshr i32 %0, 3
  %18 = zext i32 %17 to i64
  %19 = add i64 %13, %18
  %20 = tail call i32 @lduw_phys(i64 %19)
  %21 = and i32 %16, 127
  %22 = xor i32 %21, 127
  %23 = and i32 %0, 7
  %24 = shl i32 %22, %23
  %25 = and i32 %20, %24
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %9
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 40
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, 128
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 18
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, %2
  %35 = zext i32 %34 to i64
  tail call void @stq_phys(i64 %31, i64 %35)
  %36 = shl i32 %0, 16
  %37 = or i32 %36, %1
  %38 = zext i32 %37 to i64
  tail call void @helper_vmexit(i32 123, i64 %38)
  unreachable

39:                                               ; preds = %9, %3
  ret void
}

; Function Attrs: uwtable
define void @helper_ldmxcsr(i32 %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 14
  store i32 %0, i32* %3, align 8
  %4 = lshr i32 %0, 13
  %5 = and i32 %4, 3
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 13
  tail call void @set_float_rounding_mode(i32 %5, %struct.float_status* nonnull %6)
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = lshr i32 %9, 6
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13, i32 5
  store i8 %12, i8* %13, align 1
  %14 = trunc i32 %9 to i16
  %15 = lshr i16 %14, 15
  %16 = trunc i16 %15 to i8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 10, i32 4
  store i8 %16, i8* %17, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_enter_mmx() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  store i32 0, i32* %2, align 16
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 0
  %4 = bitcast i8* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_emms() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 0
  %3 = bitcast i8* %2 to i64*
  store i64 72340172838076673, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_movq(i8* nocapture %0, i8* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast i8* %0 to i64*
  store i64 %4, i64* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrlw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %31

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %11 = bitcast %union.MMXReg* %0 to i16*
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = lshr i32 %13, %9
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %11, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = lshr i32 %18, %9
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %16, align 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  %22 = load i16, i16* %21, align 4
  %23 = zext i16 %22 to i32
  %24 = lshr i32 %23, %9
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %21, align 4
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = lshr i32 %28, %9
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %26, align 2
  br label %31

31:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psraw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 15
  %6 = select i1 %5, i64 %4, i64 15
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %9 = bitcast %union.MMXReg* %0 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = sext i16 %10 to i32
  %12 = ashr i32 %11, %7
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %9, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = ashr i32 %16, %7
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %14, align 2
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = sext i16 %20 to i32
  %22 = ashr i32 %21, %7
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 4
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = ashr i32 %26, %7
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psllw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %31

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %11 = bitcast %union.MMXReg* %0 to i16*
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = shl nuw nsw i32 %13, %9
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %11, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = shl nuw nsw i32 %18, %9
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %16, align 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  %22 = load i16, i16* %21, align 4
  %23 = zext i16 %22 to i32
  %24 = shl nuw nsw i32 %23, %9
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %21, align 4
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = shl nuw nsw i32 %28, %9
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %26, align 2
  br label %31

31:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrld_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %17

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %11 = bitcast %union.MMXReg* %0 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = lshr i32 %12, %9
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = lshr i32 %15, %9
  store i32 %16, i32* %14, align 4
  br label %17

17:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrad_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 31
  %6 = select i1 %5, i64 %4, i64 31
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = ashr i32 %10, %7
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, %7
  store i32 %14, i32* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pslld_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %17

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %11 = bitcast %union.MMXReg* %0 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %12, %9
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, %9
  store i32 %16, i32* %14, align 4
  br label %17

17:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrlq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  %6 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  br i1 %5, label %10, label %7

7:                                                ; preds = %2
  %8 = load i64, i64* %6, align 8
  %9 = lshr i64 %8, %4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i64 [ %9, %7 ], [ 0, %2 ]
  store i64 %11, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psllq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  %6 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  br i1 %5, label %10, label %7

7:                                                ; preds = %2
  %8 = load i64, i64* %6, align 8
  %9 = shl i64 %8, %4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i64 [ %9, %7 ], [ 0, %2 ]
  store i64 %11, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %8, %5
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = add i8 %13, %11
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = add i8 %18, %16
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, %21
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = add i8 %28, %26
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, %31
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = add i8 %38, %36
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = add i8 %43, %41
  store i8 %44, i8* %40, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = add i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = add i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %20, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddl_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, %5
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  store i32 %14, i32* %10, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sub i8 %11, %13
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = sub i8 %16, %18
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = sub i8 %21, %23
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = sub i8 %26, %28
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = sub i8 %31, %33
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = sub i8 %36, %38
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = sub i8 %41, %43
  store i8 %44, i8* %40, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sub i16 %11, %13
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = sub i16 %16, %18
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %20, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubl_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %5, %8
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  store i32 %14, i32* %10, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddusb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %4, align 8
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add nuw nsw i32 %22, %19
  %24 = icmp ult i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %17, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %34, %31
  %36 = icmp ult i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 2
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %46, %43
  %48 = icmp ult i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %41, align 1
  %53 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 4
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %58, %55
  %60 = icmp ult i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %53, align 4
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %70, %67
  %72 = icmp ult i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %65, align 1
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 2
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %82, %79
  %84 = icmp ult i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %77, align 2
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %94, %91
  %96 = icmp ult i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %89, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddsb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 -128, i8 127
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i8 %13, i8 %9
  store i8 %18, i8* %4, align 8
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = add i8 %20, %22
  %24 = icmp slt i8 %20, 0
  %25 = icmp slt i8 %22, 0
  %26 = icmp slt i8 %23, 0
  %27 = select i1 %25, i8 -128, i8 127
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i8 %27, i8 %23
  store i8 %32, i8* %19, align 1
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = add i8 %34, %36
  %38 = icmp slt i8 %34, 0
  %39 = icmp slt i8 %36, 0
  %40 = icmp slt i8 %37, 0
  %41 = select i1 %39, i8 -128, i8 127
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i8 %41, i8 %37
  store i8 %46, i8* %33, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = add i8 %48, %50
  %52 = icmp slt i8 %48, 0
  %53 = icmp slt i8 %50, 0
  %54 = icmp slt i8 %51, 0
  %55 = select i1 %53, i8 -128, i8 127
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i8 %55, i8 %51
  store i8 %60, i8* %47, align 1
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %62 = load i8, i8* %61, align 4
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %64 = load i8, i8* %63, align 4
  %65 = add i8 %62, %64
  %66 = icmp slt i8 %62, 0
  %67 = icmp slt i8 %64, 0
  %68 = icmp slt i8 %65, 0
  %69 = select i1 %67, i8 -128, i8 127
  %70 = xor i1 %66, %68
  %71 = xor i1 %66, %67
  %72 = xor i1 %71, true
  %73 = and i1 %70, %72
  %74 = select i1 %73, i8 %69, i8 %65
  store i8 %74, i8* %61, align 4
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %78 = load i8, i8* %77, align 1
  %79 = add i8 %76, %78
  %80 = icmp slt i8 %76, 0
  %81 = icmp slt i8 %78, 0
  %82 = icmp slt i8 %79, 0
  %83 = select i1 %81, i8 -128, i8 127
  %84 = xor i1 %80, %82
  %85 = xor i1 %80, %81
  %86 = xor i1 %85, true
  %87 = and i1 %84, %86
  %88 = select i1 %87, i8 %83, i8 %79
  store i8 %88, i8* %75, align 1
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %90 = load i8, i8* %89, align 2
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %92 = load i8, i8* %91, align 2
  %93 = add i8 %90, %92
  %94 = icmp slt i8 %90, 0
  %95 = icmp slt i8 %92, 0
  %96 = icmp slt i8 %93, 0
  %97 = select i1 %95, i8 -128, i8 127
  %98 = xor i1 %94, %96
  %99 = xor i1 %94, %95
  %100 = xor i1 %99, true
  %101 = and i1 %98, %100
  %102 = select i1 %101, i8 %97, i8 %93
  store i8 %102, i8* %89, align 2
  %103 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %106 = load i8, i8* %105, align 1
  %107 = add i8 %104, %106
  %108 = icmp slt i8 %104, 0
  %109 = icmp slt i8 %106, 0
  %110 = icmp slt i8 %107, 0
  %111 = select i1 %109, i8 -128, i8 127
  %112 = xor i1 %108, %110
  %113 = xor i1 %108, %109
  %114 = xor i1 %113, true
  %115 = and i1 %112, %114
  %116 = select i1 %115, i8 %111, i8 %107
  store i8 %116, i8* %103, align 1
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i8 @llvm.sadd.sat.i8(i8, i8) #14

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubusb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %4, align 8
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %17, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 2
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %41, align 1
  %53 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 4
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %55, %58
  %60 = icmp slt i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %53, align 4
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = icmp slt i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %65, align 1
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 2
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %79, %82
  %84 = icmp slt i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %77, align 2
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %94
  %96 = icmp slt i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %89, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubsb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 127, i8 -128
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i8 %13, i8 %9
  store i8 %17, i8* %4, align 8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = sub i8 %19, %21
  %23 = icmp slt i8 %19, 0
  %24 = icmp slt i8 %21, 0
  %25 = icmp slt i8 %22, 0
  %26 = select i1 %24, i8 127, i8 -128
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i8 %26, i8 %22
  store i8 %30, i8* %18, align 1
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = sub i8 %32, %34
  %36 = icmp slt i8 %32, 0
  %37 = icmp slt i8 %34, 0
  %38 = icmp slt i8 %35, 0
  %39 = select i1 %37, i8 127, i8 -128
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i8 %39, i8 %35
  store i8 %43, i8* %31, align 2
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = sub i8 %45, %47
  %49 = icmp slt i8 %45, 0
  %50 = icmp slt i8 %47, 0
  %51 = icmp slt i8 %48, 0
  %52 = select i1 %50, i8 127, i8 -128
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i8 %52, i8 %48
  store i8 %56, i8* %44, align 1
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %58 = load i8, i8* %57, align 4
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %60 = load i8, i8* %59, align 4
  %61 = sub i8 %58, %60
  %62 = icmp slt i8 %58, 0
  %63 = icmp slt i8 %60, 0
  %64 = icmp slt i8 %61, 0
  %65 = select i1 %63, i8 127, i8 -128
  %66 = xor i1 %62, %64
  %67 = xor i1 %62, %63
  %68 = and i1 %66, %67
  %69 = select i1 %68, i8 %65, i8 %61
  store i8 %69, i8* %57, align 4
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = sub i8 %71, %73
  %75 = icmp slt i8 %71, 0
  %76 = icmp slt i8 %73, 0
  %77 = icmp slt i8 %74, 0
  %78 = select i1 %76, i8 127, i8 -128
  %79 = xor i1 %75, %77
  %80 = xor i1 %75, %76
  %81 = and i1 %79, %80
  %82 = select i1 %81, i8 %78, i8 %74
  store i8 %82, i8* %70, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %84 = load i8, i8* %83, align 2
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %86 = load i8, i8* %85, align 2
  %87 = sub i8 %84, %86
  %88 = icmp slt i8 %84, 0
  %89 = icmp slt i8 %86, 0
  %90 = icmp slt i8 %87, 0
  %91 = select i1 %89, i8 127, i8 -128
  %92 = xor i1 %88, %90
  %93 = xor i1 %88, %89
  %94 = and i1 %92, %93
  %95 = select i1 %94, i8 %91, i8 %87
  store i8 %95, i8* %83, align 2
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = sub i8 %97, %99
  %101 = icmp slt i8 %97, 0
  %102 = icmp slt i8 %99, 0
  %103 = icmp slt i8 %100, 0
  %104 = select i1 %102, i8 127, i8 -128
  %105 = xor i1 %101, %103
  %106 = xor i1 %101, %102
  %107 = and i1 %105, %106
  %108 = select i1 %107, i8 %104, i8 %100
  store i8 %108, i8* %96, align 1
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i8 @llvm.ssub.sat.i8(i8, i8) #14

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddusw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %22, %19
  %24 = icmp ult i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %17, align 2
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = add nuw nsw i32 %34, %31
  %36 = icmp ult i32 %35, 65535
  %37 = select i1 %36, i32 %35, i32 65535
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 4
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %46, %43
  %48 = icmp ult i32 %47, 65535
  %49 = select i1 %48, i32 %47, i32 65535
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %41, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 -32768, i16 32767
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i16 %13, i16 %9
  store i16 %18, i16* %4, align 8
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = add i16 %20, %22
  %24 = icmp slt i16 %20, 0
  %25 = icmp slt i16 %22, 0
  %26 = icmp slt i16 %23, 0
  %27 = select i1 %25, i16 -32768, i16 32767
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i16 %27, i16 %23
  store i16 %32, i16* %19, align 2
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %33, align 4
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %47, align 2
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i16 @llvm.sadd.sat.i16(i16, i16) #14

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubusw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %17, align 2
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 65535
  %37 = select i1 %36, i32 %35, i32 65535
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 4
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 65535
  %49 = select i1 %48, i32 %47, i32 65535
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %41, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 32767, i16 -32768
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i16 %13, i16 %9
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = sub i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 32767, i16 -32768
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i16 %26, i16 %22
  store i16 %30, i16* %18, align 2
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %31, align 4
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %44, align 2
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i16 @llvm.ssub.sat.i16(i16, i16) #14

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminub_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ult i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ult i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ult i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ult i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ult i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ult i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ult i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxub_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ugt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ugt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ugt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ugt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ugt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ugt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ugt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp slt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp slt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp slt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp slt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pand_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pandn_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = xor i64 %4, -1
  %6 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, %5
  store i64 %8, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_por_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pxor_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp sgt i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp sgt i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp sgt i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp sgt i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp sgt i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtl_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeqb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp eq i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp eq i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeqw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp eq i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeql_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmullw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = mul i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = mul i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = mul i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = mul i16 %23, %21
  store i16 %24, i16* %20, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhrw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = add nsw i32 %11, 32768
  %13 = lshr i32 %12, 16
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, 32768
  %23 = lshr i32 %22, 16
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %30, %27
  %32 = add nsw i32 %31, 32768
  %33 = lshr i32 %32, 16
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = mul nsw i32 %40, %37
  %42 = add nsw i32 %41, 32768
  %43 = lshr i32 %42, 16
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhuw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = mul nuw nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nuw nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = zext i16 %27 to i32
  %29 = mul nuw nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = mul nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pavgb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %6, 1
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 1
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %4, align 8
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %17, 1
  %22 = add nuw nsw i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %15, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %25, align 2
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %35, align 1
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %47, 1
  %52 = add nuw nsw i32 %51, %50
  %53 = lshr i32 %52, 1
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %45, align 4
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %57, 1
  %62 = add nuw nsw i32 %61, %60
  %63 = lshr i32 %62, 1
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %55, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %65, align 2
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %77, 1
  %82 = add nuw nsw i32 %81, %80
  %83 = lshr i32 %82, 1
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %75, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pavgw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %6, 1
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 1
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nuw nsw i32 %17, 1
  %22 = add nuw nsw i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmuludq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = bitcast %union.MMXReg* %0 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = mul nuw i64 %8, %5
  %10 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %9, i64* %10, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaddwd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %5 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %6 = bitcast %union.MMXReg* %1 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = bitcast %union.MMXReg* %0 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %7 to i32
  %15 = sext i16 %9 to i32
  %16 = mul nsw i32 %15, %14
  %17 = sext i16 %11 to i32
  %18 = sext i16 %13 to i32
  %19 = mul nsw i32 %18, %17
  %20 = add nsw i32 %19, %16
  %21 = bitcast %union.MMXReg* %0 to i32*
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 2
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %23 to i32
  %31 = sext i16 %25 to i32
  %32 = mul nsw i32 %31, %30
  %33 = sext i16 %27 to i32
  %34 = sext i16 %29 to i32
  %35 = mul nsw i32 %34, %33
  %36 = add nsw i32 %35, %32
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 1
  store i32 %36, i32* %37, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psadbw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %17, %20
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = add nuw nsw i32 %24, %14
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %27 = load i8, i8* %26, align 2
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = sub nsw i32 %28, %31
  %33 = icmp slt i32 %32, 0
  %34 = sub nsw i32 0, %32
  %35 = select i1 %33, i32 %34, i32 %32
  %36 = add nuw nsw i32 %25, %35
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = icmp slt i32 %43, 0
  %45 = sub nsw i32 0, %43
  %46 = select i1 %44, i32 %45, i32 %43
  %47 = add nuw nsw i32 %36, %46
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %50, %53
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = add nuw nsw i32 %47, %57
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = sub nsw i32 %61, %64
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 0, %65
  %68 = select i1 %66, i32 %67, i32 %65
  %69 = add nuw nsw i32 %58, %68
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %71 = load i8, i8* %70, align 2
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %74 = load i8, i8* %73, align 2
  %75 = zext i8 %74 to i32
  %76 = sub nsw i32 %72, %75
  %77 = icmp slt i32 %76, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %78, i32 %76
  %80 = add nuw nsw i32 %69, %79
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = sub nsw i32 %83, %86
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = add nuw nsw i32 %80, %90
  %92 = zext i32 %91 to i64
  %93 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %92, i64* %93, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maskmov_mmx(%union.MMXReg* nocapture readonly %0, %union.MMXReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %5 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %6 = bitcast %union.MMXReg* %1 to i8*
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = bitcast %union.MMXReg* %0 to i8*
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %10, i32 %2, i32 %13)
  br label %14

14:                                               ; preds = %3, %9
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %14
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = add i32 %2, 1
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %19, i32 %20, i32 %23)
  br label %24

24:                                               ; preds = %18, %14
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = add i32 %2, 2
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %29, i32 %30, i32 %33)
  br label %34

34:                                               ; preds = %28, %24
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i32 %2, 3
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %39, i32 %40, i32 %43)
  br label %44

44:                                               ; preds = %38, %34
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = add i32 %2, 4
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %49, i32 %50, i32 %53)
  br label %54

54:                                               ; preds = %48, %44
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = add i32 %2, 5
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %59, i32 %60, i32 %63)
  br label %64

64:                                               ; preds = %58, %54
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = add i32 %2, 6
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %69, i32 %70, i32 %73)
  br label %74

74:                                               ; preds = %68, %64
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %84

78:                                               ; preds = %74
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = add i32 %2, 7
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %79, i32 %80, i32 %83)
  br label %84

84:                                               ; preds = %78, %74
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @helper_movl_mm_T0_mmx(%union.MMXReg* nocapture %0, i32 %1) local_unnamed_addr #1 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  store i32 0, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pshufw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = lshr i32 %2, 4
  %15 = and i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = lshr i32 %2, 6
  %20 = and i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = bitcast %union.MMXReg* %0 to i8*
  %25 = bitcast %union.MMXReg* %0 to i16*
  store i16 %8, i16* %25, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 2
  %27 = bitcast i8* %26 to i16*
  store i16 %13, i16* %27, align 2
  %28 = getelementptr inbounds i8, i8* %24, i64 4
  %29 = bitcast i8* %28 to i16*
  store i16 %18, i16* %29, align 4
  %30 = getelementptr inbounds i8, i8* %24, i64 6
  %31 = bitcast i8* %30 to i16*
  store i16 %23, i16* %31, align 2
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_pmovmskb_mmx(%union.MMXReg* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %3 = bitcast %union.MMXReg* %0 to i8*
  %4 = load i8, i8* %3, align 8
  %5 = lshr i8 %4, 7
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = lshr i8 %7, 6
  %9 = and i8 %8, 2
  %10 = or i8 %9, %5
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 2
  %12 = load i8, i8* %11, align 2
  %13 = lshr i8 %12, 5
  %14 = and i8 %13, 4
  %15 = or i8 %10, %14
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %17, 4
  %19 = and i8 %18, 8
  %20 = or i8 %15, %19
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = lshr i8 %22, 3
  %24 = and i8 %23, 16
  %25 = or i8 %20, %24
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = lshr i8 %27, 2
  %29 = and i8 %28, 32
  %30 = or i8 %25, %29
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 6
  %32 = load i8, i8* %31, align 2
  %33 = lshr i8 %32, 1
  %34 = and i8 %33, 64
  %35 = or i8 %30, %34
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 7
  %37 = load i8, i8* %36, align 1
  %38 = and i8 %37, -128
  %39 = or i8 %35, %38
  %40 = zext i8 %39 to i32
  ret i32 %40
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packsswb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = icmp slt i32 %6, 127
  %8 = select i1 %7, i32 %6, i32 127
  %9 = icmp sgt i32 %8, -128
  %10 = select i1 %9, i32 %8, i32 -128
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %14, 127
  %16 = select i1 %15, i32 %14, i32 127
  %17 = icmp sgt i32 %16, -128
  %18 = select i1 %17, i32 %16, i32 -128
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %22, 127
  %24 = select i1 %23, i32 %22, i32 127
  %25 = icmp sgt i32 %24, -128
  %26 = select i1 %25, i32 %24, i32 -128
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i32 %30, 127
  %32 = select i1 %31, i32 %30, i32 127
  %33 = icmp sgt i32 %32, -128
  %34 = select i1 %33, i32 %32, i32 -128
  %35 = trunc i32 %34 to i8
  %36 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %37 = bitcast %union.MMXReg* %1 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 127
  %41 = select i1 %40, i32 %39, i32 127
  %42 = icmp sgt i32 %41, -128
  %43 = select i1 %42, i32 %41, i32 -128
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 1
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp slt i32 %47, 127
  %49 = select i1 %48, i32 %47, i32 127
  %50 = icmp sgt i32 %49, -128
  %51 = select i1 %50, i32 %49, i32 -128
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 2
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = icmp slt i32 %55, 127
  %57 = select i1 %56, i32 %55, i32 127
  %58 = icmp sgt i32 %57, -128
  %59 = select i1 %58, i32 %57, i32 -128
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 3
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %63, 127
  %65 = select i1 %64, i32 %63, i32 127
  %66 = icmp sgt i32 %65, -128
  %67 = select i1 %66, i32 %65, i32 -128
  %68 = trunc i32 %67 to i8
  %69 = bitcast %union.MMXReg* %0 to i8*
  store i8 %11, i8* %69, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %19, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %27, i8* %71, align 2
  %72 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %35, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 4
  store i8 %44, i8* %73, align 4
  %74 = getelementptr inbounds i8, i8* %69, i64 5
  store i8 %52, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %69, i64 6
  store i8 %60, i8* %75, align 2
  %76 = getelementptr inbounds i8, i8* %69, i64 7
  store i8 %68, i8* %76, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packuswb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = icmp slt i32 %6, 255
  %8 = select i1 %7, i32 %6, i32 255
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %14, 255
  %16 = select i1 %15, i32 %14, i32 255
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %22, 255
  %24 = select i1 %23, i32 %22, i32 255
  %25 = icmp sgt i32 %24, 0
  %26 = select i1 %25, i32 %24, i32 0
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i32 %30, 255
  %32 = select i1 %31, i32 %30, i32 255
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = trunc i32 %34 to i8
  %36 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %37 = bitcast %union.MMXReg* %1 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 255
  %41 = select i1 %40, i32 %39, i32 255
  %42 = icmp sgt i32 %41, 0
  %43 = select i1 %42, i32 %41, i32 0
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 1
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 2
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = icmp slt i32 %55, 255
  %57 = select i1 %56, i32 %55, i32 255
  %58 = icmp sgt i32 %57, 0
  %59 = select i1 %58, i32 %57, i32 0
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 3
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  %68 = trunc i32 %67 to i8
  %69 = bitcast %union.MMXReg* %0 to i8*
  store i8 %11, i8* %69, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %19, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %27, i8* %71, align 2
  %72 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %35, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 4
  store i8 %44, i8* %73, align 4
  %74 = getelementptr inbounds i8, i8* %69, i64 5
  store i8 %52, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %69, i64 6
  store i8 %60, i8* %75, align 2
  %76 = getelementptr inbounds i8, i8* %69, i64 7
  store i8 %68, i8* %76, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packssdw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 32767
  %7 = select i1 %6, i32 %5, i32 32767
  %8 = icmp sgt i32 %7, -32768
  %9 = select i1 %8, i32 %7, i32 -32768
  %10 = trunc i32 %9 to i16
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 32767
  %14 = select i1 %13, i32 %12, i32 32767
  %15 = icmp sgt i32 %14, -32768
  %16 = select i1 %15, i32 %14, i32 -32768
  %17 = trunc i32 %16 to i16
  %18 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %19 = bitcast %union.MMXReg* %1 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %20, 32767
  %22 = select i1 %21, i32 %20, i32 32767
  %23 = icmp sgt i32 %22, -32768
  %24 = select i1 %23, i32 %22, i32 -32768
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 32767
  %29 = select i1 %28, i32 %27, i32 32767
  %30 = icmp sgt i32 %29, -32768
  %31 = select i1 %30, i32 %29, i32 -32768
  %32 = trunc i32 %31 to i16
  %33 = bitcast %union.MMXReg* %0 to i8*
  %34 = bitcast %union.MMXReg* %0 to i16*
  store i16 %10, i16* %34, align 8
  %35 = getelementptr inbounds i8, i8* %33, i64 2
  %36 = bitcast i8* %35 to i16*
  store i16 %17, i16* %36, align 2
  %37 = getelementptr inbounds i8, i8* %33, i64 4
  %38 = bitcast i8* %37 to i16*
  store i16 %25, i16* %38, align 4
  %39 = getelementptr inbounds i8, i8* %33, i64 6
  %40 = bitcast i8* %39 to i16*
  store i16 %32, i16* %40, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpcklbw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %6 = bitcast %union.MMXReg* %1 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %13 = load i8, i8* %12, align 2
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  %15 = load i8, i8* %14, align 2
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %7, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %4, i64 2
  store i8 %9, i8* %21, align 2
  %22 = getelementptr inbounds i8, i8* %4, i64 3
  store i8 %11, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %4, i64 4
  store i8 %13, i8* %23, align 4
  %24 = getelementptr inbounds i8, i8* %4, i64 5
  store i8 %15, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %4, i64 6
  store i8 %17, i8* %25, align 2
  %26 = getelementptr inbounds i8, i8* %4, i64 7
  store i8 %19, i8* %26, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpcklwd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %5 = bitcast %union.MMXReg* %1 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = bitcast %union.MMXReg* %0 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 2
  %13 = bitcast i8* %12 to i16*
  store i16 %6, i16* %13, align 2
  %14 = getelementptr inbounds i8, i8* %11, i64 4
  %15 = bitcast i8* %14 to i16*
  store i16 %8, i16* %15, align 4
  %16 = getelementptr inbounds i8, i8* %11, i64 6
  %17 = bitcast i8* %16 to i16*
  store i16 %10, i16* %17, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckldq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.MMXReg* %0 to i8*
  %6 = getelementptr inbounds i8, i8* %5, i64 4
  %7 = bitcast i8* %6 to i32*
  store i32 %4, i32* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhbw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %5 = load i8, i8* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %8 = load i8, i8* %7, align 4
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %14 = load i8, i8* %13, align 2
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %18 = load i8, i8* %17, align 1
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %20 = load i8, i8* %19, align 1
  %21 = bitcast %union.MMXReg* %0 to i8*
  store i8 %5, i8* %21, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %8, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 %10, i8* %23, align 2
  %24 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 %12, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 4
  store i8 %14, i8* %25, align 4
  %26 = getelementptr inbounds i8, i8* %21, i64 5
  store i8 %16, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %21, i64 6
  store i8 %18, i8* %27, align 2
  %28 = getelementptr inbounds i8, i8* %21, i64 7
  store i8 %20, i8* %28, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhwd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %5 = load i16, i16* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %8 = load i16, i16* %7, align 4
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = bitcast %union.MMXReg* %0 to i8*
  %14 = bitcast %union.MMXReg* %0 to i16*
  store i16 %5, i16* %14, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 2
  %16 = bitcast i8* %15 to i16*
  store i16 %8, i16* %16, align 2
  %17 = getelementptr inbounds i8, i8* %13, i64 4
  %18 = bitcast i8* %17 to i16*
  store i16 %10, i16* %18, align 4
  %19 = getelementptr inbounds i8, i8* %13, i64 6
  %20 = bitcast i8* %19 to i16*
  store i16 %12, i16* %20, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhdq_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = bitcast %union.MMXReg* %0 to i8*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %5, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 4
  %12 = bitcast i8* %11 to i32*
  store i32 %8, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pi2fd(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 12
  %8 = tail call i32 @int32_to_float32(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 12
  %15 = tail call i32 @int32_to_float32(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pi2fw(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 12
  %9 = tail call i32 @int32_to_float32(i32 %6, %struct.float_status* nonnull %8)
  %10 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %11 = bitcast %union.MMXReg* %0 to i32*
  store i32 %9, i32* %11, align 8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %13 = load i16, i16* %12, align 4
  %14 = sext i16 %13 to i32
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 12
  %17 = tail call i32 @int32_to_float32(i32 %14, %struct.float_status* nonnull %16)
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %17, i32* %18, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pf2id(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 12
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 12
  %15 = tail call i32 @float32_to_int32_round_to_zero(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pf2iw(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 12
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 %5, %struct.float_status* nonnull %7)
  %9 = icmp slt i32 %8, 32767
  %10 = select i1 %9, i32 %8, i32 32767
  %11 = icmp sgt i32 %10, -32768
  %12 = select i1 %11, i32 %10, i32 -32768
  %13 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %14 = bitcast %union.MMXReg* %0 to i32*
  store i32 %12, i32* %14, align 8
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 12
  %19 = tail call i32 @float32_to_int32_round_to_zero(i32 %16, %struct.float_status* nonnull %18)
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = icmp sgt i32 %21, -32768
  %23 = select i1 %22, i32 %21, i32 -32768
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 %23, i32* %24, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfacc(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_add(i32 %5, i32 %7, %struct.float_status* nonnull %9)
  %11 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %12 = bitcast %union.MMXReg* %1 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_add(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  %19 = bitcast %union.MMXReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %18, i32* %21, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfadd(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_add(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_add(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfcmpeq(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_eq_quiet(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 12
  %20 = tail call i32 @float32_eq_quiet(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfcmpge(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_le(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %7, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 12
  %20 = tail call i32 @float32_le(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfcmpgt(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %7, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 12
  %20 = tail call i32 @float32_lt(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfmax(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = load i32, i32* %7, align 8
  store i32 %14, i32* %4, align 8
  br label %15

15:                                               ; preds = %2, %13
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 12
  %22 = tail call i32 @float32_lt(i32 %17, i32 %19, %struct.float_status* nonnull %21)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %15
  %25 = load i32, i32* %18, align 4
  store i32 %25, i32* %16, align 4
  br label %26

26:                                               ; preds = %15, %24
  ret void
}

; Function Attrs: uwtable
define void @helper_pfmin(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = load i32, i32* %4, align 8
  store i32 %14, i32* %7, align 8
  br label %15

15:                                               ; preds = %2, %13
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 12
  %22 = tail call i32 @float32_lt(i32 %17, i32 %19, %struct.float_status* nonnull %21)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %15
  %25 = load i32, i32* %16, align 4
  store i32 %25, i32* %18, align 4
  br label %26

26:                                               ; preds = %15, %24
  ret void
}

; Function Attrs: uwtable
define void @helper_pfmul(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_mul(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_mul(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfnacc(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_sub(i32 %5, i32 %7, %struct.float_status* nonnull %9)
  %11 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %12 = bitcast %union.MMXReg* %1 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_sub(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  %19 = bitcast %union.MMXReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %18, i32* %21, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfpnacc(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_sub(i32 %5, i32 %7, %struct.float_status* nonnull %9)
  %11 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %12 = bitcast %union.MMXReg* %1 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_add(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  %19 = bitcast %union.MMXReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %18, i32* %21, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfrcp(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 12
  %7 = tail call i32 @float32_div(i32 1065353216, i32 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %7, i32* %10, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfrsqrt(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 2147483647
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 %5, i32* %7, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_sqrt(i32 %5, %struct.float_status* nonnull %9)
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 12
  %13 = tail call i32 @float32_div(i32 1065353216, i32 %10, %struct.float_status* nonnull %12)
  store i32 %13, i32* %7, align 4
  %14 = load i32, i32* %3, align 8
  %15 = and i32 %14, -2147483648
  %16 = or i32 %15, %13
  store i32 %16, i32* %7, align 4
  %17 = bitcast %union.MMXReg* %0 to i32*
  store i32 %16, i32* %17, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_pfsub(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_sub(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_sub(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfsubr(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_sub(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %7, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_sub(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %14, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pswapd(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = bitcast %union.MMXReg* %0 to i8*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %5, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 4
  %11 = bitcast i8* %10 to i32*
  store i32 %7, i32* %11, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_pshufb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #13 {
  %3 = alloca %union.MMXReg, align 8
  %4 = bitcast %union.MMXReg* %3 to i8*
  %5 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %6 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %3 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = and i8 %9, 7
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  br label %16

16:                                               ; preds = %2, %11
  %17 = phi i8 [ %15, %11 ], [ 0, %2 ]
  %18 = bitcast %union.MMXReg* %3 to i8*
  store i8 %17, i8* %18, align 8
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %16
  %23 = and i8 %20, 7
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  br label %27

27:                                               ; preds = %22, %16
  %28 = phi i8 [ %26, %22 ], [ 0, %16 ]
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = and i8 %31, 7
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  br label %38

38:                                               ; preds = %33, %27
  %39 = phi i8 [ %37, %33 ], [ 0, %27 ]
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  store i8 %39, i8* %40, align 2
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %38
  %45 = and i8 %42, 7
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  br label %49

49:                                               ; preds = %44, %38
  %50 = phi i8 [ %48, %44 ], [ 0, %38 ]
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %49
  %56 = and i8 %53, 7
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  br label %60

60:                                               ; preds = %55, %49
  %61 = phi i8 [ %59, %55 ], [ 0, %49 ]
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  store i8 %61, i8* %62, align 4
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %60
  %67 = and i8 %64, 7
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  br label %71

71:                                               ; preds = %66, %60
  %72 = phi i8 [ %70, %66 ], [ 0, %60 ]
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %71
  %78 = and i8 %75, 7
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  br label %82

82:                                               ; preds = %77, %71
  %83 = phi i8 [ %81, %77 ], [ 0, %71 ]
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  store i8 %83, i8* %84, align 2
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %82
  %89 = and i8 %86, 7
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  br label %93

93:                                               ; preds = %88, %82
  %94 = phi i8 [ %92, %88 ], [ 0, %82 ]
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  store i8 %94, i8* %95, align 1
  %96 = getelementptr inbounds %union.MMXReg, %union.MMXReg* %3, i64 0, i32 0
  %97 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %98 = load i64, i64* %96, align 8
  store i64 %98, i64* %97, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phaddw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %7, %5
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = add i16 %12, %10
  store i16 %13, i16* %6, align 2
  %14 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %15 = bitcast %union.MMXReg* %1 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = add i16 %18, %16
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %11, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phaddd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  store i32 %8, i32* %4, align 8
  %9 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %1 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %11
  store i32 %14, i32* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phaddsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 -32768, i16 32767
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = xor i1 %14, true
  %16 = and i1 %13, %15
  %17 = select i1 %16, i16 %12, i16 %8
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %19 = load i16, i16* %18, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = add i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 -32768, i16 32767
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = xor i1 %28, true
  %30 = and i1 %27, %29
  %31 = select i1 %30, i16 %26, i16 %22
  store i16 %31, i16* %6, align 2
  %32 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %33 = bitcast %union.MMXReg* %1 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %18, align 4
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 2
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %20, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaddubsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %0 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = add nsw i32 %18, %11
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = icmp sgt i32 %21, -32768
  %23 = select i1 %22, i32 %21, i32 -32768
  %24 = trunc i32 %23 to i16
  %25 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %26 = bitcast %union.MMXReg* %0 to i16*
  store i16 %24, i16* %26, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 %32, %29
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nsw i32 %39, %36
  %41 = add nsw i32 %40, %33
  %42 = icmp slt i32 %41, 32767
  %43 = select i1 %42, i32 %41, i32 32767
  %44 = icmp sgt i32 %43, -32768
  %45 = select i1 %44, i32 %43, i32 -32768
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %25, i64 0, i64 1
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = sext i8 %49 to i32
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = add nsw i32 %61, %54
  %63 = icmp slt i32 %62, 32767
  %64 = select i1 %63, i32 %62, i32 32767
  %65 = icmp sgt i32 %64, -32768
  %66 = select i1 %65, i32 %64, i32 -32768
  %67 = trunc i32 %66 to i16
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %25, i64 0, i64 2
  store i16 %67, i16* %68, align 4
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %70 = load i8, i8* %69, align 2
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = zext i8 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nsw i32 %81, %78
  %83 = add nsw i32 %82, %75
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = icmp sgt i32 %85, -32768
  %87 = select i1 %86, i32 %85, i32 -32768
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds [4 x i16], [4 x i16]* %25, i64 0, i64 3
  store i16 %88, i16* %89, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phsubw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = sub i16 %10, %12
  store i16 %13, i16* %6, align 2
  %14 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %15 = bitcast %union.MMXReg* %1 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sub i16 %16, %18
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %11, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phsubd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  store i32 %8, i32* %4, align 8
  %9 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %1 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %11, %13
  store i32 %14, i32* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phsubsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 32767, i16 -32768
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = and i1 %13, %14
  %16 = select i1 %15, i16 %12, i16 %8
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %20 = load i16, i16* %19, align 2
  %21 = sub i16 %18, %20
  %22 = icmp slt i16 %18, 0
  %23 = icmp slt i16 %20, 0
  %24 = icmp slt i16 %21, 0
  %25 = select i1 %23, i16 32767, i16 -32768
  %26 = xor i1 %22, %24
  %27 = xor i1 %22, %23
  %28 = and i1 %26, %27
  %29 = select i1 %28, i16 %25, i16 %21
  store i16 %29, i16* %6, align 2
  %30 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %31 = bitcast %union.MMXReg* %1 to i16*
  %32 = load i16, i16* %31, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %30, i64 0, i64 1
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %17, align 4
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %30, i64 0, i64 2
  %45 = load i16, i16* %44, align 4
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %30, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %19, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pabsb_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = icmp slt i8 %5, 0
  %7 = sub i8 0, %5
  %8 = select i1 %6, i8 %7, i8 %5
  %9 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %10 = bitcast %union.MMXReg* %0 to i8*
  store i8 %8, i8* %10, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = sub i8 0, %12
  %15 = select i1 %13, i8 %14, i8 %12
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 1
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = icmp slt i8 %18, 0
  %20 = sub i8 0, %18
  %21 = select i1 %19, i8 %20, i8 %18
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 2
  store i8 %21, i8* %22, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  %26 = sub i8 0, %24
  %27 = select i1 %25, i8 %26, i8 %24
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp slt i8 %30, 0
  %32 = sub i8 0, %30
  %33 = select i1 %31, i8 %32, i8 %30
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 4
  store i8 %33, i8* %34, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  %38 = sub i8 0, %36
  %39 = select i1 %37, i8 %38, i8 %36
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 5
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = icmp slt i8 %42, 0
  %44 = sub i8 0, %42
  %45 = select i1 %43, i8 %44, i8 %42
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 6
  store i8 %45, i8* %46, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  %50 = sub i8 0, %48
  %51 = select i1 %49, i8 %50, i8 %48
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 7
  store i8 %51, i8* %52, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pabsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = icmp slt i16 %5, 0
  %7 = sub i16 0, %5
  %8 = select i1 %6, i16 %7, i16 %5
  %9 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %10 = bitcast %union.MMXReg* %0 to i16*
  store i16 %8, i16* %10, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = icmp slt i16 %12, 0
  %14 = sub i16 0, %12
  %15 = select i1 %13, i16 %14, i16 %12
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %15, i16* %16, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = icmp slt i16 %18, 0
  %20 = sub i16 0, %18
  %21 = select i1 %19, i16 %20, i16 %18
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  store i16 %21, i16* %22, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = icmp slt i16 %24, 0
  %26 = sub i16 0, %24
  %27 = select i1 %25, i16 %26, i16 %24
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  store i16 %27, i16* %28, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pabsd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 0
  %7 = sub nsw i32 0, %5
  %8 = select i1 %6, i32 %7, i32 %5
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  %14 = sub nsw i32 0, %12
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhrsw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = add nsw i32 %11, 16384
  %13 = lshr i32 %12, 15
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, 16384
  %23 = lshr i32 %22, 15
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %30, %27
  %32 = add nsw i32 %31, 16384
  %33 = lshr i32 %32, 15
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = mul nsw i32 %40, %37
  %42 = add nsw i32 %41, 16384
  %43 = lshr i32 %42, 15
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psignb_mmx(%union.MMXReg* %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = icmp sgt i8 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i8 %5, 0
  %9 = bitcast %union.MMXReg* %0 to i8*
  br i1 %8, label %16, label %10

10:                                               ; preds = %7
  %11 = load i8, i8* %9, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.MMXReg* %0 to i8*
  %14 = load i8, i8* %13, align 8
  %15 = sub i8 0, %14
  br label %16

16:                                               ; preds = %7, %10, %12
  %17 = phi i8* [ %9, %10 ], [ %13, %12 ], [ %9, %7 ]
  %18 = phi i8 [ %11, %10 ], [ %15, %12 ], [ 0, %7 ]
  %19 = bitcast %union.MMXReg* %0 to [8 x i8]*
  store i8 %18, i8* %17, align 8
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp sgt i8 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i8 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 1
  %27 = load i8, i8* %26, align 1
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = sub i8 0, %30
  br label %32

32:                                               ; preds = %23, %25, %28
  %33 = phi i8 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 1
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = icmp sgt i8 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i8 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 2
  %42 = load i8, i8* %41, align 2
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 2
  %45 = load i8, i8* %44, align 2
  %46 = sub i8 0, %45
  br label %47

47:                                               ; preds = %38, %40, %43
  %48 = phi i8 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 2
  store i8 %48, i8* %49, align 2
  %50 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp sgt i8 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i8 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 3
  %57 = load i8, i8* %56, align 1
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = sub i8 0, %60
  br label %62

62:                                               ; preds = %53, %55, %58
  %63 = phi i8 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %66 = load i8, i8* %65, align 4
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %68, label %73

68:                                               ; preds = %62
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 4
  %72 = load i8, i8* %71, align 4
  br label %77

73:                                               ; preds = %62
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 4
  %75 = load i8, i8* %74, align 4
  %76 = sub i8 0, %75
  br label %77

77:                                               ; preds = %68, %70, %73
  %78 = phi i8 [ %76, %73 ], [ %72, %70 ], [ 0, %68 ]
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 4
  store i8 %78, i8* %79, align 4
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %81 = load i8, i8* %80, align 1
  %82 = icmp sgt i8 %81, -1
  br i1 %82, label %83, label %88

83:                                               ; preds = %77
  %84 = icmp eq i8 %81, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 5
  %87 = load i8, i8* %86, align 1
  br label %92

88:                                               ; preds = %77
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 5
  %90 = load i8, i8* %89, align 1
  %91 = sub i8 0, %90
  br label %92

92:                                               ; preds = %83, %85, %88
  %93 = phi i8 [ %91, %88 ], [ %87, %85 ], [ 0, %83 ]
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 5
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %96 = load i8, i8* %95, align 2
  %97 = icmp sgt i8 %96, -1
  br i1 %97, label %98, label %103

98:                                               ; preds = %92
  %99 = icmp eq i8 %96, 0
  br i1 %99, label %107, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 6
  %102 = load i8, i8* %101, align 2
  br label %107

103:                                              ; preds = %92
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 6
  %105 = load i8, i8* %104, align 2
  %106 = sub i8 0, %105
  br label %107

107:                                              ; preds = %98, %100, %103
  %108 = phi i8 [ %106, %103 ], [ %102, %100 ], [ 0, %98 ]
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 6
  store i8 %108, i8* %109, align 2
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = icmp sgt i8 %111, -1
  br i1 %112, label %113, label %118

113:                                              ; preds = %107
  %114 = icmp eq i8 %111, 0
  br i1 %114, label %122, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 7
  %117 = load i8, i8* %116, align 1
  br label %122

118:                                              ; preds = %107
  %119 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 7
  %120 = load i8, i8* %119, align 1
  %121 = sub i8 0, %120
  br label %122

122:                                              ; preds = %113, %115, %118
  %123 = phi i8 [ %121, %118 ], [ %117, %115 ], [ 0, %113 ]
  %124 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 7
  store i8 %123, i8* %124, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psignw_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = icmp sgt i16 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i16 %5, 0
  %9 = bitcast %union.MMXReg* %0 to i16*
  br i1 %8, label %16, label %10

10:                                               ; preds = %7
  %11 = load i16, i16* %9, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.MMXReg* %0 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = sub i16 0, %14
  br label %16

16:                                               ; preds = %7, %10, %12
  %17 = phi i16* [ %9, %10 ], [ %13, %12 ], [ %9, %7 ]
  %18 = phi i16 [ %11, %10 ], [ %15, %12 ], [ 0, %7 ]
  %19 = bitcast %union.MMXReg* %0 to [4 x i16]*
  store i16 %18, i16* %17, align 8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = icmp sgt i16 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i16 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  %27 = load i16, i16* %26, align 2
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = sub i16 0, %30
  br label %32

32:                                               ; preds = %23, %25, %28
  %33 = phi i16 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = icmp sgt i16 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i16 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  %42 = load i16, i16* %41, align 4
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  %45 = load i16, i16* %44, align 4
  %46 = sub i16 0, %45
  br label %47

47:                                               ; preds = %38, %40, %43
  %48 = phi i16 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %48, i16* %49, align 4
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %51 = load i16, i16* %50, align 2
  %52 = icmp sgt i16 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i16 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  %57 = load i16, i16* %56, align 2
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  %60 = load i16, i16* %59, align 2
  %61 = sub i16 0, %60
  br label %62

62:                                               ; preds = %53, %55, %58
  %63 = phi i16 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %63, i16* %64, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psignd_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i32 %5, 0
  %9 = bitcast %union.MMXReg* %0 to i32*
  br i1 %8, label %16, label %10

10:                                               ; preds = %7
  %11 = load i32, i32* %9, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.MMXReg* %0 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 0, %14
  br label %16

16:                                               ; preds = %7, %10, %12
  %17 = phi i32* [ %9, %10 ], [ %13, %12 ], [ %9, %7 ]
  %18 = phi i32 [ %11, %10 ], [ %15, %12 ], [ 0, %7 ]
  %19 = bitcast %union.MMXReg* %0 to [2 x i32]*
  store i32 %18, i32* %17, align 8
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i32 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 0, %30
  br label %32

32:                                               ; preds = %23, %25, %28
  %33 = phi i32 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_palignr_mmx(%union.MMXReg* nocapture %0, %union.MMXReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %37, label %5

5:                                                ; preds = %3
  %6 = shl i32 %2, 3
  %7 = add i32 %6, 63
  %8 = icmp ult i32 %7, 127
  br i1 %8, label %9, label %19

9:                                                ; preds = %5
  %10 = icmp sgt i32 %6, 0
  %11 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = zext i32 %6 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i32 0, %6
  %16 = zext i32 %15 to i64
  %17 = shl i64 %12, %16
  %18 = select i1 %10, i64 %14, i64 %17
  br label %19

19:                                               ; preds = %5, %9
  %20 = phi i64 [ %18, %9 ], [ 0, %5 ]
  %21 = add i32 %6, -1
  %22 = icmp ult i32 %21, 127
  br i1 %22, label %23, label %34

23:                                               ; preds = %19
  %24 = add nsw i32 %6, -64
  %25 = icmp sgt i32 %6, 64
  %26 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = zext i32 %24 to i64
  %29 = lshr i64 %27, %28
  %30 = sub nsw i32 64, %6
  %31 = zext i32 %30 to i64
  %32 = shl i64 %27, %31
  %33 = select i1 %25, i64 %29, i64 %32
  br label %34

34:                                               ; preds = %19, %23
  %35 = phi i64 [ %33, %23 ], [ 0, %19 ]
  %36 = or i64 %35, %20
  br label %37

37:                                               ; preds = %3, %34
  %38 = phi i64 [ %36, %34 ], [ 0, %3 ]
  %39 = getelementptr inbounds %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %38, i64* %39, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrlw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  br label %8

8:                                                ; preds = %11, %6
  %9 = phi i64 [ 0, %6 ], [ %13, %11 ]
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %58

11:                                               ; preds = %8
  %12 = getelementptr i8, i8* %7, i64 %9
  store i8 0, i8* %12
  %13 = add i64 %9, 1
  br label %8

14:                                               ; preds = %2
  %15 = trunc i64 %4 to i32
  %16 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %17 = bitcast %union.XMMReg* %0 to i16*
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = lshr i32 %19, %15
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %17, align 8
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = lshr i32 %24, %15
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %22, align 2
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 2
  %28 = load i16, i16* %27, align 4
  %29 = zext i16 %28 to i32
  %30 = lshr i32 %29, %15
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %27, align 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = lshr i32 %34, %15
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %38 = bitcast i64* %37 to i16*
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = lshr i32 %40, %15
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 5
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = lshr i32 %45, %15
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 2
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 6
  %49 = load i16, i16* %48, align 4
  %50 = zext i16 %49 to i32
  %51 = lshr i32 %50, %15
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %48, align 4
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 7
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = lshr i32 %55, %15
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %53, align 2
  br label %58

58:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psraw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 15
  %6 = select i1 %5, i64 %4, i64 15
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %9 = bitcast %union.XMMReg* %0 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = sext i16 %10 to i32
  %12 = ashr i32 %11, %7
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %9, align 8
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = ashr i32 %16, %7
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %14, align 2
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = sext i16 %20 to i32
  %22 = ashr i32 %21, %7
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 4
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 3
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = ashr i32 %26, %7
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = sext i16 %31 to i32
  %33 = ashr i32 %32, %7
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %30, align 8
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = ashr i32 %37, %7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %35, align 2
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 6
  %41 = load i16, i16* %40, align 4
  %42 = sext i16 %41 to i32
  %43 = ashr i32 %42, %7
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %40, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 7
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = ashr i32 %47, %7
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* %45, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psllw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  br label %8

8:                                                ; preds = %11, %6
  %9 = phi i64 [ 0, %6 ], [ %13, %11 ]
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %58

11:                                               ; preds = %8
  %12 = getelementptr i8, i8* %7, i64 %9
  store i8 0, i8* %12
  %13 = add i64 %9, 1
  br label %8

14:                                               ; preds = %2
  %15 = trunc i64 %4 to i32
  %16 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %17 = bitcast %union.XMMReg* %0 to i16*
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = shl nuw nsw i32 %19, %15
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %17, align 8
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = shl nuw nsw i32 %24, %15
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %22, align 2
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 2
  %28 = load i16, i16* %27, align 4
  %29 = zext i16 %28 to i32
  %30 = shl nuw nsw i32 %29, %15
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %27, align 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = shl nuw nsw i32 %34, %15
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %38 = bitcast i64* %37 to i16*
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = shl nuw nsw i32 %40, %15
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 5
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = shl nuw nsw i32 %45, %15
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 2
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 6
  %49 = load i16, i16* %48, align 4
  %50 = zext i16 %49 to i32
  %51 = shl nuw nsw i32 %50, %15
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %48, align 4
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 7
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = shl nuw nsw i32 %55, %15
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %53, align 2
  br label %58

58:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrld_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  br label %8

8:                                                ; preds = %11, %6
  %9 = phi i64 [ 0, %6 ], [ %13, %11 ]
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %30

11:                                               ; preds = %8
  %12 = getelementptr i8, i8* %7, i64 %9
  store i8 0, i8* %12
  %13 = add i64 %9, 1
  br label %8

14:                                               ; preds = %2
  %15 = trunc i64 %4 to i32
  %16 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %17 = bitcast %union.XMMReg* %0 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = lshr i32 %18, %15
  store i32 %19, i32* %17, align 8
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = lshr i32 %21, %15
  store i32 %22, i32* %20, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = lshr i32 %25, %15
  store i32 %26, i32* %24, align 8
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = lshr i32 %28, %15
  store i32 %29, i32* %27, align 4
  br label %30

30:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrad_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 31
  %6 = select i1 %5, i64 %4, i64 31
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = ashr i32 %10, %7
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, %7
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = ashr i32 %17, %7
  store i32 %18, i32* %16, align 8
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 3
  %20 = load i32, i32* %19, align 4
  %21 = ashr i32 %20, %7
  store i32 %21, i32* %19, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pslld_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  br label %8

8:                                                ; preds = %11, %6
  %9 = phi i64 [ 0, %6 ], [ %13, %11 ]
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %30

11:                                               ; preds = %8
  %12 = getelementptr i8, i8* %7, i64 %9
  store i8 0, i8* %12
  %13 = add i64 %9, 1
  br label %8

14:                                               ; preds = %2
  %15 = trunc i64 %4 to i32
  %16 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %17 = bitcast %union.XMMReg* %0 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = shl i32 %18, %15
  store i32 %19, i32* %17, align 8
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = shl i32 %21, %15
  store i32 %22, i32* %20, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = shl i32 %25, %15
  store i32 %26, i32* %24, align 8
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = shl i32 %28, %15
  store i32 %29, i32* %27, align 4
  br label %30

30:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrlq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  br label %8

8:                                                ; preds = %11, %6
  %9 = phi i64 [ 0, %6 ], [ %13, %11 ]
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %21

11:                                               ; preds = %8
  %12 = getelementptr i8, i8* %7, i64 %9
  store i8 0, i8* %12
  %13 = add i64 %9, 1
  br label %8

14:                                               ; preds = %2
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %16 = load i64, i64* %15, align 8
  %17 = lshr i64 %16, %4
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = lshr i64 %19, %4
  store i64 %20, i64* %18, align 8
  br label %21

21:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psllq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  br label %8

8:                                                ; preds = %11, %6
  %9 = phi i64 [ 0, %6 ], [ %13, %11 ]
  %10 = icmp ult i64 %9, 16
  br i1 %10, label %11, label %21

11:                                               ; preds = %8
  %12 = getelementptr i8, i8* %7, i64 %9
  store i8 0, i8* %12
  %13 = add i64 %9, 1
  br label %8

14:                                               ; preds = %2
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %16, %4
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = shl i64 %19, %4
  store i64 %20, i64* %18, align 8
  br label %21

21:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psrldq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i32, i32* %3, align 8
  %6 = icmp slt i32 %5, 16
  %7 = select i1 %6, i32 %5, i32 16
  %8 = sub i32 16, %7
  br i1 %6, label %9, label %114

9:                                                ; preds = %2
  %10 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %11 = sext i32 %7 to i64
  %12 = sext i32 %8 to i64
  %13 = icmp ugt i64 %12, 1
  %14 = select i1 %13, i64 %12, i64 1
  %15 = icmp ult i64 %14, 32
  br i1 %15, label %16, label %18

16:                                               ; preds = %110, %18, %9
  %17 = phi i64 [ 0, %18 ], [ 0, %9 ], [ %29, %110 ]
  br label %129

18:                                               ; preds = %9
  %19 = icmp ugt i64 %12, 1
  %20 = select i1 %19, i64 %12, i64 1
  %21 = getelementptr i8, i8* %4, i64 %20
  %22 = getelementptr i8, i8* %4, i64 %11
  %23 = add nsw i64 %20, %11
  %24 = getelementptr i8, i8* %4, i64 %23
  %25 = icmp ugt i8* %24, %4
  %26 = icmp ult i8* %22, %21
  %27 = and i1 %25, %26
  br i1 %27, label %16, label %28

28:                                               ; preds = %18
  %29 = and i64 %14, -32
  %30 = add nsw i64 %29, -32
  %31 = lshr exact i64 %30, 5
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 3
  %34 = icmp ult i64 %30, 96
  br i1 %34, label %90, label %35

35:                                               ; preds = %28
  %36 = sub nsw i64 %32, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %87, %37 ]
  %39 = phi i64 [ %36, %35 ], [ %88, %37 ]
  %40 = add nsw i64 %38, %11
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %40
  %42 = bitcast i8* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1, !alias.scope !9
  %44 = getelementptr inbounds i8, i8* %41, i64 16
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1, !alias.scope !9
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %38
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %48, align 1, !alias.scope !12, !noalias !9
  %49 = getelementptr inbounds i8, i8* %47, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %50, align 1, !alias.scope !12, !noalias !9
  %51 = or i64 %38, 32
  %52 = add nsw i64 %51, %11
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1, !alias.scope !9
  %56 = getelementptr inbounds i8, i8* %53, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !9
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %51
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %60, align 1, !alias.scope !12, !noalias !9
  %61 = getelementptr inbounds i8, i8* %59, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %62, align 1, !alias.scope !12, !noalias !9
  %63 = or i64 %38, 64
  %64 = add nsw i64 %63, %11
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !9
  %68 = getelementptr inbounds i8, i8* %65, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !9
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %63
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %72, align 1, !alias.scope !12, !noalias !9
  %73 = getelementptr inbounds i8, i8* %71, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !12, !noalias !9
  %75 = or i64 %38, 96
  %76 = add nsw i64 %75, %11
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %76
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !9
  %80 = getelementptr inbounds i8, i8* %77, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !9
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %75
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %84, align 1, !alias.scope !12, !noalias !9
  %85 = getelementptr inbounds i8, i8* %83, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %86, align 1, !alias.scope !12, !noalias !9
  %87 = add i64 %38, 128
  %88 = add i64 %39, -4
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %37, !llvm.loop !14

90:                                               ; preds = %37, %28
  %91 = phi i64 [ 0, %28 ], [ %87, %37 ]
  %92 = icmp eq i64 %33, 0
  br i1 %92, label %110, label %93

93:                                               ; preds = %90, %93
  %94 = phi i64 [ %107, %93 ], [ %91, %90 ]
  %95 = phi i64 [ %108, %93 ], [ %33, %90 ]
  %96 = add nsw i64 %94, %11
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %96
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !9
  %100 = getelementptr inbounds i8, i8* %97, i64 16
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !9
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %94
  %104 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %99, <16 x i8>* %104, align 1, !alias.scope !12, !noalias !9
  %105 = getelementptr inbounds i8, i8* %103, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %106, align 1, !alias.scope !12, !noalias !9
  %107 = add i64 %94, 32
  %108 = add i64 %95, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %93, !llvm.loop !16

110:                                              ; preds = %93, %90
  %111 = icmp eq i64 %14, %29
  br i1 %111, label %112, label %16

112:                                              ; preds = %129, %110
  %113 = icmp sgt i32 %5, 0
  br i1 %113, label %114, label %137

114:                                              ; preds = %2, %112
  %115 = sext i32 %8 to i64
  %116 = getelementptr i8, i8* %4, i64 %115
  %117 = icmp sgt i32 %8, 15
  %118 = select i1 %117, i32 %8, i32 15
  %119 = add i32 %7, %118
  %120 = add i32 %119, -16
  %121 = zext i32 %120 to i64
  %122 = add nuw nsw i64 %121, 1
  br label %123

123:                                              ; preds = %126, %114
  %124 = phi i64 [ 0, %114 ], [ %128, %126 ]
  %125 = icmp ult i64 %124, %122
  br i1 %125, label %126, label %137

126:                                              ; preds = %123
  %127 = getelementptr i8, i8* %116, i64 %124
  store i8 0, i8* %127
  %128 = add i64 %124, 1
  br label %123

129:                                              ; preds = %16, %129
  %130 = phi i64 [ %135, %129 ], [ %17, %16 ]
  %131 = add nsw i64 %130, %11
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %130
  store i8 %133, i8* %134, align 1
  %135 = add nuw nsw i64 %130, 1
  %136 = icmp ult i64 %135, %12
  br i1 %136, label %129, label %112, !llvm.loop !18

137:                                              ; preds = %123, %112
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pslldq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i32, i32* %3, align 8
  %6 = icmp slt i32 %5, 16
  %7 = select i1 %6, i32 %5, i32 16
  %8 = icmp sgt i32 %7, 15
  br i1 %8, label %112, label %9

9:                                                ; preds = %2
  %10 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %11 = sext i32 %7 to i64
  %12 = sub nsw i64 16, %11
  %13 = icmp ult i64 %12, 16
  br i1 %13, label %14, label %16

14:                                               ; preds = %110, %30, %16, %9
  %15 = phi i64 [ 15, %30 ], [ 15, %16 ], [ 15, %9 ], [ %42, %110 ]
  br label %124

16:                                               ; preds = %9
  %17 = sub nsw i64 15, %11
  %18 = getelementptr %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i8*
  %20 = getelementptr i8, i8* %19, i64 7
  %21 = ptrtoint i8* %20 to i64
  %22 = icmp ugt i64 %17, %21
  %23 = getelementptr %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i8*
  %25 = sub nsw i64 7, %11
  %26 = getelementptr i8, i8* %24, i64 %25
  %27 = ptrtoint i8* %26 to i64
  %28 = icmp ugt i64 %17, %27
  %29 = or i1 %22, %28
  br i1 %29, label %14, label %30

30:                                               ; preds = %16
  %31 = getelementptr i8, i8* %4, i64 %11
  %32 = getelementptr %union.XMMReg, %union.XMMReg* %0, i64 1
  %33 = getelementptr %union.XMMReg, %union.XMMReg* %0, i64 1, i32 0, i64 0
  %34 = bitcast i64* %33 to i8*
  %35 = sub nsw i64 0, %11
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = icmp ult i8* %31, %36
  %38 = icmp ugt %union.XMMReg* %32, %0
  %39 = and i1 %37, %38
  br i1 %39, label %14, label %40

40:                                               ; preds = %30
  %41 = and i64 %12, -16
  %42 = sub nsw i64 15, %41
  %43 = add nsw i64 %41, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %92, label %48

48:                                               ; preds = %40
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %89, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %90, %50 ]
  %53 = sub i64 15, %51
  %54 = sub nsw i64 %53, %11
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %54
  %56 = getelementptr inbounds i8, i8* %55, i64 -15
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !19
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %53
  %60 = getelementptr inbounds i8, i8* %59, i64 -15
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %61, align 1, !alias.scope !22, !noalias !19
  %62 = xor i64 %51, -1
  %63 = sub nsw i64 %62, %11
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %63
  %65 = getelementptr inbounds i8, i8* %64, i64 -15
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !19
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %62
  %69 = getelementptr inbounds i8, i8* %68, i64 -15
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !22, !noalias !19
  %71 = sub nuw nsw i64 -17, %51
  %72 = sub nsw i64 %71, %11
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %72
  %74 = getelementptr inbounds i8, i8* %73, i64 -15
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !19
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %71
  %78 = getelementptr inbounds i8, i8* %77, i64 -15
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !22, !noalias !19
  %80 = sub nuw nsw i64 -33, %51
  %81 = sub nsw i64 %80, %11
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %81
  %83 = getelementptr inbounds i8, i8* %82, i64 -15
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !19
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %80
  %87 = getelementptr inbounds i8, i8* %86, i64 -15
  %88 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %88, align 1, !alias.scope !22, !noalias !19
  %89 = add i64 %51, 64
  %90 = add i64 %52, -4
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %50, !llvm.loop !24

92:                                               ; preds = %50, %40
  %93 = phi i64 [ 0, %40 ], [ %89, %50 ]
  %94 = icmp eq i64 %46, 0
  br i1 %94, label %110, label %95

95:                                               ; preds = %92, %95
  %96 = phi i64 [ %107, %95 ], [ %93, %92 ]
  %97 = phi i64 [ %108, %95 ], [ %46, %92 ]
  %98 = sub i64 15, %96
  %99 = sub nsw i64 %98, %11
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %99
  %101 = getelementptr inbounds i8, i8* %100, i64 -15
  %102 = bitcast i8* %101 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !19
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %98
  %105 = getelementptr inbounds i8, i8* %104, i64 -15
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %106, align 1, !alias.scope !22, !noalias !19
  %107 = add i64 %96, 16
  %108 = add i64 %97, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %95, !llvm.loop !25

110:                                              ; preds = %95, %92
  %111 = icmp eq i64 %12, %41
  br i1 %111, label %112, label %14

112:                                              ; preds = %124, %110, %2
  %113 = icmp sgt i32 %5, 0
  br i1 %113, label %114, label %132

114:                                              ; preds = %112
  %115 = icmp sgt i32 %7, 1
  %116 = select i1 %115, i32 %7, i32 1
  %117 = zext i32 %116 to i64
  br label %118

118:                                              ; preds = %121, %114
  %119 = phi i64 [ 0, %114 ], [ %123, %121 ]
  %120 = icmp ult i64 %119, %117
  br i1 %120, label %121, label %132

121:                                              ; preds = %118
  %122 = getelementptr i8, i8* %4, i64 %119
  store i8 0, i8* %122
  %123 = add i64 %119, 1
  br label %118

124:                                              ; preds = %14, %124
  %125 = phi i64 [ %130, %124 ], [ %15, %14 ]
  %126 = sub nsw i64 %125, %11
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %125
  store i8 %128, i8* %129, align 1
  %130 = add nsw i64 %125, -1
  %131 = icmp sgt i64 %125, %11
  br i1 %131, label %124, label %112, !llvm.loop !26

132:                                              ; preds = %118, %112
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %8, %5
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = add i8 %13, %11
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = add i8 %18, %16
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, %21
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = add i8 %28, %26
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, %31
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = add i8 %38, %36
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = add i8 %43, %41
  store i8 %44, i8* %40, align 1
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i8*
  %47 = load i8, i8* %46, align 8
  %48 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %49 = bitcast i64* %48 to i8*
  %50 = load i8, i8* %49, align 8
  %51 = add i8 %50, %47
  store i8 %51, i8* %46, align 8
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %55 = load i8, i8* %54, align 1
  %56 = add i8 %55, %53
  store i8 %56, i8* %52, align 1
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %58 = load i8, i8* %57, align 2
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %60 = load i8, i8* %59, align 2
  %61 = add i8 %60, %58
  store i8 %61, i8* %57, align 2
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %65 = load i8, i8* %64, align 1
  %66 = add i8 %65, %63
  store i8 %66, i8* %62, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %68 = load i8, i8* %67, align 4
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %70 = load i8, i8* %69, align 4
  %71 = add i8 %70, %68
  store i8 %71, i8* %67, align 4
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %75 = load i8, i8* %74, align 1
  %76 = add i8 %75, %73
  store i8 %76, i8* %72, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %78 = load i8, i8* %77, align 2
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %80 = load i8, i8* %79, align 2
  %81 = add i8 %80, %78
  store i8 %81, i8* %77, align 2
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %85 = load i8, i8* %84, align 1
  %86 = add i8 %85, %83
  store i8 %86, i8* %82, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = add i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = add i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %20, align 2
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = add i16 %30, %27
  store i16 %31, i16* %26, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %35 = load i16, i16* %34, align 2
  %36 = add i16 %35, %33
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %38 = load i16, i16* %37, align 4
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = add i16 %40, %38
  store i16 %41, i16* %37, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, %43
  store i16 %46, i16* %42, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddl_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, %5
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  store i32 %14, i32* %10, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = add i32 %20, %17
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, %23
  store i32 %26, i32* %22, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sub i8 %11, %13
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = sub i8 %16, %18
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = sub i8 %21, %23
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = sub i8 %26, %28
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = sub i8 %31, %33
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = sub i8 %36, %38
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = sub i8 %41, %43
  store i8 %44, i8* %40, align 1
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i8*
  %47 = load i8, i8* %46, align 8
  %48 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %49 = bitcast i64* %48 to i8*
  %50 = load i8, i8* %49, align 8
  %51 = sub i8 %47, %50
  store i8 %51, i8* %46, align 8
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %55 = load i8, i8* %54, align 1
  %56 = sub i8 %53, %55
  store i8 %56, i8* %52, align 1
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %58 = load i8, i8* %57, align 2
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %60 = load i8, i8* %59, align 2
  %61 = sub i8 %58, %60
  store i8 %61, i8* %57, align 2
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %65 = load i8, i8* %64, align 1
  %66 = sub i8 %63, %65
  store i8 %66, i8* %62, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %68 = load i8, i8* %67, align 4
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %70 = load i8, i8* %69, align 4
  %71 = sub i8 %68, %70
  store i8 %71, i8* %67, align 4
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %75 = load i8, i8* %74, align 1
  %76 = sub i8 %73, %75
  store i8 %76, i8* %72, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %78 = load i8, i8* %77, align 2
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %80 = load i8, i8* %79, align 2
  %81 = sub i8 %78, %80
  store i8 %81, i8* %77, align 2
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %85 = load i8, i8* %84, align 1
  %86 = sub i8 %83, %85
  store i8 %86, i8* %82, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sub i16 %11, %13
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = sub i16 %16, %18
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %20, align 2
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = sub i16 %27, %30
  store i16 %31, i16* %26, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %35 = load i16, i16* %34, align 2
  %36 = sub i16 %33, %35
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %38 = load i16, i16* %37, align 4
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = sub i16 %38, %40
  store i16 %41, i16* %37, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = sub i16 %43, %45
  store i16 %46, i16* %42, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubl_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %5, %8
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  store i32 %14, i32* %10, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sub i32 %17, %20
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = sub i32 %23, %25
  store i32 %26, i32* %22, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddusb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %4, align 8
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add nuw nsw i32 %22, %19
  %24 = icmp ult i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %17, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %34, %31
  %36 = icmp ult i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 2
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %46, %43
  %48 = icmp ult i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %41, align 1
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 4
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %58, %55
  %60 = icmp ult i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %53, align 4
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %70, %67
  %72 = icmp ult i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %65, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 2
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %82, %79
  %84 = icmp ult i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %77, align 2
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %94, %91
  %96 = icmp ult i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %89, align 1
  %101 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %102 = bitcast i64* %101 to i8*
  %103 = load i8, i8* %102, align 8
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %106 = bitcast i64* %105 to i8*
  %107 = load i8, i8* %106, align 8
  %108 = zext i8 %107 to i32
  %109 = add nuw nsw i32 %108, %104
  %110 = icmp ult i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %102, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nuw nsw i32 %120, %117
  %122 = icmp ult i32 %121, 255
  %123 = select i1 %122, i32 %121, i32 255
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %115, align 1
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %131 = load i8, i8* %130, align 2
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %132, %129
  %134 = icmp ult i32 %133, 255
  %135 = select i1 %134, i32 %133, i32 255
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %127, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add nuw nsw i32 %144, %141
  %146 = icmp ult i32 %145, 255
  %147 = select i1 %146, i32 %145, i32 255
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %139, align 1
  %151 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %152 = load i8, i8* %151, align 4
  %153 = zext i8 %152 to i32
  %154 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %155 = load i8, i8* %154, align 4
  %156 = zext i8 %155 to i32
  %157 = add nuw nsw i32 %156, %153
  %158 = icmp ult i32 %157, 255
  %159 = select i1 %158, i32 %157, i32 255
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i32 %159, i32 0
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %151, align 4
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = add nuw nsw i32 %168, %165
  %170 = icmp ult i32 %169, 255
  %171 = select i1 %170, i32 %169, i32 255
  %172 = icmp sgt i32 %171, 0
  %173 = select i1 %172, i32 %171, i32 0
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %163, align 1
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %176 = load i8, i8* %175, align 2
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %179 = load i8, i8* %178, align 2
  %180 = zext i8 %179 to i32
  %181 = add nuw nsw i32 %180, %177
  %182 = icmp ult i32 %181, 255
  %183 = select i1 %182, i32 %181, i32 255
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %175, align 2
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = add nuw nsw i32 %192, %189
  %194 = icmp ult i32 %193, 255
  %195 = select i1 %194, i32 %193, i32 255
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %187, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddsb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 -128, i8 127
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i8 %13, i8 %9
  store i8 %18, i8* %4, align 8
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = add i8 %20, %22
  %24 = icmp slt i8 %20, 0
  %25 = icmp slt i8 %22, 0
  %26 = icmp slt i8 %23, 0
  %27 = select i1 %25, i8 -128, i8 127
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i8 %27, i8 %23
  store i8 %32, i8* %19, align 1
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = add i8 %34, %36
  %38 = icmp slt i8 %34, 0
  %39 = icmp slt i8 %36, 0
  %40 = icmp slt i8 %37, 0
  %41 = select i1 %39, i8 -128, i8 127
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i8 %41, i8 %37
  store i8 %46, i8* %33, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = add i8 %48, %50
  %52 = icmp slt i8 %48, 0
  %53 = icmp slt i8 %50, 0
  %54 = icmp slt i8 %51, 0
  %55 = select i1 %53, i8 -128, i8 127
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i8 %55, i8 %51
  store i8 %60, i8* %47, align 1
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %62 = load i8, i8* %61, align 4
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %64 = load i8, i8* %63, align 4
  %65 = add i8 %62, %64
  %66 = icmp slt i8 %62, 0
  %67 = icmp slt i8 %64, 0
  %68 = icmp slt i8 %65, 0
  %69 = select i1 %67, i8 -128, i8 127
  %70 = xor i1 %66, %68
  %71 = xor i1 %66, %67
  %72 = xor i1 %71, true
  %73 = and i1 %70, %72
  %74 = select i1 %73, i8 %69, i8 %65
  store i8 %74, i8* %61, align 4
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %78 = load i8, i8* %77, align 1
  %79 = add i8 %76, %78
  %80 = icmp slt i8 %76, 0
  %81 = icmp slt i8 %78, 0
  %82 = icmp slt i8 %79, 0
  %83 = select i1 %81, i8 -128, i8 127
  %84 = xor i1 %80, %82
  %85 = xor i1 %80, %81
  %86 = xor i1 %85, true
  %87 = and i1 %84, %86
  %88 = select i1 %87, i8 %83, i8 %79
  store i8 %88, i8* %75, align 1
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %90 = load i8, i8* %89, align 2
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %92 = load i8, i8* %91, align 2
  %93 = add i8 %90, %92
  %94 = icmp slt i8 %90, 0
  %95 = icmp slt i8 %92, 0
  %96 = icmp slt i8 %93, 0
  %97 = select i1 %95, i8 -128, i8 127
  %98 = xor i1 %94, %96
  %99 = xor i1 %94, %95
  %100 = xor i1 %99, true
  %101 = and i1 %98, %100
  %102 = select i1 %101, i8 %97, i8 %93
  store i8 %102, i8* %89, align 2
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %106 = load i8, i8* %105, align 1
  %107 = add i8 %104, %106
  %108 = icmp slt i8 %104, 0
  %109 = icmp slt i8 %106, 0
  %110 = icmp slt i8 %107, 0
  %111 = select i1 %109, i8 -128, i8 127
  %112 = xor i1 %108, %110
  %113 = xor i1 %108, %109
  %114 = xor i1 %113, true
  %115 = and i1 %112, %114
  %116 = select i1 %115, i8 %111, i8 %107
  store i8 %116, i8* %103, align 1
  %117 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %118 = bitcast i64* %117 to i8*
  %119 = load i8, i8* %118, align 8
  %120 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8
  %123 = add i8 %119, %122
  %124 = icmp slt i8 %119, 0
  %125 = icmp slt i8 %122, 0
  %126 = icmp slt i8 %123, 0
  %127 = select i1 %125, i8 -128, i8 127
  %128 = xor i1 %124, %126
  %129 = xor i1 %124, %125
  %130 = xor i1 %129, true
  %131 = and i1 %128, %130
  %132 = select i1 %131, i8 %127, i8 %123
  store i8 %132, i8* %118, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %136 = load i8, i8* %135, align 1
  %137 = add i8 %134, %136
  %138 = icmp slt i8 %134, 0
  %139 = icmp slt i8 %136, 0
  %140 = icmp slt i8 %137, 0
  %141 = select i1 %139, i8 -128, i8 127
  %142 = xor i1 %138, %140
  %143 = xor i1 %138, %139
  %144 = xor i1 %143, true
  %145 = and i1 %142, %144
  %146 = select i1 %145, i8 %141, i8 %137
  store i8 %146, i8* %133, align 1
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %148 = load i8, i8* %147, align 2
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %150 = load i8, i8* %149, align 2
  %151 = add i8 %148, %150
  %152 = icmp slt i8 %148, 0
  %153 = icmp slt i8 %150, 0
  %154 = icmp slt i8 %151, 0
  %155 = select i1 %153, i8 -128, i8 127
  %156 = xor i1 %152, %154
  %157 = xor i1 %152, %153
  %158 = xor i1 %157, true
  %159 = and i1 %156, %158
  %160 = select i1 %159, i8 %155, i8 %151
  store i8 %160, i8* %147, align 2
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %164 = load i8, i8* %163, align 1
  %165 = add i8 %162, %164
  %166 = icmp slt i8 %162, 0
  %167 = icmp slt i8 %164, 0
  %168 = icmp slt i8 %165, 0
  %169 = select i1 %167, i8 -128, i8 127
  %170 = xor i1 %166, %168
  %171 = xor i1 %166, %167
  %172 = xor i1 %171, true
  %173 = and i1 %170, %172
  %174 = select i1 %173, i8 %169, i8 %165
  store i8 %174, i8* %161, align 1
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %176 = load i8, i8* %175, align 4
  %177 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %178 = load i8, i8* %177, align 4
  %179 = add i8 %176, %178
  %180 = icmp slt i8 %176, 0
  %181 = icmp slt i8 %178, 0
  %182 = icmp slt i8 %179, 0
  %183 = select i1 %181, i8 -128, i8 127
  %184 = xor i1 %180, %182
  %185 = xor i1 %180, %181
  %186 = xor i1 %185, true
  %187 = and i1 %184, %186
  %188 = select i1 %187, i8 %183, i8 %179
  store i8 %188, i8* %175, align 4
  %189 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %190 = load i8, i8* %189, align 1
  %191 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %192 = load i8, i8* %191, align 1
  %193 = add i8 %190, %192
  %194 = icmp slt i8 %190, 0
  %195 = icmp slt i8 %192, 0
  %196 = icmp slt i8 %193, 0
  %197 = select i1 %195, i8 -128, i8 127
  %198 = xor i1 %194, %196
  %199 = xor i1 %194, %195
  %200 = xor i1 %199, true
  %201 = and i1 %198, %200
  %202 = select i1 %201, i8 %197, i8 %193
  store i8 %202, i8* %189, align 1
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %204 = load i8, i8* %203, align 2
  %205 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %206 = load i8, i8* %205, align 2
  %207 = add i8 %204, %206
  %208 = icmp slt i8 %204, 0
  %209 = icmp slt i8 %206, 0
  %210 = icmp slt i8 %207, 0
  %211 = select i1 %209, i8 -128, i8 127
  %212 = xor i1 %208, %210
  %213 = xor i1 %208, %209
  %214 = xor i1 %213, true
  %215 = and i1 %212, %214
  %216 = select i1 %215, i8 %211, i8 %207
  store i8 %216, i8* %203, align 2
  %217 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %218 = load i8, i8* %217, align 1
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %220 = load i8, i8* %219, align 1
  %221 = add i8 %218, %220
  %222 = icmp slt i8 %218, 0
  %223 = icmp slt i8 %220, 0
  %224 = icmp slt i8 %221, 0
  %225 = select i1 %223, i8 -128, i8 127
  %226 = xor i1 %222, %224
  %227 = xor i1 %222, %223
  %228 = xor i1 %227, true
  %229 = and i1 %226, %228
  %230 = select i1 %229, i8 %225, i8 %221
  store i8 %230, i8* %217, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubusb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %4, align 8
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %17, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 2
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %41, align 1
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 4
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %55, %58
  %60 = icmp slt i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %53, align 4
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = icmp slt i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %65, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 2
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %79, %82
  %84 = icmp slt i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %77, align 2
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %94
  %96 = icmp slt i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %89, align 1
  %101 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %102 = bitcast i64* %101 to i8*
  %103 = load i8, i8* %102, align 8
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %106 = bitcast i64* %105 to i8*
  %107 = load i8, i8* %106, align 8
  %108 = zext i8 %107 to i32
  %109 = sub nsw i32 %104, %108
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %102, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = sub nsw i32 %117, %120
  %122 = icmp slt i32 %121, 255
  %123 = select i1 %122, i32 %121, i32 255
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %115, align 1
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %131 = load i8, i8* %130, align 2
  %132 = zext i8 %131 to i32
  %133 = sub nsw i32 %129, %132
  %134 = icmp slt i32 %133, 255
  %135 = select i1 %134, i32 %133, i32 255
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %127, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = sub nsw i32 %141, %144
  %146 = icmp slt i32 %145, 255
  %147 = select i1 %146, i32 %145, i32 255
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %139, align 1
  %151 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %152 = load i8, i8* %151, align 4
  %153 = zext i8 %152 to i32
  %154 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %155 = load i8, i8* %154, align 4
  %156 = zext i8 %155 to i32
  %157 = sub nsw i32 %153, %156
  %158 = icmp slt i32 %157, 255
  %159 = select i1 %158, i32 %157, i32 255
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i32 %159, i32 0
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %151, align 4
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = sub nsw i32 %165, %168
  %170 = icmp slt i32 %169, 255
  %171 = select i1 %170, i32 %169, i32 255
  %172 = icmp sgt i32 %171, 0
  %173 = select i1 %172, i32 %171, i32 0
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %163, align 1
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %176 = load i8, i8* %175, align 2
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %179 = load i8, i8* %178, align 2
  %180 = zext i8 %179 to i32
  %181 = sub nsw i32 %177, %180
  %182 = icmp slt i32 %181, 255
  %183 = select i1 %182, i32 %181, i32 255
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %175, align 2
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = sub nsw i32 %189, %192
  %194 = icmp slt i32 %193, 255
  %195 = select i1 %194, i32 %193, i32 255
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %187, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubsb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 127, i8 -128
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i8 %13, i8 %9
  store i8 %17, i8* %4, align 8
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = sub i8 %19, %21
  %23 = icmp slt i8 %19, 0
  %24 = icmp slt i8 %21, 0
  %25 = icmp slt i8 %22, 0
  %26 = select i1 %24, i8 127, i8 -128
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i8 %26, i8 %22
  store i8 %30, i8* %18, align 1
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = sub i8 %32, %34
  %36 = icmp slt i8 %32, 0
  %37 = icmp slt i8 %34, 0
  %38 = icmp slt i8 %35, 0
  %39 = select i1 %37, i8 127, i8 -128
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i8 %39, i8 %35
  store i8 %43, i8* %31, align 2
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = sub i8 %45, %47
  %49 = icmp slt i8 %45, 0
  %50 = icmp slt i8 %47, 0
  %51 = icmp slt i8 %48, 0
  %52 = select i1 %50, i8 127, i8 -128
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i8 %52, i8 %48
  store i8 %56, i8* %44, align 1
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %58 = load i8, i8* %57, align 4
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %60 = load i8, i8* %59, align 4
  %61 = sub i8 %58, %60
  %62 = icmp slt i8 %58, 0
  %63 = icmp slt i8 %60, 0
  %64 = icmp slt i8 %61, 0
  %65 = select i1 %63, i8 127, i8 -128
  %66 = xor i1 %62, %64
  %67 = xor i1 %62, %63
  %68 = and i1 %66, %67
  %69 = select i1 %68, i8 %65, i8 %61
  store i8 %69, i8* %57, align 4
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = sub i8 %71, %73
  %75 = icmp slt i8 %71, 0
  %76 = icmp slt i8 %73, 0
  %77 = icmp slt i8 %74, 0
  %78 = select i1 %76, i8 127, i8 -128
  %79 = xor i1 %75, %77
  %80 = xor i1 %75, %76
  %81 = and i1 %79, %80
  %82 = select i1 %81, i8 %78, i8 %74
  store i8 %82, i8* %70, align 1
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %84 = load i8, i8* %83, align 2
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %86 = load i8, i8* %85, align 2
  %87 = sub i8 %84, %86
  %88 = icmp slt i8 %84, 0
  %89 = icmp slt i8 %86, 0
  %90 = icmp slt i8 %87, 0
  %91 = select i1 %89, i8 127, i8 -128
  %92 = xor i1 %88, %90
  %93 = xor i1 %88, %89
  %94 = and i1 %92, %93
  %95 = select i1 %94, i8 %91, i8 %87
  store i8 %95, i8* %83, align 2
  %96 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = sub i8 %97, %99
  %101 = icmp slt i8 %97, 0
  %102 = icmp slt i8 %99, 0
  %103 = icmp slt i8 %100, 0
  %104 = select i1 %102, i8 127, i8 -128
  %105 = xor i1 %101, %103
  %106 = xor i1 %101, %102
  %107 = and i1 %105, %106
  %108 = select i1 %107, i8 %104, i8 %100
  store i8 %108, i8* %96, align 1
  %109 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %110 = bitcast i64* %109 to i8*
  %111 = load i8, i8* %110, align 8
  %112 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %113 = bitcast i64* %112 to i8*
  %114 = load i8, i8* %113, align 8
  %115 = sub i8 %111, %114
  %116 = icmp slt i8 %111, 0
  %117 = icmp slt i8 %114, 0
  %118 = icmp slt i8 %115, 0
  %119 = select i1 %117, i8 127, i8 -128
  %120 = xor i1 %116, %118
  %121 = xor i1 %116, %117
  %122 = and i1 %120, %121
  %123 = select i1 %122, i8 %119, i8 %115
  store i8 %123, i8* %110, align 8
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %125 = load i8, i8* %124, align 1
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %127 = load i8, i8* %126, align 1
  %128 = sub i8 %125, %127
  %129 = icmp slt i8 %125, 0
  %130 = icmp slt i8 %127, 0
  %131 = icmp slt i8 %128, 0
  %132 = select i1 %130, i8 127, i8 -128
  %133 = xor i1 %129, %131
  %134 = xor i1 %129, %130
  %135 = and i1 %133, %134
  %136 = select i1 %135, i8 %132, i8 %128
  store i8 %136, i8* %124, align 1
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %138 = load i8, i8* %137, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %140 = load i8, i8* %139, align 2
  %141 = sub i8 %138, %140
  %142 = icmp slt i8 %138, 0
  %143 = icmp slt i8 %140, 0
  %144 = icmp slt i8 %141, 0
  %145 = select i1 %143, i8 127, i8 -128
  %146 = xor i1 %142, %144
  %147 = xor i1 %142, %143
  %148 = and i1 %146, %147
  %149 = select i1 %148, i8 %145, i8 %141
  store i8 %149, i8* %137, align 2
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %153 = load i8, i8* %152, align 1
  %154 = sub i8 %151, %153
  %155 = icmp slt i8 %151, 0
  %156 = icmp slt i8 %153, 0
  %157 = icmp slt i8 %154, 0
  %158 = select i1 %156, i8 127, i8 -128
  %159 = xor i1 %155, %157
  %160 = xor i1 %155, %156
  %161 = and i1 %159, %160
  %162 = select i1 %161, i8 %158, i8 %154
  store i8 %162, i8* %150, align 1
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %164 = load i8, i8* %163, align 4
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %166 = load i8, i8* %165, align 4
  %167 = sub i8 %164, %166
  %168 = icmp slt i8 %164, 0
  %169 = icmp slt i8 %166, 0
  %170 = icmp slt i8 %167, 0
  %171 = select i1 %169, i8 127, i8 -128
  %172 = xor i1 %168, %170
  %173 = xor i1 %168, %169
  %174 = and i1 %172, %173
  %175 = select i1 %174, i8 %171, i8 %167
  store i8 %175, i8* %163, align 4
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %179 = load i8, i8* %178, align 1
  %180 = sub i8 %177, %179
  %181 = icmp slt i8 %177, 0
  %182 = icmp slt i8 %179, 0
  %183 = icmp slt i8 %180, 0
  %184 = select i1 %182, i8 127, i8 -128
  %185 = xor i1 %181, %183
  %186 = xor i1 %181, %182
  %187 = and i1 %185, %186
  %188 = select i1 %187, i8 %184, i8 %180
  store i8 %188, i8* %176, align 1
  %189 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %190 = load i8, i8* %189, align 2
  %191 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %192 = load i8, i8* %191, align 2
  %193 = sub i8 %190, %192
  %194 = icmp slt i8 %190, 0
  %195 = icmp slt i8 %192, 0
  %196 = icmp slt i8 %193, 0
  %197 = select i1 %195, i8 127, i8 -128
  %198 = xor i1 %194, %196
  %199 = xor i1 %194, %195
  %200 = and i1 %198, %199
  %201 = select i1 %200, i8 %197, i8 %193
  store i8 %201, i8* %189, align 2
  %202 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %205 = load i8, i8* %204, align 1
  %206 = sub i8 %203, %205
  %207 = icmp slt i8 %203, 0
  %208 = icmp slt i8 %205, 0
  %209 = icmp slt i8 %206, 0
  %210 = select i1 %208, i8 127, i8 -128
  %211 = xor i1 %207, %209
  %212 = xor i1 %207, %208
  %213 = and i1 %211, %212
  %214 = select i1 %213, i8 %210, i8 %206
  store i8 %214, i8* %202, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddusw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %22, %19
  %24 = icmp ult i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %17, align 2
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = add nuw nsw i32 %34, %31
  %36 = icmp ult i32 %35, 65535
  %37 = select i1 %36, i32 %35, i32 65535
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 4
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %46, %43
  %48 = icmp ult i32 %47, 65535
  %49 = select i1 %48, i32 %47, i32 65535
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %41, align 2
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i16*
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %58 = bitcast i64* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = zext i16 %59 to i32
  %61 = add nuw nsw i32 %60, %56
  %62 = icmp ult i32 %61, 65535
  %63 = select i1 %62, i32 %61, i32 65535
  %64 = icmp sgt i32 %63, 0
  %65 = select i1 %64, i32 %63, i32 0
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %54, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %72, %69
  %74 = icmp ult i32 %73, 65535
  %75 = select i1 %74, i32 %73, i32 65535
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %67, align 2
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %80 = load i16, i16* %79, align 4
  %81 = zext i16 %80 to i32
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %83 = load i16, i16* %82, align 4
  %84 = zext i16 %83 to i32
  %85 = add nuw nsw i32 %84, %81
  %86 = icmp ult i32 %85, 65535
  %87 = select i1 %86, i32 %85, i32 65535
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %79, align 4
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %96, %93
  %98 = icmp ult i32 %97, 65535
  %99 = select i1 %98, i32 %97, i32 65535
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* %91, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_paddsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 -32768, i16 32767
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i16 %13, i16 %9
  store i16 %18, i16* %4, align 8
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = add i16 %20, %22
  %24 = icmp slt i16 %20, 0
  %25 = icmp slt i16 %22, 0
  %26 = icmp slt i16 %23, 0
  %27 = select i1 %25, i16 -32768, i16 32767
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i16 %27, i16 %23
  store i16 %32, i16* %19, align 2
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %33, align 4
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %47, align 2
  %61 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %62 = bitcast i64* %61 to i16*
  %63 = load i16, i16* %62, align 8
  %64 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %65 = bitcast i64* %64 to i16*
  %66 = load i16, i16* %65, align 8
  %67 = add i16 %63, %66
  %68 = icmp slt i16 %63, 0
  %69 = icmp slt i16 %66, 0
  %70 = icmp slt i16 %67, 0
  %71 = select i1 %69, i16 -32768, i16 32767
  %72 = xor i1 %68, %70
  %73 = xor i1 %68, %69
  %74 = xor i1 %73, true
  %75 = and i1 %72, %74
  %76 = select i1 %75, i16 %71, i16 %67
  store i16 %76, i16* %62, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %78 = load i16, i16* %77, align 2
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = add i16 %78, %80
  %82 = icmp slt i16 %78, 0
  %83 = icmp slt i16 %80, 0
  %84 = icmp slt i16 %81, 0
  %85 = select i1 %83, i16 -32768, i16 32767
  %86 = xor i1 %82, %84
  %87 = xor i1 %82, %83
  %88 = xor i1 %87, true
  %89 = and i1 %86, %88
  %90 = select i1 %89, i16 %85, i16 %81
  store i16 %90, i16* %77, align 2
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %92 = load i16, i16* %91, align 4
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %94 = load i16, i16* %93, align 4
  %95 = add i16 %92, %94
  %96 = icmp slt i16 %92, 0
  %97 = icmp slt i16 %94, 0
  %98 = icmp slt i16 %95, 0
  %99 = select i1 %97, i16 -32768, i16 32767
  %100 = xor i1 %96, %98
  %101 = xor i1 %96, %97
  %102 = xor i1 %101, true
  %103 = and i1 %100, %102
  %104 = select i1 %103, i16 %99, i16 %95
  store i16 %104, i16* %91, align 4
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %108 = load i16, i16* %107, align 2
  %109 = add i16 %106, %108
  %110 = icmp slt i16 %106, 0
  %111 = icmp slt i16 %108, 0
  %112 = icmp slt i16 %109, 0
  %113 = select i1 %111, i16 -32768, i16 32767
  %114 = xor i1 %110, %112
  %115 = xor i1 %110, %111
  %116 = xor i1 %115, true
  %117 = and i1 %114, %116
  %118 = select i1 %117, i16 %113, i16 %109
  store i16 %118, i16* %105, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubusw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %17, align 2
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 65535
  %37 = select i1 %36, i32 %35, i32 65535
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 4
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 65535
  %49 = select i1 %48, i32 %47, i32 65535
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %41, align 2
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i16*
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %58 = bitcast i64* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = zext i16 %59 to i32
  %61 = sub nsw i32 %56, %60
  %62 = icmp slt i32 %61, 65535
  %63 = select i1 %62, i32 %61, i32 65535
  %64 = icmp sgt i32 %63, 0
  %65 = select i1 %64, i32 %63, i32 0
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %54, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = sub nsw i32 %69, %72
  %74 = icmp slt i32 %73, 65535
  %75 = select i1 %74, i32 %73, i32 65535
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %67, align 2
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %80 = load i16, i16* %79, align 4
  %81 = zext i16 %80 to i32
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %83 = load i16, i16* %82, align 4
  %84 = zext i16 %83 to i32
  %85 = sub nsw i32 %81, %84
  %86 = icmp slt i32 %85, 65535
  %87 = select i1 %86, i32 %85, i32 65535
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %79, align 4
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = sub nsw i32 %93, %96
  %98 = icmp slt i32 %97, 65535
  %99 = select i1 %98, i32 %97, i32 65535
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* %91, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psubsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 32767, i16 -32768
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i16 %13, i16 %9
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = sub i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 32767, i16 -32768
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i16 %26, i16 %22
  store i16 %30, i16* %18, align 2
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %31, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %44, align 2
  %57 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %58 = bitcast i64* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8
  %63 = sub i16 %59, %62
  %64 = icmp slt i16 %59, 0
  %65 = icmp slt i16 %62, 0
  %66 = icmp slt i16 %63, 0
  %67 = select i1 %65, i16 32767, i16 -32768
  %68 = xor i1 %64, %66
  %69 = xor i1 %64, %65
  %70 = and i1 %68, %69
  %71 = select i1 %70, i16 %67, i16 %63
  store i16 %71, i16* %58, align 8
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %75 = load i16, i16* %74, align 2
  %76 = sub i16 %73, %75
  %77 = icmp slt i16 %73, 0
  %78 = icmp slt i16 %75, 0
  %79 = icmp slt i16 %76, 0
  %80 = select i1 %78, i16 32767, i16 -32768
  %81 = xor i1 %77, %79
  %82 = xor i1 %77, %78
  %83 = and i1 %81, %82
  %84 = select i1 %83, i16 %80, i16 %76
  store i16 %84, i16* %72, align 2
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %86 = load i16, i16* %85, align 4
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %88 = load i16, i16* %87, align 4
  %89 = sub i16 %86, %88
  %90 = icmp slt i16 %86, 0
  %91 = icmp slt i16 %88, 0
  %92 = icmp slt i16 %89, 0
  %93 = select i1 %91, i16 32767, i16 -32768
  %94 = xor i1 %90, %92
  %95 = xor i1 %90, %91
  %96 = and i1 %94, %95
  %97 = select i1 %96, i16 %93, i16 %89
  store i16 %97, i16* %85, align 4
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %99, %101
  %103 = icmp slt i16 %99, 0
  %104 = icmp slt i16 %101, 0
  %105 = icmp slt i16 %102, 0
  %106 = select i1 %104, i16 32767, i16 -32768
  %107 = xor i1 %103, %105
  %108 = xor i1 %103, %104
  %109 = and i1 %107, %108
  %110 = select i1 %109, i16 %106, i16 %102
  store i16 %110, i16* %98, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminub_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ult i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ult i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ult i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ult i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ult i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ult i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ult i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp ult i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp ult i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp ult i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp ult i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp ult i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp ult i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp ult i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp ult i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxub_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ugt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ugt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ugt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ugt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ugt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ugt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ugt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp ugt i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp ugt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp ugt i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp ugt i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp ugt i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp ugt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp ugt i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp ugt i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp slt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp slt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp slt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp slt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp slt i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp slt i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp slt i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp slt i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp sgt i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp sgt i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp sgt i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp sgt i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pand_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pandn_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = xor i64 %4, -1
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, %5
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = xor i64 %10, -1
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, %11
  store i64 %14, i64* %9, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_por_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = or i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pxor_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = xor i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp sgt i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp sgt i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp sgt i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp sgt i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp sgt i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp sgt i8 %55, %58
  %60 = sext i1 %59 to i8
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp sgt i8 %62, %64
  %66 = sext i1 %65 to i8
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp sgt i8 %68, %70
  %72 = sext i1 %71 to i8
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp sgt i8 %74, %76
  %78 = sext i1 %77 to i8
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp sgt i8 %80, %82
  %84 = sext i1 %83 to i8
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp sgt i8 %86, %88
  %90 = sext i1 %89 to i8
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp sgt i8 %92, %94
  %96 = sext i1 %95 to i8
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp sgt i8 %98, %100
  %102 = sext i1 %101 to i8
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp sgt i16 %31, %34
  %36 = sext i1 %35 to i16
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp sgt i16 %38, %40
  %42 = sext i1 %41 to i16
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp sgt i16 %44, %46
  %48 = sext i1 %47 to i16
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp sgt i16 %50, %52
  %54 = sext i1 %53 to i16
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtl_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %19, %22
  %24 = sext i1 %23 to i32
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  %30 = sext i1 %29 to i32
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeqb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp eq i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp eq i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp eq i8 %55, %58
  %60 = sext i1 %59 to i8
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %62, %64
  %66 = sext i1 %65 to i8
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp eq i8 %68, %70
  %72 = sext i1 %71 to i8
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %74, %76
  %78 = sext i1 %77 to i8
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp eq i8 %80, %82
  %84 = sext i1 %83 to i8
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %86, %88
  %90 = sext i1 %89 to i8
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp eq i8 %92, %94
  %96 = sext i1 %95 to i8
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %98, %100
  %102 = sext i1 %101 to i8
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeqw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp eq i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp eq i16 %31, %34
  %36 = sext i1 %35 to i16
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp eq i16 %38, %40
  %42 = sext i1 %41 to i16
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp eq i16 %44, %46
  %48 = sext i1 %47 to i16
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp eq i16 %50, %52
  %54 = sext i1 %53 to i16
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeql_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %19, %22
  %24 = sext i1 %23 to i32
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  %30 = sext i1 %29 to i32
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmullw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = mul i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = mul i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = mul i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = mul i16 %23, %21
  store i16 %24, i16* %20, align 2
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = mul i16 %30, %27
  store i16 %31, i16* %26, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %35 = load i16, i16* %34, align 2
  %36 = mul i16 %35, %33
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %38 = load i16, i16* %37, align 4
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = mul i16 %40, %38
  store i16 %41, i16* %37, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = mul i16 %45, %43
  store i16 %46, i16* %42, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhuw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = mul nuw nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nuw nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = zext i16 %27 to i32
  %29 = mul nuw nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i16*
  %43 = load i16, i16* %42, align 8
  %44 = zext i16 %43 to i32
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %48, %44
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %42, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %57, %54
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %52, align 2
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %62 = load i16, i16* %61, align 4
  %63 = zext i16 %62 to i32
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %65 = load i16, i16* %64, align 4
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %63
  %68 = lshr i32 %67, 16
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %61, align 4
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = mul nuw nsw i32 %75, %72
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %70, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = mul nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i16*
  %43 = load i16, i16* %42, align 8
  %44 = sext i16 %43 to i32
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = sext i16 %47 to i32
  %49 = mul nsw i32 %48, %44
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %42, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, %54
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %52, align 2
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %62 = load i16, i16* %61, align 4
  %63 = sext i16 %62 to i32
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %65 = load i16, i16* %64, align 4
  %66 = sext i16 %65 to i32
  %67 = mul nsw i32 %66, %63
  %68 = lshr i32 %67, 16
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %61, align 4
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = mul nsw i32 %75, %72
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %70, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pavgb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %6, 1
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 1
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %4, align 8
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %17, 1
  %22 = add nuw nsw i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %15, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %25, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %35, align 1
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %47, 1
  %52 = add nuw nsw i32 %51, %50
  %53 = lshr i32 %52, 1
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %45, align 4
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %57, 1
  %62 = add nuw nsw i32 %61, %60
  %63 = lshr i32 %62, 1
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %55, align 1
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %65, align 2
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %77, 1
  %82 = add nuw nsw i32 %81, %80
  %83 = lshr i32 %82, 1
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %75, align 1
  %85 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 8
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %90 = bitcast i64* %89 to i8*
  %91 = load i8, i8* %90, align 8
  %92 = zext i8 %91 to i32
  %93 = add nuw nsw i32 %88, 1
  %94 = add nuw nsw i32 %93, %92
  %95 = lshr i32 %94, 1
  %96 = trunc i32 %95 to i8
  store i8 %96, i8* %86, align 8
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %99, 1
  %104 = add nuw nsw i32 %103, %102
  %105 = lshr i32 %104, 1
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %97, align 1
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = zext i8 %108 to i32
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %111 = load i8, i8* %110, align 2
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %109, 1
  %114 = add nuw nsw i32 %113, %112
  %115 = lshr i32 %114, 1
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %107, align 2
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, 1
  %124 = add nuw nsw i32 %123, %122
  %125 = lshr i32 %124, 1
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %117, align 1
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %128 = load i8, i8* %127, align 4
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %131 = load i8, i8* %130, align 4
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %129, 1
  %134 = add nuw nsw i32 %133, %132
  %135 = lshr i32 %134, 1
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %127, align 4
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %139, 1
  %144 = add nuw nsw i32 %143, %142
  %145 = lshr i32 %144, 1
  %146 = trunc i32 %145 to i8
  store i8 %146, i8* %137, align 1
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %148 = load i8, i8* %147, align 2
  %149 = zext i8 %148 to i32
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %151 = load i8, i8* %150, align 2
  %152 = zext i8 %151 to i32
  %153 = add nuw nsw i32 %149, 1
  %154 = add nuw nsw i32 %153, %152
  %155 = lshr i32 %154, 1
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %147, align 2
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %159, 1
  %164 = add nuw nsw i32 %163, %162
  %165 = lshr i32 %164, 1
  %166 = trunc i32 %165 to i8
  store i8 %166, i8* %157, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pavgw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %6, 1
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 1
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nuw nsw i32 %17, 1
  %22 = add nuw nsw i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, 1
  %54 = add nuw nsw i32 %53, %52
  %55 = lshr i32 %54, 1
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %46, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %59, 1
  %64 = add nuw nsw i32 %63, %62
  %65 = lshr i32 %64, 1
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %57, align 2
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %71 = load i16, i16* %70, align 4
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %69, 1
  %74 = add nuw nsw i32 %73, %72
  %75 = lshr i32 %74, 1
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %67, align 4
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %79, 1
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 1
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %77, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmuludq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = bitcast %union.XMMReg* %0 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = mul nuw i64 %8, %5
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = mul nuw i64 %18, %14
  store i64 %19, i64* %15, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaddwd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %5 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %6 = bitcast %union.XMMReg* %1 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = bitcast %union.XMMReg* %0 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %7 to i32
  %15 = sext i16 %9 to i32
  %16 = mul nsw i32 %15, %14
  %17 = sext i16 %11 to i32
  %18 = sext i16 %13 to i32
  %19 = mul nsw i32 %18, %17
  %20 = add nsw i32 %19, %16
  %21 = bitcast %union.XMMReg* %0 to i32*
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 2
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %23 to i32
  %31 = sext i16 %25 to i32
  %32 = mul nsw i32 %31, %30
  %33 = sext i16 %27 to i32
  %34 = sext i16 %29 to i32
  %35 = mul nsw i32 %34, %33
  %36 = add nsw i32 %35, %32
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %39 = bitcast i64* %38 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 5
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %40 to i32
  %49 = sext i16 %43 to i32
  %50 = mul nsw i32 %49, %48
  %51 = sext i16 %45 to i32
  %52 = sext i16 %47 to i32
  %53 = mul nsw i32 %52, %51
  %54 = add nsw i32 %53, %50
  %55 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %56 = bitcast i64* %55 to i32*
  store i32 %54, i32* %56, align 4
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 6
  %60 = load i16, i16* %59, align 2
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 7
  %64 = load i16, i16* %63, align 2
  %65 = sext i16 %58 to i32
  %66 = sext i16 %60 to i32
  %67 = mul nsw i32 %66, %65
  %68 = sext i16 %62 to i32
  %69 = sext i16 %64 to i32
  %70 = mul nsw i32 %69, %68
  %71 = add nsw i32 %70, %67
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  store i32 %71, i32* %72, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psadbw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %17, %20
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = add nuw nsw i32 %24, %14
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %27 = load i8, i8* %26, align 2
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = sub nsw i32 %28, %31
  %33 = icmp slt i32 %32, 0
  %34 = sub nsw i32 0, %32
  %35 = select i1 %33, i32 %34, i32 %32
  %36 = add nuw nsw i32 %25, %35
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = icmp slt i32 %43, 0
  %45 = sub nsw i32 0, %43
  %46 = select i1 %44, i32 %45, i32 %43
  %47 = add nuw nsw i32 %36, %46
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %50, %53
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = add nuw nsw i32 %47, %57
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = sub nsw i32 %61, %64
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 0, %65
  %68 = select i1 %66, i32 %67, i32 %65
  %69 = add nuw nsw i32 %58, %68
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %71 = load i8, i8* %70, align 2
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %74 = load i8, i8* %73, align 2
  %75 = zext i8 %74 to i32
  %76 = sub nsw i32 %72, %75
  %77 = icmp slt i32 %76, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %78, i32 %76
  %80 = add nuw nsw i32 %69, %79
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = sub nsw i32 %83, %86
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = add nuw nsw i32 %80, %90
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %92, i64* %93, align 8
  %94 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %95 = bitcast i64* %94 to i8*
  %96 = load i8, i8* %95, align 8
  %97 = zext i8 %96 to i32
  %98 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %99 = bitcast i64* %98 to i8*
  %100 = load i8, i8* %99, align 8
  %101 = zext i8 %100 to i32
  %102 = sub nsw i32 %97, %101
  %103 = icmp slt i32 %102, 0
  %104 = sub nsw i32 0, %102
  %105 = select i1 %103, i32 %104, i32 %102
  %106 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sub nsw i32 %108, %111
  %113 = icmp slt i32 %112, 0
  %114 = sub nsw i32 0, %112
  %115 = select i1 %113, i32 %114, i32 %112
  %116 = add nuw nsw i32 %115, %105
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %118 = load i8, i8* %117, align 2
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %121 = load i8, i8* %120, align 2
  %122 = zext i8 %121 to i32
  %123 = sub nsw i32 %119, %122
  %124 = icmp slt i32 %123, 0
  %125 = sub nsw i32 0, %123
  %126 = select i1 %124, i32 %125, i32 %123
  %127 = add nuw nsw i32 %116, %126
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sub nsw i32 %130, %133
  %135 = icmp slt i32 %134, 0
  %136 = sub nsw i32 0, %134
  %137 = select i1 %135, i32 %136, i32 %134
  %138 = add nuw nsw i32 %127, %137
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %140 = load i8, i8* %139, align 4
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %143 = load i8, i8* %142, align 4
  %144 = zext i8 %143 to i32
  %145 = sub nsw i32 %141, %144
  %146 = icmp slt i32 %145, 0
  %147 = sub nsw i32 0, %145
  %148 = select i1 %146, i32 %147, i32 %145
  %149 = add nuw nsw i32 %138, %148
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = sub nsw i32 %152, %155
  %157 = icmp slt i32 %156, 0
  %158 = sub nsw i32 0, %156
  %159 = select i1 %157, i32 %158, i32 %156
  %160 = add nuw nsw i32 %149, %159
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %162 = load i8, i8* %161, align 2
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %165 = load i8, i8* %164, align 2
  %166 = zext i8 %165 to i32
  %167 = sub nsw i32 %163, %166
  %168 = icmp slt i32 %167, 0
  %169 = sub nsw i32 0, %167
  %170 = select i1 %168, i32 %169, i32 %167
  %171 = add nuw nsw i32 %160, %170
  %172 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = sub nsw i32 %174, %177
  %179 = icmp slt i32 %178, 0
  %180 = sub nsw i32 0, %178
  %181 = select i1 %179, i32 %180, i32 %178
  %182 = add nuw nsw i32 %171, %181
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %94, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maskmov_xmm(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %5 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %6 = bitcast %union.XMMReg* %1 to i8*
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = bitcast %union.XMMReg* %0 to i8*
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %10, i32 %2, i32 %13)
  br label %14

14:                                               ; preds = %3, %9
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %14
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = add i32 %2, 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %19, i32 %20, i32 %23)
  br label %24

24:                                               ; preds = %18, %14
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = add i32 %2, 2
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %29, i32 %30, i32 %33)
  br label %34

34:                                               ; preds = %28, %24
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i32 %2, 3
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %39, i32 %40, i32 %43)
  br label %44

44:                                               ; preds = %38, %34
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = add i32 %2, 4
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %49, i32 %50, i32 %53)
  br label %54

54:                                               ; preds = %48, %44
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = add i32 %2, 5
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %59, i32 %60, i32 %63)
  br label %64

64:                                               ; preds = %58, %54
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = add i32 %2, 6
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 6
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %69, i32 %70, i32 %73)
  br label %74

74:                                               ; preds = %68, %64
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %84

78:                                               ; preds = %74
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = add i32 %2, 7
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %79, i32 %80, i32 %83)
  br label %84

84:                                               ; preds = %78, %74
  %85 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 1
  %88 = icmp slt i8 %87, 0
  br i1 %88, label %89, label %96

89:                                               ; preds = %84
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = add i32 %2, 8
  %92 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %93 = bitcast i64* %92 to i8*
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %90, i32 %91, i32 %95)
  br label %96

96:                                               ; preds = %89, %84
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %96
  %101 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %102 = add i32 %2, 9
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 9
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %101, i32 %102, i32 %105)
  br label %106

106:                                              ; preds = %100, %96
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 10
  %108 = load i8, i8* %107, align 1
  %109 = icmp slt i8 %108, 0
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %112 = add i32 %2, 10
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 10
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %111, i32 %112, i32 %115)
  br label %116

116:                                              ; preds = %110, %106
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = icmp slt i8 %118, 0
  br i1 %119, label %120, label %126

120:                                              ; preds = %116
  %121 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %122 = add i32 %2, 11
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 11
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %121, i32 %122, i32 %125)
  br label %126

126:                                              ; preds = %120, %116
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 12
  %128 = load i8, i8* %127, align 1
  %129 = icmp slt i8 %128, 0
  br i1 %129, label %130, label %136

130:                                              ; preds = %126
  %131 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %132 = add i32 %2, 12
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 12
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %131, i32 %132, i32 %135)
  br label %136

136:                                              ; preds = %130, %126
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 13
  %138 = load i8, i8* %137, align 1
  %139 = icmp slt i8 %138, 0
  br i1 %139, label %140, label %146

140:                                              ; preds = %136
  %141 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %142 = add i32 %2, 13
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 13
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %141, i32 %142, i32 %145)
  br label %146

146:                                              ; preds = %140, %136
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 14
  %148 = load i8, i8* %147, align 1
  %149 = icmp slt i8 %148, 0
  br i1 %149, label %150, label %156

150:                                              ; preds = %146
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = add i32 %2, 14
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 14
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %151, i32 %152, i32 %155)
  br label %156

156:                                              ; preds = %150, %146
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  %158 = load i8, i8* %157, align 1
  %159 = icmp slt i8 %158, 0
  br i1 %159, label %160, label %166

160:                                              ; preds = %156
  %161 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %162 = add i32 %2, 15
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 15
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* %161, i32 %162, i32 %165)
  br label %166

166:                                              ; preds = %160, %156
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @helper_movl_mm_T0_xmm(%union.XMMReg* nocapture %0, i32 %1) local_unnamed_addr #1 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_shufps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %15 = lshr i32 %2, 4
  %16 = and i32 %15, 3
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = lshr i32 %2, 6
  %21 = and i32 %20, 3
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %union.XMMReg* %0 to i8*
  %26 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %26, align 8
  %27 = getelementptr inbounds i8, i8* %25, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %13, i32* %28, align 4
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i32*
  store i32 %19, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %25, i64 12
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_shufpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 %5
  %7 = load i64, i64* %6, align 8
  %8 = lshr i32 %2, 1
  %9 = and i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 %10
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %13, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %12, i64* %14, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pshufd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = lshr i32 %2, 4
  %15 = and i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %2, 6
  %20 = and i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = bitcast %union.XMMReg* %0 to i8*
  %25 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 %13, i32* %27, align 4
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i32*
  store i32 %18, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 %23, i32* %31, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pshuflw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = lshr i32 %2, 4
  %15 = and i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = lshr i32 %2, 6
  %20 = and i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %union.XMMReg* %0 to i8*
  %27 = bitcast %union.XMMReg* %0 to i16*
  store i16 %8, i16* %27, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %13, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %26, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %18, i16* %31, align 4
  %32 = getelementptr inbounds i8, i8* %26, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %23, i16* %33, align 2
  %34 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %25, i64* %34, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pshufhw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = and i32 %2, 3
  %8 = or i32 %7, 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = lshr i32 %2, 2
  %13 = and i32 %12, 3
  %14 = or i32 %13, 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = lshr i32 %2, 4
  %19 = and i32 %18, 3
  %20 = or i32 %19, 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = lshr i32 %2, 6
  %25 = and i32 %24, 3
  %26 = or i32 %25, 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = bitcast %union.XMMReg* %0 to i8*
  %31 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %5, i64* %31, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  store i16 %11, i16* %33, align 8
  %34 = getelementptr inbounds i8, i8* %30, i64 10
  %35 = bitcast i8* %34 to i16*
  store i16 %17, i16* %35, align 2
  %36 = getelementptr inbounds i8, i8* %30, i64 12
  %37 = bitcast i8* %36 to i16*
  store i16 %23, i16* %37, align 4
  %38 = getelementptr inbounds i8, i8* %30, i64 14
  %39 = bitcast i8* %38 to i16*
  store i16 %29, i16* %39, align 2
  ret void
}

; Function Attrs: uwtable
define void @helper_addps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_add(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_add(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_add(i32 %21, i32 %24, %struct.float_status* nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_add(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_addss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_add(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_addpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_add(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_addsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_add(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_subps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_sub(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_sub(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_sub(i32 %21, i32 %24, %struct.float_status* nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_sub(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_subss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_sub(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_subpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_sub(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_subsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_mulps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_mul(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_mul(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_mul(i32 %21, i32 %24, %struct.float_status* nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_mul(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_mulss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_mul(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_mulpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_mul(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_mul(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_mulsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_mul(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_div(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_div(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_div(i32 %21, i32 %24, %struct.float_status* nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_div(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_divss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_div(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_div(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_div(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_div(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_minps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32* %7, i32* %4
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %4, align 8
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13
  %21 = tail call i32 @float32_lt(i32 %16, i32 %18, %struct.float_status* nonnull %20)
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32* %17, i32* %15
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %15, align 4
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 13
  %33 = tail call i32 @float32_lt(i32 %27, i32 %30, %struct.float_status* nonnull %32)
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32* %29, i32* %26
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %26, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %40 = load i32, i32* %39, align 4
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 13
  %43 = tail call i32 @float32_lt(i32 %38, i32 %40, %struct.float_status* nonnull %42)
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i32* %39, i32* %37
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %37, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_minss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32* %5, i32* %3
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_minpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %5, i64* %3
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %3, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 13
  %19 = tail call i32 @float64_lt(i64 %14, i64 %16, %struct.float_status* nonnull %18)
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i64* %15, i64* %13
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %13, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_minsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %5, i64* %3
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maxps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32* %4, i32* %7
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %7, align 8
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13
  %21 = tail call i32 @float32_lt(i32 %16, i32 %18, %struct.float_status* nonnull %20)
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32* %15, i32* %17
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %17, align 4
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 13
  %33 = tail call i32 @float32_lt(i32 %27, i32 %30, %struct.float_status* nonnull %32)
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32* %26, i32* %29
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %29, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %40 = load i32, i32* %39, align 4
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 13
  %43 = tail call i32 @float32_lt(i32 %38, i32 %40, %struct.float_status* nonnull %42)
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i32* %37, i32* %39
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %39, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_maxss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %0 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32* %3, i32* %5
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maxpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %3, i64* %5
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %5, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 13
  %19 = tail call i32 @float64_lt(i64 %14, i64 %16, %struct.float_status* nonnull %18)
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i64* %13, i64* %15
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maxsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %3, i64* %5
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_sqrt(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_sqrt(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_sqrt(i32 %19, %struct.float_status* nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_sqrt(i32 %26, %struct.float_status* nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float32_sqrt(i32 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i64 @float64_sqrt(i64 %4, %struct.float_status* nonnull %6)
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 13
  %13 = tail call i64 @float64_sqrt(i64 %10, %struct.float_status* nonnull %12)
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i64 @float64_sqrt(i64 %4, %struct.float_status* nonnull %6)
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtps2pd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i64 @float32_to_float64(i32 %5, %struct.float_status* nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %10, i64* %11, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i64 @float32_to_float64(i32 %7, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpd2ps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_float32(i64 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_float32(i64 %11, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtss2sd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i64 @float32_to_float64(i32 %4, %struct.float_status* nonnull %6)
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsd2ss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_float32(i64 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtdq2ps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @int32_to_float32(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @int32_to_float32(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @int32_to_float32(i32 %19, %struct.float_status* nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @int32_to_float32(i32 %26, %struct.float_status* nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtdq2pd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i64 @int32_to_float64(i32 %5, %struct.float_status* nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %10, i64* %11, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i64 @int32_to_float64(i32 %7, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpi2ps(%union.XMMReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @int32_to_float32(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @int32_to_float32(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpi2pd(%union.XMMReg* nocapture %0, %union.MMXReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i64 @int32_to_float64(i32 %5, %struct.float_status* nonnull %7)
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i64 @int32_to_float64(i32 %11, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsi2ss(%union.XMMReg* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 13
  %5 = tail call i32 @int32_to_float32(i32 %1, %struct.float_status* nonnull %4)
  %6 = bitcast %union.XMMReg* %0 to i32*
  store i32 %5, i32* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsi2sd(%union.XMMReg* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 13
  %5 = tail call i64 @int32_to_float64(i32 %1, %struct.float_status* nonnull %4)
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtps2dq(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_to_int32(i32 %19, %struct.float_status* nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_to_int32(i32 %26, %struct.float_status* nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpd2dq(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32(i64 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32(i64 %11, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtps2pi(%union.MMXReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpd2pi(%union.MMXReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32(i64 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32(i64 %11, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define i32 @helper_cvtss2si(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = bitcast %union.XMMReg* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float32_to_int32(i32 %3, %struct.float_status* nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define i32 @helper_cvtsd2si(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float64_to_int32(i64 %3, %struct.float_status* nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define void @helper_cvttps2dq(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32_round_to_zero(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_to_int32_round_to_zero(i32 %19, %struct.float_status* nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_to_int32_round_to_zero(i32 %26, %struct.float_status* nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvttpd2dq(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32_round_to_zero(i64 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32_round_to_zero(i64 %11, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvttps2pi(%union.MMXReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32_round_to_zero(i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvttpd2pi(%union.MMXReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32_round_to_zero(i64 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32_round_to_zero(i64 %11, %struct.float_status* nonnull %13)
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define i32 @helper_cvttss2si(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = bitcast %union.XMMReg* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 %3, %struct.float_status* nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define i32 @helper_cvttsd2si(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float64_to_int32_round_to_zero(i64 %3, %struct.float_status* nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define void @helper_rsqrtps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_sqrt(i32 %5, %struct.float_status* nonnull %7)
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_div(i32 1065353216, i32 %8, %struct.float_status* nonnull %10)
  %12 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %13 = bitcast %union.XMMReg* %0 to i32*
  store i32 %11, i32* %13, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_sqrt(i32 %15, %struct.float_status* nonnull %17)
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13
  %21 = tail call i32 @float32_div(i32 1065353216, i32 %18, %struct.float_status* nonnull %20)
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 1
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 13
  %28 = tail call i32 @float32_sqrt(i32 %25, %struct.float_status* nonnull %27)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_div(i32 1065353216, i32 %28, %struct.float_status* nonnull %30)
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i32*
  store i32 %31, i32* %33, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 13
  %38 = tail call i32 @float32_sqrt(i32 %35, %struct.float_status* nonnull %37)
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 13
  %41 = tail call i32 @float32_div(i32 1065353216, i32 %38, %struct.float_status* nonnull %40)
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 3
  store i32 %41, i32* %42, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_rsqrtss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float32_sqrt(i32 %4, %struct.float_status* nonnull %6)
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i32 @float32_div(i32 1065353216, i32 %7, %struct.float_status* nonnull %9)
  %11 = bitcast %union.XMMReg* %0 to i32*
  store i32 %10, i32* %11, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_rcpps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_div(i32 1065353216, i32 %5, %struct.float_status* nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_div(i32 1065353216, i32 %12, %struct.float_status* nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_div(i32 1065353216, i32 %19, %struct.float_status* nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_div(i32 1065353216, i32 %26, %struct.float_status* nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_rcpss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float32_div(i32 1065353216, i32 %4, %struct.float_status* nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_extrq_r(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 0
  %11 = zext i8 %9 to i64
  %12 = shl nsw i64 -1, %11
  %13 = xor i64 %12, -1
  %14 = select i1 %10, i64 -1, i64 %13
  %15 = zext i8 %7 to i64
  %16 = lshr i64 %4, %15
  %17 = and i64 %14, %16
  store i64 %17, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_extrq_i(%union.XMMReg* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i32 %2, 0
  %7 = zext i32 %2 to i64
  %8 = shl nsw i64 -1, %7
  %9 = xor i64 %8, -1
  %10 = select i1 %6, i64 -1, i64 %9
  %11 = zext i32 %1 to i64
  %12 = lshr i64 %5, %11
  %13 = and i64 %12, %10
  store i64 %13, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_insertq_r(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 9
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = icmp eq i8 %10, 0
  %12 = zext i8 %10 to i64
  %13 = shl nsw i64 -1, %12
  %14 = xor i64 %13, -1
  %15 = select i1 %11, i64 -1, i64 %14
  %16 = zext i8 %7 to i64
  %17 = shl i64 %15, %16
  %18 = xor i64 %17, -1
  %19 = and i64 %4, %18
  %20 = and i64 %15, %4
  %21 = shl i64 %20, %16
  %22 = or i64 %19, %21
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %22, i64* %23, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_insertq_i(%union.XMMReg* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i32 %2, 0
  %7 = zext i32 %2 to i64
  %8 = shl nsw i64 -1, %7
  %9 = xor i64 %8, -1
  %10 = select i1 %6, i64 -1, i64 %9
  %11 = zext i32 %1 to i64
  %12 = shl i64 %10, %11
  %13 = xor i64 %12, -1
  %14 = and i64 %5, %13
  %15 = and i64 %5, %10
  %16 = shl i64 %15, %11
  %17 = or i64 %16, %14
  store i64 %17, i64* %4, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_haddps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i32 @float32_add(i32 %5, i32 %7, %struct.float_status* nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_add(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  %19 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %20 = bitcast %union.XMMReg* %1 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 13
  %26 = tail call i32 @float32_add(i32 %21, i32 %23, %struct.float_status* nonnull %25)
  %27 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_add(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  %35 = bitcast %union.XMMReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 %18, i32* %37, align 4
  store i32 %26, i32* %12, align 8
  %38 = getelementptr inbounds i8, i8* %35, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 %34, i32* %39, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_haddpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_add(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %9, i64* %3, align 8
  store i64 %16, i64* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_hsubps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i32 @float32_sub(i32 %5, i32 %7, %struct.float_status* nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_sub(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  %19 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %20 = bitcast %union.XMMReg* %1 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 13
  %26 = tail call i32 @float32_sub(i32 %21, i32 %23, %struct.float_status* nonnull %25)
  %27 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_sub(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  %35 = bitcast %union.XMMReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 %18, i32* %37, align 4
  store i32 %26, i32* %12, align 8
  %38 = getelementptr inbounds i8, i8* %35, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 %34, i32* %39, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_hsubpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_sub(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %9, i64* %3, align 8
  store i64 %16, i64* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_addsubps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_sub(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_add(i32 %13, i32 %15, %struct.float_status* nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_sub(i32 %21, i32 %24, %struct.float_status* nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_add(i32 %29, i32 %31, %struct.float_status* nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_addsubpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 %11, i64 %13, %struct.float_status* nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_eq_quiet(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_eq_quiet(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_eq_quiet(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_eq_quiet(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_eq_quiet(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_eq_quiet(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_lt(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_lt(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_lt(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_lt(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpleps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_le(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_le(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_le(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_le(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpless(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_le(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmplepd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_le(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmplesd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_unordered_quiet(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_unordered_quiet(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_unordered_quiet(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_unordered_quiet(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_unordered_quiet(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_unordered_quiet(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_eq_quiet(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_eq_quiet(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_eq_quiet(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_eq_quiet(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_eq_quiet(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_eq_quiet(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_lt(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_lt(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_lt(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_lt(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnleps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_le(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_le(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_le(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_le(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnless(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_le(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnlepd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_le(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnlesd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordps(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_unordered_quiet(i32 %5, i32 %8, %struct.float_status* nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_unordered_quiet(i32 %15, i32 %17, %struct.float_status* nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_unordered_quiet(i32 %25, i32 %28, %struct.float_status* nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_unordered_quiet(i32 %35, i32 %37, %struct.float_status* nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordss(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_unordered_quiet(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordpd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_unordered_quiet(i64 %13, i64 %15, %struct.float_status* nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordsd(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_ucomiss(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_compare_quiet(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 2
  store i32 %13, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_comiss(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_compare(i32 %4, i32 %6, %struct.float_status* nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 2
  store i32 %13, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_ucomisd(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_compare_quiet(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 2
  store i32 %13, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_comisd(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_compare(i64 %4, i64 %6, %struct.float_status* nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 2
  store i32 %13, i32* %15, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_movmskps(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = lshr i32 %4, 31
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 31
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = bitcast i64* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = lshr i32 %11, 31
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = lshr i32 %14, 31
  %16 = shl nuw nsw i32 %8, 1
  %17 = or i32 %16, %5
  %18 = shl nuw nsw i32 %12, 2
  %19 = or i32 %17, %18
  %20 = shl nuw nsw i32 %15, 3
  %21 = or i32 %19, %20
  ret i32 %21
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_movmskpd(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 31
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 31
  %9 = shl nuw nsw i32 %8, 1
  %10 = or i32 %9, %5
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_pmovmskb_xmm(%union.XMMReg* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %3 = bitcast %union.XMMReg* %0 to i8*
  %4 = load i8, i8* %3, align 8
  %5 = lshr i8 %4, 7
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = lshr i8 %7, 6
  %9 = and i8 %8, 2
  %10 = or i8 %9, %5
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 2
  %12 = load i8, i8* %11, align 2
  %13 = lshr i8 %12, 5
  %14 = and i8 %13, 4
  %15 = or i8 %10, %14
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %17, 4
  %19 = and i8 %18, 8
  %20 = or i8 %15, %19
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = lshr i8 %22, 3
  %24 = and i8 %23, 16
  %25 = or i8 %20, %24
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = lshr i8 %27, 2
  %29 = and i8 %28, 32
  %30 = or i8 %25, %29
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 6
  %32 = load i8, i8* %31, align 2
  %33 = lshr i8 %32, 1
  %34 = and i8 %33, 64
  %35 = or i8 %30, %34
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 7
  %37 = load i8, i8* %36, align 1
  %38 = and i8 %37, -128
  %39 = or i8 %35, %38
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to <8 x i8>*
  %43 = load <8 x i8>, <8 x i8>* %42, align 8
  %.i0 = extractelement <8 x i8> %43, i32 0
  %.i01 = zext i8 %.i0 to i32
  %.i1 = extractelement <8 x i8> %43, i32 1
  %.i12 = zext i8 %.i1 to i32
  %.i2 = extractelement <8 x i8> %43, i32 2
  %.i23 = zext i8 %.i2 to i32
  %.i3 = extractelement <8 x i8> %43, i32 3
  %.i34 = zext i8 %.i3 to i32
  %.i4 = extractelement <8 x i8> %43, i32 4
  %.i45 = zext i8 %.i4 to i32
  %.i5 = extractelement <8 x i8> %43, i32 5
  %.i56 = zext i8 %.i5 to i32
  %.i6 = extractelement <8 x i8> %43, i32 6
  %.i67 = zext i8 %.i6 to i32
  %.i7 = extractelement <8 x i8> %43, i32 7
  %.i78 = zext i8 %.i7 to i32
  %.i09 = shl nuw nsw i32 %.i01, 1
  %.i110 = shl nuw nsw i32 %.i12, 2
  %.i211 = shl nuw nsw i32 %.i23, 3
  %.i312 = shl nuw nsw i32 %.i34, 4
  %.i413 = shl nuw nsw i32 %.i45, 5
  %.i514 = shl nuw nsw i32 %.i56, 6
  %.i615 = shl nuw nsw i32 %.i67, 7
  %.i716 = shl nuw nsw i32 %.i78, 8
  %.i017 = and i32 %.i09, 256
  %.i118 = and i32 %.i110, 512
  %.i219 = and i32 %.i211, 1024
  %.i320 = and i32 %.i312, 2048
  %.i421 = and i32 %.i413, 4096
  %.i522 = and i32 %.i514, 8192
  %.i623 = and i32 %.i615, 16384
  %.i724 = and i32 %.i716, 32768
  %.i025 = or i32 %.i017, %.i421
  %.i126 = or i32 %.i118, %.i522
  %.i227 = or i32 %.i219, %.i623
  %.i328 = or i32 %.i320, %.i724
  %.i429 = or i32 %.i421, undef
  %.i530 = or i32 %.i522, undef
  %.i631 = or i32 %.i623, undef
  %.i732 = or i32 %.i724, undef
  %.i033 = or i32 %.i025, %.i227
  %.i134 = or i32 %.i126, %.i328
  %.i235 = or i32 %.i227, undef
  %.i336 = or i32 %.i328, undef
  %.i437 = or i32 %.i429, undef
  %.i538 = or i32 %.i530, undef
  %.i639 = or i32 %.i631, undef
  %.i740 = or i32 %.i732, undef
  %.i041 = or i32 %.i033, %.i134
  %.i142 = or i32 %.i134, undef
  %.i243 = or i32 %.i235, undef
  %.i344 = or i32 %.i336, undef
  %.i445 = or i32 %.i437, undef
  %.i546 = or i32 %.i538, undef
  %.i647 = or i32 %.i639, undef
  %.i748 = or i32 %.i740, undef
  %.upto0 = insertelement <8 x i32> undef, i32 %.i041, i32 0
  %.upto1 = insertelement <8 x i32> %.upto0, i32 %.i142, i32 1
  %.upto2 = insertelement <8 x i32> %.upto1, i32 %.i243, i32 2
  %.upto3 = insertelement <8 x i32> %.upto2, i32 %.i344, i32 3
  %.upto4 = insertelement <8 x i32> %.upto3, i32 %.i445, i32 4
  %.upto5 = insertelement <8 x i32> %.upto4, i32 %.i546, i32 5
  %.upto6 = insertelement <8 x i32> %.upto5, i32 %.i647, i32 6
  %44 = insertelement <8 x i32> %.upto6, i32 %.i748, i32 7
  %45 = extractelement <8 x i32> %44, i32 0
  %46 = or i32 %45, %40
  ret i32 %46
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packsswb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 8
  %.i0 = extractelement <8 x i16> %4, i32 0
  %.i1 = extractelement <8 x i16> %4, i32 1
  %.i2 = extractelement <8 x i16> %4, i32 2
  %.i3 = extractelement <8 x i16> %4, i32 3
  %.i4 = extractelement <8 x i16> %4, i32 4
  %.i5 = extractelement <8 x i16> %4, i32 5
  %.i6 = extractelement <8 x i16> %4, i32 6
  %.i7 = extractelement <8 x i16> %4, i32 7
  %5 = bitcast %union.XMMReg* %1 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 8
  %.i01 = extractelement <8 x i16> %6, i32 0
  %.i12 = extractelement <8 x i16> %6, i32 1
  %.i23 = extractelement <8 x i16> %6, i32 2
  %.i34 = extractelement <8 x i16> %6, i32 3
  %.i45 = extractelement <8 x i16> %6, i32 4
  %.i56 = extractelement <8 x i16> %6, i32 5
  %.i67 = extractelement <8 x i16> %6, i32 6
  %.i78 = extractelement <8 x i16> %6, i32 7
  %.i09 = sext i16 %.i0 to i32
  %.i110 = sext i16 %.i1 to i32
  %.i211 = sext i16 %.i2 to i32
  %.i312 = sext i16 %.i3 to i32
  %.i413 = sext i16 %.i4 to i32
  %.i514 = sext i16 %.i5 to i32
  %.i615 = sext i16 %.i6 to i32
  %.i716 = sext i16 %.i7 to i32
  %.i8 = sext i16 %.i01 to i32
  %.i9 = sext i16 %.i12 to i32
  %.i10 = sext i16 %.i23 to i32
  %.i11 = sext i16 %.i34 to i32
  %.i1217 = sext i16 %.i45 to i32
  %.i13 = sext i16 %.i56 to i32
  %.i14 = sext i16 %.i67 to i32
  %.i15 = sext i16 %.i78 to i32
  %.i018 = icmp slt i32 %.i09, 127
  %.i119 = icmp slt i32 %.i110, 127
  %.i220 = icmp slt i32 %.i211, 127
  %.i321 = icmp slt i32 %.i312, 127
  %.i422 = icmp slt i32 %.i413, 127
  %.i523 = icmp slt i32 %.i514, 127
  %.i624 = icmp slt i32 %.i615, 127
  %.i725 = icmp slt i32 %.i716, 127
  %.i826 = icmp slt i32 %.i8, 127
  %.i927 = icmp slt i32 %.i9, 127
  %.i1028 = icmp slt i32 %.i10, 127
  %.i1129 = icmp slt i32 %.i11, 127
  %.i1230 = icmp slt i32 %.i1217, 127
  %.i1331 = icmp slt i32 %.i13, 127
  %.i1432 = icmp slt i32 %.i14, 127
  %.i1533 = icmp slt i32 %.i15, 127
  %.i034 = select i1 %.i018, i32 %.i09, i32 127
  %.i135 = select i1 %.i119, i32 %.i110, i32 127
  %.i236 = select i1 %.i220, i32 %.i211, i32 127
  %.i337 = select i1 %.i321, i32 %.i312, i32 127
  %.i438 = select i1 %.i422, i32 %.i413, i32 127
  %.i539 = select i1 %.i523, i32 %.i514, i32 127
  %.i640 = select i1 %.i624, i32 %.i615, i32 127
  %.i741 = select i1 %.i725, i32 %.i716, i32 127
  %.i842 = select i1 %.i826, i32 %.i8, i32 127
  %.i943 = select i1 %.i927, i32 %.i9, i32 127
  %.i1044 = select i1 %.i1028, i32 %.i10, i32 127
  %.i1145 = select i1 %.i1129, i32 %.i11, i32 127
  %.i1246 = select i1 %.i1230, i32 %.i1217, i32 127
  %.i1347 = select i1 %.i1331, i32 %.i13, i32 127
  %.i1448 = select i1 %.i1432, i32 %.i14, i32 127
  %.i1549 = select i1 %.i1533, i32 %.i15, i32 127
  %.i050 = icmp sgt i32 %.i034, -128
  %.i151 = icmp sgt i32 %.i135, -128
  %.i252 = icmp sgt i32 %.i236, -128
  %.i353 = icmp sgt i32 %.i337, -128
  %.i454 = icmp sgt i32 %.i438, -128
  %.i555 = icmp sgt i32 %.i539, -128
  %.i656 = icmp sgt i32 %.i640, -128
  %.i757 = icmp sgt i32 %.i741, -128
  %.i858 = icmp sgt i32 %.i842, -128
  %.i959 = icmp sgt i32 %.i943, -128
  %.i1060 = icmp sgt i32 %.i1044, -128
  %.i1161 = icmp sgt i32 %.i1145, -128
  %.i1262 = icmp sgt i32 %.i1246, -128
  %.i1363 = icmp sgt i32 %.i1347, -128
  %.i1464 = icmp sgt i32 %.i1448, -128
  %.i1565 = icmp sgt i32 %.i1549, -128
  %.i066 = select i1 %.i050, i32 %.i034, i32 -128
  %.i167 = select i1 %.i151, i32 %.i135, i32 -128
  %.i268 = select i1 %.i252, i32 %.i236, i32 -128
  %.i369 = select i1 %.i353, i32 %.i337, i32 -128
  %.i470 = select i1 %.i454, i32 %.i438, i32 -128
  %.i571 = select i1 %.i555, i32 %.i539, i32 -128
  %.i672 = select i1 %.i656, i32 %.i640, i32 -128
  %.i773 = select i1 %.i757, i32 %.i741, i32 -128
  %.i874 = select i1 %.i858, i32 %.i842, i32 -128
  %.i975 = select i1 %.i959, i32 %.i943, i32 -128
  %.i1076 = select i1 %.i1060, i32 %.i1044, i32 -128
  %.i1177 = select i1 %.i1161, i32 %.i1145, i32 -128
  %.i1278 = select i1 %.i1262, i32 %.i1246, i32 -128
  %.i1379 = select i1 %.i1363, i32 %.i1347, i32 -128
  %.i1480 = select i1 %.i1464, i32 %.i1448, i32 -128
  %.i1581 = select i1 %.i1565, i32 %.i1549, i32 -128
  %.i082 = trunc i32 %.i066 to i8
  %.i183 = trunc i32 %.i167 to i8
  %.i284 = trunc i32 %.i268 to i8
  %.i385 = trunc i32 %.i369 to i8
  %.i486 = trunc i32 %.i470 to i8
  %.i587 = trunc i32 %.i571 to i8
  %.i688 = trunc i32 %.i672 to i8
  %.i789 = trunc i32 %.i773 to i8
  %.i890 = trunc i32 %.i874 to i8
  %.i991 = trunc i32 %.i975 to i8
  %.i1092 = trunc i32 %.i1076 to i8
  %.i1193 = trunc i32 %.i1177 to i8
  %.i1294 = trunc i32 %.i1278 to i8
  %.i1395 = trunc i32 %.i1379 to i8
  %.i1496 = trunc i32 %.i1480 to i8
  %.i1597 = trunc i32 %.i1581 to i8
  %.upto0 = insertelement <16 x i8> undef, i8 %.i082, i32 0
  %.upto1 = insertelement <16 x i8> %.upto0, i8 %.i183, i32 1
  %.upto2 = insertelement <16 x i8> %.upto1, i8 %.i284, i32 2
  %.upto3 = insertelement <16 x i8> %.upto2, i8 %.i385, i32 3
  %.upto4 = insertelement <16 x i8> %.upto3, i8 %.i486, i32 4
  %.upto5 = insertelement <16 x i8> %.upto4, i8 %.i587, i32 5
  %.upto6 = insertelement <16 x i8> %.upto5, i8 %.i688, i32 6
  %.upto7 = insertelement <16 x i8> %.upto6, i8 %.i789, i32 7
  %.upto8 = insertelement <16 x i8> %.upto7, i8 %.i890, i32 8
  %.upto9 = insertelement <16 x i8> %.upto8, i8 %.i991, i32 9
  %.upto10 = insertelement <16 x i8> %.upto9, i8 %.i1092, i32 10
  %.upto11 = insertelement <16 x i8> %.upto10, i8 %.i1193, i32 11
  %.upto12 = insertelement <16 x i8> %.upto11, i8 %.i1294, i32 12
  %.upto13 = insertelement <16 x i8> %.upto12, i8 %.i1395, i32 13
  %.upto14 = insertelement <16 x i8> %.upto13, i8 %.i1496, i32 14
  %7 = insertelement <16 x i8> %.upto14, i8 %.i1597, i32 15
  %8 = bitcast %union.XMMReg* %0 to <16 x i8>*
  store <16 x i8> %7, <16 x i8>* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packuswb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 8
  %.i0 = extractelement <8 x i16> %4, i32 0
  %.i1 = extractelement <8 x i16> %4, i32 1
  %.i2 = extractelement <8 x i16> %4, i32 2
  %.i3 = extractelement <8 x i16> %4, i32 3
  %.i4 = extractelement <8 x i16> %4, i32 4
  %.i5 = extractelement <8 x i16> %4, i32 5
  %.i6 = extractelement <8 x i16> %4, i32 6
  %.i7 = extractelement <8 x i16> %4, i32 7
  %5 = bitcast %union.XMMReg* %1 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 8
  %.i01 = extractelement <8 x i16> %6, i32 0
  %.i12 = extractelement <8 x i16> %6, i32 1
  %.i23 = extractelement <8 x i16> %6, i32 2
  %.i34 = extractelement <8 x i16> %6, i32 3
  %.i45 = extractelement <8 x i16> %6, i32 4
  %.i56 = extractelement <8 x i16> %6, i32 5
  %.i67 = extractelement <8 x i16> %6, i32 6
  %.i78 = extractelement <8 x i16> %6, i32 7
  %.i09 = sext i16 %.i0 to i32
  %.i110 = sext i16 %.i1 to i32
  %.i211 = sext i16 %.i2 to i32
  %.i312 = sext i16 %.i3 to i32
  %.i413 = sext i16 %.i4 to i32
  %.i514 = sext i16 %.i5 to i32
  %.i615 = sext i16 %.i6 to i32
  %.i716 = sext i16 %.i7 to i32
  %.i8 = sext i16 %.i01 to i32
  %.i9 = sext i16 %.i12 to i32
  %.i10 = sext i16 %.i23 to i32
  %.i11 = sext i16 %.i34 to i32
  %.i1217 = sext i16 %.i45 to i32
  %.i13 = sext i16 %.i56 to i32
  %.i14 = sext i16 %.i67 to i32
  %.i15 = sext i16 %.i78 to i32
  %.i018 = icmp slt i32 %.i09, 255
  %.i119 = icmp slt i32 %.i110, 255
  %.i220 = icmp slt i32 %.i211, 255
  %.i321 = icmp slt i32 %.i312, 255
  %.i422 = icmp slt i32 %.i413, 255
  %.i523 = icmp slt i32 %.i514, 255
  %.i624 = icmp slt i32 %.i615, 255
  %.i725 = icmp slt i32 %.i716, 255
  %.i826 = icmp slt i32 %.i8, 255
  %.i927 = icmp slt i32 %.i9, 255
  %.i1028 = icmp slt i32 %.i10, 255
  %.i1129 = icmp slt i32 %.i11, 255
  %.i1230 = icmp slt i32 %.i1217, 255
  %.i1331 = icmp slt i32 %.i13, 255
  %.i1432 = icmp slt i32 %.i14, 255
  %.i1533 = icmp slt i32 %.i15, 255
  %.i034 = select i1 %.i018, i32 %.i09, i32 255
  %.i135 = select i1 %.i119, i32 %.i110, i32 255
  %.i236 = select i1 %.i220, i32 %.i211, i32 255
  %.i337 = select i1 %.i321, i32 %.i312, i32 255
  %.i438 = select i1 %.i422, i32 %.i413, i32 255
  %.i539 = select i1 %.i523, i32 %.i514, i32 255
  %.i640 = select i1 %.i624, i32 %.i615, i32 255
  %.i741 = select i1 %.i725, i32 %.i716, i32 255
  %.i842 = select i1 %.i826, i32 %.i8, i32 255
  %.i943 = select i1 %.i927, i32 %.i9, i32 255
  %.i1044 = select i1 %.i1028, i32 %.i10, i32 255
  %.i1145 = select i1 %.i1129, i32 %.i11, i32 255
  %.i1246 = select i1 %.i1230, i32 %.i1217, i32 255
  %.i1347 = select i1 %.i1331, i32 %.i13, i32 255
  %.i1448 = select i1 %.i1432, i32 %.i14, i32 255
  %.i1549 = select i1 %.i1533, i32 %.i15, i32 255
  %.i050 = icmp sgt i32 %.i034, 0
  %.i151 = icmp sgt i32 %.i135, 0
  %.i252 = icmp sgt i32 %.i236, 0
  %.i353 = icmp sgt i32 %.i337, 0
  %.i454 = icmp sgt i32 %.i438, 0
  %.i555 = icmp sgt i32 %.i539, 0
  %.i656 = icmp sgt i32 %.i640, 0
  %.i757 = icmp sgt i32 %.i741, 0
  %.i858 = icmp sgt i32 %.i842, 0
  %.i959 = icmp sgt i32 %.i943, 0
  %.i1060 = icmp sgt i32 %.i1044, 0
  %.i1161 = icmp sgt i32 %.i1145, 0
  %.i1262 = icmp sgt i32 %.i1246, 0
  %.i1363 = icmp sgt i32 %.i1347, 0
  %.i1464 = icmp sgt i32 %.i1448, 0
  %.i1565 = icmp sgt i32 %.i1549, 0
  %.i066 = select i1 %.i050, i32 %.i034, i32 0
  %.i167 = select i1 %.i151, i32 %.i135, i32 0
  %.i268 = select i1 %.i252, i32 %.i236, i32 0
  %.i369 = select i1 %.i353, i32 %.i337, i32 0
  %.i470 = select i1 %.i454, i32 %.i438, i32 0
  %.i571 = select i1 %.i555, i32 %.i539, i32 0
  %.i672 = select i1 %.i656, i32 %.i640, i32 0
  %.i773 = select i1 %.i757, i32 %.i741, i32 0
  %.i874 = select i1 %.i858, i32 %.i842, i32 0
  %.i975 = select i1 %.i959, i32 %.i943, i32 0
  %.i1076 = select i1 %.i1060, i32 %.i1044, i32 0
  %.i1177 = select i1 %.i1161, i32 %.i1145, i32 0
  %.i1278 = select i1 %.i1262, i32 %.i1246, i32 0
  %.i1379 = select i1 %.i1363, i32 %.i1347, i32 0
  %.i1480 = select i1 %.i1464, i32 %.i1448, i32 0
  %.i1581 = select i1 %.i1565, i32 %.i1549, i32 0
  %.i082 = trunc i32 %.i066 to i8
  %.i183 = trunc i32 %.i167 to i8
  %.i284 = trunc i32 %.i268 to i8
  %.i385 = trunc i32 %.i369 to i8
  %.i486 = trunc i32 %.i470 to i8
  %.i587 = trunc i32 %.i571 to i8
  %.i688 = trunc i32 %.i672 to i8
  %.i789 = trunc i32 %.i773 to i8
  %.i890 = trunc i32 %.i874 to i8
  %.i991 = trunc i32 %.i975 to i8
  %.i1092 = trunc i32 %.i1076 to i8
  %.i1193 = trunc i32 %.i1177 to i8
  %.i1294 = trunc i32 %.i1278 to i8
  %.i1395 = trunc i32 %.i1379 to i8
  %.i1496 = trunc i32 %.i1480 to i8
  %.i1597 = trunc i32 %.i1581 to i8
  %.upto0 = insertelement <16 x i8> undef, i8 %.i082, i32 0
  %.upto1 = insertelement <16 x i8> %.upto0, i8 %.i183, i32 1
  %.upto2 = insertelement <16 x i8> %.upto1, i8 %.i284, i32 2
  %.upto3 = insertelement <16 x i8> %.upto2, i8 %.i385, i32 3
  %.upto4 = insertelement <16 x i8> %.upto3, i8 %.i486, i32 4
  %.upto5 = insertelement <16 x i8> %.upto4, i8 %.i587, i32 5
  %.upto6 = insertelement <16 x i8> %.upto5, i8 %.i688, i32 6
  %.upto7 = insertelement <16 x i8> %.upto6, i8 %.i789, i32 7
  %.upto8 = insertelement <16 x i8> %.upto7, i8 %.i890, i32 8
  %.upto9 = insertelement <16 x i8> %.upto8, i8 %.i991, i32 9
  %.upto10 = insertelement <16 x i8> %.upto9, i8 %.i1092, i32 10
  %.upto11 = insertelement <16 x i8> %.upto10, i8 %.i1193, i32 11
  %.upto12 = insertelement <16 x i8> %.upto11, i8 %.i1294, i32 12
  %.upto13 = insertelement <16 x i8> %.upto12, i8 %.i1395, i32 13
  %.upto14 = insertelement <16 x i8> %.upto13, i8 %.i1496, i32 14
  %7 = insertelement <16 x i8> %.upto14, i8 %.i1597, i32 15
  %8 = bitcast %union.XMMReg* %0 to <16 x i8>*
  store <16 x i8> %7, <16 x i8>* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packssdw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 8
  %.i0 = extractelement <4 x i32> %4, i32 0
  %.i1 = extractelement <4 x i32> %4, i32 1
  %.i2 = extractelement <4 x i32> %4, i32 2
  %.i3 = extractelement <4 x i32> %4, i32 3
  %5 = bitcast %union.XMMReg* %1 to <4 x i32>*
  %6 = load <4 x i32>, <4 x i32>* %5, align 8
  %.i01 = extractelement <4 x i32> %6, i32 0
  %.i12 = extractelement <4 x i32> %6, i32 1
  %.i23 = extractelement <4 x i32> %6, i32 2
  %.i34 = extractelement <4 x i32> %6, i32 3
  %.i05 = icmp slt i32 %.i0, 32767
  %.i16 = icmp slt i32 %.i1, 32767
  %.i27 = icmp slt i32 %.i2, 32767
  %.i38 = icmp slt i32 %.i3, 32767
  %.i4 = icmp slt i32 %.i01, 32767
  %.i5 = icmp slt i32 %.i12, 32767
  %.i6 = icmp slt i32 %.i23, 32767
  %.i7 = icmp slt i32 %.i34, 32767
  %.i09 = select i1 %.i05, i32 %.i0, i32 32767
  %.i110 = select i1 %.i16, i32 %.i1, i32 32767
  %.i211 = select i1 %.i27, i32 %.i2, i32 32767
  %.i312 = select i1 %.i38, i32 %.i3, i32 32767
  %.i413 = select i1 %.i4, i32 %.i01, i32 32767
  %.i514 = select i1 %.i5, i32 %.i12, i32 32767
  %.i615 = select i1 %.i6, i32 %.i23, i32 32767
  %.i716 = select i1 %.i7, i32 %.i34, i32 32767
  %.i017 = icmp sgt i32 %.i09, -32768
  %.i118 = icmp sgt i32 %.i110, -32768
  %.i219 = icmp sgt i32 %.i211, -32768
  %.i320 = icmp sgt i32 %.i312, -32768
  %.i421 = icmp sgt i32 %.i413, -32768
  %.i522 = icmp sgt i32 %.i514, -32768
  %.i623 = icmp sgt i32 %.i615, -32768
  %.i724 = icmp sgt i32 %.i716, -32768
  %.i025 = select i1 %.i017, i32 %.i09, i32 -32768
  %.i126 = select i1 %.i118, i32 %.i110, i32 -32768
  %.i227 = select i1 %.i219, i32 %.i211, i32 -32768
  %.i328 = select i1 %.i320, i32 %.i312, i32 -32768
  %.i429 = select i1 %.i421, i32 %.i413, i32 -32768
  %.i530 = select i1 %.i522, i32 %.i514, i32 -32768
  %.i631 = select i1 %.i623, i32 %.i615, i32 -32768
  %.i732 = select i1 %.i724, i32 %.i716, i32 -32768
  %.i033 = trunc i32 %.i025 to i16
  %.i134 = trunc i32 %.i126 to i16
  %.i235 = trunc i32 %.i227 to i16
  %.i336 = trunc i32 %.i328 to i16
  %.i437 = trunc i32 %.i429 to i16
  %.i538 = trunc i32 %.i530 to i16
  %.i639 = trunc i32 %.i631 to i16
  %.i740 = trunc i32 %.i732 to i16
  %.upto0 = insertelement <8 x i16> undef, i16 %.i033, i32 0
  %.upto1 = insertelement <8 x i16> %.upto0, i16 %.i134, i32 1
  %.upto2 = insertelement <8 x i16> %.upto1, i16 %.i235, i32 2
  %.upto3 = insertelement <8 x i16> %.upto2, i16 %.i336, i32 3
  %.upto4 = insertelement <8 x i16> %.upto3, i16 %.i437, i32 4
  %.upto5 = insertelement <8 x i16> %.upto4, i16 %.i538, i32 5
  %.upto6 = insertelement <8 x i16> %.upto5, i16 %.i639, i32 6
  %7 = insertelement <8 x i16> %.upto6, i16 %.i740, i32 7
  %8 = bitcast %union.XMMReg* %0 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %8, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpcklbw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = bitcast %union.XMMReg* %1 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %13 = load i8, i8* %12, align 2
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 2
  %15 = load i8, i8* %14, align 2
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %21 = load i8, i8* %20, align 4
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 4
  %23 = load i8, i8* %22, align 4
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %29 = load i8, i8* %28, align 2
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 6
  %31 = load i8, i8* %30, align 2
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %7, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %4, i64 2
  store i8 %9, i8* %37, align 2
  %38 = getelementptr inbounds i8, i8* %4, i64 3
  store i8 %11, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %4, i64 4
  store i8 %13, i8* %39, align 4
  %40 = getelementptr inbounds i8, i8* %4, i64 5
  store i8 %15, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %4, i64 6
  store i8 %17, i8* %41, align 2
  %42 = getelementptr inbounds i8, i8* %4, i64 7
  store i8 %19, i8* %42, align 1
  %43 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %44 = bitcast i64* %43 to i8*
  store i8 %21, i8* %44, align 8
  %45 = getelementptr inbounds i8, i8* %4, i64 9
  store i8 %23, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %4, i64 10
  store i8 %25, i8* %46, align 2
  %47 = getelementptr inbounds i8, i8* %4, i64 11
  store i8 %27, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %4, i64 12
  store i8 %29, i8* %48, align 4
  %49 = getelementptr inbounds i8, i8* %4, i64 13
  store i8 %31, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %4, i64 14
  store i8 %33, i8* %50, align 2
  %51 = getelementptr inbounds i8, i8* %4, i64 15
  store i8 %35, i8* %51, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpcklwd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %5 = bitcast %union.XMMReg* %1 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %12 = load i16, i16* %11, align 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %16 = load i16, i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = bitcast %union.XMMReg* %0 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = bitcast i8* %20 to i16*
  store i16 %6, i16* %21, align 2
  %22 = getelementptr inbounds i8, i8* %19, i64 4
  %23 = bitcast i8* %22 to i16*
  store i16 %8, i16* %23, align 4
  %24 = getelementptr inbounds i8, i8* %19, i64 6
  %25 = bitcast i8* %24 to i16*
  store i16 %10, i16* %25, align 2
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i16*
  store i16 %12, i16* %27, align 8
  %28 = getelementptr inbounds i8, i8* %19, i64 10
  %29 = bitcast i8* %28 to i16*
  store i16 %14, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %19, i64 12
  %31 = bitcast i8* %30 to i16*
  store i16 %16, i16* %31, align 4
  %32 = getelementptr inbounds i8, i8* %19, i64 14
  %33 = bitcast i8* %32 to i16*
  store i16 %18, i16* %33, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckldq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.XMMReg* %0 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %6, i32* %13, align 4
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %15 = bitcast i64* %14 to i32*
  store i32 %8, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %11, i64 12
  %17 = bitcast i8* %16 to i32*
  store i32 %10, i32* %17, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpcklqdq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %4, i64* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhbw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %5 = bitcast i64* %4 to i8*
  %6 = load i8, i8* %5, align 8
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %24 = load i8, i8* %23, align 4
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %38 = load i8, i8* %37, align 1
  %39 = bitcast %union.XMMReg* %0 to i8*
  store i8 %6, i8* %39, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %10, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 2
  store i8 %12, i8* %41, align 2
  %42 = getelementptr inbounds i8, i8* %39, i64 3
  store i8 %14, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %39, i64 4
  store i8 %16, i8* %43, align 4
  %44 = getelementptr inbounds i8, i8* %39, i64 5
  store i8 %18, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %39, i64 6
  store i8 %20, i8* %45, align 2
  %46 = getelementptr inbounds i8, i8* %39, i64 7
  store i8 %22, i8* %46, align 1
  store i8 %24, i8* %5, align 8
  %47 = getelementptr inbounds i8, i8* %39, i64 9
  store i8 %26, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %39, i64 10
  store i8 %28, i8* %48, align 2
  %49 = getelementptr inbounds i8, i8* %39, i64 11
  store i8 %30, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %39, i64 12
  store i8 %32, i8* %50, align 4
  %51 = getelementptr inbounds i8, i8* %39, i64 13
  store i8 %34, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %39, i64 14
  store i8 %36, i8* %52, align 2
  %53 = getelementptr inbounds i8, i8* %39, i64 15
  store i8 %38, i8* %53, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhwd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %5 = bitcast i64* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = bitcast %union.XMMReg* %0 to i8*
  %24 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %24, align 8
  %25 = getelementptr inbounds i8, i8* %23, i64 2
  %26 = bitcast i8* %25 to i16*
  store i16 %10, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %23, i64 4
  %28 = bitcast i8* %27 to i16*
  store i16 %12, i16* %28, align 4
  %29 = getelementptr inbounds i8, i8* %23, i64 6
  %30 = bitcast i8* %29 to i16*
  store i16 %14, i16* %30, align 2
  store i16 %16, i16* %5, align 8
  %31 = getelementptr inbounds i8, i8* %23, i64 10
  %32 = bitcast i8* %31 to i16*
  store i16 %18, i16* %32, align 2
  %33 = getelementptr inbounds i8, i8* %23, i64 12
  %34 = bitcast i8* %33 to i16*
  store i16 %20, i16* %34, align 4
  %35 = getelementptr inbounds i8, i8* %23, i64 14
  %36 = bitcast i8* %35 to i16*
  store i16 %22, i16* %36, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhdq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %5 = bitcast i64* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %union.XMMReg* %0 to i8*
  %16 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %10, i32* %18, align 4
  store i32 %12, i32* %5, align 8
  %19 = getelementptr inbounds i8, i8* %15, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %14, i32* %20, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_punpckhqdq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %4, i64* %7, align 8
  store i64 %6, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_pshufb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #13 {
  %3 = alloca %union.XMMReg, align 8
  %4 = bitcast %union.XMMReg* %3 to i8*
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %3 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = and i8 %9, 15
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  br label %16

16:                                               ; preds = %2, %11
  %17 = phi i8 [ %15, %11 ], [ 0, %2 ]
  %18 = bitcast %union.XMMReg* %3 to i8*
  store i8 %17, i8* %18, align 8
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %16
  %23 = and i8 %20, 15
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  br label %27

27:                                               ; preds = %22, %16
  %28 = phi i8 [ %26, %22 ], [ 0, %16 ]
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = and i8 %31, 15
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  br label %38

38:                                               ; preds = %33, %27
  %39 = phi i8 [ %37, %33 ], [ 0, %27 ]
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  store i8 %39, i8* %40, align 2
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %38
  %45 = and i8 %42, 15
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  br label %49

49:                                               ; preds = %44, %38
  %50 = phi i8 [ %48, %44 ], [ 0, %38 ]
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %49
  %56 = and i8 %53, 15
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  br label %60

60:                                               ; preds = %55, %49
  %61 = phi i8 [ %59, %55 ], [ 0, %49 ]
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  store i8 %61, i8* %62, align 4
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 5
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %60
  %67 = and i8 %64, 15
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  br label %71

71:                                               ; preds = %66, %60
  %72 = phi i8 [ %70, %66 ], [ 0, %60 ]
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 6
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %71
  %78 = and i8 %75, 15
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  br label %82

82:                                               ; preds = %77, %71
  %83 = phi i8 [ %81, %77 ], [ 0, %71 ]
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  store i8 %83, i8* %84, align 2
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %82
  %89 = and i8 %86, 15
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  br label %93

93:                                               ; preds = %88, %82
  %94 = phi i8 [ %92, %88 ], [ 0, %82 ]
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  store i8 %94, i8* %95, align 1
  %96 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %97 = bitcast i64* %96 to i8*
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %105, label %100

100:                                              ; preds = %93
  %101 = and i8 %98, 15
  %102 = zext i8 %101 to i64
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i8 [ %104, %100 ], [ 0, %93 ]
  %107 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %3, i64 0, i32 0, i64 1
  %108 = bitcast i64* %107 to i8*
  store i8 %106, i8* %108, align 8
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 9
  %110 = load i8, i8* %109, align 1
  %111 = icmp slt i8 %110, 0
  br i1 %111, label %117, label %112

112:                                              ; preds = %105
  %113 = and i8 %110, 15
  %114 = zext i8 %113 to i64
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %114
  %116 = load i8, i8* %115, align 1
  br label %117

117:                                              ; preds = %112, %105
  %118 = phi i8 [ %116, %112 ], [ 0, %105 ]
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  store i8 %118, i8* %119, align 1
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 10
  %121 = load i8, i8* %120, align 1
  %122 = icmp slt i8 %121, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %117
  %124 = and i8 %121, 15
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  br label %128

128:                                              ; preds = %123, %117
  %129 = phi i8 [ %127, %123 ], [ 0, %117 ]
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  store i8 %129, i8* %130, align 2
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 11
  %132 = load i8, i8* %131, align 1
  %133 = icmp slt i8 %132, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %128
  %135 = and i8 %132, 15
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  br label %139

139:                                              ; preds = %134, %128
  %140 = phi i8 [ %138, %134 ], [ 0, %128 ]
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  store i8 %140, i8* %141, align 1
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 12
  %143 = load i8, i8* %142, align 1
  %144 = icmp slt i8 %143, 0
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = and i8 %143, 15
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  br label %150

150:                                              ; preds = %145, %139
  %151 = phi i8 [ %149, %145 ], [ 0, %139 ]
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  store i8 %151, i8* %152, align 4
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 13
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %161, label %156

156:                                              ; preds = %150
  %157 = and i8 %154, 15
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  br label %161

161:                                              ; preds = %156, %150
  %162 = phi i8 [ %160, %156 ], [ 0, %150 ]
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  store i8 %162, i8* %163, align 1
  %164 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 14
  %165 = load i8, i8* %164, align 1
  %166 = icmp slt i8 %165, 0
  br i1 %166, label %172, label %167

167:                                              ; preds = %161
  %168 = and i8 %165, 15
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  br label %172

172:                                              ; preds = %167, %161
  %173 = phi i8 [ %171, %167 ], [ 0, %161 ]
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  store i8 %173, i8* %174, align 2
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 15
  %176 = load i8, i8* %175, align 1
  %177 = icmp slt i8 %176, 0
  br i1 %177, label %183, label %178

178:                                              ; preds = %172
  %179 = and i8 %176, 15
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %180
  %182 = load i8, i8* %181, align 1
  br label %183

183:                                              ; preds = %178, %172
  %184 = phi i8 [ %182, %178 ], [ 0, %172 ]
  %185 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  store i8 %184, i8* %185, align 1
  %186 = bitcast %union.XMMReg* %0 to i8*
  br label %187

187:                                              ; preds = %190, %183
  %188 = phi i64 [ 0, %183 ], [ %194, %190 ]
  %189 = icmp ult i64 %188, 16
  br i1 %189, label %190, label %195

190:                                              ; preds = %187
  %191 = getelementptr i8, i8* %4, i64 %188
  %192 = load i8, i8* %191
  %193 = getelementptr i8, i8* %186, i64 %188
  store i8 %192, i8* %193
  %194 = add i64 %188, 1
  br label %187

195:                                              ; preds = %187
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phaddw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %7, %5
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = add i16 %12, %10
  store i16 %13, i16* %6, align 2
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %15 = bitcast i64* %14 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %18 = load i16, i16* %17, align 2
  %19 = add i16 %18, %16
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %11, align 2
  %25 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %26 = bitcast %union.XMMReg* %1 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = add i16 %29, %27
  store i16 %30, i16* %15, align 8
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %34, %32
  store i16 %35, i16* %17, align 2
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, %38
  store i16 %41, i16* %20, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  %43 = load i16, i16* %42, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, %43
  store i16 %46, i16* %22, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phaddd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  store i32 %8, i32* %4, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = bitcast i64* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %11
  store i32 %14, i32* %6, align 4
  %15 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %16 = bitcast %union.XMMReg* %1 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %17
  store i32 %20, i32* %10, align 8
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %23
  store i32 %26, i32* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phaddsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 -32768, i16 32767
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = xor i1 %14, true
  %16 = and i1 %13, %15
  %17 = select i1 %16, i16 %12, i16 %8
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %19 = load i16, i16* %18, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = add i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 -32768, i16 32767
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = xor i1 %28, true
  %30 = and i1 %27, %29
  %31 = select i1 %30, i16 %26, i16 %22
  store i16 %31, i16* %6, align 2
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %18, align 4
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %20, align 2
  %61 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %62 = bitcast %union.XMMReg* %1 to i16*
  %63 = load i16, i16* %62, align 8
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 1
  %65 = load i16, i16* %64, align 2
  %66 = add i16 %63, %65
  %67 = icmp slt i16 %63, 0
  %68 = icmp slt i16 %65, 0
  %69 = icmp slt i16 %66, 0
  %70 = select i1 %68, i16 -32768, i16 32767
  %71 = xor i1 %67, %69
  %72 = xor i1 %67, %68
  %73 = xor i1 %72, true
  %74 = and i1 %71, %73
  %75 = select i1 %74, i16 %70, i16 %66
  store i16 %75, i16* %33, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 2
  %77 = load i16, i16* %76, align 4
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 3
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %77, %79
  %81 = icmp slt i16 %77, 0
  %82 = icmp slt i16 %79, 0
  %83 = icmp slt i16 %80, 0
  %84 = select i1 %82, i16 -32768, i16 32767
  %85 = xor i1 %81, %83
  %86 = xor i1 %81, %82
  %87 = xor i1 %86, true
  %88 = and i1 %85, %87
  %89 = select i1 %88, i16 %84, i16 %80
  store i16 %89, i16* %35, align 2
  %90 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 5
  %94 = load i16, i16* %93, align 2
  %95 = add i16 %92, %94
  %96 = icmp slt i16 %92, 0
  %97 = icmp slt i16 %94, 0
  %98 = icmp slt i16 %95, 0
  %99 = select i1 %97, i16 -32768, i16 32767
  %100 = xor i1 %96, %98
  %101 = xor i1 %96, %97
  %102 = xor i1 %101, true
  %103 = and i1 %100, %102
  %104 = select i1 %103, i16 %99, i16 %95
  store i16 %104, i16* %47, align 4
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 6
  %106 = load i16, i16* %105, align 4
  %107 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 7
  %108 = load i16, i16* %107, align 2
  %109 = add i16 %106, %108
  %110 = icmp slt i16 %106, 0
  %111 = icmp slt i16 %108, 0
  %112 = icmp slt i16 %109, 0
  %113 = select i1 %111, i16 -32768, i16 32767
  %114 = xor i1 %110, %112
  %115 = xor i1 %110, %111
  %116 = xor i1 %115, true
  %117 = and i1 %114, %116
  %118 = select i1 %117, i16 %113, i16 %109
  store i16 %118, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaddubsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %0 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = add nsw i32 %18, %11
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = icmp sgt i32 %21, -32768
  %23 = select i1 %22, i32 %21, i32 -32768
  %24 = trunc i32 %23 to i16
  %25 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %26 = bitcast %union.XMMReg* %0 to i16*
  store i16 %24, i16* %26, align 8
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 %32, %29
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nsw i32 %39, %36
  %41 = add nsw i32 %40, %33
  %42 = icmp slt i32 %41, 32767
  %43 = select i1 %42, i32 %41, i32 32767
  %44 = icmp sgt i32 %43, -32768
  %45 = select i1 %44, i32 %43, i32 -32768
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = sext i8 %49 to i32
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = add nsw i32 %61, %54
  %63 = icmp slt i32 %62, 32767
  %64 = select i1 %63, i32 %62, i32 32767
  %65 = icmp sgt i32 %64, -32768
  %66 = select i1 %65, i32 %64, i32 -32768
  %67 = trunc i32 %66 to i16
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 %67, i16* %68, align 4
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %70 = load i8, i8* %69, align 2
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = zext i8 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nsw i32 %81, %78
  %83 = add nsw i32 %82, %75
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = icmp sgt i32 %85, -32768
  %87 = select i1 %86, i32 %85, i32 -32768
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 %88, i16* %89, align 2
  %90 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %91 = bitcast i64* %90 to i8*
  %92 = load i8, i8* %91, align 8
  %93 = sext i8 %92 to i32
  %94 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %95 = bitcast i64* %94 to i8*
  %96 = load i8, i8* %95, align 8
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %97, %93
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nsw i32 %104, %101
  %106 = add nsw i32 %105, %98
  %107 = icmp slt i32 %106, 32767
  %108 = select i1 %107, i32 %106, i32 32767
  %109 = icmp sgt i32 %108, -32768
  %110 = select i1 %109, i32 %108, i32 -32768
  %111 = trunc i32 %110 to i16
  %112 = bitcast i64* %94 to i16*
  store i16 %111, i16* %112, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %114 = load i8, i8* %113, align 2
  %115 = sext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %117 = load i8, i8* %116, align 2
  %118 = zext i8 %117 to i32
  %119 = mul nsw i32 %118, %115
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nsw i32 %125, %122
  %127 = add nsw i32 %126, %119
  %128 = icmp slt i32 %127, 32767
  %129 = select i1 %128, i32 %127, i32 32767
  %130 = icmp sgt i32 %129, -32768
  %131 = select i1 %130, i32 %129, i32 -32768
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %135 = load i8, i8* %134, align 4
  %136 = sext i8 %135 to i32
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %138 = load i8, i8* %137, align 4
  %139 = zext i8 %138 to i32
  %140 = mul nsw i32 %139, %136
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %142 = load i8, i8* %141, align 1
  %143 = sext i8 %142 to i32
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nsw i32 %146, %143
  %148 = add nsw i32 %147, %140
  %149 = icmp slt i32 %148, 32767
  %150 = select i1 %149, i32 %148, i32 32767
  %151 = icmp sgt i32 %150, -32768
  %152 = select i1 %151, i32 %150, i32 -32768
  %153 = trunc i32 %152 to i16
  %154 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 %153, i16* %154, align 4
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %156 = load i8, i8* %155, align 2
  %157 = sext i8 %156 to i32
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %159 = load i8, i8* %158, align 2
  %160 = zext i8 %159 to i32
  %161 = mul nsw i32 %160, %157
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nsw i32 %167, %164
  %169 = add nsw i32 %168, %161
  %170 = icmp slt i32 %169, 32767
  %171 = select i1 %170, i32 %169, i32 32767
  %172 = icmp sgt i32 %171, -32768
  %173 = select i1 %172, i32 %171, i32 -32768
  %174 = trunc i32 %173 to i16
  %175 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 %174, i16* %175, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phsubw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = sub i16 %10, %12
  store i16 %13, i16* %6, align 2
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %15 = bitcast i64* %14 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %18 = load i16, i16* %17, align 2
  %19 = sub i16 %16, %18
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %11, align 2
  %25 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %26 = bitcast %union.XMMReg* %1 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = sub i16 %27, %29
  store i16 %30, i16* %15, align 8
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 %32, %34
  store i16 %35, i16* %17, align 2
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = sub i16 %38, %40
  store i16 %41, i16* %20, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  %43 = load i16, i16* %42, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = sub i16 %43, %45
  store i16 %46, i16* %22, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phsubd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  store i32 %8, i32* %4, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = bitcast i64* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %11, %13
  store i32 %14, i32* %6, align 4
  %15 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %16 = bitcast %union.XMMReg* %1 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %17, %19
  store i32 %20, i32* %10, align 8
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = sub nsw i32 %23, %25
  store i32 %26, i32* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phsubsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 32767, i16 -32768
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = and i1 %13, %14
  %16 = select i1 %15, i16 %12, i16 %8
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %20 = load i16, i16* %19, align 2
  %21 = sub i16 %18, %20
  %22 = icmp slt i16 %18, 0
  %23 = icmp slt i16 %20, 0
  %24 = icmp slt i16 %21, 0
  %25 = select i1 %23, i16 32767, i16 -32768
  %26 = xor i1 %22, %24
  %27 = xor i1 %22, %23
  %28 = and i1 %26, %27
  %29 = select i1 %28, i16 %25, i16 %21
  store i16 %29, i16* %6, align 2
  %30 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %31 = bitcast i64* %30 to i16*
  %32 = load i16, i16* %31, align 8
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %17, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %45 = load i16, i16* %44, align 4
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %19, align 2
  %57 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %58 = bitcast %union.XMMReg* %1 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = sub i16 %59, %61
  %63 = icmp slt i16 %59, 0
  %64 = icmp slt i16 %61, 0
  %65 = icmp slt i16 %62, 0
  %66 = select i1 %64, i16 32767, i16 -32768
  %67 = xor i1 %63, %65
  %68 = xor i1 %63, %64
  %69 = and i1 %67, %68
  %70 = select i1 %69, i16 %66, i16 %62
  store i16 %70, i16* %31, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 2
  %72 = load i16, i16* %71, align 4
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 3
  %74 = load i16, i16* %73, align 2
  %75 = sub i16 %72, %74
  %76 = icmp slt i16 %72, 0
  %77 = icmp slt i16 %74, 0
  %78 = icmp slt i16 %75, 0
  %79 = select i1 %77, i16 32767, i16 -32768
  %80 = xor i1 %76, %78
  %81 = xor i1 %76, %77
  %82 = and i1 %80, %81
  %83 = select i1 %82, i16 %79, i16 %75
  store i16 %83, i16* %33, align 2
  %84 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %85 = bitcast i64* %84 to i16*
  %86 = load i16, i16* %85, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 5
  %88 = load i16, i16* %87, align 2
  %89 = sub i16 %86, %88
  %90 = icmp slt i16 %86, 0
  %91 = icmp slt i16 %88, 0
  %92 = icmp slt i16 %89, 0
  %93 = select i1 %91, i16 32767, i16 -32768
  %94 = xor i1 %90, %92
  %95 = xor i1 %90, %91
  %96 = and i1 %94, %95
  %97 = select i1 %96, i16 %93, i16 %89
  store i16 %97, i16* %44, align 4
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 6
  %99 = load i16, i16* %98, align 4
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 7
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %99, %101
  %103 = icmp slt i16 %99, 0
  %104 = icmp slt i16 %101, 0
  %105 = icmp slt i16 %102, 0
  %106 = select i1 %104, i16 32767, i16 -32768
  %107 = xor i1 %103, %105
  %108 = xor i1 %103, %104
  %109 = and i1 %107, %108
  %110 = select i1 %109, i16 %106, i16 %102
  store i16 %110, i16* %46, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pabsb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = icmp slt i8 %5, 0
  %7 = sub i8 0, %5
  %8 = select i1 %6, i8 %7, i8 %5
  %9 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %10 = bitcast %union.XMMReg* %0 to i8*
  store i8 %8, i8* %10, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = sub i8 0, %12
  %15 = select i1 %13, i8 %14, i8 %12
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 1
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = icmp slt i8 %18, 0
  %20 = sub i8 0, %18
  %21 = select i1 %19, i8 %20, i8 %18
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 2
  store i8 %21, i8* %22, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  %26 = sub i8 0, %24
  %27 = select i1 %25, i8 %26, i8 %24
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp slt i8 %30, 0
  %32 = sub i8 0, %30
  %33 = select i1 %31, i8 %32, i8 %30
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 4
  store i8 %33, i8* %34, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  %38 = sub i8 0, %36
  %39 = select i1 %37, i8 %38, i8 %36
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 5
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = icmp slt i8 %42, 0
  %44 = sub i8 0, %42
  %45 = select i1 %43, i8 %44, i8 %42
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 6
  store i8 %45, i8* %46, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  %50 = sub i8 0, %48
  %51 = select i1 %49, i8 %50, i8 %48
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 7
  store i8 %51, i8* %52, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = icmp slt i8 %55, 0
  %57 = sub i8 0, %55
  %58 = select i1 %56, i8 %57, i8 %55
  %59 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %60 = bitcast i64* %59 to i8*
  store i8 %58, i8* %60, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  %64 = sub i8 0, %62
  %65 = select i1 %63, i8 %64, i8 %62
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 9
  store i8 %65, i8* %66, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = icmp slt i8 %68, 0
  %70 = sub i8 0, %68
  %71 = select i1 %69, i8 %70, i8 %68
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 10
  store i8 %71, i8* %72, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = icmp slt i8 %74, 0
  %76 = sub i8 0, %74
  %77 = select i1 %75, i8 %76, i8 %74
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 11
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = icmp slt i8 %80, 0
  %82 = sub i8 0, %80
  %83 = select i1 %81, i8 %82, i8 %80
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 12
  store i8 %83, i8* %84, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  %88 = sub i8 0, %86
  %89 = select i1 %87, i8 %88, i8 %86
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 13
  store i8 %89, i8* %90, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = icmp slt i8 %92, 0
  %94 = sub i8 0, %92
  %95 = select i1 %93, i8 %94, i8 %92
  %96 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 14
  store i8 %95, i8* %96, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 0
  %100 = sub i8 0, %98
  %101 = select i1 %99, i8 %100, i8 %98
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 15
  store i8 %101, i8* %102, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pabsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = icmp slt i16 %5, 0
  %7 = sub i16 0, %5
  %8 = select i1 %6, i16 %7, i16 %5
  %9 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %10 = bitcast %union.XMMReg* %0 to i16*
  store i16 %8, i16* %10, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = icmp slt i16 %12, 0
  %14 = sub i16 0, %12
  %15 = select i1 %13, i16 %14, i16 %12
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 1
  store i16 %15, i16* %16, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = icmp slt i16 %18, 0
  %20 = sub i16 0, %18
  %21 = select i1 %19, i16 %20, i16 %18
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 2
  store i16 %21, i16* %22, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = icmp slt i16 %24, 0
  %26 = sub i16 0, %24
  %27 = select i1 %25, i16 %26, i16 %24
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 3
  store i16 %27, i16* %28, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = icmp slt i16 %31, 0
  %33 = sub i16 0, %31
  %34 = select i1 %32, i16 %33, i16 %31
  %35 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %36 = bitcast i64* %35 to i16*
  store i16 %34, i16* %36, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = icmp slt i16 %38, 0
  %40 = sub i16 0, %38
  %41 = select i1 %39, i16 %40, i16 %38
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 5
  store i16 %41, i16* %42, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = icmp slt i16 %44, 0
  %46 = sub i16 0, %44
  %47 = select i1 %45, i16 %46, i16 %44
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 6
  store i16 %47, i16* %48, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = icmp slt i16 %50, 0
  %52 = sub i16 0, %50
  %53 = select i1 %51, i16 %52, i16 %50
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 7
  store i16 %53, i16* %54, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pabsd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 0
  %7 = sub nsw i32 0, %5
  %8 = select i1 %6, i32 %7, i32 %5
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  %14 = sub nsw i32 0, %12
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %22 = select i1 %20, i32 %21, i32 %19
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulhrsw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = add nsw i32 %11, 16384
  %13 = lshr i32 %12, 15
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, 16384
  %23 = lshr i32 %22, 15
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %30, %27
  %32 = add nsw i32 %31, 16384
  %33 = lshr i32 %32, 15
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = mul nsw i32 %40, %37
  %42 = add nsw i32 %41, 16384
  %43 = lshr i32 %42, 15
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = sext i16 %47 to i32
  %49 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %52, %48
  %54 = add nsw i32 %53, 16384
  %55 = lshr i32 %54, 15
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %46, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %61 = load i16, i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, %59
  %64 = add nsw i32 %63, 16384
  %65 = lshr i32 %64, 15
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %57, align 2
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = sext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %71 = load i16, i16* %70, align 4
  %72 = sext i16 %71 to i32
  %73 = mul nsw i32 %72, %69
  %74 = add nsw i32 %73, 16384
  %75 = lshr i32 %74, 15
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %67, align 4
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %81 = load i16, i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = mul nsw i32 %82, %79
  %84 = add nsw i32 %83, 16384
  %85 = lshr i32 %84, 15
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %77, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psignb_xmm(%union.XMMReg* %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = icmp sgt i8 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i8 %5, 0
  %9 = bitcast %union.XMMReg* %0 to i8*
  br i1 %8, label %16, label %10

10:                                               ; preds = %7
  %11 = load i8, i8* %9, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.XMMReg* %0 to i8*
  %14 = load i8, i8* %13, align 8
  %15 = sub i8 0, %14
  br label %16

16:                                               ; preds = %7, %10, %12
  %17 = phi i8* [ %9, %10 ], [ %13, %12 ], [ %9, %7 ]
  %18 = phi i8 [ %11, %10 ], [ %15, %12 ], [ 0, %7 ]
  %19 = bitcast %union.XMMReg* %0 to [16 x i8]*
  store i8 %18, i8* %17, align 8
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp sgt i8 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i8 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 1
  %27 = load i8, i8* %26, align 1
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = sub i8 0, %30
  br label %32

32:                                               ; preds = %23, %25, %28
  %33 = phi i8 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 1
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = icmp sgt i8 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i8 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 2
  %42 = load i8, i8* %41, align 2
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 2
  %45 = load i8, i8* %44, align 2
  %46 = sub i8 0, %45
  br label %47

47:                                               ; preds = %38, %40, %43
  %48 = phi i8 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 2
  store i8 %48, i8* %49, align 2
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp sgt i8 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i8 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 3
  %57 = load i8, i8* %56, align 1
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = sub i8 0, %60
  br label %62

62:                                               ; preds = %53, %55, %58
  %63 = phi i8 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %66 = load i8, i8* %65, align 4
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %68, label %73

68:                                               ; preds = %62
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 4
  %72 = load i8, i8* %71, align 4
  br label %77

73:                                               ; preds = %62
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 4
  %75 = load i8, i8* %74, align 4
  %76 = sub i8 0, %75
  br label %77

77:                                               ; preds = %68, %70, %73
  %78 = phi i8 [ %76, %73 ], [ %72, %70 ], [ 0, %68 ]
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 4
  store i8 %78, i8* %79, align 4
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %81 = load i8, i8* %80, align 1
  %82 = icmp sgt i8 %81, -1
  br i1 %82, label %83, label %88

83:                                               ; preds = %77
  %84 = icmp eq i8 %81, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 5
  %87 = load i8, i8* %86, align 1
  br label %92

88:                                               ; preds = %77
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 5
  %90 = load i8, i8* %89, align 1
  %91 = sub i8 0, %90
  br label %92

92:                                               ; preds = %83, %85, %88
  %93 = phi i8 [ %91, %88 ], [ %87, %85 ], [ 0, %83 ]
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 5
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %96 = load i8, i8* %95, align 2
  %97 = icmp sgt i8 %96, -1
  br i1 %97, label %98, label %103

98:                                               ; preds = %92
  %99 = icmp eq i8 %96, 0
  br i1 %99, label %107, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 6
  %102 = load i8, i8* %101, align 2
  br label %107

103:                                              ; preds = %92
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 6
  %105 = load i8, i8* %104, align 2
  %106 = sub i8 0, %105
  br label %107

107:                                              ; preds = %98, %100, %103
  %108 = phi i8 [ %106, %103 ], [ %102, %100 ], [ 0, %98 ]
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 6
  store i8 %108, i8* %109, align 2
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = icmp sgt i8 %111, -1
  br i1 %112, label %113, label %118

113:                                              ; preds = %107
  %114 = icmp eq i8 %111, 0
  br i1 %114, label %122, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 7
  %117 = load i8, i8* %116, align 1
  br label %122

118:                                              ; preds = %107
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 7
  %120 = load i8, i8* %119, align 1
  %121 = sub i8 0, %120
  br label %122

122:                                              ; preds = %113, %115, %118
  %123 = phi i8 [ %121, %118 ], [ %117, %115 ], [ 0, %113 ]
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 7
  store i8 %123, i8* %124, align 1
  %125 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %126 = bitcast i64* %125 to i8*
  %127 = load i8, i8* %126, align 8
  %128 = icmp sgt i8 %127, -1
  br i1 %128, label %129, label %135

129:                                              ; preds = %122
  %130 = icmp eq i8 %127, 0
  br i1 %130, label %140, label %131

131:                                              ; preds = %129
  %132 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %133 = bitcast i64* %132 to i8*
  %134 = load i8, i8* %133, align 8
  br label %140

135:                                              ; preds = %122
  %136 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %137 = bitcast i64* %136 to i8*
  %138 = load i8, i8* %137, align 8
  %139 = sub i8 0, %138
  br label %140

140:                                              ; preds = %129, %131, %135
  %141 = phi i8 [ %139, %135 ], [ %134, %131 ], [ 0, %129 ]
  %142 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %143 = bitcast i64* %142 to i8*
  store i8 %141, i8* %143, align 8
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %145 = load i8, i8* %144, align 1
  %146 = icmp sgt i8 %145, -1
  br i1 %146, label %147, label %152

147:                                              ; preds = %140
  %148 = icmp eq i8 %145, 0
  br i1 %148, label %156, label %149

149:                                              ; preds = %147
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 9
  %151 = load i8, i8* %150, align 1
  br label %156

152:                                              ; preds = %140
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 9
  %154 = load i8, i8* %153, align 1
  %155 = sub i8 0, %154
  br label %156

156:                                              ; preds = %147, %149, %152
  %157 = phi i8 [ %155, %152 ], [ %151, %149 ], [ 0, %147 ]
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 9
  store i8 %157, i8* %158, align 1
  %159 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %160 = load i8, i8* %159, align 2
  %161 = icmp sgt i8 %160, -1
  br i1 %161, label %162, label %167

162:                                              ; preds = %156
  %163 = icmp eq i8 %160, 0
  br i1 %163, label %171, label %164

164:                                              ; preds = %162
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 10
  %166 = load i8, i8* %165, align 2
  br label %171

167:                                              ; preds = %156
  %168 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 10
  %169 = load i8, i8* %168, align 2
  %170 = sub i8 0, %169
  br label %171

171:                                              ; preds = %162, %164, %167
  %172 = phi i8 [ %170, %167 ], [ %166, %164 ], [ 0, %162 ]
  %173 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 10
  store i8 %172, i8* %173, align 2
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %175 = load i8, i8* %174, align 1
  %176 = icmp sgt i8 %175, -1
  br i1 %176, label %177, label %182

177:                                              ; preds = %171
  %178 = icmp eq i8 %175, 0
  br i1 %178, label %186, label %179

179:                                              ; preds = %177
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 11
  %181 = load i8, i8* %180, align 1
  br label %186

182:                                              ; preds = %171
  %183 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 11
  %184 = load i8, i8* %183, align 1
  %185 = sub i8 0, %184
  br label %186

186:                                              ; preds = %177, %179, %182
  %187 = phi i8 [ %185, %182 ], [ %181, %179 ], [ 0, %177 ]
  %188 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 11
  store i8 %187, i8* %188, align 1
  %189 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %190 = load i8, i8* %189, align 4
  %191 = icmp sgt i8 %190, -1
  br i1 %191, label %192, label %197

192:                                              ; preds = %186
  %193 = icmp eq i8 %190, 0
  br i1 %193, label %201, label %194

194:                                              ; preds = %192
  %195 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 12
  %196 = load i8, i8* %195, align 4
  br label %201

197:                                              ; preds = %186
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 12
  %199 = load i8, i8* %198, align 4
  %200 = sub i8 0, %199
  br label %201

201:                                              ; preds = %192, %194, %197
  %202 = phi i8 [ %200, %197 ], [ %196, %194 ], [ 0, %192 ]
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 12
  store i8 %202, i8* %203, align 4
  %204 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %205 = load i8, i8* %204, align 1
  %206 = icmp sgt i8 %205, -1
  br i1 %206, label %207, label %212

207:                                              ; preds = %201
  %208 = icmp eq i8 %205, 0
  br i1 %208, label %216, label %209

209:                                              ; preds = %207
  %210 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 13
  %211 = load i8, i8* %210, align 1
  br label %216

212:                                              ; preds = %201
  %213 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 13
  %214 = load i8, i8* %213, align 1
  %215 = sub i8 0, %214
  br label %216

216:                                              ; preds = %207, %209, %212
  %217 = phi i8 [ %215, %212 ], [ %211, %209 ], [ 0, %207 ]
  %218 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 13
  store i8 %217, i8* %218, align 1
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %220 = load i8, i8* %219, align 2
  %221 = icmp sgt i8 %220, -1
  br i1 %221, label %222, label %227

222:                                              ; preds = %216
  %223 = icmp eq i8 %220, 0
  br i1 %223, label %231, label %224

224:                                              ; preds = %222
  %225 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 14
  %226 = load i8, i8* %225, align 2
  br label %231

227:                                              ; preds = %216
  %228 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 14
  %229 = load i8, i8* %228, align 2
  %230 = sub i8 0, %229
  br label %231

231:                                              ; preds = %222, %224, %227
  %232 = phi i8 [ %230, %227 ], [ %226, %224 ], [ 0, %222 ]
  %233 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 14
  store i8 %232, i8* %233, align 2
  %234 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %235 = load i8, i8* %234, align 1
  %236 = icmp sgt i8 %235, -1
  br i1 %236, label %237, label %242

237:                                              ; preds = %231
  %238 = icmp eq i8 %235, 0
  br i1 %238, label %246, label %239

239:                                              ; preds = %237
  %240 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 15
  %241 = load i8, i8* %240, align 1
  br label %246

242:                                              ; preds = %231
  %243 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 15
  %244 = load i8, i8* %243, align 1
  %245 = sub i8 0, %244
  br label %246

246:                                              ; preds = %237, %239, %242
  %247 = phi i8 [ %245, %242 ], [ %241, %239 ], [ 0, %237 ]
  %248 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 15
  store i8 %247, i8* %248, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psignw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = icmp sgt i16 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i16 %5, 0
  %9 = bitcast %union.XMMReg* %0 to i16*
  br i1 %8, label %16, label %10

10:                                               ; preds = %7
  %11 = load i16, i16* %9, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.XMMReg* %0 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = sub i16 0, %14
  br label %16

16:                                               ; preds = %7, %10, %12
  %17 = phi i16* [ %9, %10 ], [ %13, %12 ], [ %9, %7 ]
  %18 = phi i16 [ %11, %10 ], [ %15, %12 ], [ 0, %7 ]
  %19 = bitcast %union.XMMReg* %0 to [8 x i16]*
  store i16 %18, i16* %17, align 8
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = icmp sgt i16 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i16 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  %27 = load i16, i16* %26, align 2
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = sub i16 0, %30
  br label %32

32:                                               ; preds = %23, %25, %28
  %33 = phi i16 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = icmp sgt i16 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i16 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  %42 = load i16, i16* %41, align 4
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  %45 = load i16, i16* %44, align 4
  %46 = sub i16 0, %45
  br label %47

47:                                               ; preds = %38, %40, %43
  %48 = phi i16 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  store i16 %48, i16* %49, align 4
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %51 = load i16, i16* %50, align 2
  %52 = icmp sgt i16 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i16 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  %57 = load i16, i16* %56, align 2
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  %60 = load i16, i16* %59, align 2
  %61 = sub i16 0, %60
  br label %62

62:                                               ; preds = %53, %55, %58
  %63 = phi i16 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  store i16 %63, i16* %64, align 2
  %65 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %66 = bitcast i64* %65 to i16*
  %67 = load i16, i16* %66, align 8
  %68 = icmp sgt i16 %67, -1
  br i1 %68, label %69, label %75

69:                                               ; preds = %62
  %70 = icmp eq i16 %67, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %69
  %72 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %73 = bitcast i64* %72 to i16*
  %74 = load i16, i16* %73, align 8
  br label %80

75:                                               ; preds = %62
  %76 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %77 = bitcast i64* %76 to i16*
  %78 = load i16, i16* %77, align 8
  %79 = sub i16 0, %78
  br label %80

80:                                               ; preds = %69, %71, %75
  %81 = phi i16 [ %79, %75 ], [ %74, %71 ], [ 0, %69 ]
  %82 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %83 = bitcast i64* %82 to i16*
  store i16 %81, i16* %83, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = icmp sgt i16 %85, -1
  br i1 %86, label %87, label %92

87:                                               ; preds = %80
  %88 = icmp eq i16 %85, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  %91 = load i16, i16* %90, align 2
  br label %96

92:                                               ; preds = %80
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  %94 = load i16, i16* %93, align 2
  %95 = sub i16 0, %94
  br label %96

96:                                               ; preds = %87, %89, %92
  %97 = phi i16 [ %95, %92 ], [ %91, %89 ], [ 0, %87 ]
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  store i16 %97, i16* %98, align 2
  %99 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %100 = load i16, i16* %99, align 4
  %101 = icmp sgt i16 %100, -1
  br i1 %101, label %102, label %107

102:                                              ; preds = %96
  %103 = icmp eq i16 %100, 0
  br i1 %103, label %111, label %104

104:                                              ; preds = %102
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  %106 = load i16, i16* %105, align 4
  br label %111

107:                                              ; preds = %96
  %108 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  %109 = load i16, i16* %108, align 4
  %110 = sub i16 0, %109
  br label %111

111:                                              ; preds = %102, %104, %107
  %112 = phi i16 [ %110, %107 ], [ %106, %104 ], [ 0, %102 ]
  %113 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  store i16 %112, i16* %113, align 4
  %114 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = icmp sgt i16 %115, -1
  br i1 %116, label %117, label %122

117:                                              ; preds = %111
  %118 = icmp eq i16 %115, 0
  br i1 %118, label %126, label %119

119:                                              ; preds = %117
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  %121 = load i16, i16* %120, align 2
  br label %126

122:                                              ; preds = %111
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  %124 = load i16, i16* %123, align 2
  %125 = sub i16 0, %124
  br label %126

126:                                              ; preds = %117, %119, %122
  %127 = phi i16 [ %125, %122 ], [ %121, %119 ], [ 0, %117 ]
  %128 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  store i16 %127, i16* %128, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_psignd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i32 %5, 0
  %9 = bitcast %union.XMMReg* %0 to i32*
  br i1 %8, label %16, label %10

10:                                               ; preds = %7
  %11 = load i32, i32* %9, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.XMMReg* %0 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 0, %14
  br label %16

16:                                               ; preds = %7, %10, %12
  %17 = phi i32* [ %9, %10 ], [ %13, %12 ], [ %9, %7 ]
  %18 = phi i32 [ %11, %10 ], [ %15, %12 ], [ 0, %7 ]
  %19 = bitcast %union.XMMReg* %0 to [4 x i32]*
  store i32 %18, i32* %17, align 8
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i32 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 0, %30
  br label %32

32:                                               ; preds = %23, %25, %28
  %33 = phi i32 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %36 = bitcast i64* %35 to i32*
  %37 = load i32, i32* %36, align 8
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %45

39:                                               ; preds = %32
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %50, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %43 = bitcast i64* %42 to i32*
  %44 = load i32, i32* %43, align 8
  br label %50

45:                                               ; preds = %32
  %46 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %47 = bitcast i64* %46 to i32*
  %48 = load i32, i32* %47, align 8
  %49 = sub nsw i32 0, %48
  br label %50

50:                                               ; preds = %39, %41, %45
  %51 = phi i32 [ %49, %45 ], [ %44, %41 ], [ 0, %39 ]
  %52 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %53 = bitcast i64* %52 to i32*
  store i32 %51, i32* %53, align 8
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %57, label %62

57:                                               ; preds = %50
  %58 = icmp eq i32 %55, 0
  br i1 %58, label %66, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %61 = load i32, i32* %60, align 4
  br label %66

62:                                               ; preds = %50
  %63 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %64 = load i32, i32* %63, align 4
  %65 = sub nsw i32 0, %64
  br label %66

66:                                               ; preds = %57, %59, %62
  %67 = phi i32 [ %65, %62 ], [ %61, %59 ], [ 0, %57 ]
  %68 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %67, i32* %68, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_palignr_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = icmp sgt i32 %2, 31
  br i1 %4, label %122, label %5

5:                                                ; preds = %3
  %6 = shl i32 %2, 3
  %7 = icmp sgt i32 %6, -64
  %8 = add i32 %6, 63
  %9 = icmp ult i32 %8, 127
  br i1 %9, label %10, label %20

10:                                               ; preds = %5
  %11 = icmp sgt i32 %6, 0
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 8
  %14 = zext i32 %6 to i64
  %15 = lshr i64 %13, %14
  %16 = sub nsw i32 0, %6
  %17 = zext i32 %16 to i64
  %18 = shl i64 %13, %17
  %19 = select i1 %11, i64 %15, i64 %18
  br label %20

20:                                               ; preds = %5, %10
  %21 = phi i64 [ %19, %10 ], [ 0, %5 ]
  %22 = add nsw i32 %6, -64
  %23 = icmp sgt i32 %6, 0
  %24 = add i32 %6, -1
  %25 = icmp ult i32 %24, 127
  br i1 %25, label %26, label %36

26:                                               ; preds = %20
  %27 = icmp sgt i32 %6, 64
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = load i64, i64* %28, align 8
  %30 = zext i32 %22 to i64
  %31 = lshr i64 %29, %30
  %32 = sub nsw i32 64, %6
  %33 = zext i32 %32 to i64
  %34 = shl i64 %29, %33
  %35 = select i1 %27, i64 %31, i64 %34
  br label %36

36:                                               ; preds = %20, %26
  %37 = phi i64 [ %35, %26 ], [ 0, %20 ]
  %38 = or i64 %37, %21
  %39 = add nsw i32 %6, -128
  %40 = icmp sgt i32 %6, 64
  %41 = add i32 %6, -65
  %42 = icmp ult i32 %41, 127
  br i1 %42, label %43, label %53

43:                                               ; preds = %36
  %44 = icmp sgt i32 %6, 128
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %46 = load i64, i64* %45, align 8
  %47 = zext i32 %39 to i64
  %48 = lshr i64 %46, %47
  %49 = sub nsw i32 128, %6
  %50 = zext i32 %49 to i64
  %51 = shl i64 %46, %50
  %52 = select i1 %44, i64 %48, i64 %51
  br label %53

53:                                               ; preds = %36, %43
  %54 = phi i64 [ %52, %43 ], [ 0, %36 ]
  %55 = or i64 %38, %54
  %56 = icmp sgt i32 %6, 128
  %57 = add i32 %6, -129
  %58 = icmp ult i32 %57, 127
  br i1 %58, label %59, label %71

59:                                               ; preds = %53
  %60 = add nsw i32 %6, -192
  %61 = icmp sgt i32 %6, 192
  %62 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %63 = load i64, i64* %62, align 8
  %64 = zext i32 %60 to i64
  %65 = lshr i64 %63, %64
  %66 = sub nsw i32 192, %6
  %67 = zext i32 %66 to i64
  %68 = shl i64 %63, %67
  %69 = select i1 %61, i64 %65, i64 %68
  %70 = or i64 %69, %55
  br label %83

71:                                               ; preds = %53
  %72 = icmp ugt i32 %6, -128
  br i1 %72, label %73, label %83

73:                                               ; preds = %71
  %74 = add nsw i32 %6, 64
  %75 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %76 = load i64, i64* %75, align 8
  %77 = zext i32 %74 to i64
  %78 = lshr i64 %76, %77
  %79 = sub nsw i32 -64, %6
  %80 = zext i32 %79 to i64
  %81 = shl i64 %76, %80
  %82 = select i1 %7, i64 %78, i64 %81
  br label %83

83:                                               ; preds = %59, %71, %73
  %84 = phi i64 [ %55, %73 ], [ %55, %71 ], [ %70, %59 ]
  %85 = phi i64 [ %82, %73 ], [ 0, %71 ], [ 0, %59 ]
  br i1 %9, label %86, label %95

86:                                               ; preds = %83
  %87 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %88 = load i64, i64* %87, align 8
  %89 = zext i32 %6 to i64
  %90 = lshr i64 %88, %89
  %91 = sub nsw i32 0, %6
  %92 = zext i32 %91 to i64
  %93 = shl i64 %88, %92
  %94 = select i1 %23, i64 %90, i64 %93
  br label %95

95:                                               ; preds = %83, %86
  %96 = phi i64 [ %94, %86 ], [ 0, %83 ]
  %97 = or i64 %96, %85
  br i1 %25, label %98, label %107

98:                                               ; preds = %95
  %99 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %100 = load i64, i64* %99, align 8
  %101 = zext i32 %22 to i64
  %102 = lshr i64 %100, %101
  %103 = sub nsw i32 64, %6
  %104 = zext i32 %103 to i64
  %105 = shl i64 %100, %104
  %106 = select i1 %40, i64 %102, i64 %105
  br label %107

107:                                              ; preds = %95, %98
  %108 = phi i64 [ %106, %98 ], [ 0, %95 ]
  %109 = or i64 %97, %108
  br i1 %42, label %110, label %119

110:                                              ; preds = %107
  %111 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %112 = load i64, i64* %111, align 8
  %113 = zext i32 %39 to i64
  %114 = lshr i64 %112, %113
  %115 = sub nsw i32 128, %6
  %116 = zext i32 %115 to i64
  %117 = shl i64 %112, %116
  %118 = select i1 %56, i64 %114, i64 %117
  br label %119

119:                                              ; preds = %107, %110
  %120 = phi i64 [ %118, %110 ], [ 0, %107 ]
  %121 = or i64 %109, %120
  br label %122

122:                                              ; preds = %3, %119
  %123 = phi i64 [ %121, %119 ], [ 0, %3 ]
  %124 = phi i64 [ %84, %119 ], [ 0, %3 ]
  %125 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %123, i64* %126, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pblendvb_xmm(%union.XMMReg* %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 15, i64 0
  %5 = bitcast %union.XMMReg* %4 to i8*
  %6 = load i8, i8* %5, align 16
  %7 = icmp slt i8 %6, 0
  %8 = select i1 %7, %union.XMMReg* %1, %union.XMMReg* %0
  %9 = bitcast %union.XMMReg* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %12 = bitcast %union.XMMReg* %0 to i8*
  store i8 %10, i8* %12, align 8
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 15, i64 0
  %15 = bitcast %union.XMMReg* %14 to [16 x i8]*
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %20 = select i1 %18, [16 x i8]* %19, [16 x i8]* %11
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 1
  store i8 %22, i8* %23, align 1
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 15, i64 0
  %26 = bitcast %union.XMMReg* %25 to [16 x i8]*
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = icmp slt i8 %28, 0
  %30 = select i1 %29, [16 x i8]* %19, [16 x i8]* %11
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %30, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 2
  store i8 %32, i8* %33, align 2
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 15, i64 0
  %36 = bitcast %union.XMMReg* %35 to [16 x i8]*
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %36, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  %40 = select i1 %39, [16 x i8]* %19, [16 x i8]* %11
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %40, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 15, i64 0
  %46 = bitcast %union.XMMReg* %45 to [16 x i8]*
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %46, i64 0, i64 4
  %48 = load i8, i8* %47, align 4
  %49 = icmp slt i8 %48, 0
  %50 = select i1 %49, [16 x i8]* %19, [16 x i8]* %11
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %50, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 4
  store i8 %52, i8* %53, align 4
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 15, i64 0
  %56 = bitcast %union.XMMReg* %55 to [16 x i8]*
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 5
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  %60 = select i1 %59, [16 x i8]* %19, [16 x i8]* %11
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %60, i64 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 5
  store i8 %62, i8* %63, align 1
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 15, i64 0
  %66 = bitcast %union.XMMReg* %65 to [16 x i8]*
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %66, i64 0, i64 6
  %68 = load i8, i8* %67, align 2
  %69 = icmp slt i8 %68, 0
  %70 = select i1 %69, [16 x i8]* %19, [16 x i8]* %11
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %70, i64 0, i64 6
  %72 = load i8, i8* %71, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 6
  store i8 %72, i8* %73, align 2
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 15, i64 0
  %76 = bitcast %union.XMMReg* %75 to [16 x i8]*
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %76, i64 0, i64 7
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  %80 = select i1 %79, [16 x i8]* %19, [16 x i8]* %11
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %80, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 7
  store i8 %82, i8* %83, align 1
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 15, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 8
  %88 = icmp slt i8 %87, 0
  %89 = select i1 %88, %union.XMMReg* %1, %union.XMMReg* %0
  %90 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %89, i64 0, i32 0, i64 1
  %91 = bitcast i64* %90 to i8*
  %92 = load i8, i8* %91, align 8
  %93 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %94 = bitcast i64* %93 to i8*
  store i8 %92, i8* %94, align 8
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 15, i64 0
  %96 = bitcast %union.XMMReg* %95 to [16 x i8]*
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 0
  %100 = select i1 %99, [16 x i8]* %19, [16 x i8]* %11
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %100, i64 0, i64 9
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 9
  store i8 %102, i8* %103, align 1
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 10
  %105 = load i8, i8* %104, align 2
  %106 = icmp slt i8 %105, 0
  %107 = select i1 %106, [16 x i8]* %19, [16 x i8]* %11
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 10
  %109 = load i8, i8* %108, align 2
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 10
  store i8 %109, i8* %110, align 2
  %111 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 11
  %112 = load i8, i8* %111, align 1
  %113 = icmp slt i8 %112, 0
  %114 = select i1 %113, [16 x i8]* %19, [16 x i8]* %11
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %114, i64 0, i64 11
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 11
  store i8 %116, i8* %117, align 1
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 12
  %119 = load i8, i8* %118, align 4
  %120 = icmp slt i8 %119, 0
  %121 = select i1 %120, [16 x i8]* %19, [16 x i8]* %11
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %121, i64 0, i64 12
  %123 = load i8, i8* %122, align 4
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 12
  store i8 %123, i8* %124, align 4
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 13
  %126 = load i8, i8* %125, align 1
  %127 = icmp slt i8 %126, 0
  %128 = select i1 %127, [16 x i8]* %19, [16 x i8]* %11
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %128, i64 0, i64 13
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 13
  store i8 %130, i8* %131, align 1
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 14
  %133 = load i8, i8* %132, align 2
  %134 = icmp slt i8 %133, 0
  %135 = select i1 %134, [16 x i8]* %19, [16 x i8]* %11
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %135, i64 0, i64 14
  %137 = load i8, i8* %136, align 2
  %138 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 14
  store i8 %137, i8* %138, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 15
  %140 = load i8, i8* %139, align 1
  %141 = icmp slt i8 %140, 0
  %142 = select i1 %141, [16 x i8]* %19, [16 x i8]* %11
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %142, i64 0, i64 15
  %144 = load i8, i8* %143, align 1
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 15
  store i8 %144, i8* %145, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_blendvps_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 15, i64 0
  %5 = bitcast %union.XMMReg* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = icmp slt i32 %6, 0
  %8 = select i1 %7, %union.XMMReg* %1, %union.XMMReg* %0
  %9 = bitcast %union.XMMReg* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %12 = bitcast %union.XMMReg* %0 to i32*
  store i32 %10, i32* %12, align 8
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 15, i64 0
  %15 = bitcast %union.XMMReg* %14 to [4 x i32]*
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 0
  %19 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %20 = select i1 %18, [4 x i32]* %19, [4 x i32]* %11
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 15, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = icmp slt i32 %27, 0
  %29 = select i1 %28, %union.XMMReg* %1, %union.XMMReg* %0
  %30 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %29, i64 0, i32 0, i64 1
  %31 = bitcast i64* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %34 = bitcast i64* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 15, i64 0
  %36 = bitcast %union.XMMReg* %35 to [4 x i32]*
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  %40 = select i1 %39, [4 x i32]* %19, [4 x i32]* %11
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 3
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 3
  store i32 %42, i32* %43, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_blendvpd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 15, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 16
  %6 = icmp slt i64 %5, 0
  %7 = select i1 %6, %union.XMMReg* %1, %union.XMMReg* %0
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %7, i64 0, i32 0, i64 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 15, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp slt i64 %13, 0
  %15 = select i1 %14, %union.XMMReg* %1, %union.XMMReg* %0
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %15, i64 0, i32 0, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %17, i64* %18, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_ptest_xmm(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, %9
  %13 = or i64 %12, %7
  %14 = xor i64 %6, -1
  %15 = and i64 %4, %14
  %16 = xor i64 %11, -1
  %17 = and i64 %9, %16
  %18 = or i64 %17, %15
  %19 = icmp eq i64 %13, 0
  %20 = select i1 %19, i32 64, i32 0
  %21 = icmp eq i64 %18, 0
  %22 = zext i1 %21 to i32
  %23 = or i32 %20, %22
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 2
  store i32 %23, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovsxbw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i16
  %7 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i16
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = sext i8 %14 to i16
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  store i16 %15, i16* %16, align 4
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i16
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = sext i8 %22 to i16
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i16*
  store i16 %23, i16* %25, align 8
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %31 = load i8, i8* %30, align 2
  %32 = sext i8 %31 to i16
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  store i16 %32, i16* %33, align 4
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i16
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  store i16 %36, i16* %37, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovsxbd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = sext i8 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovsxbq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovsxwd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovsxwq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = sext i16 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovsxdq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovzxbw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i16
  %7 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = zext i8 %14 to i16
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  store i16 %15, i16* %16, align 4
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = zext i8 %22 to i16
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i16*
  store i16 %23, i16* %25, align 8
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i16
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  store i16 %32, i16* %33, align 4
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  store i16 %36, i16* %37, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovzxbd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovzxbq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovzxwd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovzxwq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmovzxdq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmuldq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = sext i32 %4 to i64
  %6 = bitcast %union.XMMReg* %1 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = mul nsw i64 %8, %5
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = sext i32 %17 to i64
  %19 = mul nsw i64 %18, %14
  store i64 %19, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpeqq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %9, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_packusdw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 65535
  %7 = select i1 %6, i32 %5, i32 65535
  %8 = icmp sgt i32 %7, 0
  %9 = select i1 %8, i32 %7, i32 0
  %10 = trunc i32 %9 to i16
  %11 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %12 = bitcast %union.XMMReg* %0 to i16*
  store i16 %10, i16* %12, align 8
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 65535
  %16 = select i1 %15, i32 %14, i32 65535
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = trunc i32 %18 to i16
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 1
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = icmp slt i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 65535
  %33 = select i1 %32, i32 %31, i32 65535
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %39 = bitcast %union.XMMReg* %1 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = icmp slt i32 %40, 65535
  %42 = select i1 %41, i32 %40, i32 65535
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  %45 = trunc i32 %44 to i16
  %46 = bitcast i64* %21 to i16*
  store i16 %45, i16* %46, align 8
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %48, 65535
  %50 = select i1 %49, i32 %48, i32 65535
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 5
  store i16 %53, i16* %54, align 2
  %55 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %56 = bitcast i64* %55 to i32*
  %57 = load i32, i32* %56, align 8
  %58 = icmp slt i32 %57, 65535
  %59 = select i1 %58, i32 %57, i32 65535
  %60 = icmp sgt i32 %59, 0
  %61 = select i1 %60, i32 %59, i32 0
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 6
  store i16 %62, i16* %63, align 4
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 3
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 65535
  %67 = select i1 %66, i32 %65, i32 65535
  %68 = icmp sgt i32 %67, 0
  %69 = select i1 %68, i32 %67, i32 0
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 7
  store i16 %70, i16* %71, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminsb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp slt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp slt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp slt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp slt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp slt i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp slt i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp slt i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp slt i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp slt i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminsd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminuw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp ult i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp ult i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp ult i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp ult i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp ult i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp ult i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp ult i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp ult i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pminud_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp ult i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp ult i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp ult i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxsb_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp sgt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp sgt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp sgt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp sgt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp sgt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp sgt i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp sgt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp sgt i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp sgt i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp sgt i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp sgt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp sgt i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp sgt i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxsd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxuw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp ugt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp ugt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp ugt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp ugt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp ugt i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp ugt i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp ugt i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp ugt i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmaxud_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp ugt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pmulld_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = mul nsw i32 %8, %5
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = mul nsw i32 %13, %11
  store i32 %14, i32* %10, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = mul nsw i32 %20, %17
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = mul nsw i32 %25, %23
  store i32 %26, i32* %22, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_phminposuw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %5 = load i16, i16* %4, align 2
  %6 = bitcast %union.XMMReg* %1 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = icmp ult i16 %5, %7
  %9 = zext i1 %8 to i32
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %11 = load i16, i16* %10, align 4
  %12 = zext i1 %8 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %12
  %14 = load i16, i16* %13, align 2
  %15 = icmp ult i16 %11, %14
  %16 = select i1 %15, i32 2, i32 %9
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = zext i32 %16 to i64
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = icmp ult i16 %18, %21
  %23 = select i1 %22, i32 3, i32 %16
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i16*
  %26 = load i16, i16* %25, align 8
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = icmp ult i16 %26, %29
  %31 = select i1 %30, i32 4, i32 %23
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = zext i32 %31 to i64
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = icmp ult i16 %33, %36
  %38 = select i1 %37, i32 5, i32 %31
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = zext i32 %38 to i64
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = icmp ult i16 %40, %43
  %45 = select i1 %44, i32 6, i32 %38
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %47 = load i16, i16* %46, align 2
  %48 = zext i32 %45 to i64
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = icmp ult i16 %47, %50
  %52 = select i1 %51, i32 7, i32 %45
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %53, align 8
  %54 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %54, i64 0, i64 1
  store i32 0, i32* %55, align 4
  %56 = trunc i32 %52 to i16
  %57 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 1
  store i16 %56, i16* %58, align 2
  %59 = sext i32 %52 to i64
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = bitcast %union.XMMReg* %0 to i16*
  store i16 %61, i16* %62, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_roundps_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 %11, %struct.float_status* nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %14 = bitcast %union.XMMReg* %1 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_round_to_int(i32 %15, %struct.float_status* nonnull %17)
  %19 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %20 = bitcast %union.XMMReg* %0 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 13
  %25 = tail call i32 @float32_round_to_int(i32 %22, %struct.float_status* nonnull %24)
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 13
  %32 = tail call i32 @float32_round_to_int(i32 %29, %struct.float_status* nonnull %31)
  %33 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %34 = bitcast i64* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 3
  %36 = load i32, i32* %35, align 4
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %37, i64 0, i32 13
  %39 = tail call i32 @float32_round_to_int(i32 %36, %struct.float_status* nonnull %38)
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %39, i32* %40, align 4
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 13, i32 1
  store i8 %6, i8* %42, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_roundpd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 %11, %struct.float_status* nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %14 = load i64, i64* %13, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 13
  %17 = tail call i64 @float64_round_to_int(i64 %14, %struct.float_status* nonnull %16)
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %20 = load i64, i64* %19, align 8
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 13
  %23 = tail call i64 @float64_round_to_int(i64 %20, %struct.float_status* nonnull %22)
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %23, i64* %24, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13, i32 1
  store i8 %6, i8* %26, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_roundss_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 %11, %struct.float_status* nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = bitcast %union.XMMReg* %1 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 13
  %17 = tail call i32 @float32_round_to_int(i32 %14, %struct.float_status* nonnull %16)
  %18 = bitcast %union.XMMReg* %0 to i32*
  store i32 %17, i32* %18, align 8
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13, i32 1
  store i8 %6, i8* %20, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_roundsd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 %11, %struct.float_status* nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %14 = load i64, i64* %13, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 13
  %17 = tail call i64 @float64_round_to_int(i64 %14, %struct.float_status* nonnull %16)
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %17, i64* %18, align 8
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13, i32 1
  store i8 %6, i8* %20, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_blendps_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, %union.XMMReg* %0, %union.XMMReg* %1
  %7 = bitcast %union.XMMReg* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  %13 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %14 = select i1 %12, [4 x i32]* %9, [4 x i32]* %13
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %16, i32* %17, align 4
  %18 = and i32 %2, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, %union.XMMReg* %0, %union.XMMReg* %1
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %20, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i32*
  store i32 %23, i32* %25, align 8
  %26 = and i32 %2, 8
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %27, [4 x i32]* %9, [4 x i32]* %13
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i64 0, i64 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %30, i32* %31, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_blendpd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, %union.XMMReg* %0, %union.XMMReg* %1
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %6, i64 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %8, i64* %9, align 8
  %10 = and i32 %2, 2
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, %union.XMMReg* %0, %union.XMMReg* %1
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %12, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pblendw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, %union.XMMReg* %0, %union.XMMReg* %1
  %7 = bitcast %union.XMMReg* %6 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %10 = bitcast %union.XMMReg* %0 to i16*
  store i16 %8, i16* %10, align 8
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  %13 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %14 = select i1 %12, [8 x i16]* %9, [8 x i16]* %13
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 1
  store i16 %16, i16* %17, align 2
  %18 = and i32 %2, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, [8 x i16]* %9, [8 x i16]* %13
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 2
  %22 = load i16, i16* %21, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 2
  store i16 %22, i16* %23, align 4
  %24 = and i32 %2, 8
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, [8 x i16]* %9, [8 x i16]* %13
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 3
  store i16 %28, i16* %29, align 2
  %30 = and i32 %2, 16
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, %union.XMMReg* %0, %union.XMMReg* %1
  %33 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %32, i64 0, i32 0, i64 1
  %34 = bitcast i64* %33 to i16*
  %35 = load i16, i16* %34, align 8
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  store i16 %35, i16* %37, align 8
  %38 = and i32 %2, 32
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, [8 x i16]* %9, [8 x i16]* %13
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 5
  %42 = load i16, i16* %41, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 5
  store i16 %42, i16* %43, align 2
  %44 = and i32 %2, 64
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, [8 x i16]* %9, [8 x i16]* %13
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 6
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 6
  store i16 %48, i16* %49, align 4
  %50 = trunc i32 %2 to i8
  %51 = icmp slt i8 %50, 0
  %52 = select i1 %51, [8 x i16]* %13, [8 x i16]* %9
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %52, i64 0, i64 7
  %54 = load i16, i16* %53, align 2
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 7
  store i16 %54, i16* %55, align 2
  ret void
}

; Function Attrs: uwtable
define void @helper_dpps_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = and i32 %2, 16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3
  %7 = bitcast %union.XMMReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %union.XMMReg* %1 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 13
  %13 = tail call i32 @float32_mul(i32 %8, i32 %10, %struct.float_status* nonnull %12)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i32 @float32_add(i32 0, i32 %13, %struct.float_status* nonnull %15)
  br label %17

17:                                               ; preds = %3, %6
  %18 = phi i32 [ %16, %6 ], [ 0, %3 ]
  %19 = and i32 %2, 32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %17
  %22 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %25, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 13
  %30 = tail call i32 @float32_mul(i32 %24, i32 %27, %struct.float_status* nonnull %29)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 13
  %33 = tail call i32 @float32_add(i32 %18, i32 %30, %struct.float_status* nonnull %32)
  br label %34

34:                                               ; preds = %17, %21
  %35 = phi i32 [ %33, %21 ], [ %18, %17 ]
  %36 = and i32 %2, 64
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %40 = bitcast i64* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %43 = bitcast i64* %42 to i32*
  %44 = load i32, i32* %43, align 8
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 13
  %47 = tail call i32 @float32_mul(i32 %41, i32 %44, %struct.float_status* nonnull %46)
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 13
  %50 = tail call i32 @float32_add(i32 %35, i32 %47, %struct.float_status* nonnull %49)
  br label %51

51:                                               ; preds = %34, %38
  %52 = phi i32 [ %50, %38 ], [ %35, %34 ]
  %53 = trunc i32 %2 to i8
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %51
  %56 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %57 = getelementptr inbounds [4 x i32], [4 x i32]* %56, i64 0, i64 3
  %58 = load i32, i32* %57, align 4
  %59 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %59, i64 0, i64 3
  %61 = load i32, i32* %60, align 4
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 13
  %64 = tail call i32 @float32_mul(i32 %58, i32 %61, %struct.float_status* nonnull %63)
  %65 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %65, i64 0, i32 13
  %67 = tail call i32 @float32_add(i32 %52, i32 %64, %struct.float_status* nonnull %66)
  br label %68

68:                                               ; preds = %51, %55
  %69 = phi i32 [ %67, %55 ], [ %52, %51 ]
  %70 = insertelement <4 x i32> undef, i32 %2, i32 0
  %.i0 = and i32 %2, 1
  %.i1 = and i32 %2, 2
  %.i2 = and i32 %2, 4
  %.i3 = and i32 %2, 8
  %.i01 = icmp eq i32 %.i0, 0
  %.i12 = icmp eq i32 %.i1, 0
  %.i23 = icmp eq i32 %.i2, 0
  %.i34 = icmp eq i32 %.i3, 0
  %71 = insertelement <4 x i32> undef, i32 %69, i32 0
  %.i05 = select i1 %.i01, i32 0, i32 %69
  %.i16 = select i1 %.i12, i32 0, i32 %69
  %.i27 = select i1 %.i23, i32 0, i32 %69
  %.i38 = select i1 %.i34, i32 0, i32 %69
  %.upto0 = insertelement <4 x i32> undef, i32 %.i05, i32 0
  %.upto1 = insertelement <4 x i32> %.upto0, i32 %.i16, i32 1
  %.upto2 = insertelement <4 x i32> %.upto1, i32 %.i27, i32 2
  %72 = insertelement <4 x i32> %.upto2, i32 %.i38, i32 3
  %73 = bitcast %union.XMMReg* %0 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %73, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_dppd_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = and i32 %2, 16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 13
  %13 = tail call i64 @float64_mul(i64 %8, i64 %10, %struct.float_status* nonnull %12)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 0, i64 %13, %struct.float_status* nonnull %15)
  br label %17

17:                                               ; preds = %3, %6
  %18 = phi i64 [ %16, %6 ], [ 0, %3 ]
  %19 = and i32 %2, 32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %32, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 13
  %28 = tail call i64 @float64_mul(i64 %23, i64 %25, %struct.float_status* nonnull %27)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i64 @float64_add(i64 %18, i64 %28, %struct.float_status* nonnull %30)
  br label %32

32:                                               ; preds = %17, %21
  %33 = phi i64 [ %31, %21 ], [ %18, %17 ]
  %34 = and i32 %2, 1
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i64 0, i64 %33
  %37 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %36, i64* %37, align 8
  %38 = and i32 %2, 2
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i64 0, i64 %33
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %40, i64* %41, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @helper_mpsadbw_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #13 {
  %4 = alloca <8 x i16>, align 16
  %5 = bitcast <8 x i16>* %4 to i8*
  %6 = shl i32 %2, 2
  %7 = and i32 %6, 12
  %8 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %9 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %10 = zext i32 %7 to i64
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = or i32 %7, 1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %7, 2
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = or i32 %7, 3
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = and i32 %2, 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = or i64 %30, 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %34
  %36 = or i64 %30, 3
  %37 = add nuw nsw i64 %34, 4
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i64 %36, 3
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nuw nsw i64 %36, 3
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i64 %36, 4
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i64 %36, 4
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i64 %36, 5
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i64 %36, 5
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i64 %36, 6
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = bitcast i8* %35 to <8 x i8>*
  %70 = load <8 x i8>, <8 x i8>* %69, align 1
  %.i0 = extractelement <8 x i8> %70, i32 0
  %.i01 = zext i8 %.i0 to i32
  %.i1 = extractelement <8 x i8> %70, i32 1
  %.i12 = zext i8 %.i1 to i32
  %.i2 = extractelement <8 x i8> %70, i32 2
  %.i23 = zext i8 %.i2 to i32
  %.i3 = extractelement <8 x i8> %70, i32 3
  %.i34 = zext i8 %.i3 to i32
  %.i4 = extractelement <8 x i8> %70, i32 4
  %.i45 = zext i8 %.i4 to i32
  %.i5 = extractelement <8 x i8> %70, i32 5
  %.i56 = zext i8 %.i5 to i32
  %.i6 = extractelement <8 x i8> %70, i32 6
  %.i67 = zext i8 %.i6 to i32
  %.i7 = extractelement <8 x i8> %70, i32 7
  %.i78 = zext i8 %.i7 to i32
  %.upto0 = insertelement <8 x i32> undef, i32 %.i01, i32 0
  %.upto1 = insertelement <8 x i32> %.upto0, i32 %.i12, i32 1
  %.upto2 = insertelement <8 x i32> %.upto1, i32 %.i23, i32 2
  %.upto3 = insertelement <8 x i32> %.upto2, i32 %.i34, i32 3
  %.upto4 = insertelement <8 x i32> %.upto3, i32 %.i45, i32 4
  %.upto5 = insertelement <8 x i32> %.upto4, i32 %.i56, i32 5
  %.upto6 = insertelement <8 x i32> %.upto5, i32 %.i67, i32 6
  %71 = insertelement <8 x i32> %.upto6, i32 %.i78, i32 7
  %72 = insertelement <8 x i32> undef, i32 %33, i32 0
  %73 = extractelement <8 x i32> %71, i32 1
  %74 = extractelement <8 x i32> %71, i32 2
  %75 = extractelement <8 x i32> %71, i32 3
  %76 = insertelement <8 x i32> undef, i32 %13, i32 0
  %.i09 = sub nsw i32 %33, %13
  %.i110 = sub nsw i32 %.i01, %13
  %.i211 = sub nsw i32 %.i12, %13
  %.i312 = sub nsw i32 %.i23, %13
  %.i413 = sub nsw i32 %.i34, %13
  %.i514 = sub nsw i32 %.i45, %13
  %.i615 = sub nsw i32 %.i56, %13
  %.i716 = sub nsw i32 %.i67, %13
  %.i017 = icmp slt i32 %.i09, 0
  %.i118 = icmp slt i32 %.i110, 0
  %.i219 = icmp slt i32 %.i211, 0
  %.i320 = icmp slt i32 %.i312, 0
  %.i421 = icmp slt i32 %.i413, 0
  %.i522 = icmp slt i32 %.i514, 0
  %.i623 = icmp slt i32 %.i615, 0
  %.i724 = icmp slt i32 %.i716, 0
  %.i025 = sub nsw i32 0, %.i09
  %.i126 = sub nsw i32 0, %.i110
  %.i227 = sub nsw i32 0, %.i211
  %.i328 = sub nsw i32 0, %.i312
  %.i429 = sub nsw i32 0, %.i413
  %.i530 = sub nsw i32 0, %.i514
  %.i631 = sub nsw i32 0, %.i615
  %.i732 = sub nsw i32 0, %.i716
  %.i033 = select i1 %.i017, i32 %.i025, i32 %.i09
  %.i134 = select i1 %.i118, i32 %.i126, i32 %.i110
  %.i235 = select i1 %.i219, i32 %.i227, i32 %.i211
  %.i336 = select i1 %.i320, i32 %.i328, i32 %.i312
  %.i437 = select i1 %.i421, i32 %.i429, i32 %.i413
  %.i538 = select i1 %.i522, i32 %.i530, i32 %.i514
  %.i639 = select i1 %.i623, i32 %.i631, i32 %.i615
  %.i740 = select i1 %.i724, i32 %.i732, i32 %.i716
  %.i041 = trunc i32 %.i033 to i16
  %.i142 = trunc i32 %.i134 to i16
  %.i243 = trunc i32 %.i235 to i16
  %.i344 = trunc i32 %.i336 to i16
  %.i445 = trunc i32 %.i437 to i16
  %.i546 = trunc i32 %.i538 to i16
  %.i647 = trunc i32 %.i639 to i16
  %.i748 = trunc i32 %.i740 to i16
  %77 = insertelement <8 x i32> undef, i32 %18, i32 0
  %.i049 = sub nsw i32 %.i01, %18
  %.i150 = sub nsw i32 %.i12, %18
  %.i251 = sub nsw i32 %.i23, %18
  %.i352 = sub nsw i32 %.i34, %18
  %.i453 = sub nsw i32 %.i45, %18
  %.i554 = sub nsw i32 %.i56, %18
  %.i655 = sub nsw i32 %.i67, %18
  %.i756 = sub nsw i32 %.i78, %18
  %.i057 = icmp slt i32 %.i049, 0
  %.i158 = icmp slt i32 %.i150, 0
  %.i259 = icmp slt i32 %.i251, 0
  %.i360 = icmp slt i32 %.i352, 0
  %.i461 = icmp slt i32 %.i453, 0
  %.i562 = icmp slt i32 %.i554, 0
  %.i663 = icmp slt i32 %.i655, 0
  %.i764 = icmp slt i32 %.i756, 0
  %.i065 = sub nsw i32 0, %.i049
  %.i166 = sub nsw i32 0, %.i150
  %.i267 = sub nsw i32 0, %.i251
  %.i368 = sub nsw i32 0, %.i352
  %.i469 = sub nsw i32 0, %.i453
  %.i570 = sub nsw i32 0, %.i554
  %.i671 = sub nsw i32 0, %.i655
  %.i772 = sub nsw i32 0, %.i756
  %.i073 = select i1 %.i057, i32 %.i065, i32 %.i049
  %.i174 = select i1 %.i158, i32 %.i166, i32 %.i150
  %.i275 = select i1 %.i259, i32 %.i267, i32 %.i251
  %.i376 = select i1 %.i360, i32 %.i368, i32 %.i352
  %.i477 = select i1 %.i461, i32 %.i469, i32 %.i453
  %.i578 = select i1 %.i562, i32 %.i570, i32 %.i554
  %.i679 = select i1 %.i663, i32 %.i671, i32 %.i655
  %.i780 = select i1 %.i764, i32 %.i772, i32 %.i756
  %.i081 = trunc i32 %.i073 to i16
  %.i182 = trunc i32 %.i174 to i16
  %.i283 = trunc i32 %.i275 to i16
  %.i384 = trunc i32 %.i376 to i16
  %.i485 = trunc i32 %.i477 to i16
  %.i586 = trunc i32 %.i578 to i16
  %.i687 = trunc i32 %.i679 to i16
  %.i788 = trunc i32 %.i780 to i16
  %.i089 = add nuw nsw i16 %.i081, %.i041
  %.i190 = add nuw nsw i16 %.i182, %.i142
  %.i291 = add nuw nsw i16 %.i283, %.i243
  %.i392 = add nuw nsw i16 %.i384, %.i344
  %.i493 = add nuw nsw i16 %.i485, %.i445
  %.i594 = add nuw nsw i16 %.i586, %.i546
  %.i695 = add nuw nsw i16 %.i687, %.i647
  %.i796 = add nuw nsw i16 %.i788, %.i748
  %78 = add nuw nsw i64 %36, 6
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = insertelement <8 x i32> undef, i32 %73, i32 0
  %83 = insertelement <8 x i32> %82, i32 %74, i32 1
  %84 = insertelement <8 x i32> %83, i32 %75, i32 2
  %85 = insertelement <8 x i32> %84, i32 %40, i32 3
  %86 = insertelement <8 x i32> %85, i32 %48, i32 4
  %87 = insertelement <8 x i32> %86, i32 %56, i32 5
  %88 = insertelement <8 x i32> %87, i32 %64, i32 6
  %89 = insertelement <8 x i32> %88, i32 %81, i32 7
  %90 = insertelement <8 x i32> undef, i32 %23, i32 0
  %.i097 = sub nsw i32 %73, %23
  %.i198 = sub nsw i32 %74, %23
  %.i299 = sub nsw i32 %75, %23
  %.i3100 = sub nsw i32 %40, %23
  %.i4101 = sub nsw i32 %48, %23
  %.i5102 = sub nsw i32 %56, %23
  %.i6103 = sub nsw i32 %64, %23
  %.i7104 = sub nsw i32 %81, %23
  %.i0105 = icmp slt i32 %.i097, 0
  %.i1106 = icmp slt i32 %.i198, 0
  %.i2107 = icmp slt i32 %.i299, 0
  %.i3108 = icmp slt i32 %.i3100, 0
  %.i4109 = icmp slt i32 %.i4101, 0
  %.i5110 = icmp slt i32 %.i5102, 0
  %.i6111 = icmp slt i32 %.i6103, 0
  %.i7112 = icmp slt i32 %.i7104, 0
  %.i0113 = sub nsw i32 0, %.i097
  %.i1114 = sub nsw i32 0, %.i198
  %.i2115 = sub nsw i32 0, %.i299
  %.i3116 = sub nsw i32 0, %.i3100
  %.i4117 = sub nsw i32 0, %.i4101
  %.i5118 = sub nsw i32 0, %.i5102
  %.i6119 = sub nsw i32 0, %.i6103
  %.i7120 = sub nsw i32 0, %.i7104
  %.i0121 = select i1 %.i0105, i32 %.i0113, i32 %.i097
  %.i1122 = select i1 %.i1106, i32 %.i1114, i32 %.i198
  %.i2123 = select i1 %.i2107, i32 %.i2115, i32 %.i299
  %.i3124 = select i1 %.i3108, i32 %.i3116, i32 %.i3100
  %.i4125 = select i1 %.i4109, i32 %.i4117, i32 %.i4101
  %.i5126 = select i1 %.i5110, i32 %.i5118, i32 %.i5102
  %.i6127 = select i1 %.i6111, i32 %.i6119, i32 %.i6103
  %.i7128 = select i1 %.i7112, i32 %.i7120, i32 %.i7104
  %.i0129 = trunc i32 %.i0121 to i16
  %.i1130 = trunc i32 %.i1122 to i16
  %.i2131 = trunc i32 %.i2123 to i16
  %.i3132 = trunc i32 %.i3124 to i16
  %.i4133 = trunc i32 %.i4125 to i16
  %.i5134 = trunc i32 %.i5126 to i16
  %.i6135 = trunc i32 %.i6127 to i16
  %.i7136 = trunc i32 %.i7128 to i16
  %.i0137 = add nuw nsw i16 %.i089, %.i0129
  %.i1138 = add nuw nsw i16 %.i190, %.i1130
  %.i2139 = add nuw nsw i16 %.i291, %.i2131
  %.i3140 = add nuw nsw i16 %.i392, %.i3132
  %.i4141 = add nuw nsw i16 %.i493, %.i4133
  %.i5142 = add nuw nsw i16 %.i594, %.i5134
  %.i6143 = add nuw nsw i16 %.i695, %.i6135
  %.i7144 = add nuw nsw i16 %.i796, %.i7136
  %91 = add nuw nsw i64 %36, 7
  %92 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = insertelement <8 x i32> undef, i32 %74, i32 0
  %96 = insertelement <8 x i32> %95, i32 %75, i32 1
  %97 = insertelement <8 x i32> %96, i32 %40, i32 2
  %98 = insertelement <8 x i32> %97, i32 %44, i32 3
  %99 = insertelement <8 x i32> %98, i32 %52, i32 4
  %100 = insertelement <8 x i32> %99, i32 %60, i32 5
  %101 = insertelement <8 x i32> %100, i32 %68, i32 6
  %102 = insertelement <8 x i32> %101, i32 %94, i32 7
  %103 = insertelement <8 x i32> undef, i32 %28, i32 0
  %.i0145 = sub nsw i32 %74, %28
  %.i1146 = sub nsw i32 %75, %28
  %.i2147 = sub nsw i32 %40, %28
  %.i3148 = sub nsw i32 %44, %28
  %.i4149 = sub nsw i32 %52, %28
  %.i5150 = sub nsw i32 %60, %28
  %.i6151 = sub nsw i32 %68, %28
  %.i7152 = sub nsw i32 %94, %28
  %.i0153 = icmp slt i32 %.i0145, 0
  %.i1154 = icmp slt i32 %.i1146, 0
  %.i2155 = icmp slt i32 %.i2147, 0
  %.i3156 = icmp slt i32 %.i3148, 0
  %.i4157 = icmp slt i32 %.i4149, 0
  %.i5158 = icmp slt i32 %.i5150, 0
  %.i6159 = icmp slt i32 %.i6151, 0
  %.i7160 = icmp slt i32 %.i7152, 0
  %.i0161 = sub nsw i32 0, %.i0145
  %.i1162 = sub nsw i32 0, %.i1146
  %.i2163 = sub nsw i32 0, %.i2147
  %.i3164 = sub nsw i32 0, %.i3148
  %.i4165 = sub nsw i32 0, %.i4149
  %.i5166 = sub nsw i32 0, %.i5150
  %.i6167 = sub nsw i32 0, %.i6151
  %.i7168 = sub nsw i32 0, %.i7152
  %.i0169 = select i1 %.i0153, i32 %.i0161, i32 %.i0145
  %.i1170 = select i1 %.i1154, i32 %.i1162, i32 %.i1146
  %.i2171 = select i1 %.i2155, i32 %.i2163, i32 %.i2147
  %.i3172 = select i1 %.i3156, i32 %.i3164, i32 %.i3148
  %.i4173 = select i1 %.i4157, i32 %.i4165, i32 %.i4149
  %.i5174 = select i1 %.i5158, i32 %.i5166, i32 %.i5150
  %.i6175 = select i1 %.i6159, i32 %.i6167, i32 %.i6151
  %.i7176 = select i1 %.i7160, i32 %.i7168, i32 %.i7152
  %.i0177 = trunc i32 %.i0169 to i16
  %.i1178 = trunc i32 %.i1170 to i16
  %.i2179 = trunc i32 %.i2171 to i16
  %.i3180 = trunc i32 %.i3172 to i16
  %.i4181 = trunc i32 %.i4173 to i16
  %.i5182 = trunc i32 %.i5174 to i16
  %.i6183 = trunc i32 %.i6175 to i16
  %.i7184 = trunc i32 %.i7176 to i16
  %.i0185 = add nuw nsw i16 %.i0137, %.i0177
  %.i1186 = add nuw nsw i16 %.i1138, %.i1178
  %.i2187 = add nuw nsw i16 %.i2139, %.i2179
  %.i3188 = add nuw nsw i16 %.i3140, %.i3180
  %.i4189 = add nuw nsw i16 %.i4141, %.i4181
  %.i5190 = add nuw nsw i16 %.i5142, %.i5182
  %.i6191 = add nuw nsw i16 %.i6143, %.i6183
  %.i7192 = add nuw nsw i16 %.i7144, %.i7184
  %.upto0193 = insertelement <8 x i16> undef, i16 %.i0185, i32 0
  %.upto1194 = insertelement <8 x i16> %.upto0193, i16 %.i1186, i32 1
  %.upto2195 = insertelement <8 x i16> %.upto1194, i16 %.i2187, i32 2
  %.upto3196 = insertelement <8 x i16> %.upto2195, i16 %.i3188, i32 3
  %.upto4197 = insertelement <8 x i16> %.upto3196, i16 %.i4189, i32 4
  %.upto5198 = insertelement <8 x i16> %.upto4197, i16 %.i5190, i32 5
  %.upto6199 = insertelement <8 x i16> %.upto5198, i16 %.i6191, i32 6
  %104 = insertelement <8 x i16> %.upto6199, i16 %.i7192, i32 7
  store <8 x i16> %104, <8 x i16>* %4, align 16
  %105 = bitcast %union.XMMReg* %0 to i8*
  br label %106

106:                                              ; preds = %109, %3
  %107 = phi i64 [ 0, %3 ], [ %113, %109 ]
  %108 = icmp ult i64 %107, 16
  br i1 %108, label %109, label %114

109:                                              ; preds = %106
  %110 = getelementptr i8, i8* %5, i64 %107
  %111 = load i8, i8* %110
  %112 = getelementptr i8, i8* %105, i64 %107
  store i8 %111, i8* %112
  %113 = add i64 %107, 1
  br label %106

114:                                              ; preds = %106
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpgtq_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %4, %6
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %9, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_pcmpestri_xmm(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = trunc i32 %2 to i8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  %9 = sub nsw i32 0, %7
  %10 = select i1 %8, i32 %9, i32 %7
  %11 = and i32 %2, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  %16 = sub nsw i32 0, %14
  %17 = select i1 %15, i32 %16, i32 %14
  br i1 %12, label %22, label %18

18:                                               ; preds = %3
  %19 = icmp slt i32 %10, 8
  %20 = select i1 %19, i32 %10, i32 8
  %21 = icmp sgt i32 %17, 8
  br i1 %21, label %28, label %26

22:                                               ; preds = %3
  %23 = icmp slt i32 %10, 16
  %24 = select i1 %23, i32 %10, i32 16
  %25 = icmp sgt i32 %17, 16
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %18
  %27 = phi i32 [ %24, %22 ], [ %20, %18 ]
  br label %28

28:                                               ; preds = %18, %22, %26
  %29 = phi i32 [ %27, %26 ], [ %20, %18 ], [ %24, %22 ]
  %30 = phi i32 [ %17, %26 ], [ 8, %18 ], [ 16, %22 ]
  %31 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* %0, %union.XMMReg* %1, i8 signext %4, i32 %29, i32 %30)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %28
  %34 = and i32 %2, 64
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 (i32)* @ffs1, i32 (i32)* @rffs1
  %37 = tail call i32 %36(i32 %31), !callees !27
  %38 = add nsw i32 %37, -1
  br label %41

39:                                               ; preds = %28
  %40 = lshr i32 16, %11
  br label %41

41:                                               ; preds = %39, %33
  %42 = phi i32 [ %40, %39 ], [ %38, %33 ]
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 0, i64 1
  store i32 %42, i32* %44, align 4
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind uwtable
define internal fastcc i32 @pcmpxstrx(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1, i8 signext %2, i32 %3, i32 %4) unnamed_addr #16 {
  %6 = sext i8 %2 to i32
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 15, i32 7
  %10 = add i32 %3, -1
  %11 = add i32 %4, -1
  %12 = icmp slt i32 %9, %3
  %13 = select i1 %12, i32 0, i32 64
  %14 = icmp slt i32 %9, %4
  %15 = select i1 %14, i32 0, i32 128
  %16 = or i32 %13, %15
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 2
  store i32 %16, i32* %18, align 4
  %19 = lshr i32 %6, 2
  %20 = and i32 %19, 3
  switch i32 %20, label %721 [
    i32 0, label %35
    i32 1, label %21
    i32 2, label %373
    i32 3, label %551
  ]

21:                                               ; preds = %5
  %22 = icmp sgt i32 %3, 0
  br i1 %22, label %23, label %722

23:                                               ; preds = %21
  %24 = and i8 %2, 3
  %25 = zext i8 %24 to i32
  %26 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %27 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %28 = add nsw i32 %4, -2
  %29 = or i32 %28, 1
  %30 = icmp sgt i32 %29, -1
  %31 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %32 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %33 = zext i32 %10 to i64
  %34 = icmp eq i8 %24, 3
  br label %268

35:                                               ; preds = %5
  %36 = icmp sgt i32 %3, 0
  br i1 %36, label %37, label %722

37:                                               ; preds = %35
  %38 = and i8 %2, 3
  %39 = zext i8 %38 to i32
  %40 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %41 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %42 = icmp sgt i32 %4, 0
  %43 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %44 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %45 = icmp eq i8 %38, 0
  %46 = zext i32 %11 to i64
  %47 = zext i32 %10 to i64
  %48 = add nuw nsw i64 %46, 1
  br i1 %45, label %49, label %62

49:                                               ; preds = %37
  %50 = and i64 %48, 8589934584
  %51 = add nsw i64 %50, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i32 %11, 7
  %55 = and i64 %48, 8589934584
  %56 = sub nsw i64 %46, %55
  %57 = and i64 %53, 1
  %58 = icmp eq i64 %51, 0
  %59 = sub nuw nsw i64 %53, %57
  %60 = icmp eq i64 %57, 0
  %61 = icmp eq i64 %48, %55
  br label %77

62:                                               ; preds = %37
  %63 = add nuw nsw i64 %46, 1
  %64 = add nuw nsw i64 %46, 1
  %65 = icmp ult i32 %11, 7
  %66 = and i64 %64, 8589934584
  %67 = sub nsw i64 %46, %66
  %68 = icmp eq i64 %64, %66
  %69 = icmp ult i32 %11, 7
  %70 = and i64 %63, 8589934584
  %71 = sub nsw i64 %46, %70
  %72 = icmp eq i64 %63, %70
  %73 = icmp ult i32 %11, 7
  %74 = and i64 %48, 8589934584
  %75 = sub nsw i64 %46, %74
  %76 = icmp eq i64 %48, %74
  br label %142

77:                                               ; preds = %49, %128
  %78 = phi i64 [ %131, %128 ], [ %47, %49 ]
  %79 = phi i32 [ %129, %128 ], [ 0, %49 ]
  %80 = shl i32 %79, 1
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %41, i64 0, i64 %78
  %82 = load i8, i8* %81, align 1
  br i1 %42, label %83, label %128

83:                                               ; preds = %77
  br i1 %54, label %84, label %87

84:                                               ; preds = %125, %83
  %85 = phi i64 [ %46, %83 ], [ %56, %125 ]
  %86 = phi i32 [ %80, %83 ], [ %127, %125 ]
  br label %132

87:                                               ; preds = %83
  %88 = insertelement <4 x i8> undef, i8 %82, i32 0
  %89 = insertelement <4 x i8> undef, i8 %82, i32 0
  %90 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %80, i32 0
  br i1 %58, label %114, label %91

91:                                               ; preds = %87, %91
  %92 = phi i64 [ %111, %91 ], [ 0, %87 ]
  %.i0337 = phi i32 [ %.i0341, %91 ], [ %80, %87 ]
  %.i1338 = phi i32 [ %.i1342, %91 ], [ 0, %87 ]
  %.i2339 = phi i32 [ %.i2343, %91 ], [ 0, %87 ]
  %.i3340 = phi i32 [ %.i3344, %91 ], [ 0, %87 ]
  %.i0345 = phi i32 [ %.i0349, %91 ], [ 0, %87 ]
  %.i1346 = phi i32 [ %.i1350, %91 ], [ 0, %87 ]
  %.i2347 = phi i32 [ %.i2351, %91 ], [ 0, %87 ]
  %.i3348 = phi i32 [ %.i3352, %91 ], [ 0, %87 ]
  %93 = phi i64 [ %112, %91 ], [ %59, %87 ]
  %94 = sub i64 %46, %92
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %44, i64 0, i64 %94
  %96 = getelementptr inbounds i8, i8* %95, i64 -3
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 1
  %.i3353 = extractelement <4 x i8> %98, i32 3
  %.i2354 = extractelement <4 x i8> %98, i32 2
  %.i1355 = extractelement <4 x i8> %98, i32 1
  %.i0356 = extractelement <4 x i8> %98, i32 0
  %99 = getelementptr inbounds i8, i8* %95, i64 -7
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1
  %.i3357 = extractelement <4 x i8> %101, i32 3
  %.i2358 = extractelement <4 x i8> %101, i32 2
  %.i1359 = extractelement <4 x i8> %101, i32 1
  %.i0360 = extractelement <4 x i8> %101, i32 0
  %.i0361 = icmp eq i8 %82, %.i3353
  %.i1362 = icmp eq i8 %82, %.i2354
  %.i2363 = icmp eq i8 %82, %.i1355
  %.i3364 = icmp eq i8 %82, %.i0356
  %.i0365 = icmp eq i8 %82, %.i3357
  %.i1366 = icmp eq i8 %82, %.i2358
  %.i2367 = icmp eq i8 %82, %.i1359
  %.i3368 = icmp eq i8 %82, %.i0360
  %.i0369 = zext i1 %.i0361 to i32
  %.i1370 = zext i1 %.i1362 to i32
  %.i2371 = zext i1 %.i2363 to i32
  %.i3372 = zext i1 %.i3364 to i32
  %.i0373 = zext i1 %.i0365 to i32
  %.i1374 = zext i1 %.i1366 to i32
  %.i2375 = zext i1 %.i2367 to i32
  %.i3376 = zext i1 %.i3368 to i32
  %.i0377 = or i32 %.i0337, %.i0369
  %.i1378 = or i32 %.i1338, %.i1370
  %.i2379 = or i32 %.i2339, %.i2371
  %.i3380 = or i32 %.i3340, %.i3372
  %.i0381 = or i32 %.i0345, %.i0373
  %.i1382 = or i32 %.i1346, %.i1374
  %.i2383 = or i32 %.i2347, %.i2375
  %.i3384 = or i32 %.i3348, %.i3376
  %102 = or i64 %92, 8
  %103 = sub i64 %46, %102
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %44, i64 0, i64 %103
  %105 = getelementptr inbounds i8, i8* %104, i64 -3
  %106 = bitcast i8* %105 to <4 x i8>*
  %107 = load <4 x i8>, <4 x i8>* %106, align 1
  %.i3385 = extractelement <4 x i8> %107, i32 3
  %.i2386 = extractelement <4 x i8> %107, i32 2
  %.i1387 = extractelement <4 x i8> %107, i32 1
  %.i0388 = extractelement <4 x i8> %107, i32 0
  %108 = getelementptr inbounds i8, i8* %104, i64 -7
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %.i3389 = extractelement <4 x i8> %110, i32 3
  %.i2390 = extractelement <4 x i8> %110, i32 2
  %.i1391 = extractelement <4 x i8> %110, i32 1
  %.i0392 = extractelement <4 x i8> %110, i32 0
  %.i0393 = icmp eq i8 %82, %.i3385
  %.i1394 = icmp eq i8 %82, %.i2386
  %.i2395 = icmp eq i8 %82, %.i1387
  %.i3396 = icmp eq i8 %82, %.i0388
  %.i0397 = icmp eq i8 %82, %.i3389
  %.i1398 = icmp eq i8 %82, %.i2390
  %.i2399 = icmp eq i8 %82, %.i1391
  %.i3400 = icmp eq i8 %82, %.i0392
  %.i0401 = zext i1 %.i0393 to i32
  %.i1402 = zext i1 %.i1394 to i32
  %.i2403 = zext i1 %.i2395 to i32
  %.i3404 = zext i1 %.i3396 to i32
  %.i0405 = zext i1 %.i0397 to i32
  %.i1406 = zext i1 %.i1398 to i32
  %.i2407 = zext i1 %.i2399 to i32
  %.i3408 = zext i1 %.i3400 to i32
  %.i0341 = or i32 %.i0377, %.i0401
  %.i1342 = or i32 %.i1378, %.i1402
  %.i2343 = or i32 %.i2379, %.i2403
  %.i3344 = or i32 %.i3380, %.i3404
  %.i0349 = or i32 %.i0381, %.i0405
  %.i1350 = or i32 %.i1382, %.i1406
  %.i2351 = or i32 %.i2383, %.i2407
  %.i3352 = or i32 %.i3384, %.i3408
  %111 = add i64 %92, 16
  %112 = add i64 %93, -2
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %91, !llvm.loop !28

114:                                              ; preds = %91, %87
  %.i0417 = phi i32 [ undef, %87 ], [ %.i0341, %91 ]
  %.i1418 = phi i32 [ undef, %87 ], [ %.i1342, %91 ]
  %.i2419 = phi i32 [ undef, %87 ], [ %.i2343, %91 ]
  %.i3420 = phi i32 [ undef, %87 ], [ %.i3344, %91 ]
  %.i0421 = phi i32 [ undef, %87 ], [ %.i0349, %91 ]
  %.i1422 = phi i32 [ undef, %87 ], [ %.i1350, %91 ]
  %.i2423 = phi i32 [ undef, %87 ], [ %.i2351, %91 ]
  %.i3424 = phi i32 [ undef, %87 ], [ %.i3352, %91 ]
  %115 = phi i64 [ 0, %87 ], [ %111, %91 ]
  %.i0425 = phi i32 [ %80, %87 ], [ %.i0341, %91 ]
  %.i1426 = phi i32 [ 0, %87 ], [ %.i1342, %91 ]
  %.i2427 = phi i32 [ 0, %87 ], [ %.i2343, %91 ]
  %.i3428 = phi i32 [ 0, %87 ], [ %.i3344, %91 ]
  %.i0429 = phi i32 [ 0, %87 ], [ %.i0349, %91 ]
  %.i1430 = phi i32 [ 0, %87 ], [ %.i1350, %91 ]
  %.i2431 = phi i32 [ 0, %87 ], [ %.i2351, %91 ]
  %.i3432 = phi i32 [ 0, %87 ], [ %.i3352, %91 ]
  br i1 %60, label %125, label %116

116:                                              ; preds = %114
  %117 = sub i64 %46, %115
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %44, i64 0, i64 %117
  %119 = getelementptr inbounds i8, i8* %118, i64 -7
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %.i3433 = extractelement <4 x i8> %121, i32 3
  %.i2434 = extractelement <4 x i8> %121, i32 2
  %.i1435 = extractelement <4 x i8> %121, i32 1
  %.i0436 = extractelement <4 x i8> %121, i32 0
  %.i0437 = icmp eq i8 %82, %.i3433
  %.i1438 = icmp eq i8 %82, %.i2434
  %.i2439 = icmp eq i8 %82, %.i1435
  %.i3440 = icmp eq i8 %82, %.i0436
  %.i0441 = zext i1 %.i0437 to i32
  %.i1442 = zext i1 %.i1438 to i32
  %.i2443 = zext i1 %.i2439 to i32
  %.i3444 = zext i1 %.i3440 to i32
  %.i0445 = or i32 %.i0429, %.i0441
  %.i1446 = or i32 %.i1430, %.i1442
  %.i2447 = or i32 %.i2431, %.i2443
  %.i3448 = or i32 %.i3432, %.i3444
  %122 = getelementptr inbounds i8, i8* %118, i64 -3
  %123 = bitcast i8* %122 to <4 x i8>*
  %124 = load <4 x i8>, <4 x i8>* %123, align 1
  %.i3449 = extractelement <4 x i8> %124, i32 3
  %.i2450 = extractelement <4 x i8> %124, i32 2
  %.i1451 = extractelement <4 x i8> %124, i32 1
  %.i0452 = extractelement <4 x i8> %124, i32 0
  %.i0453 = icmp eq i8 %82, %.i3449
  %.i1454 = icmp eq i8 %82, %.i2450
  %.i2455 = icmp eq i8 %82, %.i1451
  %.i3456 = icmp eq i8 %82, %.i0452
  %.i0457 = zext i1 %.i0453 to i32
  %.i1458 = zext i1 %.i1454 to i32
  %.i2459 = zext i1 %.i2455 to i32
  %.i3460 = zext i1 %.i3456 to i32
  %.i0461 = or i32 %.i0425, %.i0457
  %.i1462 = or i32 %.i1426, %.i1458
  %.i2463 = or i32 %.i2427, %.i2459
  %.i3464 = or i32 %.i3428, %.i3460
  br label %125

125:                                              ; preds = %114, %116
  %.i0465 = phi i32 [ %.i0417, %114 ], [ %.i0461, %116 ]
  %.i1466 = phi i32 [ %.i1418, %114 ], [ %.i1462, %116 ]
  %.i2467 = phi i32 [ %.i2419, %114 ], [ %.i2463, %116 ]
  %.i3468 = phi i32 [ %.i3420, %114 ], [ %.i3464, %116 ]
  %.i0469 = phi i32 [ %.i0421, %114 ], [ %.i0445, %116 ]
  %.i1470 = phi i32 [ %.i1422, %114 ], [ %.i1446, %116 ]
  %.i2471 = phi i32 [ %.i2423, %114 ], [ %.i2447, %116 ]
  %.i3472 = phi i32 [ %.i3424, %114 ], [ %.i3448, %116 ]
  %.i0473 = or i32 %.i0469, %.i0465
  %.i1474 = or i32 %.i1470, %.i1466
  %.i2475 = or i32 %.i2471, %.i2467
  %.i3476 = or i32 %.i3472, %.i3468
  %.i0477 = or i32 %.i0473, %.i2475
  %.i1478 = or i32 %.i1474, %.i3476
  %.i2479 = or i32 %.i2475, undef
  %.i3480 = or i32 %.i3476, undef
  %.i0481 = or i32 %.i0477, %.i1478
  %.i1482 = or i32 %.i1478, undef
  %.i2483 = or i32 %.i2479, undef
  %.i3484 = or i32 %.i3480, undef
  %.upto0497 = insertelement <4 x i32> undef, i32 %.i0481, i32 0
  %.upto1498 = insertelement <4 x i32> %.upto0497, i32 %.i1482, i32 1
  %.upto2499 = insertelement <4 x i32> %.upto1498, i32 %.i2483, i32 2
  %126 = insertelement <4 x i32> %.upto2499, i32 %.i3484, i32 3
  %127 = extractelement <4 x i32> %126, i32 0
  br i1 %61, label %128, label %84

128:                                              ; preds = %132, %125, %77
  %129 = phi i32 [ %80, %77 ], [ %127, %125 ], [ %139, %132 ]
  %130 = icmp sgt i64 %78, 0
  %131 = add nsw i64 %78, -1
  br i1 %130, label %77, label %722

132:                                              ; preds = %84, %132
  %133 = phi i64 [ %141, %132 ], [ %85, %84 ]
  %134 = phi i32 [ %139, %132 ], [ %86, %84 ]
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %44, i64 0, i64 %133
  %136 = load i8, i8* %135, align 1
  %137 = icmp eq i8 %82, %136
  %138 = zext i1 %137 to i32
  %139 = or i32 %134, %138
  %140 = icmp sgt i64 %133, 0
  %141 = add nsw i64 %133, -1
  br i1 %140, label %132, label %128, !llvm.loop !29

142:                                              ; preds = %62, %264
  %143 = phi i64 [ %267, %264 ], [ %47, %62 ]
  %144 = phi i32 [ %265, %264 ], [ 0, %62 ]
  %145 = shl i32 %144, 1
  switch i32 %39, label %154 [
    i32 3, label %155
    i32 1, label %146
    i32 2, label %150
  ]

146:                                              ; preds = %142
  %147 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 %143
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i32
  br label %159

150:                                              ; preds = %142
  %151 = getelementptr inbounds [16 x i8], [16 x i8]* %41, i64 0, i64 %143
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  br label %159

154:                                              ; preds = %142
  unreachable

155:                                              ; preds = %142
  %156 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 %143
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  br label %159

159:                                              ; preds = %146, %150, %155
  %160 = phi i32 [ %158, %155 ], [ %153, %150 ], [ %149, %146 ]
  br i1 %42, label %161, label %264

161:                                              ; preds = %159
  switch i8 %38, label %208 [
    i8 1, label %185
    i8 2, label %162
  ]

162:                                              ; preds = %161
  br i1 %65, label %163, label %166

163:                                              ; preds = %182, %162
  %164 = phi i64 [ %46, %162 ], [ %67, %182 ]
  %165 = phi i32 [ %145, %162 ], [ %184, %182 ]
  br label %242

166:                                              ; preds = %162
  %167 = insertelement <4 x i32> undef, i32 %160, i32 0
  %168 = insertelement <4 x i32> undef, i32 %160, i32 0
  %169 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %145, i32 0
  br label %170

170:                                              ; preds = %170, %166
  %171 = phi i64 [ 0, %166 ], [ %180, %170 ]
  %.i0133 = phi i32 [ %145, %166 ], [ %.i0137, %170 ]
  %.i1134 = phi i32 [ 0, %166 ], [ %.i1138, %170 ]
  %.i2135 = phi i32 [ 0, %166 ], [ %.i2139, %170 ]
  %.i3136 = phi i32 [ 0, %166 ], [ %.i3140, %170 ]
  %.i0141 = phi i32 [ 0, %166 ], [ %.i0145, %170 ]
  %.i1142 = phi i32 [ 0, %166 ], [ %.i1146, %170 ]
  %.i2143 = phi i32 [ 0, %166 ], [ %.i2147, %170 ]
  %.i3144 = phi i32 [ 0, %166 ], [ %.i3148, %170 ]
  %172 = sub i64 %46, %171
  %173 = getelementptr inbounds [16 x i8], [16 x i8]* %44, i64 0, i64 %172
  %174 = getelementptr inbounds i8, i8* %173, i64 -3
  %175 = bitcast i8* %174 to <4 x i8>*
  %176 = load <4 x i8>, <4 x i8>* %175, align 1
  %.i3149 = extractelement <4 x i8> %176, i32 3
  %.i2150 = extractelement <4 x i8> %176, i32 2
  %.i1151 = extractelement <4 x i8> %176, i32 1
  %.i0152 = extractelement <4 x i8> %176, i32 0
  %177 = getelementptr inbounds i8, i8* %173, i64 -7
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %.i3153 = extractelement <4 x i8> %179, i32 3
  %.i2154 = extractelement <4 x i8> %179, i32 2
  %.i1155 = extractelement <4 x i8> %179, i32 1
  %.i0156 = extractelement <4 x i8> %179, i32 0
  %.i0157 = sext i8 %.i3149 to i32
  %.i1158 = sext i8 %.i2150 to i32
  %.i2159 = sext i8 %.i1151 to i32
  %.i3160 = sext i8 %.i0152 to i32
  %.i0161 = sext i8 %.i3153 to i32
  %.i1162 = sext i8 %.i2154 to i32
  %.i2163 = sext i8 %.i1155 to i32
  %.i3164 = sext i8 %.i0156 to i32
  %.i0165 = icmp eq i32 %160, %.i0157
  %.i1166 = icmp eq i32 %160, %.i1158
  %.i2167 = icmp eq i32 %160, %.i2159
  %.i3168 = icmp eq i32 %160, %.i3160
  %.i0169 = icmp eq i32 %160, %.i0161
  %.i1170 = icmp eq i32 %160, %.i1162
  %.i2171 = icmp eq i32 %160, %.i2163
  %.i3172 = icmp eq i32 %160, %.i3164
  %.i0173 = zext i1 %.i0165 to i32
  %.i1174 = zext i1 %.i1166 to i32
  %.i2175 = zext i1 %.i2167 to i32
  %.i3176 = zext i1 %.i3168 to i32
  %.i0177 = zext i1 %.i0169 to i32
  %.i1178 = zext i1 %.i1170 to i32
  %.i2179 = zext i1 %.i2171 to i32
  %.i3180 = zext i1 %.i3172 to i32
  %.i0137 = or i32 %.i0133, %.i0173
  %.i1138 = or i32 %.i1134, %.i1174
  %.i2139 = or i32 %.i2135, %.i2175
  %.i3140 = or i32 %.i3136, %.i3176
  %.i0145 = or i32 %.i0141, %.i0177
  %.i1146 = or i32 %.i1142, %.i1178
  %.i2147 = or i32 %.i2143, %.i2179
  %.i3148 = or i32 %.i3144, %.i3180
  %180 = add i64 %171, 8
  %181 = icmp eq i64 %180, %66
  br i1 %181, label %182, label %170, !llvm.loop !31

182:                                              ; preds = %170
  %.i0189 = or i32 %.i0145, %.i0137
  %.i1190 = or i32 %.i1146, %.i1138
  %.i2191 = or i32 %.i2147, %.i2139
  %.i3192 = or i32 %.i3148, %.i3140
  %.i0193 = or i32 %.i0189, %.i2191
  %.i1194 = or i32 %.i1190, %.i3192
  %.i2195 = or i32 %.i2191, undef
  %.i3196 = or i32 %.i3192, undef
  %.i0197 = or i32 %.i0193, %.i1194
  %.i1198 = or i32 %.i1194, undef
  %.i2199 = or i32 %.i2195, undef
  %.i3200 = or i32 %.i3196, undef
  %.upto0488 = insertelement <4 x i32> undef, i32 %.i0197, i32 0
  %.upto1489 = insertelement <4 x i32> %.upto0488, i32 %.i1198, i32 1
  %.upto2490 = insertelement <4 x i32> %.upto1489, i32 %.i2199, i32 2
  %183 = insertelement <4 x i32> %.upto2490, i32 %.i3200, i32 3
  %184 = extractelement <4 x i32> %183, i32 0
  br i1 %68, label %264, label %163

185:                                              ; preds = %161
  br i1 %69, label %186, label %189

186:                                              ; preds = %205, %185
  %187 = phi i64 [ %46, %185 ], [ %71, %205 ]
  %188 = phi i32 [ %145, %185 ], [ %207, %205 ]
  br label %231

189:                                              ; preds = %185
  %190 = insertelement <4 x i32> undef, i32 %160, i32 0
  %191 = insertelement <4 x i32> undef, i32 %160, i32 0
  %192 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %145, i32 0
  br label %193

193:                                              ; preds = %193, %189
  %194 = phi i64 [ 0, %189 ], [ %203, %193 ]
  %.i0201 = phi i32 [ %145, %189 ], [ %.i0205, %193 ]
  %.i1202 = phi i32 [ 0, %189 ], [ %.i1206, %193 ]
  %.i2203 = phi i32 [ 0, %189 ], [ %.i2207, %193 ]
  %.i3204 = phi i32 [ 0, %189 ], [ %.i3208, %193 ]
  %.i0209 = phi i32 [ 0, %189 ], [ %.i0213, %193 ]
  %.i1210 = phi i32 [ 0, %189 ], [ %.i1214, %193 ]
  %.i2211 = phi i32 [ 0, %189 ], [ %.i2215, %193 ]
  %.i3212 = phi i32 [ 0, %189 ], [ %.i3216, %193 ]
  %195 = sub i64 %46, %194
  %196 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 %195
  %197 = getelementptr inbounds i16, i16* %196, i64 -3
  %198 = bitcast i16* %197 to <4 x i16>*
  %199 = load <4 x i16>, <4 x i16>* %198, align 2
  %.i3217 = extractelement <4 x i16> %199, i32 3
  %.i2218 = extractelement <4 x i16> %199, i32 2
  %.i1219 = extractelement <4 x i16> %199, i32 1
  %.i0220 = extractelement <4 x i16> %199, i32 0
  %200 = getelementptr inbounds i16, i16* %196, i64 -7
  %201 = bitcast i16* %200 to <4 x i16>*
  %202 = load <4 x i16>, <4 x i16>* %201, align 2
  %.i3221 = extractelement <4 x i16> %202, i32 3
  %.i2222 = extractelement <4 x i16> %202, i32 2
  %.i1223 = extractelement <4 x i16> %202, i32 1
  %.i0224 = extractelement <4 x i16> %202, i32 0
  %.i0225 = zext i16 %.i3217 to i32
  %.i1226 = zext i16 %.i2218 to i32
  %.i2227 = zext i16 %.i1219 to i32
  %.i3228 = zext i16 %.i0220 to i32
  %.i0229 = zext i16 %.i3221 to i32
  %.i1230 = zext i16 %.i2222 to i32
  %.i2231 = zext i16 %.i1223 to i32
  %.i3232 = zext i16 %.i0224 to i32
  %.i0233 = icmp eq i32 %160, %.i0225
  %.i1234 = icmp eq i32 %160, %.i1226
  %.i2235 = icmp eq i32 %160, %.i2227
  %.i3236 = icmp eq i32 %160, %.i3228
  %.i0237 = icmp eq i32 %160, %.i0229
  %.i1238 = icmp eq i32 %160, %.i1230
  %.i2239 = icmp eq i32 %160, %.i2231
  %.i3240 = icmp eq i32 %160, %.i3232
  %.i0241 = zext i1 %.i0233 to i32
  %.i1242 = zext i1 %.i1234 to i32
  %.i2243 = zext i1 %.i2235 to i32
  %.i3244 = zext i1 %.i3236 to i32
  %.i0245 = zext i1 %.i0237 to i32
  %.i1246 = zext i1 %.i1238 to i32
  %.i2247 = zext i1 %.i2239 to i32
  %.i3248 = zext i1 %.i3240 to i32
  %.i0205 = or i32 %.i0201, %.i0241
  %.i1206 = or i32 %.i1202, %.i1242
  %.i2207 = or i32 %.i2203, %.i2243
  %.i3208 = or i32 %.i3204, %.i3244
  %.i0213 = or i32 %.i0209, %.i0245
  %.i1214 = or i32 %.i1210, %.i1246
  %.i2215 = or i32 %.i2211, %.i2247
  %.i3216 = or i32 %.i3212, %.i3248
  %203 = add i64 %194, 8
  %204 = icmp eq i64 %203, %70
  br i1 %204, label %205, label %193, !llvm.loop !32

205:                                              ; preds = %193
  %.i0257 = or i32 %.i0213, %.i0205
  %.i1258 = or i32 %.i1214, %.i1206
  %.i2259 = or i32 %.i2215, %.i2207
  %.i3260 = or i32 %.i3216, %.i3208
  %.i0261 = or i32 %.i0257, %.i2259
  %.i1262 = or i32 %.i1258, %.i3260
  %.i2263 = or i32 %.i2259, undef
  %.i3264 = or i32 %.i3260, undef
  %.i0265 = or i32 %.i0261, %.i1262
  %.i1266 = or i32 %.i1262, undef
  %.i2267 = or i32 %.i2263, undef
  %.i3268 = or i32 %.i3264, undef
  %.upto0491 = insertelement <4 x i32> undef, i32 %.i0265, i32 0
  %.upto1492 = insertelement <4 x i32> %.upto0491, i32 %.i1266, i32 1
  %.upto2493 = insertelement <4 x i32> %.upto1492, i32 %.i2267, i32 2
  %206 = insertelement <4 x i32> %.upto2493, i32 %.i3268, i32 3
  %207 = extractelement <4 x i32> %206, i32 0
  br i1 %72, label %264, label %186

208:                                              ; preds = %161
  br i1 %73, label %209, label %212

209:                                              ; preds = %228, %208
  %210 = phi i64 [ %46, %208 ], [ %75, %228 ]
  %211 = phi i32 [ %145, %208 ], [ %230, %228 ]
  br label %253

212:                                              ; preds = %208
  %213 = insertelement <4 x i32> undef, i32 %160, i32 0
  %214 = insertelement <4 x i32> undef, i32 %160, i32 0
  %215 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %145, i32 0
  br label %216

216:                                              ; preds = %216, %212
  %217 = phi i64 [ 0, %212 ], [ %226, %216 ]
  %.i0269 = phi i32 [ %145, %212 ], [ %.i0273, %216 ]
  %.i1270 = phi i32 [ 0, %212 ], [ %.i1274, %216 ]
  %.i2271 = phi i32 [ 0, %212 ], [ %.i2275, %216 ]
  %.i3272 = phi i32 [ 0, %212 ], [ %.i3276, %216 ]
  %.i0277 = phi i32 [ 0, %212 ], [ %.i0281, %216 ]
  %.i1278 = phi i32 [ 0, %212 ], [ %.i1282, %216 ]
  %.i2279 = phi i32 [ 0, %212 ], [ %.i2283, %216 ]
  %.i3280 = phi i32 [ 0, %212 ], [ %.i3284, %216 ]
  %218 = sub i64 %46, %217
  %219 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 %218
  %220 = getelementptr inbounds i16, i16* %219, i64 -3
  %221 = bitcast i16* %220 to <4 x i16>*
  %222 = load <4 x i16>, <4 x i16>* %221, align 2
  %.i3285 = extractelement <4 x i16> %222, i32 3
  %.i2286 = extractelement <4 x i16> %222, i32 2
  %.i1287 = extractelement <4 x i16> %222, i32 1
  %.i0288 = extractelement <4 x i16> %222, i32 0
  %223 = getelementptr inbounds i16, i16* %219, i64 -7
  %224 = bitcast i16* %223 to <4 x i16>*
  %225 = load <4 x i16>, <4 x i16>* %224, align 2
  %.i3289 = extractelement <4 x i16> %225, i32 3
  %.i2290 = extractelement <4 x i16> %225, i32 2
  %.i1291 = extractelement <4 x i16> %225, i32 1
  %.i0292 = extractelement <4 x i16> %225, i32 0
  %.i0293 = sext i16 %.i3285 to i32
  %.i1294 = sext i16 %.i2286 to i32
  %.i2295 = sext i16 %.i1287 to i32
  %.i3296 = sext i16 %.i0288 to i32
  %.i0297 = sext i16 %.i3289 to i32
  %.i1298 = sext i16 %.i2290 to i32
  %.i2299 = sext i16 %.i1291 to i32
  %.i3300 = sext i16 %.i0292 to i32
  %.i0301 = icmp eq i32 %160, %.i0293
  %.i1302 = icmp eq i32 %160, %.i1294
  %.i2303 = icmp eq i32 %160, %.i2295
  %.i3304 = icmp eq i32 %160, %.i3296
  %.i0305 = icmp eq i32 %160, %.i0297
  %.i1306 = icmp eq i32 %160, %.i1298
  %.i2307 = icmp eq i32 %160, %.i2299
  %.i3308 = icmp eq i32 %160, %.i3300
  %.i0309 = zext i1 %.i0301 to i32
  %.i1310 = zext i1 %.i1302 to i32
  %.i2311 = zext i1 %.i2303 to i32
  %.i3312 = zext i1 %.i3304 to i32
  %.i0313 = zext i1 %.i0305 to i32
  %.i1314 = zext i1 %.i1306 to i32
  %.i2315 = zext i1 %.i2307 to i32
  %.i3316 = zext i1 %.i3308 to i32
  %.i0273 = or i32 %.i0269, %.i0309
  %.i1274 = or i32 %.i1270, %.i1310
  %.i2275 = or i32 %.i2271, %.i2311
  %.i3276 = or i32 %.i3272, %.i3312
  %.i0281 = or i32 %.i0277, %.i0313
  %.i1282 = or i32 %.i1278, %.i1314
  %.i2283 = or i32 %.i2279, %.i2315
  %.i3284 = or i32 %.i3280, %.i3316
  %226 = add i64 %217, 8
  %227 = icmp eq i64 %226, %74
  br i1 %227, label %228, label %216, !llvm.loop !33

228:                                              ; preds = %216
  %.i0325 = or i32 %.i0281, %.i0273
  %.i1326 = or i32 %.i1282, %.i1274
  %.i2327 = or i32 %.i2283, %.i2275
  %.i3328 = or i32 %.i3284, %.i3276
  %.i0329 = or i32 %.i0325, %.i2327
  %.i1330 = or i32 %.i1326, %.i3328
  %.i2331 = or i32 %.i2327, undef
  %.i3332 = or i32 %.i3328, undef
  %.i0333 = or i32 %.i0329, %.i1330
  %.i1334 = or i32 %.i1330, undef
  %.i2335 = or i32 %.i2331, undef
  %.i3336 = or i32 %.i3332, undef
  %.upto0494 = insertelement <4 x i32> undef, i32 %.i0333, i32 0
  %.upto1495 = insertelement <4 x i32> %.upto0494, i32 %.i1334, i32 1
  %.upto2496 = insertelement <4 x i32> %.upto1495, i32 %.i2335, i32 2
  %229 = insertelement <4 x i32> %.upto2496, i32 %.i3336, i32 3
  %230 = extractelement <4 x i32> %229, i32 0
  br i1 %76, label %264, label %209

231:                                              ; preds = %186, %231
  %232 = phi i64 [ %241, %231 ], [ %187, %186 ]
  %233 = phi i32 [ %239, %231 ], [ %188, %186 ]
  %234 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 %232
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = icmp eq i32 %160, %236
  %238 = zext i1 %237 to i32
  %239 = or i32 %233, %238
  %240 = icmp sgt i64 %232, 0
  %241 = add nsw i64 %232, -1
  br i1 %240, label %231, label %264, !llvm.loop !34

242:                                              ; preds = %163, %242
  %243 = phi i64 [ %252, %242 ], [ %164, %163 ]
  %244 = phi i32 [ %250, %242 ], [ %165, %163 ]
  %245 = getelementptr inbounds [16 x i8], [16 x i8]* %44, i64 0, i64 %243
  %246 = load i8, i8* %245, align 1
  %247 = sext i8 %246 to i32
  %248 = icmp eq i32 %160, %247
  %249 = zext i1 %248 to i32
  %250 = or i32 %244, %249
  %251 = icmp sgt i64 %243, 0
  %252 = add nsw i64 %243, -1
  br i1 %251, label %242, label %264, !llvm.loop !35

253:                                              ; preds = %209, %253
  %254 = phi i64 [ %263, %253 ], [ %210, %209 ]
  %255 = phi i32 [ %261, %253 ], [ %211, %209 ]
  %256 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 %254
  %257 = load i16, i16* %256, align 2
  %258 = sext i16 %257 to i32
  %259 = icmp eq i32 %160, %258
  %260 = zext i1 %259 to i32
  %261 = or i32 %255, %260
  %262 = icmp sgt i64 %254, 0
  %263 = add nsw i64 %254, -1
  br i1 %262, label %253, label %264, !llvm.loop !36

264:                                              ; preds = %242, %231, %253, %182, %205, %228, %159
  %265 = phi i32 [ %145, %159 ], [ %230, %228 ], [ %207, %205 ], [ %184, %182 ], [ %261, %253 ], [ %239, %231 ], [ %250, %242 ]
  %266 = icmp sgt i64 %143, 0
  %267 = add nsw i64 %143, -1
  br i1 %266, label %142, label %722

268:                                              ; preds = %23, %369
  %269 = phi i64 [ %33, %23 ], [ %372, %369 ]
  %270 = phi i32 [ 0, %23 ], [ %370, %369 ]
  %271 = shl i32 %270, 1
  switch i32 %25, label %284 [
    i32 0, label %272
    i32 1, label %276
    i32 2, label %280
    i32 3, label %285
  ]

272:                                              ; preds = %268
  %273 = getelementptr inbounds [16 x i8], [16 x i8]* %27, i64 0, i64 %269
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  br label %289

276:                                              ; preds = %268
  %277 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 %269
  %278 = load i16, i16* %277, align 2
  %279 = zext i16 %278 to i32
  br label %289

280:                                              ; preds = %268
  %281 = getelementptr inbounds [16 x i8], [16 x i8]* %27, i64 0, i64 %269
  %282 = load i8, i8* %281, align 1
  %283 = sext i8 %282 to i32
  br label %289

284:                                              ; preds = %268
  unreachable

285:                                              ; preds = %268
  %286 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 %269
  %287 = load i16, i16* %286, align 2
  %288 = sext i16 %287 to i32
  br label %289

289:                                              ; preds = %272, %276, %280, %285
  %290 = phi i32 [ %288, %285 ], [ %283, %280 ], [ %279, %276 ], [ %275, %272 ]
  br i1 %30, label %291, label %369

291:                                              ; preds = %289
  switch i32 %25, label %334 [
    i32 0, label %292
    i32 1, label %313
  ]

292:                                              ; preds = %291, %307
  %293 = phi i32 [ %311, %307 ], [ %29, %291 ]
  %294 = phi i32 [ %310, %307 ], [ %271, %291 ]
  %295 = zext i32 %293 to i64
  %296 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = icmp slt i32 %290, %298
  br i1 %299, label %307, label %300

300:                                              ; preds = %292
  %301 = add nsw i32 %293, -1
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %304 to i32
  %306 = icmp sle i32 %290, %305
  br label %307

307:                                              ; preds = %300, %292
  %308 = phi i1 [ false, %292 ], [ %306, %300 ]
  %309 = zext i1 %308 to i32
  %310 = or i32 %294, %309
  %311 = add nsw i32 %293, -2
  %312 = icmp sgt i32 %293, 1
  br i1 %312, label %292, label %369

313:                                              ; preds = %291, %328
  %314 = phi i32 [ %332, %328 ], [ %29, %291 ]
  %315 = phi i32 [ %331, %328 ], [ %271, %291 ]
  %316 = zext i32 %314 to i64
  %317 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %316
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %318 to i32
  %320 = icmp slt i32 %290, %319
  br i1 %320, label %328, label %321

321:                                              ; preds = %313
  %322 = add nsw i32 %314, -1
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %323
  %325 = load i16, i16* %324, align 2
  %326 = zext i16 %325 to i32
  %327 = icmp sle i32 %290, %326
  br label %328

328:                                              ; preds = %321, %313
  %329 = phi i1 [ false, %313 ], [ %327, %321 ]
  %330 = zext i1 %329 to i32
  %331 = or i32 %315, %330
  %332 = add nsw i32 %314, -2
  %333 = icmp sgt i32 %314, 1
  br i1 %333, label %313, label %369

334:                                              ; preds = %291, %363
  %335 = phi i32 [ %367, %363 ], [ %29, %291 ]
  %336 = phi i32 [ %366, %363 ], [ %271, %291 ]
  %337 = zext i32 %335 to i64
  br i1 %34, label %342, label %338

338:                                              ; preds = %334
  %339 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %337
  %340 = load i8, i8* %339, align 1
  %341 = sext i8 %340 to i32
  br label %346

342:                                              ; preds = %334
  %343 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %337
  %344 = load i16, i16* %343, align 2
  %345 = sext i16 %344 to i32
  br label %346

346:                                              ; preds = %338, %342
  %347 = phi i32 [ %345, %342 ], [ %341, %338 ]
  %348 = icmp sgt i32 %347, %290
  br i1 %348, label %363, label %349

349:                                              ; preds = %346
  %350 = add nsw i32 %335, -1
  %351 = sext i32 %350 to i64
  br i1 %34, label %356, label %352

352:                                              ; preds = %349
  %353 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %351
  %354 = load i8, i8* %353, align 1
  %355 = sext i8 %354 to i32
  br label %360

356:                                              ; preds = %349
  %357 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %351
  %358 = load i16, i16* %357, align 2
  %359 = sext i16 %358 to i32
  br label %360

360:                                              ; preds = %352, %356
  %361 = phi i32 [ %359, %356 ], [ %355, %352 ]
  %362 = icmp sge i32 %361, %290
  br label %363

363:                                              ; preds = %346, %360
  %364 = phi i1 [ false, %346 ], [ %362, %360 ]
  %365 = zext i1 %364 to i32
  %366 = or i32 %336, %365
  %367 = add nsw i32 %335, -2
  %368 = icmp sgt i32 %335, 1
  br i1 %368, label %334, label %369

369:                                              ; preds = %328, %307, %363, %289
  %370 = phi i32 [ %271, %289 ], [ %366, %363 ], [ %310, %307 ], [ %331, %328 ]
  %371 = icmp sgt i64 %269, 0
  %372 = add nsw i64 %269, -1
  br i1 %371, label %268, label %722

373:                                              ; preds = %5
  %374 = icmp sgt i32 %3, %4
  %375 = select i1 %374, i32 %10, i32 %11
  %376 = sub nsw i32 %9, %375
  %377 = shl i32 2, %376
  %378 = add nsw i32 %377, -1
  %379 = icmp slt i32 %3, %4
  %380 = select i1 %379, i32 %10, i32 %11
  %381 = sub nsw i32 %375, %380
  %382 = shl i32 %378, %381
  %383 = icmp sgt i32 %380, -1
  br i1 %383, label %384, label %722

384:                                              ; preds = %373
  %385 = and i8 %2, 3
  %386 = zext i8 %385 to i32
  %387 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %388 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %389 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %390 = bitcast %union.XMMReg* %0 to [16 x i8]*
  switch i32 %386, label %448 [
    i32 0, label %429
    i32 1, label %410
    i32 2, label %391
  ]

391:                                              ; preds = %384
  %392 = zext i32 %380 to i64
  %393 = and i64 %392, 1
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %405

395:                                              ; preds = %391
  %396 = shl i32 %382, 1
  %397 = getelementptr inbounds [16 x i8], [16 x i8]* %389, i64 0, i64 %392
  %398 = load i8, i8* %397, align 1
  %399 = getelementptr inbounds [16 x i8], [16 x i8]* %390, i64 0, i64 %392
  %400 = load i8, i8* %399, align 1
  %401 = icmp eq i8 %398, %400
  %402 = zext i1 %401 to i32
  %403 = or i32 %396, %402
  %404 = add nsw i64 %392, -1
  br label %405

405:                                              ; preds = %395, %391
  %406 = phi i64 [ %392, %391 ], [ %404, %395 ]
  %407 = phi i32 [ %382, %391 ], [ %403, %395 ]
  %408 = phi i32 [ undef, %391 ], [ %403, %395 ]
  %409 = icmp eq i32 %380, 0
  br i1 %409, label %722, label %509

410:                                              ; preds = %384
  %411 = zext i32 %380 to i64
  %412 = and i64 %411, 1
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %414, label %424

414:                                              ; preds = %410
  %415 = shl i32 %382, 1
  %416 = getelementptr inbounds [8 x i16], [8 x i16]* %387, i64 0, i64 %411
  %417 = load i16, i16* %416, align 2
  %418 = getelementptr inbounds [8 x i16], [8 x i16]* %388, i64 0, i64 %411
  %419 = load i16, i16* %418, align 2
  %420 = icmp eq i16 %417, %419
  %421 = zext i1 %420 to i32
  %422 = or i32 %415, %421
  %423 = add nsw i64 %411, -1
  br label %424

424:                                              ; preds = %414, %410
  %425 = phi i64 [ %411, %410 ], [ %423, %414 ]
  %426 = phi i32 [ %382, %410 ], [ %422, %414 ]
  %427 = phi i32 [ undef, %410 ], [ %422, %414 ]
  %428 = icmp eq i32 %380, 0
  br i1 %428, label %722, label %488

429:                                              ; preds = %384
  %430 = zext i32 %380 to i64
  %431 = and i64 %430, 1
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %433, label %443

433:                                              ; preds = %429
  %434 = shl i32 %382, 1
  %435 = getelementptr inbounds [16 x i8], [16 x i8]* %389, i64 0, i64 %430
  %436 = load i8, i8* %435, align 1
  %437 = getelementptr inbounds [16 x i8], [16 x i8]* %390, i64 0, i64 %430
  %438 = load i8, i8* %437, align 1
  %439 = icmp eq i8 %436, %438
  %440 = zext i1 %439 to i32
  %441 = or i32 %434, %440
  %442 = add nsw i64 %430, -1
  br label %443

443:                                              ; preds = %433, %429
  %444 = phi i64 [ %430, %429 ], [ %442, %433 ]
  %445 = phi i32 [ %382, %429 ], [ %441, %433 ]
  %446 = phi i32 [ undef, %429 ], [ %441, %433 ]
  %447 = icmp eq i32 %380, 0
  br i1 %447, label %722, label %467

448:                                              ; preds = %384
  %449 = zext i32 %380 to i64
  %450 = and i64 %449, 1
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %452, label %462

452:                                              ; preds = %448
  %453 = shl i32 %382, 1
  %454 = getelementptr inbounds [8 x i16], [8 x i16]* %387, i64 0, i64 %449
  %455 = load i16, i16* %454, align 2
  %456 = getelementptr inbounds [8 x i16], [8 x i16]* %388, i64 0, i64 %449
  %457 = load i16, i16* %456, align 2
  %458 = icmp eq i16 %455, %457
  %459 = zext i1 %458 to i32
  %460 = or i32 %453, %459
  %461 = add nsw i64 %449, -1
  br label %462

462:                                              ; preds = %452, %448
  %463 = phi i64 [ %449, %448 ], [ %461, %452 ]
  %464 = phi i32 [ %382, %448 ], [ %460, %452 ]
  %465 = phi i32 [ undef, %448 ], [ %460, %452 ]
  %466 = icmp eq i32 %380, 0
  br i1 %466, label %722, label %530

467:                                              ; preds = %443, %467
  %468 = phi i64 [ %487, %467 ], [ %444, %443 ]
  %469 = phi i32 [ %485, %467 ], [ %445, %443 ]
  %470 = getelementptr inbounds [16 x i8], [16 x i8]* %389, i64 0, i64 %468
  %471 = load i8, i8* %470, align 1
  %472 = getelementptr inbounds [16 x i8], [16 x i8]* %390, i64 0, i64 %468
  %473 = load i8, i8* %472, align 1
  %474 = icmp eq i8 %471, %473
  %475 = add nsw i64 %468, -1
  %476 = shl i32 %469, 2
  %477 = select i1 %474, i32 2, i32 0
  %478 = or i32 %476, %477
  %479 = getelementptr inbounds [16 x i8], [16 x i8]* %389, i64 0, i64 %475
  %480 = load i8, i8* %479, align 1
  %481 = getelementptr inbounds [16 x i8], [16 x i8]* %390, i64 0, i64 %475
  %482 = load i8, i8* %481, align 1
  %483 = icmp eq i8 %480, %482
  %484 = zext i1 %483 to i32
  %485 = or i32 %478, %484
  %486 = icmp sgt i64 %468, 1
  %487 = add nsw i64 %468, -2
  br i1 %486, label %467, label %722

488:                                              ; preds = %424, %488
  %489 = phi i64 [ %508, %488 ], [ %425, %424 ]
  %490 = phi i32 [ %506, %488 ], [ %426, %424 ]
  %491 = getelementptr inbounds [8 x i16], [8 x i16]* %387, i64 0, i64 %489
  %492 = load i16, i16* %491, align 2
  %493 = getelementptr inbounds [8 x i16], [8 x i16]* %388, i64 0, i64 %489
  %494 = load i16, i16* %493, align 2
  %495 = icmp eq i16 %492, %494
  %496 = add nsw i64 %489, -1
  %497 = shl i32 %490, 2
  %498 = select i1 %495, i32 2, i32 0
  %499 = or i32 %497, %498
  %500 = getelementptr inbounds [8 x i16], [8 x i16]* %387, i64 0, i64 %496
  %501 = load i16, i16* %500, align 2
  %502 = getelementptr inbounds [8 x i16], [8 x i16]* %388, i64 0, i64 %496
  %503 = load i16, i16* %502, align 2
  %504 = icmp eq i16 %501, %503
  %505 = zext i1 %504 to i32
  %506 = or i32 %499, %505
  %507 = icmp sgt i64 %489, 1
  %508 = add nsw i64 %489, -2
  br i1 %507, label %488, label %722

509:                                              ; preds = %405, %509
  %510 = phi i64 [ %529, %509 ], [ %406, %405 ]
  %511 = phi i32 [ %527, %509 ], [ %407, %405 ]
  %512 = getelementptr inbounds [16 x i8], [16 x i8]* %389, i64 0, i64 %510
  %513 = load i8, i8* %512, align 1
  %514 = getelementptr inbounds [16 x i8], [16 x i8]* %390, i64 0, i64 %510
  %515 = load i8, i8* %514, align 1
  %516 = icmp eq i8 %513, %515
  %517 = add nsw i64 %510, -1
  %518 = shl i32 %511, 2
  %519 = select i1 %516, i32 2, i32 0
  %520 = or i32 %518, %519
  %521 = getelementptr inbounds [16 x i8], [16 x i8]* %389, i64 0, i64 %517
  %522 = load i8, i8* %521, align 1
  %523 = getelementptr inbounds [16 x i8], [16 x i8]* %390, i64 0, i64 %517
  %524 = load i8, i8* %523, align 1
  %525 = icmp eq i8 %522, %524
  %526 = zext i1 %525 to i32
  %527 = or i32 %520, %526
  %528 = icmp sgt i64 %510, 1
  %529 = add nsw i64 %510, -2
  br i1 %528, label %509, label %722

530:                                              ; preds = %462, %530
  %531 = phi i64 [ %550, %530 ], [ %463, %462 ]
  %532 = phi i32 [ %548, %530 ], [ %464, %462 ]
  %533 = getelementptr inbounds [8 x i16], [8 x i16]* %387, i64 0, i64 %531
  %534 = load i16, i16* %533, align 2
  %535 = getelementptr inbounds [8 x i16], [8 x i16]* %388, i64 0, i64 %531
  %536 = load i16, i16* %535, align 2
  %537 = icmp eq i16 %534, %536
  %538 = add nsw i64 %531, -1
  %539 = shl i32 %532, 2
  %540 = select i1 %537, i32 2, i32 0
  %541 = or i32 %539, %540
  %542 = getelementptr inbounds [8 x i16], [8 x i16]* %387, i64 0, i64 %538
  %543 = load i16, i16* %542, align 2
  %544 = getelementptr inbounds [8 x i16], [8 x i16]* %388, i64 0, i64 %538
  %545 = load i16, i16* %544, align 2
  %546 = icmp eq i16 %543, %545
  %547 = zext i1 %546 to i32
  %548 = or i32 %541, %547
  %549 = icmp sgt i64 %531, 1
  %550 = add nsw i64 %531, -2
  br i1 %549, label %530, label %722

551:                                              ; preds = %5
  %552 = icmp slt i32 %10, %11
  br i1 %552, label %722, label %553

553:                                              ; preds = %551
  %554 = and i8 %2, 3
  %555 = zext i8 %554 to i32
  %556 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %557 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %558 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %559 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %560 = add i32 %9, %4
  %561 = sub i32 %560, %3
  %562 = sub i32 %3, %4
  %563 = sext i32 %562 to i64
  %564 = zext i32 %9 to i64
  %565 = sext i32 %11 to i64
  %566 = icmp eq i8 %554, 3
  br label %567

567:                                              ; preds = %553, %715
  %568 = phi i32 [ 0, %553 ], [ %720, %715 ]
  %569 = phi i64 [ %563, %553 ], [ %717, %715 ]
  %570 = phi i32 [ %561, %553 ], [ %719, %715 ]
  %571 = phi i32 [ 0, %553 ], [ %716, %715 ]
  %572 = add i32 %561, %568
  %573 = icmp slt i32 %572, %11
  %574 = select i1 %573, i32 %572, i32 %11
  %575 = sext i32 %574 to i64
  %576 = add nsw i64 %575, 1
  %577 = icmp slt i32 %574, 0
  %578 = select i1 %577, i64 1, i64 %576
  %579 = add i32 %561, %568
  %580 = icmp slt i32 %579, %11
  %581 = select i1 %580, i32 %579, i32 %11
  %582 = sext i32 %581 to i64
  %583 = add nsw i64 %582, 1
  %584 = icmp slt i32 %581, 0
  %585 = select i1 %584, i64 1, i64 %583
  %586 = icmp slt i32 %570, %11
  %587 = select i1 %586, i32 %570, i32 %11
  %588 = sext i32 %587 to i64
  %589 = shl i32 %571, 1
  %590 = or i32 %589, 1
  %591 = sub nsw i64 %564, %569
  %592 = icmp slt i64 %591, %565
  %593 = trunc i64 %591 to i32
  %594 = select i1 %592, i32 %593, i32 %11
  %595 = icmp sgt i32 %594, -1
  br i1 %595, label %596, label %715

596:                                              ; preds = %567
  switch i32 %555, label %689 [
    i32 0, label %630
    i32 1, label %597
  ]

597:                                              ; preds = %596
  %598 = icmp ult i64 %578, 8
  br i1 %598, label %599, label %602

599:                                              ; preds = %626, %597
  %600 = phi i64 [ %588, %597 ], [ %604, %626 ]
  %601 = phi i32 [ %590, %597 ], [ %628, %626 ]
  br label %676

602:                                              ; preds = %597
  %603 = and i64 %578, -8
  %604 = sub nsw i64 %588, %603
  %605 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %590, i32 0
  br label %606

606:                                              ; preds = %606, %602
  %607 = phi i64 [ 0, %602 ], [ %624, %606 ]
  %.i0 = phi i32 [ %590, %602 ], [ %.i01, %606 ]
  %.i1 = phi i32 [ -1, %602 ], [ %.i12, %606 ]
  %.i2 = phi i32 [ -1, %602 ], [ %.i23, %606 ]
  %.i3 = phi i32 [ -1, %602 ], [ %.i34, %606 ]
  %.i05 = phi i32 [ -1, %602 ], [ %.i09, %606 ]
  %.i16 = phi i32 [ -1, %602 ], [ %.i110, %606 ]
  %.i27 = phi i32 [ -1, %602 ], [ %.i211, %606 ]
  %.i38 = phi i32 [ -1, %602 ], [ %.i312, %606 ]
  %608 = sub i64 %588, %607
  %609 = add nsw i64 %608, %569
  %610 = getelementptr inbounds [8 x i16], [8 x i16]* %556, i64 0, i64 %609
  %611 = getelementptr inbounds i16, i16* %610, i64 -3
  %612 = bitcast i16* %611 to <4 x i16>*
  %613 = load <4 x i16>, <4 x i16>* %612, align 2
  %.i013 = extractelement <4 x i16> %613, i32 0
  %.i116 = extractelement <4 x i16> %613, i32 1
  %.i219 = extractelement <4 x i16> %613, i32 2
  %.i322 = extractelement <4 x i16> %613, i32 3
  %614 = getelementptr inbounds i16, i16* %610, i64 -7
  %615 = bitcast i16* %614 to <4 x i16>*
  %616 = load <4 x i16>, <4 x i16>* %615, align 2
  %.i025 = extractelement <4 x i16> %616, i32 0
  %.i128 = extractelement <4 x i16> %616, i32 1
  %.i231 = extractelement <4 x i16> %616, i32 2
  %.i334 = extractelement <4 x i16> %616, i32 3
  %617 = getelementptr inbounds [8 x i16], [8 x i16]* %557, i64 0, i64 %608
  %618 = getelementptr inbounds i16, i16* %617, i64 -3
  %619 = bitcast i16* %618 to <4 x i16>*
  %620 = load <4 x i16>, <4 x i16>* %619, align 2
  %.i014 = extractelement <4 x i16> %620, i32 0
  %.i117 = extractelement <4 x i16> %620, i32 1
  %.i220 = extractelement <4 x i16> %620, i32 2
  %.i323 = extractelement <4 x i16> %620, i32 3
  %621 = getelementptr inbounds i16, i16* %617, i64 -7
  %622 = bitcast i16* %621 to <4 x i16>*
  %623 = load <4 x i16>, <4 x i16>* %622, align 2
  %.i026 = extractelement <4 x i16> %623, i32 0
  %.i129 = extractelement <4 x i16> %623, i32 1
  %.i232 = extractelement <4 x i16> %623, i32 2
  %.i335 = extractelement <4 x i16> %623, i32 3
  %.i015 = icmp eq i16 %.i013, %.i014
  %.i118 = icmp eq i16 %.i116, %.i117
  %.i221 = icmp eq i16 %.i219, %.i220
  %.i324 = icmp eq i16 %.i322, %.i323
  %.i027 = icmp eq i16 %.i025, %.i026
  %.i130 = icmp eq i16 %.i128, %.i129
  %.i233 = icmp eq i16 %.i231, %.i232
  %.i336 = icmp eq i16 %.i334, %.i335
  %.i037 = zext i1 %.i324 to i32
  %.i138 = zext i1 %.i221 to i32
  %.i239 = zext i1 %.i118 to i32
  %.i340 = zext i1 %.i015 to i32
  %.i041 = zext i1 %.i336 to i32
  %.i142 = zext i1 %.i233 to i32
  %.i243 = zext i1 %.i130 to i32
  %.i344 = zext i1 %.i027 to i32
  %.i01 = and i32 %.i0, %.i037
  %.i12 = and i32 %.i1, %.i138
  %.i23 = and i32 %.i2, %.i239
  %.i34 = and i32 %.i3, %.i340
  %.i09 = and i32 %.i05, %.i041
  %.i110 = and i32 %.i16, %.i142
  %.i211 = and i32 %.i27, %.i243
  %.i312 = and i32 %.i38, %.i344
  %624 = add i64 %607, 8
  %625 = icmp eq i64 %624, %603
  br i1 %625, label %626, label %606, !llvm.loop !37

626:                                              ; preds = %606
  %.i053 = and i32 %.i09, %.i01
  %.i154 = and i32 %.i110, %.i12
  %.i255 = and i32 %.i211, %.i23
  %.i356 = and i32 %.i312, %.i34
  %.i057 = and i32 %.i053, %.i255
  %.i158 = and i32 %.i154, %.i356
  %.i259 = and i32 %.i255, undef
  %.i360 = and i32 %.i356, undef
  %.i061 = and i32 %.i057, %.i158
  %.i162 = and i32 %.i158, undef
  %.i263 = and i32 %.i259, undef
  %.i364 = and i32 %.i360, undef
  %.upto0 = insertelement <4 x i32> undef, i32 %.i061, i32 0
  %.upto1 = insertelement <4 x i32> %.upto0, i32 %.i162, i32 1
  %.upto2 = insertelement <4 x i32> %.upto1, i32 %.i263, i32 2
  %627 = insertelement <4 x i32> %.upto2, i32 %.i364, i32 3
  %628 = extractelement <4 x i32> %627, i32 0
  %629 = icmp eq i64 %578, %603
  br i1 %629, label %715, label %599

630:                                              ; preds = %596
  %631 = icmp ult i64 %585, 8
  br i1 %631, label %660, label %632

632:                                              ; preds = %630
  %633 = and i64 %585, -8
  %634 = sub nsw i64 %588, %633
  %635 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %590, i32 0
  br label %636

636:                                              ; preds = %636, %632
  %637 = phi i64 [ 0, %632 ], [ %654, %636 ]
  %.i065 = phi i32 [ %590, %632 ], [ %.i069, %636 ]
  %.i166 = phi i32 [ -1, %632 ], [ %.i170, %636 ]
  %.i267 = phi i32 [ -1, %632 ], [ %.i271, %636 ]
  %.i368 = phi i32 [ -1, %632 ], [ %.i372, %636 ]
  %.i073 = phi i32 [ -1, %632 ], [ %.i077, %636 ]
  %.i174 = phi i32 [ -1, %632 ], [ %.i178, %636 ]
  %.i275 = phi i32 [ -1, %632 ], [ %.i279, %636 ]
  %.i376 = phi i32 [ -1, %632 ], [ %.i380, %636 ]
  %638 = sub i64 %588, %637
  %639 = add nsw i64 %638, %569
  %640 = getelementptr inbounds [16 x i8], [16 x i8]* %558, i64 0, i64 %639
  %641 = getelementptr inbounds i8, i8* %640, i64 -3
  %642 = bitcast i8* %641 to <4 x i8>*
  %643 = load <4 x i8>, <4 x i8>* %642, align 1
  %.i081 = extractelement <4 x i8> %643, i32 0
  %.i184 = extractelement <4 x i8> %643, i32 1
  %.i287 = extractelement <4 x i8> %643, i32 2
  %.i390 = extractelement <4 x i8> %643, i32 3
  %644 = getelementptr inbounds i8, i8* %640, i64 -7
  %645 = bitcast i8* %644 to <4 x i8>*
  %646 = load <4 x i8>, <4 x i8>* %645, align 1
  %.i093 = extractelement <4 x i8> %646, i32 0
  %.i196 = extractelement <4 x i8> %646, i32 1
  %.i299 = extractelement <4 x i8> %646, i32 2
  %.i3102 = extractelement <4 x i8> %646, i32 3
  %647 = getelementptr inbounds [16 x i8], [16 x i8]* %559, i64 0, i64 %638
  %648 = getelementptr inbounds i8, i8* %647, i64 -3
  %649 = bitcast i8* %648 to <4 x i8>*
  %650 = load <4 x i8>, <4 x i8>* %649, align 1
  %.i082 = extractelement <4 x i8> %650, i32 0
  %.i185 = extractelement <4 x i8> %650, i32 1
  %.i288 = extractelement <4 x i8> %650, i32 2
  %.i391 = extractelement <4 x i8> %650, i32 3
  %651 = getelementptr inbounds i8, i8* %647, i64 -7
  %652 = bitcast i8* %651 to <4 x i8>*
  %653 = load <4 x i8>, <4 x i8>* %652, align 1
  %.i094 = extractelement <4 x i8> %653, i32 0
  %.i197 = extractelement <4 x i8> %653, i32 1
  %.i2100 = extractelement <4 x i8> %653, i32 2
  %.i3103 = extractelement <4 x i8> %653, i32 3
  %.i083 = icmp eq i8 %.i081, %.i082
  %.i186 = icmp eq i8 %.i184, %.i185
  %.i289 = icmp eq i8 %.i287, %.i288
  %.i392 = icmp eq i8 %.i390, %.i391
  %.i095 = icmp eq i8 %.i093, %.i094
  %.i198 = icmp eq i8 %.i196, %.i197
  %.i2101 = icmp eq i8 %.i299, %.i2100
  %.i3104 = icmp eq i8 %.i3102, %.i3103
  %.i0105 = zext i1 %.i392 to i32
  %.i1106 = zext i1 %.i289 to i32
  %.i2107 = zext i1 %.i186 to i32
  %.i3108 = zext i1 %.i083 to i32
  %.i0109 = zext i1 %.i3104 to i32
  %.i1110 = zext i1 %.i2101 to i32
  %.i2111 = zext i1 %.i198 to i32
  %.i3112 = zext i1 %.i095 to i32
  %.i069 = and i32 %.i065, %.i0105
  %.i170 = and i32 %.i166, %.i1106
  %.i271 = and i32 %.i267, %.i2107
  %.i372 = and i32 %.i368, %.i3108
  %.i077 = and i32 %.i073, %.i0109
  %.i178 = and i32 %.i174, %.i1110
  %.i279 = and i32 %.i275, %.i2111
  %.i380 = and i32 %.i376, %.i3112
  %654 = add i64 %637, 8
  %655 = icmp eq i64 %654, %633
  br i1 %655, label %656, label %636, !llvm.loop !38

656:                                              ; preds = %636
  %.i0121 = and i32 %.i077, %.i069
  %.i1122 = and i32 %.i178, %.i170
  %.i2123 = and i32 %.i279, %.i271
  %.i3124 = and i32 %.i380, %.i372
  %.i0125 = and i32 %.i0121, %.i2123
  %.i1126 = and i32 %.i1122, %.i3124
  %.i2127 = and i32 %.i2123, undef
  %.i3128 = and i32 %.i3124, undef
  %.i0129 = and i32 %.i0125, %.i1126
  %.i1130 = and i32 %.i1126, undef
  %.i2131 = and i32 %.i2127, undef
  %.i3132 = and i32 %.i3128, undef
  %.upto0485 = insertelement <4 x i32> undef, i32 %.i0129, i32 0
  %.upto1486 = insertelement <4 x i32> %.upto0485, i32 %.i1130, i32 1
  %.upto2487 = insertelement <4 x i32> %.upto1486, i32 %.i2131, i32 2
  %657 = insertelement <4 x i32> %.upto2487, i32 %.i3132, i32 3
  %658 = extractelement <4 x i32> %657, i32 0
  %659 = icmp eq i64 %585, %633
  br i1 %659, label %715, label %660

660:                                              ; preds = %656, %630
  %661 = phi i64 [ %588, %630 ], [ %634, %656 ]
  %662 = phi i32 [ %590, %630 ], [ %658, %656 ]
  br label %663

663:                                              ; preds = %660, %663
  %664 = phi i64 [ %674, %663 ], [ %661, %660 ]
  %665 = phi i32 [ %673, %663 ], [ %662, %660 ]
  %666 = add nsw i64 %664, %569
  %667 = getelementptr inbounds [16 x i8], [16 x i8]* %558, i64 0, i64 %666
  %668 = load i8, i8* %667, align 1
  %669 = getelementptr inbounds [16 x i8], [16 x i8]* %559, i64 0, i64 %664
  %670 = load i8, i8* %669, align 1
  %671 = icmp eq i8 %668, %670
  %672 = zext i1 %671 to i32
  %673 = and i32 %665, %672
  %674 = add nsw i64 %664, -1
  %675 = icmp sgt i64 %664, 0
  br i1 %675, label %663, label %715, !llvm.loop !39

676:                                              ; preds = %599, %676
  %677 = phi i64 [ %687, %676 ], [ %600, %599 ]
  %678 = phi i32 [ %686, %676 ], [ %601, %599 ]
  %679 = add nsw i64 %677, %569
  %680 = getelementptr inbounds [8 x i16], [8 x i16]* %556, i64 0, i64 %679
  %681 = load i16, i16* %680, align 2
  %682 = getelementptr inbounds [8 x i16], [8 x i16]* %557, i64 0, i64 %677
  %683 = load i16, i16* %682, align 2
  %684 = icmp eq i16 %681, %683
  %685 = zext i1 %684 to i32
  %686 = and i32 %678, %685
  %687 = add nsw i64 %677, -1
  %688 = icmp sgt i64 %677, 0
  br i1 %688, label %676, label %715, !llvm.loop !40

689:                                              ; preds = %596, %707
  %690 = phi i64 [ %713, %707 ], [ %588, %596 ]
  %691 = phi i32 [ %712, %707 ], [ %590, %596 ]
  %692 = add nsw i64 %690, %569
  br i1 %566, label %700, label %693

693:                                              ; preds = %689
  %694 = getelementptr inbounds [16 x i8], [16 x i8]* %558, i64 0, i64 %692
  %695 = load i8, i8* %694, align 1
  %696 = sext i8 %695 to i32
  %697 = getelementptr inbounds [16 x i8], [16 x i8]* %559, i64 0, i64 %690
  %698 = load i8, i8* %697, align 1
  %699 = sext i8 %698 to i32
  br label %707

700:                                              ; preds = %689
  %701 = getelementptr inbounds [8 x i16], [8 x i16]* %556, i64 0, i64 %692
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = getelementptr inbounds [8 x i16], [8 x i16]* %557, i64 0, i64 %690
  %705 = load i16, i16* %704, align 2
  %706 = sext i16 %705 to i32
  br label %707

707:                                              ; preds = %693, %700
  %708 = phi i32 [ %703, %700 ], [ %696, %693 ]
  %709 = phi i32 [ %706, %700 ], [ %699, %693 ]
  %710 = icmp eq i32 %708, %709
  %711 = zext i1 %710 to i32
  %712 = and i32 %691, %711
  %713 = add nsw i64 %690, -1
  %714 = icmp sgt i64 %690, 0
  br i1 %714, label %689, label %715

715:                                              ; preds = %676, %663, %707, %626, %656, %567
  %716 = phi i32 [ %590, %567 ], [ %658, %656 ], [ %628, %626 ], [ %712, %707 ], [ %673, %663 ], [ %686, %676 ]
  %717 = add nsw i64 %569, -1
  %718 = icmp sgt i64 %569, 0
  %719 = add i32 %570, 1
  %720 = add i32 %568, 1
  br i1 %718, label %567, label %722

721:                                              ; preds = %5
  unreachable

722:                                              ; preds = %715, %405, %509, %424, %488, %443, %467, %462, %530, %369, %264, %128, %551, %373, %21, %35
  %723 = phi i32 [ 0, %35 ], [ 0, %21 ], [ %382, %373 ], [ 0, %551 ], [ %129, %128 ], [ %265, %264 ], [ %370, %369 ], [ %465, %462 ], [ %548, %530 ], [ %446, %443 ], [ %485, %467 ], [ %427, %424 ], [ %506, %488 ], [ %408, %405 ], [ %527, %509 ], [ %716, 
  %724 = lshr i32 %6, 4
  %725 = and i32 %724, 3
  switch i32 %725, label %734 [
    i32 1, label %726
    i32 3, label %730
  ]

726:                                              ; preds = %722
  %727 = shl i32 2, %9
  %728 = add nsw i32 %727, -1
  %729 = xor i32 %723, %728
  br label %734

730:                                              ; preds = %722
  %731 = shl i32 2, %10
  %732 = add nsw i32 %731, -1
  %733 = xor i32 %723, %732
  br label %734

734:                                              ; preds = %722, %730, %726
  %735 = phi i32 [ %723, %722 ], [ %733, %730 ], [ %729, %726 ]
  %736 = icmp eq i32 %735, 0
  br i1 %736, label %743, label %737

737:                                              ; preds = %734
  %738 = or i32 %16, 1
  store i32 %738, i32* %18, align 4
  %739 = and i32 %735, 1
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %743, label %741

741:                                              ; preds = %737
  %742 = or i32 %16, 2049
  store i32 %742, i32* %18, align 4
  br label %743

743:                                              ; preds = %734, %737, %741
  ret i32 %735
}

; Function Attrs: inlinehint norecurse nounwind readnone uwtable
define internal i32 @ffs1(i32 %0) unnamed_addr #17 {
  %2 = shl i32 %0, 16
  %3 = icmp eq i32 %2, 0
  %4 = select i1 %3, i32 %0, i32 %2
  %5 = select i1 %3, i32 1, i32 17
  %6 = shl i32 %4, 8
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 %4, i32 %6
  %9 = select i1 %7, i32 0, i32 8
  %10 = or i32 %9, %5
  %11 = shl i32 %8, 4
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 %8, i32 %11
  %14 = select i1 %12, i32 0, i32 4
  %15 = or i32 %14, %10
  %16 = shl i32 %13, 2
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %13, i32 %16
  %19 = select i1 %17, i32 0, i32 2
  %20 = or i32 %19, %15
  %21 = and i32 %18, 2147483647
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = add nuw nsw i32 %20, %23
  ret i32 %24
}

; Function Attrs: inlinehint norecurse nounwind readnone uwtable
define internal i32 @rffs1(i32 %0) unnamed_addr #17 {
  %2 = lshr i32 %0, 16
  %3 = icmp eq i32 %2, 0
  %4 = select i1 %3, i32 %0, i32 %2
  %5 = select i1 %3, i32 1, i32 17
  %6 = lshr i32 %4, 8
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 %4, i32 %6
  %9 = select i1 %7, i32 0, i32 8
  %10 = or i32 %9, %5
  %11 = lshr i32 %8, 4
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 %8, i32 %11
  %14 = select i1 %12, i32 0, i32 4
  %15 = or i32 %14, %10
  %16 = lshr i32 %13, 2
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %13, i32 %16
  %19 = select i1 %17, i32 0, i32 2
  %20 = or i32 %19, %15
  %21 = icmp ugt i32 %18, 1
  %22 = zext i1 %21 to i32
  %23 = add nuw nsw i32 %20, %22
  ret i32 %23
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpestrm_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = trunc i32 %2 to i8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  %9 = sub nsw i32 0, %7
  %10 = select i1 %8, i32 %9, i32 %7
  %11 = and i32 %2, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  %16 = sub nsw i32 0, %14
  %17 = select i1 %15, i32 %16, i32 %14
  br i1 %12, label %22, label %18

18:                                               ; preds = %3
  %19 = icmp slt i32 %10, 8
  %20 = select i1 %19, i32 %10, i32 8
  %21 = icmp sgt i32 %17, 8
  br i1 %21, label %28, label %26

22:                                               ; preds = %3
  %23 = icmp slt i32 %10, 16
  %24 = select i1 %23, i32 %10, i32 16
  %25 = icmp sgt i32 %17, 16
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %18
  %27 = phi i32 [ %24, %22 ], [ %20, %18 ]
  br label %28

28:                                               ; preds = %18, %22, %26
  %29 = phi i32 [ %27, %26 ], [ %20, %18 ], [ %24, %22 ]
  %30 = phi i32 [ %17, %26 ], [ 8, %18 ], [ 16, %22 ]
  %31 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* %0, %union.XMMReg* %1, i8 signext %4, i32 %29, i32 %30)
  %32 = and i32 %2, 64
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %80, label %34

34:                                               ; preds = %28
  %35 = lshr i32 %31, 1
  %36 = lshr i32 %31, 2
  %37 = lshr i32 %31, 3
  %38 = lshr i32 %31, 4
  %39 = lshr i32 %31, 5
  %40 = lshr i32 %31, 6
  %41 = lshr i32 %31, 7
  br i1 %12, label %53, label %42

42:                                               ; preds = %34
  %43 = insertelement <8 x i32> undef, i32 %31, i32 0
  %44 = insertelement <8 x i32> %43, i32 %35, i32 1
  %45 = insertelement <8 x i32> %44, i32 %36, i32 2
  %46 = insertelement <8 x i32> %45, i32 %37, i32 3
  %47 = insertelement <8 x i32> %46, i32 %38, i32 4
  %48 = insertelement <8 x i32> %47, i32 %39, i32 5
  %49 = insertelement <8 x i32> %48, i32 %40, i32 6
  %50 = insertelement <8 x i32> %49, i32 %41, i32 7
  %.i0 = shl i32 %31, 31
  %.i1 = shl i32 %35, 31
  %.i2 = shl i32 %36, 31
  %.i3 = shl i32 %37, 31
  %.i4 = shl i32 %38, 31
  %.i5 = shl i32 %39, 31
  %.i6 = shl i32 %40, 31
  %.i7 = shl i32 %41, 31
  %.i01 = ashr exact i32 %.i0, 31
  %.i12 = ashr exact i32 %.i1, 31
  %.i23 = ashr exact i32 %.i2, 31
  %.i34 = ashr exact i32 %.i3, 31
  %.i45 = ashr exact i32 %.i4, 31
  %.i56 = ashr exact i32 %.i5, 31
  %.i67 = ashr exact i32 %.i6, 31
  %.i78 = ashr exact i32 %.i7, 31
  %.i09 = trunc i32 %.i01 to i16
  %.i110 = trunc i32 %.i12 to i16
  %.i211 = trunc i32 %.i23 to i16
  %.i312 = trunc i32 %.i34 to i16
  %.i413 = trunc i32 %.i45 to i16
  %.i514 = trunc i32 %.i56 to i16
  %.i615 = trunc i32 %.i67 to i16
  %.i716 = trunc i32 %.i78 to i16
  %.upto0 = insertelement <8 x i16> undef, i16 %.i09, i32 0
  %.upto1 = insertelement <8 x i16> %.upto0, i16 %.i110, i32 1
  %.upto2 = insertelement <8 x i16> %.upto1, i16 %.i211, i32 2
  %.upto3 = insertelement <8 x i16> %.upto2, i16 %.i312, i32 3
  %.upto4 = insertelement <8 x i16> %.upto3, i16 %.i413, i32 4
  %.upto5 = insertelement <8 x i16> %.upto4, i16 %.i514, i32 5
  %.upto6 = insertelement <8 x i16> %.upto5, i16 %.i615, i32 6
  %51 = insertelement <8 x i16> %.upto6, i16 %.i716, i32 7
  %52 = bitcast %union.XMMReg* %0 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 2
  br label %84

53:                                               ; preds = %34
  %54 = lshr i32 %31, 8
  %55 = lshr i32 %31, 9
  %56 = lshr i32 %31, 10
  %57 = lshr i32 %31, 11
  %58 = lshr i32 %31, 12
  %59 = lshr i32 %31, 13
  %60 = lshr i32 %31, 14
  %61 = lshr i32 %31, 15
  %62 = insertelement <16 x i32> undef, i32 %31, i32 0
  %63 = insertelement <16 x i32> %62, i32 %35, i32 1
  %64 = insertelement <16 x i32> %63, i32 %36, i32 2
  %65 = insertelement <16 x i32> %64, i32 %37, i32 3
  %66 = insertelement <16 x i32> %65, i32 %38, i32 4
  %67 = insertelement <16 x i32> %66, i32 %39, i32 5
  %68 = insertelement <16 x i32> %67, i32 %40, i32 6
  %69 = insertelement <16 x i32> %68, i32 %41, i32 7
  %70 = insertelement <16 x i32> %69, i32 %54, i32 8
  %71 = insertelement <16 x i32> %70, i32 %55, i32 9
  %72 = insertelement <16 x i32> %71, i32 %56, i32 10
  %73 = insertelement <16 x i32> %72, i32 %57, i32 11
  %74 = insertelement <16 x i32> %73, i32 %58, i32 12
  %75 = insertelement <16 x i32> %74, i32 %59, i32 13
  %76 = insertelement <16 x i32> %75, i32 %60, i32 14
  %77 = insertelement <16 x i32> %76, i32 %61, i32 15
  %.i017 = shl i32 %31, 31
  %.i118 = shl i32 %35, 31
  %.i219 = shl i32 %36, 31
  %.i320 = shl i32 %37, 31
  %.i421 = shl i32 %38, 31
  %.i522 = shl i32 %39, 31
  %.i623 = shl i32 %40, 31
  %.i724 = shl i32 %41, 31
  %.i8 = shl i32 %54, 31
  %.i9 = shl i32 %55, 31
  %.i10 = shl i32 %56, 31
  %.i11 = shl i32 %57, 31
  %.i1225 = shl i32 %58, 31
  %.i13 = shl i32 %59, 31
  %.i14 = shl i32 %60, 31
  %.i15 = shl i32 %61, 31
  %.i026 = ashr exact i32 %.i017, 31
  %.i127 = ashr exact i32 %.i118, 31
  %.i228 = ashr exact i32 %.i219, 31
  %.i329 = ashr exact i32 %.i320, 31
  %.i430 = ashr exact i32 %.i421, 31
  %.i531 = ashr exact i32 %.i522, 31
  %.i632 = ashr exact i32 %.i623, 31
  %.i733 = ashr exact i32 %.i724, 31
  %.i834 = ashr exact i32 %.i8, 31
  %.i935 = ashr exact i32 %.i9, 31
  %.i1036 = ashr exact i32 %.i10, 31
  %.i1137 = ashr exact i32 %.i11, 31
  %.i1238 = ashr exact i32 %.i1225, 31
  %.i1339 = ashr exact i32 %.i13, 31
  %.i1440 = ashr exact i32 %.i14, 31
  %.i1541 = ashr exact i32 %.i15, 31
  %.i042 = trunc i32 %.i026 to i8
  %.i143 = trunc i32 %.i127 to i8
  %.i244 = trunc i32 %.i228 to i8
  %.i345 = trunc i32 %.i329 to i8
  %.i446 = trunc i32 %.i430 to i8
  %.i547 = trunc i32 %.i531 to i8
  %.i648 = trunc i32 %.i632 to i8
  %.i749 = trunc i32 %.i733 to i8
  %.i850 = trunc i32 %.i834 to i8
  %.i951 = trunc i32 %.i935 to i8
  %.i1052 = trunc i32 %.i1036 to i8
  %.i1153 = trunc i32 %.i1137 to i8
  %.i1254 = trunc i32 %.i1238 to i8
  %.i1355 = trunc i32 %.i1339 to i8
  %.i1456 = trunc i32 %.i1440 to i8
  %.i1557 = trunc i32 %.i1541 to i8
  %.upto058 = insertelement <16 x i8> undef, i8 %.i042, i32 0
  %.upto159 = insertelement <16 x i8> %.upto058, i8 %.i143, i32 1
  %.upto260 = insertelement <16 x i8> %.upto159, i8 %.i244, i32 2
  %.upto361 = insertelement <16 x i8> %.upto260, i8 %.i345, i32 3
  %.upto462 = insertelement <16 x i8> %.upto361, i8 %.i446, i32 4
  %.upto563 = insertelement <16 x i8> %.upto462, i8 %.i547, i32 5
  %.upto664 = insertelement <16 x i8> %.upto563, i8 %.i648, i32 6
  %.upto7 = insertelement <16 x i8> %.upto664, i8 %.i749, i32 7
  %.upto8 = insertelement <16 x i8> %.upto7, i8 %.i850, i32 8
  %.upto9 = insertelement <16 x i8> %.upto8, i8 %.i951, i32 9
  %.upto10 = insertelement <16 x i8> %.upto9, i8 %.i1052, i32 10
  %.upto11 = insertelement <16 x i8> %.upto10, i8 %.i1153, i32 11
  %.upto12 = insertelement <16 x i8> %.upto11, i8 %.i1254, i32 12
  %.upto13 = insertelement <16 x i8> %.upto12, i8 %.i1355, i32 13
  %.upto14 = insertelement <16 x i8> %.upto13, i8 %.i1456, i32 14
  %78 = insertelement <16 x i8> %.upto14, i8 %.i1557, i32 15
  %79 = bitcast %union.XMMReg* %0 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %79, align 1
  br label %84

80:                                               ; preds = %28
  %81 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %81, align 8
  %82 = zext i32 %31 to i64
  %83 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %82, i64* %83, align 8
  br label %84

84:                                               ; preds = %42, %53, %80
  ret void
}

; Function Attrs: uwtable
define void @helper_pcmpistri_xmm(%union.XMMReg* nocapture readonly %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = trunc i32 %2 to i8
  %5 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* %1, i8 zeroext %4)
  %6 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* %0, i8 zeroext %4)
  %7 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* %0, %union.XMMReg* %1, i8 signext %4, i32 %5, i32 %6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = and i32 %2, 64
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 (i32)* @ffs1, i32 (i32)* @rffs1
  %13 = tail call i32 %12(i32 %7), !callees !27
  %14 = add nsw i32 %13, -1
  br label %18

15:                                               ; preds = %3
  %16 = and i32 %2, 1
  %17 = lshr i32 16, %16
  br label %18

18:                                               ; preds = %15, %9
  %19 = phi i32 [ %17, %15 ], [ %14, %9 ]
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 0, i64 1
  store i32 %19, i32* %21, align 4
  ret void
}

; Function Attrs: inlinehint norecurse nounwind readonly uwtable
define internal fastcc i32 @pcmp_ilen(%union.XMMReg* nocapture readonly %0, i8 zeroext %1) unnamed_addr #18 {
  %3 = and i8 %1, 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %0 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %23, label %15

10:                                               ; preds = %2
  %11 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %12 = bitcast %union.XMMReg* %0 to i8*
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %19

15:                                               ; preds = %5
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %23, label %83

19:                                               ; preds = %10
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %104, %5, %15, %83, %87, %91, %96, %100, %10, %19, %25, %29, %33, %37, %41, %45, %49, %54, %58, %62, %66, %70, %74
  %24 = phi i32 [ 0, %10 ], [ 1, %19 ], [ 2, %25 ], [ 3, %29 ], [ 4, %33 ], [ 5, %37 ], [ 6, %41 ], [ 7, %45 ], [ 8, %49 ], [ 9, %54 ], [ 10, %58 ], [ 11, %62 ], [ 12, %66 ], [ 13, %70 ], [ 14, %74 ], [ 0, %5 ], [ 1, %15 ], [ 2, %83 ], [ 3, %87 ], [ 4, %
  ret i32 %24

25:                                               ; preds = %19
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %23, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %23, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 4
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %23, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %23, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %23, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 7
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %23, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %51 = bitcast i64* %50 to i8*
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %23, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %23, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 10
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %23, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 11
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %23, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 12
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %23, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 13
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %23, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 14
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %23, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 15
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 0
  %82 = select i1 %81, i32 15, i32 16
  ret i32 %82

83:                                               ; preds = %15
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %85 = load i16, i16* %84, align 2
  %86 = icmp eq i16 %85, 0
  br i1 %86, label %23, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %89 = load i16, i16* %88, align 2
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %23, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %93 = bitcast i64* %92 to i16*
  %94 = load i16, i16* %93, align 2
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %23, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %98 = load i16, i16* %97, align 2
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %23, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %102 = load i16, i16* %101, align 2
  %103 = icmp eq i16 %102, 0
  br i1 %103, label %23, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %106 = load i16, i16* %105, align 2
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i32 7, i32 8
  br label %23
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @helper_pcmpistrm_xmm(%union.XMMReg* nocapture %0, %union.XMMReg* nocapture readonly %1, i32 %2) local_unnamed_addr #2 {
  %4 = trunc i32 %2 to i8
  %5 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* %1, i8 zeroext %4)
  %6 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* %0, i8 zeroext %4)
  %7 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* %0, %union.XMMReg* %1, i8 signext %4, i32 %5, i32 %6)
  %8 = and i32 %2, 64
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %3
  %11 = and i32 %2, 1
  %12 = icmp eq i32 %11, 0
  %13 = lshr i32 %7, 1
  %14 = lshr i32 %7, 2
  %15 = lshr i32 %7, 3
  %16 = lshr i32 %7, 4
  %17 = lshr i32 %7, 5
  %18 = lshr i32 %7, 6
  %19 = lshr i32 %7, 7
  br i1 %12, label %31, label %20

20:                                               ; preds = %10
  %21 = insertelement <8 x i32> undef, i32 %7, i32 0
  %22 = insertelement <8 x i32> %21, i32 %13, i32 1
  %23 = insertelement <8 x i32> %22, i32 %14, i32 2
  %24 = insertelement <8 x i32> %23, i32 %15, i32 3
  %25 = insertelement <8 x i32> %24, i32 %16, i32 4
  %26 = insertelement <8 x i32> %25, i32 %17, i32 5
  %27 = insertelement <8 x i32> %26, i32 %18, i32 6
  %28 = insertelement <8 x i32> %27, i32 %19, i32 7
  %.i0 = shl i32 %7, 31
  %.i1 = shl i32 %13, 31
  %.i2 = shl i32 %14, 31
  %.i3 = shl i32 %15, 31
  %.i4 = shl i32 %16, 31
  %.i5 = shl i32 %17, 31
  %.i6 = shl i32 %18, 31
  %.i7 = shl i32 %19, 31
  %.i01 = ashr exact i32 %.i0, 31
  %.i12 = ashr exact i32 %.i1, 31
  %.i23 = ashr exact i32 %.i2, 31
  %.i34 = ashr exact i32 %.i3, 31
  %.i45 = ashr exact i32 %.i4, 31
  %.i56 = ashr exact i32 %.i5, 31
  %.i67 = ashr exact i32 %.i6, 31
  %.i78 = ashr exact i32 %.i7, 31
  %.i09 = trunc i32 %.i01 to i16
  %.i110 = trunc i32 %.i12 to i16
  %.i211 = trunc i32 %.i23 to i16
  %.i312 = trunc i32 %.i34 to i16
  %.i413 = trunc i32 %.i45 to i16
  %.i514 = trunc i32 %.i56 to i16
  %.i615 = trunc i32 %.i67 to i16
  %.i716 = trunc i32 %.i78 to i16
  %.upto0 = insertelement <8 x i16> undef, i16 %.i09, i32 0
  %.upto1 = insertelement <8 x i16> %.upto0, i16 %.i110, i32 1
  %.upto2 = insertelement <8 x i16> %.upto1, i16 %.i211, i32 2
  %.upto3 = insertelement <8 x i16> %.upto2, i16 %.i312, i32 3
  %.upto4 = insertelement <8 x i16> %.upto3, i16 %.i413, i32 4
  %.upto5 = insertelement <8 x i16> %.upto4, i16 %.i514, i32 5
  %.upto6 = insertelement <8 x i16> %.upto5, i16 %.i615, i32 6
  %29 = insertelement <8 x i16> %.upto6, i16 %.i716, i32 7
  %30 = bitcast %union.XMMReg* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  br label %62

31:                                               ; preds = %10
  %32 = lshr i32 %7, 8
  %33 = lshr i32 %7, 9
  %34 = lshr i32 %7, 10
  %35 = lshr i32 %7, 11
  %36 = lshr i32 %7, 12
  %37 = lshr i32 %7, 13
  %38 = lshr i32 %7, 14
  %39 = lshr i32 %7, 15
  %40 = insertelement <16 x i32> undef, i32 %7, i32 0
  %41 = insertelement <16 x i32> %40, i32 %13, i32 1
  %42 = insertelement <16 x i32> %41, i32 %14, i32 2
  %43 = insertelement <16 x i32> %42, i32 %15, i32 3
  %44 = insertelement <16 x i32> %43, i32 %16, i32 4
  %45 = insertelement <16 x i32> %44, i32 %17, i32 5
  %46 = insertelement <16 x i32> %45, i32 %18, i32 6
  %47 = insertelement <16 x i32> %46, i32 %19, i32 7
  %48 = insertelement <16 x i32> %47, i32 %32, i32 8
  %49 = insertelement <16 x i32> %48, i32 %33, i32 9
  %50 = insertelement <16 x i32> %49, i32 %34, i32 10
  %51 = insertelement <16 x i32> %50, i32 %35, i32 11
  %52 = insertelement <16 x i32> %51, i32 %36, i32 12
  %53 = insertelement <16 x i32> %52, i32 %37, i32 13
  %54 = insertelement <16 x i32> %53, i32 %38, i32 14
  %55 = insertelement <16 x i32> %54, i32 %39, i32 15
  %.i017 = shl i32 %7, 31
  %.i118 = shl i32 %13, 31
  %.i219 = shl i32 %14, 31
  %.i320 = shl i32 %15, 31
  %.i421 = shl i32 %16, 31
  %.i522 = shl i32 %17, 31
  %.i623 = shl i32 %18, 31
  %.i724 = shl i32 %19, 31
  %.i8 = shl i32 %32, 31
  %.i9 = shl i32 %33, 31
  %.i10 = shl i32 %34, 31
  %.i11 = shl i32 %35, 31
  %.i1225 = shl i32 %36, 31
  %.i13 = shl i32 %37, 31
  %.i14 = shl i32 %38, 31
  %.i15 = shl i32 %39, 31
  %.i026 = ashr exact i32 %.i017, 31
  %.i127 = ashr exact i32 %.i118, 31
  %.i228 = ashr exact i32 %.i219, 31
  %.i329 = ashr exact i32 %.i320, 31
  %.i430 = ashr exact i32 %.i421, 31
  %.i531 = ashr exact i32 %.i522, 31
  %.i632 = ashr exact i32 %.i623, 31
  %.i733 = ashr exact i32 %.i724, 31
  %.i834 = ashr exact i32 %.i8, 31
  %.i935 = ashr exact i32 %.i9, 31
  %.i1036 = ashr exact i32 %.i10, 31
  %.i1137 = ashr exact i32 %.i11, 31
  %.i1238 = ashr exact i32 %.i1225, 31
  %.i1339 = ashr exact i32 %.i13, 31
  %.i1440 = ashr exact i32 %.i14, 31
  %.i1541 = ashr exact i32 %.i15, 31
  %.i042 = trunc i32 %.i026 to i8
  %.i143 = trunc i32 %.i127 to i8
  %.i244 = trunc i32 %.i228 to i8
  %.i345 = trunc i32 %.i329 to i8
  %.i446 = trunc i32 %.i430 to i8
  %.i547 = trunc i32 %.i531 to i8
  %.i648 = trunc i32 %.i632 to i8
  %.i749 = trunc i32 %.i733 to i8
  %.i850 = trunc i32 %.i834 to i8
  %.i951 = trunc i32 %.i935 to i8
  %.i1052 = trunc i32 %.i1036 to i8
  %.i1153 = trunc i32 %.i1137 to i8
  %.i1254 = trunc i32 %.i1238 to i8
  %.i1355 = trunc i32 %.i1339 to i8
  %.i1456 = trunc i32 %.i1440 to i8
  %.i1557 = trunc i32 %.i1541 to i8
  %.upto058 = insertelement <16 x i8> undef, i8 %.i042, i32 0
  %.upto159 = insertelement <16 x i8> %.upto058, i8 %.i143, i32 1
  %.upto260 = insertelement <16 x i8> %.upto159, i8 %.i244, i32 2
  %.upto361 = insertelement <16 x i8> %.upto260, i8 %.i345, i32 3
  %.upto462 = insertelement <16 x i8> %.upto361, i8 %.i446, i32 4
  %.upto563 = insertelement <16 x i8> %.upto462, i8 %.i547, i32 5
  %.upto664 = insertelement <16 x i8> %.upto563, i8 %.i648, i32 6
  %.upto7 = insertelement <16 x i8> %.upto664, i8 %.i749, i32 7
  %.upto8 = insertelement <16 x i8> %.upto7, i8 %.i850, i32 8
  %.upto9 = insertelement <16 x i8> %.upto8, i8 %.i951, i32 9
  %.upto10 = insertelement <16 x i8> %.upto9, i8 %.i1052, i32 10
  %.upto11 = insertelement <16 x i8> %.upto10, i8 %.i1153, i32 11
  %.upto12 = insertelement <16 x i8> %.upto11, i8 %.i1254, i32 12
  %.upto13 = insertelement <16 x i8> %.upto12, i8 %.i1355, i32 13
  %.upto14 = insertelement <16 x i8> %.upto13, i8 %.i1456, i32 14
  %56 = insertelement <16 x i8> %.upto14, i8 %.i1557, i32 15
  %57 = bitcast %union.XMMReg* %0 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %57, align 1
  br label %62

58:                                               ; preds = %3
  %59 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %59, align 8
  %60 = zext i32 %7 to i64
  %61 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %60, i64* %61, align 8
  br label %62

62:                                               ; preds = %20, %31, %58
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @helper_crc32(i32 %0, i32 %1, i32 %2) local_unnamed_addr #15 {
  %4 = sub i32 32, %2
  %5 = lshr i32 -1, %4
  %6 = and i32 %5, %1
  %7 = xor i32 %6, %0
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %52, label %9

9:                                                ; preds = %3
  %10 = add i32 %2, -1
  %11 = and i32 %2, 3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9, %13
  %14 = phi i32 [ %22, %13 ], [ %7, %9 ]
  %15 = phi i32 [ %17, %13 ], [ %2, %9 ]
  %16 = phi i32 [ %23, %13 ], [ %11, %9 ]
  %17 = add i32 %15, -1
  %18 = lshr i32 %14, 1
  %19 = and i32 %14, 1
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 0, i32 -2097792136
  %22 = xor i32 %21, %18
  %23 = add i32 %16, -1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %13, !llvm.loop !41

25:                                               ; preds = %13, %9
  %26 = phi i32 [ undef, %9 ], [ %22, %13 ]
  %27 = phi i32 [ %7, %9 ], [ %22, %13 ]
  %28 = phi i32 [ %2, %9 ], [ %17, %13 ]
  %29 = icmp ult i32 %10, 3
  br i1 %29, label %52, label %30

30:                                               ; preds = %25, %30
  %31 = phi i32 [ %50, %30 ], [ %27, %25 ]
  %32 = phi i32 [ %46, %30 ], [ %28, %25 ]
  %33 = lshr i32 %31, 4
  %34 = and i32 %31, 1
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 0, i32 274646895
  %37 = xor i32 %36, %33
  %38 = and i32 %31, 2
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i32 0, i32 549293790
  %41 = xor i32 %40, %37
  %42 = and i32 %31, 4
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, i32 0, i32 1098587580
  %45 = xor i32 %44, %41
  %46 = add i32 %32, -4
  %47 = and i32 %31, 8
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i32 0, i32 -2097792136
  %50 = xor i32 %49, %45
  %51 = icmp eq i32 %46, 0
  br i1 %51, label %52, label %30

52:                                               ; preds = %25, %30, %3
  %53 = phi i32 [ %7, %3 ], [ %26, %25 ], [ %50, %30 ]
  ret i32 %53
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_popcnt(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = icmp eq i32 %0, 0
  %4 = select i1 %3, i32 64, i32 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 2
  store i32 %4, i32* %6, align 4
  %7 = and i32 %0, 1431655765
  %8 = lshr i32 %0, 1
  %9 = and i32 %8, 1431655765
  %10 = add nuw i32 %9, %7
  %11 = and i32 %10, 858993459
  %12 = lshr i32 %10, 2
  %13 = and i32 %12, 858993459
  %14 = add nuw nsw i32 %13, %11
  %15 = and i32 %14, 117901063
  %16 = lshr i32 %14, 4
  %17 = and i32 %16, 117901063
  %18 = add nuw nsw i32 %17, %15
  %19 = and i32 %18, 983055
  %20 = lshr i32 %18, 8
  %21 = and i32 %20, 983055
  %22 = add nuw nsw i32 %21, %19
  %23 = icmp eq i32 %1, 1
  %24 = and i32 %22, 31
  %25 = lshr i32 %22, 16
  %26 = select i1 %23, i32 0, i32 %25
  %27 = add nuw nsw i32 %26, %24
  ret i32 %27
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_rclb(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %1, 31
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* @rclb_table, i64 0, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp eq i8 %6, 0
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %8, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 1
  %12 = load i32, i32* %11, align 16
  %13 = tail call i32 @helper_cc_compute_all(i32 %12)
  %14 = and i32 %0, 255
  %15 = shl i32 %14, %7
  %16 = and i32 %13, 1
  %17 = add nsw i32 %7, -1
  %18 = shl nuw i32 %16, %17
  %19 = icmp eq i8 %6, 1
  %20 = sub nsw i32 9, %7
  %21 = lshr i32 %14, %20
  %22 = select i1 %19, i32 0, i32 %21
  %23 = or i32 %22, %15
  %24 = or i32 %23, %18
  %25 = and i32 %13, -2050
  %26 = xor i32 %24, %0
  %27 = shl i32 %26, 4
  %28 = and i32 %27, 2048
  %29 = sub nsw i32 8, %7
  %30 = lshr i32 %14, %29
  %31 = and i32 %30, 1
  %32 = or i32 %25, %31
  %33 = or i32 %32, %28
  br label %34

34:                                               ; preds = %2, %10
  %35 = phi i32 [ %33, %10 ], [ -1, %2 ]
  %36 = phi i32 [ %24, %10 ], [ %0, %2 ]
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 4
  store i32 %35, i32* %37, align 4
  ret i32 %36
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_rcrb(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %1, 31
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* @rclb_table, i64 0, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp eq i8 %6, 0
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %8, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 1
  %12 = load i32, i32* %11, align 16
  %13 = tail call i32 @helper_cc_compute_all(i32 %12)
  %14 = and i32 %0, 255
  %15 = lshr i32 %14, %7
  %16 = and i32 %13, 1
  %17 = sub nsw i32 8, %7
  %18 = shl nuw nsw i32 %16, %17
  %19 = icmp eq i8 %6, 1
  %20 = sub nsw i32 9, %7
  %21 = shl nuw nsw i32 %14, %20
  %22 = select i1 %19, i32 0, i32 %21
  %23 = or i32 %22, %15
  %24 = or i32 %23, %18
  %25 = and i32 %13, -2050
  %26 = xor i32 %24, %0
  %27 = shl i32 %26, 4
  %28 = and i32 %27, 2048
  %29 = add nsw i32 %7, -1
  %30 = lshr i32 %14, %29
  %31 = and i32 %30, 1
  %32 = or i32 %25, %31
  %33 = or i32 %32, %28
  br label %34

34:                                               ; preds = %2, %10
  %35 = phi i32 [ %33, %10 ], [ -1, %2 ]
  %36 = phi i32 [ %24, %10 ], [ %0, %2 ]
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 4
  store i32 %35, i32* %37, align 4
  ret i32 %36
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_rclw(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %1, 31
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* @rclw_table, i64 0, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp eq i8 %6, 0
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %8, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 1
  %12 = load i32, i32* %11, align 16
  %13 = tail call i32 @helper_cc_compute_all(i32 %12)
  %14 = and i32 %0, 65535
  %15 = shl i32 %14, %7
  %16 = and i32 %13, 1
  %17 = add nsw i32 %7, -1
  %18 = shl nuw i32 %16, %17
  %19 = icmp eq i8 %6, 1
  %20 = sub nsw i32 17, %7
  %21 = lshr i32 %14, %20
  %22 = select i1 %19, i32 0, i32 %21
  %23 = or i32 %22, %15
  %24 = or i32 %23, %18
  %25 = and i32 %13, -2050
  %26 = xor i32 %24, %0
  %27 = lshr i32 %26, 4
  %28 = and i32 %27, 2048
  %29 = sub nsw i32 16, %7
  %30 = lshr i32 %14, %29
  %31 = and i32 %30, 1
  %32 = or i32 %25, %31
  %33 = or i32 %32, %28
  br label %34

34:                                               ; preds = %2, %10
  %35 = phi i32 [ %33, %10 ], [ -1, %2 ]
  %36 = phi i32 [ %24, %10 ], [ %0, %2 ]
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 4
  store i32 %35, i32* %37, align 4
  ret i32 %36
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_rcrw(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %1, 31
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* @rclw_table, i64 0, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp eq i8 %6, 0
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %8, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 1
  %12 = load i32, i32* %11, align 16
  %13 = tail call i32 @helper_cc_compute_all(i32 %12)
  %14 = and i32 %0, 65535
  %15 = lshr i32 %14, %7
  %16 = and i32 %13, 1
  %17 = sub nsw i32 16, %7
  %18 = shl nuw nsw i32 %16, %17
  %19 = icmp eq i8 %6, 1
  %20 = sub nsw i32 17, %7
  %21 = shl i32 %14, %20
  %22 = select i1 %19, i32 0, i32 %21
  %23 = or i32 %22, %15
  %24 = or i32 %23, %18
  %25 = and i32 %13, -2050
  %26 = xor i32 %24, %0
  %27 = lshr i32 %26, 4
  %28 = and i32 %27, 2048
  %29 = add nsw i32 %7, -1
  %30 = lshr i32 %14, %29
  %31 = and i32 %30, 1
  %32 = or i32 %25, %31
  %33 = or i32 %32, %28
  br label %34

34:                                               ; preds = %2, %10
  %35 = phi i32 [ %33, %10 ], [ -1, %2 ]
  %36 = phi i32 [ %24, %10 ], [ %0, %2 ]
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 4
  store i32 %35, i32* %37, align 4
  ret i32 %36
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_rcll(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %1, 31
  %4 = icmp eq i32 %3, 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %4, label %29, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 1
  %8 = load i32, i32* %7, align 16
  %9 = tail call i32 @helper_cc_compute_all(i32 %8)
  %10 = shl i32 %0, %3
  %11 = and i32 %9, 1
  %12 = add nsw i32 %3, -1
  %13 = shl nuw nsw i32 %11, %12
  %14 = icmp eq i32 %3, 1
  %15 = sub nuw nsw i32 33, %3
  %16 = lshr i32 %0, %15
  %17 = select i1 %14, i32 0, i32 %16
  %18 = or i32 %17, %10
  %19 = or i32 %18, %13
  %20 = and i32 %9, -2050
  %21 = xor i32 %19, %0
  %22 = lshr i32 %21, 20
  %23 = and i32 %22, 2048
  %24 = sub nuw nsw i32 32, %3
  %25 = lshr i32 %0, %24
  %26 = and i32 %25, 1
  %27 = or i32 %20, %26
  %28 = or i32 %27, %23
  br label %29

29:                                               ; preds = %2, %6
  %30 = phi i32 [ %28, %6 ], [ -1, %2 ]
  %31 = phi i32 [ %19, %6 ], [ %0, %2 ]
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 4
  store i32 %30, i32* %32, align 4
  ret i32 %31
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @helper_rcrl(i32 %0, i32 %1) local_unnamed_addr #2 {
  %3 = and i32 %1, 31
  %4 = icmp eq i32 %3, 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %4, label %29, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 1
  %8 = load i32, i32* %7, align 16
  %9 = tail call i32 @helper_cc_compute_all(i32 %8)
  %10 = lshr i32 %0, %3
  %11 = and i32 %9, 1
  %12 = sub nuw nsw i32 32, %3
  %13 = shl nuw i32 %11, %12
  %14 = icmp eq i32 %3, 1
  %15 = sub nuw nsw i32 33, %3
  %16 = shl i32 %0, %15
  %17 = select i1 %14, i32 0, i32 %16
  %18 = or i32 %17, %10
  %19 = or i32 %18, %13
  %20 = and i32 %9, -2050
  %21 = xor i32 %19, %0
  %22 = lshr i32 %21, 20
  %23 = and i32 %22, 2048
  %24 = add nsw i32 %3, -1
  %25 = lshr i32 %0, %24
  %26 = and i32 %25, 1
  %27 = or i32 %20, %26
  %28 = or i32 %27, %23
  br label %29

29:                                               ; preds = %2, %6
  %30 = phi i32 [ %28, %6 ], [ -1, %2 ]
  %31 = phi i32 [ %19, %6 ], [ %0, %2 ]
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 4
  store i32 %30, i32* %32, align 4
  ret i32 %31
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @helper_bsf(i32 %0) local_unnamed_addr #15 {
  %2 = and i32 %0, 1
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %11

4:                                                ; preds = %1, %4
  %5 = phi i32 [ %8, %4 ], [ %0, %1 ]
  %6 = phi i32 [ %7, %4 ], [ 0, %1 ]
  %7 = add nuw nsw i32 %6, 1
  %8 = lshr i32 %5, 1
  %9 = and i32 %5, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %4, label %11

11:                                               ; preds = %4, %1
  %12 = phi i32 [ 0, %1 ], [ %7, %4 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @helper_lzcnt(i32 %0, i32 %1) local_unnamed_addr #15 {
  %3 = icmp sgt i32 %1, 0
  %4 = icmp eq i32 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = icmp sgt i32 %0, -1
  br i1 %7, label %8, label %14

8:                                                ; preds = %6, %8
  %9 = phi i32 [ %12, %8 ], [ %0, %6 ]
  %10 = phi i32 [ %11, %8 ], [ 31, %6 ]
  %11 = add nsw i32 %10, -1
  %12 = shl nuw i32 %9, 1
  %13 = icmp sgt i32 %12, -1
  br i1 %13, label %8, label %14

14:                                               ; preds = %8, %6
  %15 = phi i32 [ 31, %6 ], [ %11, %8 ]
  br i1 %3, label %16, label %19

16:                                               ; preds = %14
  %17 = xor i32 %15, -1
  %18 = add i32 %17, %1
  br label %19

19:                                               ; preds = %14, %2, %16
  %20 = phi i32 [ %18, %16 ], [ %1, %2 ], [ %15, %14 ]
  ret i32 %20
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @helper_bsr(i32 %0) local_unnamed_addr #15 {
  %2 = icmp sgt i32 %0, -1
  br i1 %2, label %3, label %9

3:                                                ; preds = %1, %3
  %4 = phi i32 [ %7, %3 ], [ %0, %1 ]
  %5 = phi i32 [ %6, %3 ], [ 31, %1 ]
  %6 = add nsw i32 %5, -1
  %7 = shl nuw i32 %4, 1
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %3, label %9

9:                                                ; preds = %3, %1
  %10 = phi i32 [ 31, %1 ], [ %6, %3 ]
  ret i32 %10
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @cpu_cc_compute_all(%struct.CPUX86State* %0, i32 %1) local_unnamed_addr #2 {
  %3 = load i64, i64* bitcast (%struct.CPUX86State** @env to i64*), align 8
  store %struct.CPUX86State* %0, %struct.CPUX86State** @env, align 8
  %4 = tail call i32 @helper_cc_compute_all(i32 %1)
  store i64 %3, i64* bitcast (%struct.CPUX86State** @env to i64*), align 8
  ret i32 %4
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @helper_cc_compute_c(i32 %0) local_unnamed_addr #0 {
  switch i32 %0, label %202 [
    i32 1, label %2
    i32 2, label %7
    i32 3, label %13
    i32 4, label %19
    i32 6, label %25
    i32 7, label %35
    i32 8, label %45
    i32 10, label %53
    i32 11, label %63
    i32 12, label %73
    i32 14, label %81
    i32 15, label %92
    i32 16, label %103
    i32 18, label %112
    i32 19, label %124
    i32 20, label %136
    i32 40, label %197
    i32 39, label %192
    i32 38, label %187
    i32 26, label %146
    i32 27, label %150
    i32 28, label %154
    i32 30, label %158
    i32 31, label %162
    i32 32, label %166
    i32 34, label %170
    i32 35, label %176
    i32 36, label %182
  ]

2:                                                ; preds = %1
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  br label %202

7:                                                ; preds = %1
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  %12 = zext i1 %11 to i32
  br label %202

13:                                               ; preds = %1
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp ne i32 %16, 0
  %18 = zext i1 %17 to i32
  br label %202

19:                                               ; preds = %1
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  br label %202

25:                                               ; preds = %1
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 255
  %32 = and i32 %28, 255
  %33 = icmp ult i32 %31, %32
  %34 = zext i1 %33 to i32
  br label %202

35:                                               ; preds = %1
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, 65535
  %42 = and i32 %38, 65535
  %43 = icmp ult i32 %41, %42
  %44 = zext i1 %43 to i32
  br label %202

45:                                               ; preds = %1
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 3
  %50 = load i32, i32* %49, align 8
  %51 = icmp ult i32 %50, %48
  %52 = zext i1 %51 to i32
  br label %202

53:                                               ; preds = %1
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 3
  %58 = load i32, i32* %57, align 8
  %59 = and i32 %58, 255
  %60 = and i32 %56, 255
  %61 = icmp ule i32 %59, %60
  %62 = zext i1 %61 to i32
  br label %202

63:                                               ; preds = %1
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 3
  %68 = load i32, i32* %67, align 8
  %69 = and i32 %68, 65535
  %70 = and i32 %66, 65535
  %71 = icmp ule i32 %69, %70
  %72 = zext i1 %71 to i32
  br label %202

73:                                               ; preds = %1
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = icmp ule i32 %78, %76
  %80 = zext i1 %79 to i32
  br label %202

81:                                               ; preds = %1
  %82 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %82, i64 0, i32 3
  %84 = load i32, i32* %83, align 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %82, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, %84
  %88 = and i32 %87, 255
  %89 = and i32 %86, 255
  %90 = icmp ult i32 %88, %89
  %91 = zext i1 %90 to i32
  br label %202

92:                                               ; preds = %1
  %93 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 3
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %97, %95
  %99 = and i32 %98, 65535
  %100 = and i32 %97, 65535
  %101 = icmp ult i32 %99, %100
  %102 = zext i1 %101 to i32
  br label %202

103:                                              ; preds = %1
  %104 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %104, i64 0, i32 3
  %106 = load i32, i32* %105, align 8
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %104, i64 0, i32 2
  %108 = load i32, i32* %107, align 4
  %109 = xor i32 %108, -1
  %110 = icmp ugt i32 %106, %109
  %111 = zext i1 %110 to i32
  br label %202

112:                                              ; preds = %1
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 3
  %115 = load i32, i32* %114, align 8
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 2
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %115, 1
  %119 = add i32 %118, %117
  %120 = and i32 %119, 255
  %121 = and i32 %117, 255
  %122 = icmp ule i32 %120, %121
  %123 = zext i1 %122 to i32
  br label %202

124:                                              ; preds = %1
  %125 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %125, i64 0, i32 3
  %127 = load i32, i32* %126, align 8
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %125, i64 0, i32 2
  %129 = load i32, i32* %128, align 4
  %130 = add i32 %127, 1
  %131 = add i32 %130, %129
  %132 = and i32 %131, 65535
  %133 = and i32 %129, 65535
  %134 = icmp ule i32 %132, %133
  %135 = zext i1 %134 to i32
  br label %202

136:                                              ; preds = %1
  %137 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %138 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 3
  %139 = load i32, i32* %138, align 8
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 2
  %141 = load i32, i32* %140, align 4
  %142 = add i32 %139, 1
  %143 = add i32 %142, %141
  %144 = icmp ule i32 %143, %141
  %145 = zext i1 %144 to i32
  br label %202

146:                                              ; preds = %1
  %147 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %148 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %147, i64 0, i32 2
  %149 = load i32, i32* %148, align 4
  br label %202

150:                                              ; preds = %1
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 2
  %153 = load i32, i32* %152, align 4
  br label %202

154:                                              ; preds = %1
  %155 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %156 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %155, i64 0, i32 2
  %157 = load i32, i32* %156, align 4
  br label %202

158:                                              ; preds = %1
  %159 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %160 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %159, i64 0, i32 2
  %161 = load i32, i32* %160, align 4
  br label %202

162:                                              ; preds = %1
  %163 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %164 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %163, i64 0, i32 2
  %165 = load i32, i32* %164, align 4
  br label %202

166:                                              ; preds = %1
  %167 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %168 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 2
  %169 = load i32, i32* %168, align 4
  br label %202

170:                                              ; preds = %1
  %171 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %171, i64 0, i32 2
  %173 = load i32, i32* %172, align 4
  %174 = lshr i32 %173, 7
  %175 = and i32 %174, 1
  br label %202

176:                                              ; preds = %1
  %177 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %178 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %177, i64 0, i32 2
  %179 = load i32, i32* %178, align 4
  %180 = lshr i32 %179, 15
  %181 = and i32 %180, 1
  br label %202

182:                                              ; preds = %1
  %183 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %184 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %183, i64 0, i32 2
  %185 = load i32, i32* %184, align 4
  %186 = lshr i32 %185, 31
  br label %202

187:                                              ; preds = %1
  %188 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 2
  %190 = load i32, i32* %189, align 4
  %191 = and i32 %190, 1
  br label %202

192:                                              ; preds = %1
  %193 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %194 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %193, i64 0, i32 2
  %195 = load i32, i32* %194, align 4
  %196 = and i32 %195, 1
  br label %202

197:                                              ; preds = %1
  %198 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 2
  %200 = load i32, i32* %199, align 4
  %201 = and i32 %200, 1
  br label %202

202:                                              ; preds = %1, %197, %192, %187, %182, %176, %170, %166, %162, %158, %154, %150, %146, %136, %124, %112, %103, %92, %81, %73, %63, %53, %45, %35, %25, %19, %13, %7, %2
  %203 = phi i32 [ %201, %197 ], [ %196, %192 ], [ %191, %187 ], [ %186, %182 ], [ %181, %176 ], [ %175, %170 ], [ %169, %166 ], [ %165, %162 ], [ %161, %158 ], [ %157, %154 ], [ %153, %150 ], [ %149, %146 ], [ %145, %136 ], [ %135, %124 ], [ %123, %112 
  ret i32 %203
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @helper_set_cc_op_eflags() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i32, i32* %2, align 16
  %4 = tail call i32 @helper_cc_compute_all(i32 %3)
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 2
  store i32 %4, i32* %5, align 4
  store i32 1, i32* %2, align 16
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @se_ensure_symbolic() local_unnamed_addr #15 {
  ret void
}

; Function Attrs: uwtable
define weak void @helper_se_call(i32 %0) local_unnamed_addr #3 {
  ret void
}

; Function Attrs: uwtable
define weak void @helper_se_ret(i32 %0, i32 %1) local_unnamed_addr #3 {
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define void @float_raise(i8 zeroext %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %4 = load i8, i8* %3, align 1
  %5 = or i8 %4, %0
  store i8 %5, i8* %3, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float16_is_quiet_nan(i16 zeroext %0) local_unnamed_addr #15 {
  %2 = and i16 %0, 32640
  %3 = icmp ugt i16 %2, 31871
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float16_is_signaling_nan(i16 zeroext %0) local_unnamed_addr #15 {
  %2 = zext i16 %0 to i32
  %3 = and i32 %2, 32256
  %4 = icmp eq i32 %3, 31744
  %5 = and i32 %2, 511
  %6 = icmp ne i32 %5, 0
  %7 = and i1 %4, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define zeroext i16 @float16_maybe_silence_nan(i16 zeroext %0) local_unnamed_addr #15 {
  %2 = zext i16 %0 to i32
  %3 = and i32 %2, 32256
  %4 = icmp ne i32 %3, 31744
  %5 = and i32 %2, 511
  %6 = icmp eq i32 %5, 0
  %7 = or i1 %6, %4
  %8 = or i16 %0, 512
  %9 = select i1 %7, i16 %0, i16 %8
  ret i16 %9
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float32_is_quiet_nan(i32 %0) local_unnamed_addr #15 {
  %2 = shl i32 %0, 1
  %3 = icmp ugt i32 %2, -8388609
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float32_is_signaling_nan(i32 %0) local_unnamed_addr #15 {
  %2 = and i32 %0, 2143289344
  %3 = icmp eq i32 %2, 2139095040
  %4 = and i32 %0, 4194303
  %5 = icmp ne i32 %4, 0
  %6 = and i1 %3, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float32_maybe_silence_nan(i32 %0) local_unnamed_addr #15 {
  %2 = and i32 %0, 2143289344
  %3 = icmp ne i32 %2, 2139095040
  %4 = and i32 %0, 4194303
  %5 = icmp eq i32 %4, 0
  %6 = or i1 %5, %3
  %7 = or i32 %0, 4194304
  %8 = select i1 %6, i32 %0, i32 %7
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float64_is_quiet_nan(i64 %0) local_unnamed_addr #15 {
  %2 = shl i64 %0, 1
  %3 = icmp ugt i64 %2, -4503599627370497
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float64_is_signaling_nan(i64 %0) local_unnamed_addr #15 {
  %2 = and i64 %0, 9221120237041090560
  %3 = icmp eq i64 %2, 9218868437227405312
  %4 = and i64 %0, 2251799813685247
  %5 = icmp ne i64 %4, 0
  %6 = and i1 %3, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define i64 @float64_maybe_silence_nan(i64 %0) local_unnamed_addr #15 {
  %2 = and i64 %0, 9221120237041090560
  %3 = icmp ne i64 %2, 9218868437227405312
  %4 = and i64 %0, 2251799813685247
  %5 = icmp eq i64 %4, 0
  %6 = or i1 %5, %3
  %7 = or i64 %0, 2251799813685248
  %8 = select i1 %6, i64 %0, i64 %7
  ret i64 %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @floatx80_is_quiet_nan(i64 %0, i16 %1) local_unnamed_addr #15 {
  %3 = and i16 %1, 32767
  %4 = icmp eq i16 %3, 32767
  %5 = and i64 %0, 4611686018427387904
  %6 = icmp ne i64 %5, 0
  %7 = and i1 %6, %4
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @floatx80_is_signaling_nan(i64 %0, i16 %1) local_unnamed_addr #15 {
  %3 = and i64 %0, -4611686018427387905
  %4 = and i16 %1, 32767
  %5 = icmp eq i16 %4, 32767
  %6 = and i64 %0, 4611686018427387903
  %7 = icmp ne i64 %6, 0
  %8 = icmp eq i64 %3, %0
  %9 = and i1 %7, %5
  %10 = and i1 %8, %9
  %11 = zext i1 %10 to i32
  ret i32 %11
}

; Function Attrs: norecurse nounwind readnone uwtable
define { i64, i16 } @floatx80_maybe_silence_nan(i64 %0, i16 %1) local_unnamed_addr #15 {
  %3 = and i64 %0, -4611686018427387905
  %4 = and i16 %1, 32767
  %5 = icmp eq i16 %4, 32767
  %6 = and i64 %0, 4611686018427387903
  %7 = icmp ne i64 %6, 0
  %8 = icmp eq i64 %3, %0
  %9 = and i1 %7, %5
  %10 = and i1 %8, %9
  %11 = or i64 %0, -4611686018427387904
  %12 = select i1 %10, i64 %11, i64 %0
  %13 = insertvalue { i64, i16 } undef, i64 %12, 0
  %14 = insertvalue { i64, i16 } %13, i16 %1, 1
  ret { i64, i16 } %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float128_is_quiet_nan(i64 %0, i64 %1) local_unnamed_addr #15 {
  %3 = shl i64 %1, 1
  %4 = icmp ugt i64 %3, -562949953421313
  %5 = and i64 %1, 281474976710655
  %6 = or i64 %5, %0
  %7 = icmp ne i64 %6, 0
  %8 = and i1 %4, %7
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @float128_is_signaling_nan(i64 %0, i64 %1) local_unnamed_addr #15 {
  %3 = and i64 %1, 9223231299366420480
  %4 = icmp eq i64 %3, 9223090561878065152
  %5 = and i64 %1, 140737488355327
  %6 = or i64 %5, %0
  %7 = icmp ne i64 %6, 0
  %8 = and i1 %4, %7
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind readnone uwtable
define { i64, i64 } @float128_maybe_silence_nan(i64 %0, i64 %1) local_unnamed_addr #15 {
  %3 = and i64 %1, 9223231299366420480
  %4 = icmp ne i64 %3, 9223090561878065152
  %5 = and i64 %1, 140737488355327
  %6 = or i64 %5, %0
  %7 = icmp eq i64 %6, 0
  %8 = or i1 %4, %7
  %9 = or i64 %1, 140737488355328
  %10 = select i1 %8, i64 %1, i64 %9
  %11 = insertvalue { i64, i64 } undef, i64 %0, 0
  %12 = insertvalue { i64, i64 } %11, i64 %10, 1
  ret { i64, i64 } %12
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @set_float_rounding_mode(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #1 {
  %3 = trunc i32 %0 to i8
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @set_float_exception_flags(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #1 {
  %3 = trunc i32 %0 to i8
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define void @set_floatx80_rounding_precision(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #1 {
  %3 = trunc i32 %0 to i8
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 3
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: nofree nounwind uwtable
define i32 @int32_to_float32(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #19 {
  switch i32 %0, label %4 [
    i32 0, label %15
    i32 -2147483648, label %3
  ]

3:                                                ; preds = %2
  br label %15

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i32 %0, 0
  %8 = sub nsw i32 0, %0
  %9 = select i1 %7, i32 %8, i32 %0
  %ctlz.sh = lshr i32 %9, 1
  %ctlz.step = or i32 %9, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %10 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %10, 1431655765
  %ctpop.sh = lshr i32 %10, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %11 = add nsw i32 %ctpop.part, -1
  %12 = sub nuw nsw i32 157, %ctpop.part
  %13 = shl i32 %9, %11
  %14 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %6, i32 %12, i32 %13, %struct.float_status* %1) #23
  br label %15

15:                                               ; preds = %2, %4, %3
  %16 = phi i32 [ -822083584, %3 ], [ %14, %4 ], [ %0, %2 ]
  ret i32 %16
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #14

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc i32 @roundAndPackFloat32(i8 zeroext %0, i32 %1, i32 %2, %struct.float_status* nocapture %3) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %18, label %8

8:                                                ; preds = %4
  %9 = icmp eq i8 %6, 3
  br i1 %9, label %18, label %10

10:                                               ; preds = %8
  %11 = icmp eq i8 %0, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = icmp eq i8 %6, 2
  %14 = select i1 %13, i32 0, i32 127
  br label %18

15:                                               ; preds = %10
  %16 = icmp eq i8 %6, 1
  %17 = select i1 %16, i32 0, i32 127
  br label %18

18:                                               ; preds = %15, %12, %8, %4
  %19 = phi i32 [ 64, %4 ], [ 0, %8 ], [ %14, %12 ], [ %17, %15 ]
  %20 = trunc i32 %2 to i8
  %21 = and i8 %20, 127
  %22 = and i32 %1, 65535
  %23 = icmp ugt i32 %22, 252
  br i1 %23, label %24, label %84

24:                                               ; preds = %18
  %25 = icmp sgt i32 %1, 253
  br i1 %25, label %31, label %26

26:                                               ; preds = %24
  %27 = icmp eq i32 %1, 253
  %28 = add i32 %19, %2
  %29 = icmp slt i32 %28, 0
  %30 = and i1 %27, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %26, %24
  %32 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %33 = load i8, i8* %32, align 1
  %34 = or i8 %33, 40
  store i8 %34, i8* %32, align 1
  %35 = icmp eq i32 %19, 0
  %36 = sext i1 %35 to i32
  %37 = zext i8 %0 to i32
  %38 = shl i32 %37, 31
  %39 = or i32 %38, 2139095040
  %40 = add i32 %39, %36
  br label %117

41:                                               ; preds = %26
  %42 = icmp slt i32 %1, 0
  br i1 %42, label %43, label %84

43:                                               ; preds = %41
  %44 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %49, -128
  store i8 %50, i8* %48, align 1
  %51 = zext i8 %0 to i32
  %52 = shl i32 %51, 31
  br label %117

53:                                               ; preds = %43
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 1
  %57 = icmp slt i32 %1, -1
  %58 = or i1 %57, %56
  %59 = icmp sgt i32 %28, -1
  %60 = or i1 %59, %58
  %61 = icmp sgt i32 %1, -32
  br i1 %61, label %62, label %70

62:                                               ; preds = %53
  %63 = sub nsw i32 0, %1
  %64 = lshr i32 %2, %63
  %65 = and i32 %1, 31
  %66 = shl i32 %2, %65
  %67 = icmp ne i32 %66, 0
  %68 = zext i1 %67 to i32
  %69 = or i32 %64, %68
  br label %73

70:                                               ; preds = %53
  %71 = icmp ne i32 %2, 0
  %72 = zext i1 %71 to i32
  br label %73

73:                                               ; preds = %62, %70
  %74 = phi i32 [ %69, %62 ], [ %72, %70 ]
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 127
  %77 = xor i1 %60, true
  %78 = icmp eq i8 %76, 0
  %79 = or i1 %78, %77
  br i1 %79, label %84, label %80

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %82, 16
  store i8 %83, i8* %81, align 1
  br label %92

84:                                               ; preds = %73, %41, %18
  %85 = phi i32 [ %74, %73 ], [ %2, %41 ], [ %2, %18 ]
  %86 = phi i32 [ 0, %73 ], [ %1, %41 ], [ %1, %18 ]
  %87 = phi i8 [ %76, %73 ], [ %21, %41 ], [ %21, %18 ]
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %99, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %91 = load i8, i8* %90, align 1
  br label %92

92:                                               ; preds = %89, %80
  %93 = phi i8 [ %83, %80 ], [ %91, %89 ]
  %94 = phi i8 [ %76, %80 ], [ %87, %89 ]
  %95 = phi i32 [ 0, %80 ], [ %86, %89 ]
  %96 = phi i32 [ %74, %80 ], [ %85, %89 ]
  %97 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %98 = or i8 %93, 32
  store i8 %98, i8* %97, align 1
  br label %99

99:                                               ; preds = %84, %92
  %100 = phi i8 [ 0, %84 ], [ %94, %92 ]
  %101 = phi i32 [ %86, %84 ], [ %95, %92 ]
  %102 = phi i32 [ %85, %84 ], [ %96, %92 ]
  %103 = add i32 %102, %19
  %104 = lshr i32 %103, 7
  %105 = icmp eq i8 %100, 64
  %106 = and i1 %7, %105
  %107 = zext i1 %106 to i32
  %108 = xor i32 %107, -1
  %109 = and i32 %104, %108
  %110 = icmp eq i32 %109, 0
  %111 = zext i8 %0 to i32
  %112 = shl i32 %111, 31
  %113 = shl i32 %101, 23
  %114 = select i1 %110, i32 0, i32 %113
  %115 = or i32 %109, %112
  %116 = add i32 %115, %114
  br label %117

117:                                              ; preds = %99, %47, %31
  %118 = phi i32 [ %40, %31 ], [ %52, %47 ], [ %116, %99 ]
  ret i32 %118
}

; Function Attrs: nounwind readnone uwtable
define i64 @int32_to_float64(i32 %0, %struct.float_status* nocapture readnone %1) local_unnamed_addr #20 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %21, label %4

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = zext i32 %5 to i64
  %7 = icmp slt i32 %0, 0
  %8 = sub nsw i32 0, %0
  %9 = select i1 %7, i32 %8, i32 %0
  %ctlz.sh = lshr i32 %9, 1
  %ctlz.step = or i32 %9, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %10 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %10, 1431655765
  %ctpop.sh = lshr i32 %10, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %11 = add nuw nsw i32 %ctpop.part, 21
  %12 = zext i32 %9 to i64
  %13 = sub nuw nsw i32 1053, %ctpop.part
  %14 = zext i32 %11 to i64
  %15 = shl i64 %12, %14
  %16 = shl nuw i64 %6, 63
  %17 = zext i32 %13 to i64
  %18 = shl nuw nsw i64 %17, 52
  %19 = add i64 %15, %16
  %20 = add i64 %19, %18
  br label %21

21:                                               ; preds = %2, %4
  %22 = phi i64 [ %20, %4 ], [ 0, %2 ]
  ret i64 %22
}

; Function Attrs: nounwind readnone uwtable
define { i64, i16 } @int32_to_floatx80(i32 %0, %struct.float_status* nocapture readnone %1) local_unnamed_addr #20 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = icmp slt i32 %0, 0
  %7 = sub nsw i32 0, %0
  %8 = select i1 %6, i32 %7, i32 %0
  %ctlz.sh = lshr i32 %8, 1
  %ctlz.step = or i32 %8, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %9 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %9, 1431655765
  %ctpop.sh = lshr i32 %9, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %10 = add nuw nsw i32 %ctpop.part, 32
  %11 = zext i32 %8 to i64
  %12 = sub nuw nsw i32 16414, %ctpop.part
  %13 = zext i32 %10 to i64
  %14 = shl i64 %11, %13
  %15 = shl nuw nsw i32 %5, 15
  %16 = or i32 %12, %15
  %17 = trunc i32 %16 to i16
  br label %18

18:                                               ; preds = %2, %4
  %19 = phi i64 [ %14, %4 ], [ 0, %2 ]
  %20 = phi i16 [ %17, %4 ], [ 0, %2 ]
  %21 = insertvalue { i64, i16 } undef, i64 %19, 0
  %22 = insertvalue { i64, i16 } %21, i16 %20, 1
  ret { i64, i16 } %22
}

; Function Attrs: nounwind readnone uwtable
define { i64, i64 } @int32_to_float128(i32 %0, %struct.float_status* nocapture readnone %1) local_unnamed_addr #20 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %21, label %4

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = zext i32 %5 to i64
  %7 = icmp slt i32 %0, 0
  %8 = sub nsw i32 0, %0
  %9 = select i1 %7, i32 %8, i32 %0
  %ctlz.sh = lshr i32 %9, 1
  %ctlz.step = or i32 %9, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %10 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %10, 1431655765
  %ctpop.sh = lshr i32 %10, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %11 = add nuw nsw i32 %ctpop.part, 17
  %12 = zext i32 %9 to i64
  %13 = sub nuw nsw i32 16413, %ctpop.part
  %14 = zext i32 %11 to i64
  %15 = shl i64 %12, %14
  %16 = shl nuw i64 %6, 63
  %17 = zext i32 %13 to i64
  %18 = shl nuw nsw i64 %17, 48
  %19 = add i64 %15, %16
  %20 = add i64 %19, %18
  br label %21

21:                                               ; preds = %2, %4
  %22 = phi i64 [ %20, %4 ], [ 0, %2 ]
  %23 = insertvalue { i64, i64 } { i64 0, i64 undef }, i64 %22, 1
  ret { i64, i64 } %23
}

; Function Attrs: nounwind uwtable
define i32 @int64_to_float32(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %49, label %4

4:                                                ; preds = %2
  %5 = lshr i64 %0, 63
  %6 = trunc i64 %5 to i8
  %7 = icmp slt i64 %0, 0
  %8 = sub nsw i64 0, %0
  %9 = select i1 %7, i64 %8, i64 %0
  %ctlz.sh = lshr i64 %9, 1
  %ctlz.step = or i64 %9, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %10 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %10, 6148914691236517205
  %ctpop.sh = lshr i64 %10, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %11 = trunc i64 %ctpop.part to i8
  %12 = add nsw i8 %11, -40
  %13 = sext i8 %12 to i32
  %14 = icmp ugt i8 %11, 39
  br i1 %14, label %15, label %25

15:                                               ; preds = %4
  %16 = zext i32 %13 to i64
  %17 = shl i64 %9, %16
  %18 = trunc i64 %17 to i32
  %19 = shl nuw nsw i64 %5, 31
  %20 = trunc i64 %19 to i32
  %21 = shl nsw i32 %13, 23
  %22 = or i32 %20, 1249902592
  %23 = sub i32 %22, %21
  %24 = add i32 %23, %18
  br label %49

25:                                               ; preds = %4
  %26 = add nsw i8 %11, -33
  %27 = sext i8 %26 to i32
  %28 = icmp ult i8 %11, 33
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  %30 = icmp eq i8 %26, 0
  br i1 %30, label %44, label %31

31:                                               ; preds = %29
  %32 = sub nsw i32 0, %27
  %33 = zext i32 %32 to i64
  %34 = lshr i64 %9, %33
  %35 = and i32 %27, 63
  %36 = zext i32 %35 to i64
  %37 = shl i64 %9, %36
  %38 = icmp ne i64 %37, 0
  %39 = zext i1 %38 to i64
  %40 = or i64 %34, %39
  br label %44

41:                                               ; preds = %25
  %42 = zext i32 %27 to i64
  %43 = shl i64 %9, %42
  br label %44

44:                                               ; preds = %31, %29, %41
  %45 = phi i64 [ %43, %41 ], [ %40, %31 ], [ %9, %29 ]
  %46 = sub nsw i32 156, %27
  %47 = trunc i64 %45 to i32
  %48 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %6, i32 %46, i32 %47, %struct.float_status* %1)
  br label %49

49:                                               ; preds = %2, %44, %15
  %50 = phi i32 [ %24, %15 ], [ %48, %44 ], [ 0, %2 ]
  ret i32 %50
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #14

; Function Attrs: nofree nounwind uwtable
define i32 @uint64_to_float32(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #19 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %41, label %4

4:                                                ; preds = %2
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %5 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %5, 6148914691236517205
  %ctpop.sh = lshr i64 %5, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %6 = trunc i64 %ctpop.part to i8
  %7 = add nsw i8 %6, -40
  %8 = sext i8 %7 to i32
  %9 = icmp ugt i8 %6, 39
  br i1 %9, label %10, label %17

10:                                               ; preds = %4
  %11 = zext i32 %8 to i64
  %12 = shl i64 %0, %11
  %13 = trunc i64 %12 to i32
  %14 = shl nsw i32 %8, 23
  %15 = sub nsw i32 -897581056, %14
  %16 = add i32 %15, %13
  br label %41

17:                                               ; preds = %4
  %18 = add nsw i8 %6, -33
  %19 = sext i8 %18 to i32
  %20 = icmp ult i8 %6, 33
  br i1 %20, label %21, label %33

21:                                               ; preds = %17
  %22 = icmp eq i8 %18, 0
  br i1 %22, label %36, label %23

23:                                               ; preds = %21
  %24 = sub nsw i32 0, %19
  %25 = zext i32 %24 to i64
  %26 = lshr i64 %0, %25
  %27 = and i32 %19, 63
  %28 = zext i32 %27 to i64
  %29 = shl i64 %0, %28
  %30 = icmp ne i64 %29, 0
  %31 = zext i1 %30 to i64
  %32 = or i64 %26, %31
  br label %36

33:                                               ; preds = %17
  %34 = zext i32 %19 to i64
  %35 = shl i64 %0, %34
  br label %36

36:                                               ; preds = %23, %21, %33
  %37 = phi i64 [ %35, %33 ], [ %32, %23 ], [ %0, %21 ]
  %38 = sub nsw i32 156, %19
  %39 = trunc i64 %37 to i32
  %40 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext 1, i32 %38, i32 %39, %struct.float_status* %1)
  br label %41

41:                                               ; preds = %2, %36, %10
  %42 = phi i32 [ %16, %10 ], [ %40, %36 ], [ 0, %2 ]
  ret i32 %42
}

; Function Attrs: nofree nounwind uwtable
define i64 @int64_to_float64(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #19 {
  switch i64 %0, label %4 [
    i64 0, label %17
    i64 -9223372036854775808, label %3
  ]

3:                                                ; preds = %2
  br label %17

4:                                                ; preds = %2
  %5 = lshr i64 %0, 63
  %6 = trunc i64 %5 to i8
  %7 = icmp slt i64 %0, 0
  %8 = sub nsw i64 0, %0
  %9 = select i1 %7, i64 %8, i64 %0
  %ctlz.sh = lshr i64 %9, 1
  %ctlz.step = or i64 %9, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %10 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %10, 6148914691236517205
  %ctpop.sh = lshr i64 %10, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %11 = trunc i64 %ctpop.part to i32
  %12 = add nuw nsw i64 %ctpop.part, 4294967295
  %13 = sub nuw nsw i32 1085, %11
  %14 = and i64 %12, 4294967295
  %15 = shl i64 %9, %14
  %16 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %6, i32 %13, i64 %15, %struct.float_status* %1) #23
  br label %17

17:                                               ; preds = %2, %4, %3
  %18 = phi i64 [ -4332462841530417152, %3 ], [ %16, %4 ], [ %0, %2 ]
  ret i64 %18
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc i64 @roundAndPackFloat64(i8 zeroext %0, i32 %1, i64 %2, %struct.float_status* nocapture %3) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %18, label %8

8:                                                ; preds = %4
  %9 = icmp eq i8 %6, 3
  br i1 %9, label %18, label %10

10:                                               ; preds = %8
  %11 = icmp eq i8 %0, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = icmp eq i8 %6, 2
  %14 = select i1 %13, i32 0, i32 1023
  br label %18

15:                                               ; preds = %10
  %16 = icmp eq i8 %6, 1
  %17 = select i1 %16, i32 0, i32 1023
  br label %18

18:                                               ; preds = %15, %12, %8, %4
  %19 = phi i32 [ 512, %4 ], [ 0, %8 ], [ %14, %12 ], [ %17, %15 ]
  %20 = trunc i64 %2 to i32
  %21 = and i32 %20, 1023
  %22 = and i32 %1, 65535
  %23 = icmp ugt i32 %22, 2044
  br i1 %23, label %24, label %92

24:                                               ; preds = %18
  %25 = icmp sgt i32 %1, 2045
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = icmp eq i32 %1, 2045
  br i1 %27, label %28, label %42

28:                                               ; preds = %26
  %29 = zext i32 %19 to i64
  %30 = add i64 %29, %2
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %92

32:                                               ; preds = %28, %24
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 40
  store i8 %35, i8* %33, align 1
  %36 = icmp eq i32 %19, 0
  %37 = sext i1 %36 to i64
  %38 = zext i8 %0 to i64
  %39 = shl i64 %38, 63
  %40 = or i64 %39, 9218868437227405312
  %41 = add i64 %40, %37
  br label %127

42:                                               ; preds = %26
  %43 = icmp slt i32 %1, 0
  br i1 %43, label %44, label %92

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, -128
  store i8 %51, i8* %49, align 1
  %52 = zext i8 %0 to i64
  %53 = shl i64 %52, 63
  br label %127

54:                                               ; preds = %44
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 0
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 1
  %58 = icmp slt i32 %1, -1
  %59 = or i1 %58, %57
  br i1 %59, label %64, label %60

60:                                               ; preds = %54
  %61 = zext i32 %19 to i64
  %62 = add i64 %61, %2
  %63 = icmp sgt i64 %62, -1
  br label %67

64:                                               ; preds = %54
  %65 = sub nsw i32 0, %1
  %66 = icmp sgt i32 %1, -64
  br i1 %66, label %67, label %78

67:                                               ; preds = %60, %64
  %68 = phi i32 [ 1, %60 ], [ %65, %64 ]
  %69 = phi i1 [ %63, %60 ], [ true, %64 ]
  %70 = zext i32 %68 to i64
  %71 = lshr i64 %2, %70
  %72 = and i32 %1, 63
  %73 = zext i32 %72 to i64
  %74 = shl i64 %2, %73
  %75 = icmp ne i64 %74, 0
  %76 = zext i1 %75 to i64
  %77 = or i64 %71, %76
  br label %81

78:                                               ; preds = %64
  %79 = icmp ne i64 %2, 0
  %80 = zext i1 %79 to i64
  br label %81

81:                                               ; preds = %67, %78
  %82 = phi i1 [ %69, %67 ], [ true, %78 ]
  %83 = phi i64 [ %77, %67 ], [ %80, %78 ]
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 1023
  %86 = icmp ne i32 %85, 0
  %87 = and i1 %82, %86
  br i1 %87, label %88, label %92

88:                                               ; preds = %81
  %89 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %90, 16
  store i8 %91, i8* %89, align 1
  br label %100

92:                                               ; preds = %28, %42, %81, %18
  %93 = phi i64 [ %83, %81 ], [ %2, %42 ], [ %2, %18 ], [ %2, %28 ]
  %94 = phi i32 [ 0, %81 ], [ %1, %42 ], [ %1, %18 ], [ 2045, %28 ]
  %95 = phi i32 [ %85, %81 ], [ %21, %42 ], [ %21, %18 ], [ %21, %28 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %107, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %99 = load i8, i8* %98, align 1
  br label %100

100:                                              ; preds = %97, %88
  %101 = phi i8 [ %91, %88 ], [ %99, %97 ]
  %102 = phi i32 [ %85, %88 ], [ %95, %97 ]
  %103 = phi i32 [ 0, %88 ], [ %94, %97 ]
  %104 = phi i64 [ %83, %88 ], [ %93, %97 ]
  %105 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %106 = or i8 %101, 32
  store i8 %106, i8* %105, align 1
  br label %107

107:                                              ; preds = %92, %100
  %108 = phi i32 [ 0, %92 ], [ %102, %100 ]
  %109 = phi i32 [ %94, %92 ], [ %103, %100 ]
  %110 = phi i64 [ %93, %92 ], [ %104, %100 ]
  %111 = zext i32 %19 to i64
  %112 = add i64 %110, %111
  %113 = lshr i64 %112, 10
  %114 = icmp eq i32 %108, 512
  %115 = and i1 %7, %114
  %116 = zext i1 %115 to i64
  %117 = xor i64 %116, -1
  %118 = and i64 %113, %117
  %119 = icmp eq i64 %118, 0
  %120 = zext i8 %0 to i64
  %121 = shl i64 %120, 63
  %122 = zext i32 %109 to i64
  %123 = shl i64 %122, 52
  %124 = select i1 %119, i64 0, i64 %123
  %125 = or i64 %118, %121
  %126 = add i64 %124, %125
  br label %127

127:                                              ; preds = %107, %48, %32
  %128 = phi i64 [ %41, %32 ], [ %53, %48 ], [ %126, %107 ]
  ret i64 %128
}

; Function Attrs: nofree nounwind uwtable
define i64 @uint64_to_float64(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #19 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %5 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %5, 6148914691236517205
  %ctpop.sh = lshr i64 %5, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %6 = trunc i64 %ctpop.part to i32
  %7 = add nuw nsw i64 %ctpop.part, 4294967295
  %8 = sub nuw nsw i32 1085, %6
  %9 = and i64 %7, 4294967295
  %10 = shl i64 %0, %9
  %11 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext 0, i32 %8, i64 %10, %struct.float_status* %1) #23
  br label %12

12:                                               ; preds = %2, %4
  %13 = phi i64 [ %11, %4 ], [ 0, %2 ]
  ret i64 %13
}

; Function Attrs: nounwind readnone uwtable
define { i64, i16 } @int64_to_floatx80(i64 %0, %struct.float_status* nocapture readnone %1) local_unnamed_addr #20 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = sub nsw i64 0, %0
  %7 = select i1 %5, i64 %6, i64 %0
  %ctlz.sh = lshr i64 %7, 1
  %ctlz.step = or i64 %7, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %8 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %8, 6148914691236517205
  %ctpop.sh = lshr i64 %8, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %9 = trunc i64 %ctpop.part to i16
  %10 = sub nuw nsw i16 16446, %9
  %11 = shl i64 %7, %ctpop.part
  %12 = lshr i64 %0, 48
  %13 = trunc i64 %12 to i16
  %14 = and i16 %13, -32768
  %15 = or i16 %10, %14
  br label %16

16:                                               ; preds = %2, %4
  %17 = phi i64 [ %11, %4 ], [ 0, %2 ]
  %18 = phi i16 [ %15, %4 ], [ 0, %2 ]
  %19 = insertvalue { i64, i16 } undef, i64 %17, 0
  %20 = insertvalue { i64, i16 } %19, i16 %18, 1
  ret { i64, i16 } %20
}

; Function Attrs: nounwind readnone uwtable
define { i64, i64 } @int64_to_float128(i64 %0, %struct.float_status* nocapture readnone %1) local_unnamed_addr #20 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %35, label %4

4:                                                ; preds = %2
  %5 = and i64 %0, -9223372036854775808
  %6 = icmp slt i64 %0, 0
  %7 = sub nsw i64 0, %0
  %8 = select i1 %6, i64 %7, i64 %0
  %ctlz.sh = lshr i64 %8, 1
  %ctlz.step = or i64 %8, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %9 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %9, 6148914691236517205
  %ctpop.sh = lshr i64 %9, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %10 = trunc i64 %ctpop.part to i8
  %11 = add nuw i8 %10, 49
  %12 = sext i8 %11 to i64
  %13 = icmp sgt i8 %11, 63
  %14 = add nsw i8 %10, -15
  %15 = select i1 %13, i64 %8, i64 0
  %16 = select i1 %13, i64 0, i64 %8
  %17 = select i1 %13, i8 %14, i8 %11
  %18 = sext i8 %17 to i32
  %19 = zext i32 %18 to i64
  %20 = shl i64 %16, %19
  %21 = icmp eq i8 %17, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %4
  %23 = shl i64 %15, %19
  %24 = sub nsw i32 0, %18
  %25 = and i32 %24, 63
  %26 = zext i32 %25 to i64
  %27 = lshr i64 %16, %26
  %28 = or i64 %27, %23
  br label %29

29:                                               ; preds = %4, %22
  %30 = phi i64 [ %28, %22 ], [ %15, %4 ]
  %31 = shl nsw i64 %12, 48
  %32 = or i64 %5, 4642648265865560064
  %33 = sub i64 %32, %31
  %34 = add i64 %33, %30
  br label %35

35:                                               ; preds = %2, %29
  %36 = phi i64 [ %20, %29 ], [ 0, %2 ]
  %37 = phi i64 [ %34, %29 ], [ 0, %2 ]
  %38 = insertvalue { i64, i64 } undef, i64 %36, 0
  %39 = insertvalue { i64, i64 } %38, i64 %37, 1
  ret { i64, i64 } %39
}

; Function Attrs: nounwind uwtable
define i32 @float32_to_int32(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = trunc i32 %22 to i8
  %24 = icmp eq i32 %21, 255
  %25 = icmp ne i32 %19, 0
  %26 = and i1 %25, %24
  %27 = select i1 %26, i8 0, i8 %23
  %28 = icmp eq i32 %21, 0
  %29 = or i32 %19, 8388608
  %30 = select i1 %28, i32 %19, i32 %29
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 32
  %33 = icmp ult i32 %21, 175
  br i1 %33, label %34, label %52

34:                                               ; preds = %17
  %35 = sub nuw nsw i32 175, %21
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %52, label %37

37:                                               ; preds = %34
  %38 = icmp ugt i32 %21, 111
  br i1 %38, label %39, label %49

39:                                               ; preds = %37
  %40 = zext i32 %35 to i64
  %41 = lshr i64 %32, %40
  %42 = add nuw nsw i32 %20, 17
  %43 = and i32 %42, 63
  %44 = zext i32 %43 to i64
  %45 = shl i64 %32, %44
  %46 = icmp ne i64 %45, 0
  %47 = zext i1 %46 to i64
  %48 = or i64 %41, %47
  br label %52

49:                                               ; preds = %37
  %50 = icmp ne i32 %30, 0
  %51 = zext i1 %50 to i64
  br label %52

52:                                               ; preds = %49, %39, %34, %17
  %53 = phi i64 [ %32, %17 ], [ %48, %39 ], [ %51, %49 ], [ %32, %34 ]
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %67, label %57

57:                                               ; preds = %52
  %58 = icmp eq i8 %55, 3
  br i1 %58, label %67, label %59

59:                                               ; preds = %57
  %60 = icmp eq i8 %27, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %59
  %62 = icmp eq i8 %55, 2
  %63 = select i1 %62, i64 0, i64 127
  br label %67

64:                                               ; preds = %59
  %65 = icmp eq i8 %55, 1
  %66 = select i1 %65, i64 0, i64 127
  br label %67

67:                                               ; preds = %64, %61, %57, %52
  %68 = phi i64 [ 64, %52 ], [ 0, %57 ], [ %63, %61 ], [ %66, %64 ]
  %69 = trunc i64 %53 to i8
  %70 = and i8 %69, 127
  %71 = add i64 %68, %53
  %72 = lshr i64 %71, 7
  %73 = icmp eq i8 %70, 64
  %74 = and i1 %56, %73
  %75 = zext i1 %74 to i64
  %76 = xor i64 %75, 4294967295
  %77 = and i64 %72, %76
  %78 = trunc i64 %77 to i32
  %79 = icmp eq i8 %27, 0
  %80 = sub nsw i32 0, %78
  %81 = select i1 %79, i32 %78, i32 %80
  %82 = icmp ugt i64 %71, 549755813887
  br i1 %82, label %89, label %83

83:                                               ; preds = %67
  %84 = icmp eq i32 %81, 0
  br i1 %84, label %94, label %85

85:                                               ; preds = %83
  %86 = lshr i32 %81, 31
  %87 = zext i8 %27 to i32
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %94, label %89

89:                                               ; preds = %85, %67
  %90 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %91, 1
  store i8 %92, i8* %90, align 1
  %93 = select i1 %79, i32 2147483647, i32 -2147483648
  br label %100

94:                                               ; preds = %85, %83
  %95 = icmp eq i8 %70, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %98 = load i8, i8* %97, align 1
  %99 = or i8 %98, 32
  store i8 %99, i8* %97, align 1
  br label %100

100:                                              ; preds = %89, %94, %96
  %101 = phi i32 [ %93, %89 ], [ %81, %94 ], [ %81, %96 ]
  ret i32 %101
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_to_int32_round_to_zero(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 157
  br i1 %23, label %24, label %36

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -822083584
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %61, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %61, label %35

35:                                               ; preds = %24, %31
  br label %61

36:                                               ; preds = %17
  %37 = icmp ult i32 %21, 127
  br i1 %37, label %38, label %45

38:                                               ; preds = %36
  %39 = or i32 %21, %19
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %61, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %43, 32
  store i8 %44, i8* %42, align 1
  br label %61

45:                                               ; preds = %36
  %46 = shl nuw nsw i32 %19, 8
  %47 = or i32 %46, -2147483648
  %48 = sub nuw nsw i32 158, %21
  %49 = lshr i32 %47, %48
  %50 = and i32 %22, 31
  %51 = shl i32 %47, %50
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %55, 32
  store i8 %56, i8* %54, align 1
  br label %57

57:                                               ; preds = %45, %53
  %58 = icmp sgt i32 %18, -1
  %59 = sub nsw i32 0, %49
  %60 = select i1 %58, i32 %49, i32 %59
  br label %61

61:                                               ; preds = %41, %38, %31, %26, %57, %35
  %62 = phi i32 [ -2147483648, %35 ], [ %60, %57 ], [ 2147483647, %26 ], [ 2147483647, %31 ], [ 0, %38 ], [ 0, %41 ]
  ret i32 %62
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_to_int16_round_to_zero(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = and i32 %0, 8388607
  %4 = lshr i32 %0, 23
  %5 = and i32 %4, 255
  %6 = icmp ugt i32 %5, 141
  br i1 %6, label %7, label %19

7:                                                ; preds = %2
  %8 = icmp eq i32 %0, -956301312
  br i1 %8, label %18, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %11 = load i8, i8* %10, align 1
  %12 = or i8 %11, 1
  store i8 %12, i8* %10, align 1
  %13 = icmp sgt i32 %0, -1
  br i1 %13, label %45, label %14

14:                                               ; preds = %9
  %15 = icmp eq i32 %5, 255
  %16 = icmp ne i32 %3, 0
  %17 = and i1 %16, %15
  br i1 %17, label %45, label %18

18:                                               ; preds = %7, %14
  br label %45

19:                                               ; preds = %2
  %20 = icmp ult i32 %5, 127
  br i1 %20, label %21, label %28

21:                                               ; preds = %19
  %22 = or i32 %5, %3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 32
  store i8 %27, i8* %25, align 1
  br label %45

28:                                               ; preds = %19
  %29 = add nuw nsw i32 %4, 2
  %30 = shl nuw nsw i32 %3, 8
  %31 = or i32 %30, -2147483648
  %32 = sub nuw nsw i32 158, %5
  %33 = lshr i32 %31, %32
  %34 = and i32 %29, 31
  %35 = shl i32 %31, %34
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 32
  store i8 %40, i8* %38, align 1
  br label %41

41:                                               ; preds = %28, %37
  %42 = icmp sgt i32 %0, -1
  %43 = sub nsw i32 0, %33
  %44 = select i1 %42, i32 %33, i32 %43
  br label %45

45:                                               ; preds = %24, %21, %14, %9, %41, %18
  %46 = phi i32 [ -32768, %18 ], [ %44, %41 ], [ 32767, %9 ], [ 32767, %14 ], [ 0, %21 ], [ 0, %24 ]
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define i64 @float32_to_int64(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = sub nsw i32 190, %21
  %24 = icmp ugt i32 %21, 190
  br i1 %24, label %25, label %35

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 1
  %29 = icmp sgt i32 %18, -1
  br i1 %29, label %113, label %30

30:                                               ; preds = %25
  %31 = icmp eq i32 %21, 255
  %32 = icmp ne i32 %19, 0
  %33 = and i1 %32, %31
  %34 = select i1 %33, i64 9223372036854775807, i64 -9223372036854775808
  br label %113

35:                                               ; preds = %17
  %36 = icmp eq i32 %21, 0
  %37 = or i32 %18, 8388608
  %38 = select i1 %36, i32 %19, i32 %37
  %39 = zext i32 %38 to i64
  %40 = shl i64 %39, 40
  %41 = add nuw nsw i32 %20, 2
  %42 = and i32 %41, 63
  %43 = icmp eq i32 %23, 0
  br i1 %43, label %56, label %44

44:                                               ; preds = %35
  %45 = icmp ugt i32 %21, 126
  br i1 %45, label %46, label %51

46:                                               ; preds = %44
  %47 = zext i32 %42 to i64
  %48 = shl i64 %40, %47
  %49 = zext i32 %23 to i64
  %50 = lshr i64 %40, %49
  br label %56

51:                                               ; preds = %44
  %52 = icmp eq i32 %23, 64
  br i1 %52, label %56, label %53

53:                                               ; preds = %51
  %54 = icmp ne i64 %40, 0
  %55 = zext i1 %54 to i64
  br label %56

56:                                               ; preds = %51, %35, %46, %53
  %57 = phi i64 [ %48, %46 ], [ 0, %35 ], [ %55, %53 ], [ %40, %51 ]
  %58 = phi i64 [ %50, %46 ], [ %40, %35 ], [ 0, %53 ], [ 0, %51 ]
  %59 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  %62 = lshr i64 %57, 63
  %63 = trunc i64 %62 to i8
  br i1 %61, label %78, label %64

64:                                               ; preds = %56
  %65 = icmp eq i8 %60, 3
  br i1 %65, label %91, label %66

66:                                               ; preds = %64
  %67 = icmp sgt i32 %18, -1
  br i1 %67, label %73, label %68

68:                                               ; preds = %66
  %69 = icmp eq i8 %60, 1
  %70 = icmp ne i64 %57, 0
  %71 = and i1 %70, %69
  %72 = zext i1 %71 to i8
  br label %78

73:                                               ; preds = %66
  %74 = icmp eq i8 %60, 2
  %75 = icmp ne i64 %57, 0
  %76 = and i1 %75, %74
  %77 = zext i1 %76 to i8
  br label %78

78:                                               ; preds = %73, %68, %56
  %79 = phi i8 [ %63, %56 ], [ %72, %68 ], [ %77, %73 ]
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %78
  %82 = add i64 %58, 1
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %101, label %84

84:                                               ; preds = %81
  %85 = and i64 %57, 9223372036854775807
  %86 = icmp eq i64 %85, 0
  %87 = and i1 %86, %61
  %88 = zext i1 %87 to i64
  %89 = xor i64 %88, -1
  %90 = and i64 %82, %89
  br label %91

91:                                               ; preds = %84, %78, %64
  %92 = phi i64 [ %90, %84 ], [ %58, %78 ], [ %58, %64 ]
  %93 = icmp sgt i32 %18, -1
  %94 = sub nsw i64 0, %92
  %95 = select i1 %93, i64 %92, i64 %94
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %107, label %97

97:                                               ; preds = %91
  %98 = lshr i64 %95, 63
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %22, %99
  br i1 %100, label %107, label %101

101:                                              ; preds = %97, %81
  %102 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %103, 1
  store i8 %104, i8* %102, align 1
  %105 = icmp sgt i32 %18, -1
  %106 = select i1 %105, i64 9223372036854775807, i64 -9223372036854775808
  br label %113

107:                                              ; preds = %97, %91
  %108 = icmp eq i64 %57, 0
  br i1 %108, label %113, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %111, 32
  store i8 %112, i8* %110, align 1
  br label %113

113:                                              ; preds = %109, %107, %101, %30, %25
  %114 = phi i64 [ 9223372036854775807, %25 ], [ %34, %30 ], [ %106, %101 ], [ %95, %107 ], [ %95, %109 ]
  ret i64 %114
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float32_to_int64_round_to_zero(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 189
  br i1 %23, label %24, label %36

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -553648128
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %64, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %64, label %35

35:                                               ; preds = %24, %31
  br label %64

36:                                               ; preds = %17
  %37 = icmp ult i32 %21, 127
  br i1 %37, label %38, label %45

38:                                               ; preds = %36
  %39 = or i32 %21, %19
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %43, 32
  store i8 %44, i8* %42, align 1
  br label %64

45:                                               ; preds = %36
  %46 = or i32 %18, 8388608
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 40
  %49 = sub nuw nsw i32 190, %21
  %50 = zext i32 %49 to i64
  %51 = lshr i64 %48, %50
  %52 = and i32 %22, 63
  %53 = zext i32 %52 to i64
  %54 = shl i64 %48, %53
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %45
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 32
  store i8 %59, i8* %57, align 1
  br label %60

60:                                               ; preds = %45, %56
  %61 = icmp sgt i32 %18, -1
  %62 = sub nsw i64 0, %51
  %63 = select i1 %61, i64 %51, i64 %62
  br label %64

64:                                               ; preds = %41, %38, %31, %26, %60, %35
  %65 = phi i64 [ -9223372036854775808, %35 ], [ %63, %60 ], [ 9223372036854775807, %26 ], [ 9223372036854775807, %31 ], [ 0, %38 ], [ 0, %41 ]
  ret i64 %65
}

; Function Attrs: nounwind uwtable
define i64 @float32_to_float64(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = zext i32 %22 to i64
  %24 = trunc i32 %20 to i8
  switch i8 %24, label %62 [
    i8 -1, label %25
    i8 0, label %53
  ]

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  br i1 %26, label %50, label %27

27:                                               ; preds = %25
  %28 = and i32 %18, 2143289344
  %29 = icmp ne i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %31, %29
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !42
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !42
  br label %37

37:                                               ; preds = %27, %33
  %38 = zext i32 %18 to i64
  %39 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %40 = load i8, i8* %39, align 1
  %41 = shl nuw nsw i64 %38, 29
  %42 = and i64 %38, 8388607
  %43 = icmp ne i8 %40, 0
  %44 = icmp eq i64 %42, 0
  %45 = or i1 %44, %43
  %46 = shl nuw i64 %23, 63
  %47 = or i64 %41, %46
  %48 = or i64 %47, 9218868437227405312
  %49 = select i1 %45, i64 -2251799813685248, i64 %48
  br label %73

50:                                               ; preds = %25
  %51 = shl nuw i64 %23, 63
  %52 = or i64 %51, 9218868437227405312
  br label %73

53:                                               ; preds = %17
  %54 = icmp eq i32 %19, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = shl nuw i64 %23, 63
  br label %73

57:                                               ; preds = %53
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %58 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %58, 1431655765
  %ctpop.sh = lshr i32 %58, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %59 = add nsw i32 %ctpop.part, -8
  %60 = shl i32 %19, %59
  %61 = sub nsw i32 8, %ctpop.part
  br label %62

62:                                               ; preds = %17, %57
  %63 = phi i32 [ %19, %17 ], [ %60, %57 ]
  %64 = phi i32 [ %21, %17 ], [ %61, %57 ]
  %65 = add nsw i32 %64, 896
  %66 = zext i32 %63 to i64
  %67 = shl nuw nsw i64 %66, 29
  %68 = shl nuw i64 %23, 63
  %69 = zext i32 %65 to i64
  %70 = shl i64 %69, 52
  %71 = or i64 %67, %68
  %72 = add i64 %70, %71
  br label %73

73:                                               ; preds = %62, %55, %50, %37
  %74 = phi i64 [ %49, %37 ], [ %52, %50 ], [ %56, %55 ], [ %72, %62 ]
  ret i64 %74
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @float32_to_floatx80(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = trunc i32 %20 to i8
  switch i8 %23, label %64 [
    i8 -1, label %24
    i8 0, label %54
  ]

24:                                               ; preds = %17
  %25 = icmp eq i32 %19, 0
  br i1 %25, label %50, label %26

26:                                               ; preds = %24
  %27 = and i32 %18, 2143289344
  %28 = icmp ne i32 %27, 2139095040
  %29 = and i32 %18, 4194303
  %30 = icmp eq i32 %29, 0
  %31 = or i1 %30, %28
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1, !noalias !45
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1, !noalias !45
  br label %36

36:                                               ; preds = %26, %32
  %37 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %74

40:                                               ; preds = %36
  %41 = zext i32 %18 to i64
  %42 = and i64 %41, 8388607
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %74, label %44

44:                                               ; preds = %40
  %45 = shl i64 %41, 40
  %46 = or i64 %45, -9223372036854775808
  %47 = shl nuw nsw i32 %22, 15
  %48 = trunc i32 %47 to i16
  %49 = or i16 %48, 32767
  br label %74

50:                                               ; preds = %24
  %51 = shl nuw nsw i32 %22, 15
  %52 = trunc i32 %51 to i16
  %53 = or i16 %52, 32767
  br label %74

54:                                               ; preds = %17
  %55 = icmp eq i32 %19, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %54
  %57 = shl nuw nsw i32 %22, 15
  %58 = trunc i32 %57 to i16
  br label %74

59:                                               ; preds = %54
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %60 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %60, 1431655765
  %ctpop.sh = lshr i32 %60, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %61 = add nsw i32 %ctpop.part, -8
  %62 = shl i32 %19, %61
  %63 = sub nsw i32 9, %ctpop.part
  br label %64

64:                                               ; preds = %17, %59
  %65 = phi i32 [ %19, %17 ], [ %62, %59 ]
  %66 = phi i32 [ %21, %17 ], [ %63, %59 ]
  %67 = or i32 %65, 8388608
  %68 = zext i32 %67 to i64
  %69 = shl i64 %68, 40
  %70 = shl nuw nsw i32 %22, 15
  %71 = or i32 %70, 16256
  %72 = add nsw i32 %71, %66
  %73 = trunc i32 %72 to i16
  br label %74

74:                                               ; preds = %44, %40, %36, %64, %56, %50
  %75 = phi i64 [ -9223372036854775808, %50 ], [ 0, %56 ], [ %69, %64 ], [ %46, %44 ], [ -4611686018427387904, %36 ], [ -4611686018427387904, %40 ]
  %76 = phi i16 [ %53, %50 ], [ %58, %56 ], [ %73, %64 ], [ %49, %44 ], [ -1, %36 ], [ -1, %40 ]
  %77 = insertvalue { i64, i16 } undef, i64 %75, 0
  %78 = insertvalue { i64, i16 } %77, i16 %76, 1
  ret { i64, i16 } %78
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float32_to_float128(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = zext i32 %22 to i64
  %24 = trunc i32 %20 to i8
  switch i8 %24, label %59 [
    i8 -1, label %25
    i8 0, label %50
  ]

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %25
  %28 = and i32 %18, 2143289344
  %29 = icmp ne i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %31, %29
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !48
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !48
  br label %37

37:                                               ; preds = %27, %33
  %38 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  %41 = zext i32 %18 to i64
  %42 = shl nuw nsw i64 %41, 25
  %43 = shl nuw i64 %23, 63
  %44 = or i64 %42, %43
  %45 = or i64 %44, 9223090561878065152
  %46 = select i1 %40, i64 %45, i64 -140737488355328
  br label %70

47:                                               ; preds = %25
  %48 = shl nuw i64 %23, 63
  %49 = or i64 %48, 9223090561878065152
  br label %70

50:                                               ; preds = %17
  %51 = icmp eq i32 %19, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = shl nuw i64 %23, 63
  br label %70

54:                                               ; preds = %50
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %55 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %55, 1431655765
  %ctpop.sh = lshr i32 %55, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %56 = add nsw i32 %ctpop.part, -8
  %57 = shl i32 %19, %56
  %58 = sub nsw i32 8, %ctpop.part
  br label %59

59:                                               ; preds = %17, %54
  %60 = phi i32 [ %19, %17 ], [ %57, %54 ]
  %61 = phi i32 [ %21, %17 ], [ %58, %54 ]
  %62 = add nsw i32 %61, 16256
  %63 = zext i32 %60 to i64
  %64 = shl nuw nsw i64 %63, 25
  %65 = shl nuw i64 %23, 63
  %66 = zext i32 %62 to i64
  %67 = shl i64 %66, 48
  %68 = or i64 %64, %65
  %69 = add i64 %67, %68
  br label %70

70:                                               ; preds = %37, %59, %52, %47
  %71 = phi i64 [ %49, %47 ], [ %53, %52 ], [ %69, %59 ], [ %46, %37 ]
  %72 = insertvalue { i64, i64 } { i64 0, i64 undef }, i64 %71, 1
  ret { i64, i64 } %72
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_round_to_int(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = lshr i32 %18, 23
  %20 = and i32 %19, 255
  %21 = icmp ugt i32 %20, 149
  br i1 %21, label %22, label %47

22:                                               ; preds = %17
  %23 = icmp ne i32 %20, 255
  %24 = and i32 %18, 8388607
  %25 = icmp eq i32 %24, 0
  %26 = or i1 %25, %23
  br i1 %26, label %104, label %27

27:                                               ; preds = %22
  %28 = and i32 %18, 2143289344
  %29 = icmp eq i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp ne i32 %30, 0
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %33, %27
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %104

41:                                               ; preds = %37
  %42 = icmp ne i32 %28, 2139095040
  %43 = icmp eq i32 %30, 0
  %44 = or i1 %43, %42
  %45 = or i32 %18, 4194304
  %46 = select i1 %44, i32 %18, i32 %45
  br label %104

47:                                               ; preds = %17
  %48 = icmp ult i32 %20, 127
  br i1 %48, label %49, label %73

49:                                               ; preds = %47
  %50 = and i32 %18, 2147483647
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %104, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %54, 32
  store i8 %55, i8* %53, align 1
  %56 = and i32 %18, -2147483648
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  switch i32 %59, label %104 [
    i32 0, label %60
    i32 1, label %67
    i32 2, label %70
  ]

60:                                               ; preds = %52
  %61 = icmp ne i32 %20, 126
  %62 = and i32 %18, 8388607
  %63 = icmp eq i32 %62, 0
  %64 = or i1 %63, %61
  %65 = or i32 %56, 1065353216
  %66 = select i1 %64, i32 %56, i32 %65
  ret i32 %66

67:                                               ; preds = %52
  %68 = icmp slt i32 %18, 0
  %69 = select i1 %68, i32 -1082130432, i32 0
  br label %104

70:                                               ; preds = %52
  %71 = icmp sgt i32 %18, -1
  %72 = select i1 %71, i32 1065353216, i32 -2147483648
  br label %104

73:                                               ; preds = %47
  %74 = sub nuw nsw i32 150, %20
  %75 = shl nuw nsw i32 1, %74
  %76 = add nsw i32 %75, -1
  %77 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %78 = load i8, i8* %77, align 1
  switch i8 %78, label %87 [
    i8 0, label %79
    i8 3, label %95
  ]

79:                                               ; preds = %73
  %80 = lshr i32 %75, 1
  %81 = add i32 %80, %18
  %82 = and i32 %81, %76
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %95

84:                                               ; preds = %79
  %85 = xor i32 %75, -1
  %86 = and i32 %81, %85
  br label %95

87:                                               ; preds = %73
  %88 = lshr i32 %18, 31
  %89 = trunc i32 %88 to i8
  %90 = icmp eq i8 %78, 2
  %91 = zext i1 %90 to i8
  %92 = icmp eq i8 %89, %91
  %93 = select i1 %92, i32 0, i32 %76
  %94 = add i32 %93, %18
  br label %95

95:                                               ; preds = %87, %73, %79, %84
  %96 = phi i32 [ %86, %84 ], [ %81, %79 ], [ %18, %73 ], [ %94, %87 ]
  %97 = sub nsw i32 0, %75
  %98 = and i32 %96, %97
  %99 = icmp eq i32 %98, %18
  br i1 %99, label %104, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %102, 32
  store i8 %103, i8* %101, align 1
  br label %104

104:                                              ; preds = %52, %22, %41, %37, %100, %95, %49, %70, %67
  %105 = phi i32 [ %72, %70 ], [ %69, %67 ], [ %18, %22 ], [ %18, %49 ], [ %18, %95 ], [ %98, %100 ], [ %46, %41 ], [ -4194304, %37 ], [ %56, %52 ]
  ret i32 %105
}

; Function Attrs: nounwind uwtable
define i32 @float32_add(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  %35 = lshr i32 %32, 31
  %36 = trunc i32 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i32 @addFloat32Sigs(i32 %31, i32 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i32 @subFloat32Sigs(i32 %31, i32 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i32 [ %39, %38 ], [ %41, %40 ]
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @addFloat32Sigs(i32 %0, i32 %1, i8 zeroext %2, %struct.float_status* nocapture %3) unnamed_addr #13 {
  %5 = lshr i32 %0, 23
  %6 = and i32 %5, 255
  %7 = lshr i32 %1, 23
  %8 = and i32 %7, 255
  %9 = sub nsw i32 %6, %8
  %10 = shl i32 %0, 6
  %11 = and i32 %10, 536870848
  %12 = shl i32 %1, 6
  %13 = and i32 %12, 536870848
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %15, label %95

15:                                               ; preds = %4
  %16 = icmp eq i32 %6, 255
  br i1 %16, label %17, label %73

17:                                               ; preds = %15
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %277, label %19

19:                                               ; preds = %17
  %20 = shl i32 %0, 1
  %21 = icmp ult i32 %20, -8388608
  %22 = and i32 %0, 2143289344
  %23 = icmp eq i32 %22, 2139095040
  %24 = and i32 %0, 4194303
  %25 = icmp ne i32 %24, 0
  %26 = and i1 %23, %25
  %27 = shl i32 %1, 1
  %28 = icmp ugt i32 %27, -8388609
  %29 = and i32 %1, 2143289344
  %30 = icmp eq i32 %29, 2139095040
  %31 = and i32 %1, 4194303
  %32 = icmp ne i32 %31, 0
  %33 = and i1 %30, %32
  %34 = zext i1 %33 to i8
  %35 = or i1 %26, %33
  br i1 %35, label %36, label %40

36:                                               ; preds = %19
  %37 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %38 = load i8, i8* %37, align 1
  %39 = or i8 %38, 1
  store i8 %39, i8* %37, align 1
  br label %40

40:                                               ; preds = %36, %19
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %277

44:                                               ; preds = %40
  %45 = icmp ult i32 %20, %27
  br i1 %45, label %51, label %46

46:                                               ; preds = %44
  %47 = icmp ult i32 %27, %20
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  %49 = icmp ult i32 %0, %1
  %50 = zext i1 %49 to i8
  br label %51

51:                                               ; preds = %48, %46, %44
  %52 = phi i8 [ %50, %48 ], [ 0, %44 ], [ 1, %46 ]
  br i1 %26, label %58, label %53

53:                                               ; preds = %51
  br i1 %21, label %61, label %54

54:                                               ; preds = %53
  %55 = or i8 %52, %34
  %56 = icmp eq i8 %55, 0
  %57 = and i1 %28, %56
  br i1 %57, label %61, label %67

58:                                               ; preds = %51
  %59 = icmp eq i8 %52, 0
  %60 = select i1 %33, i1 %59, i1 %28
  br i1 %60, label %61, label %67

61:                                               ; preds = %58, %54, %53
  %62 = icmp ne i32 %29, 2139095040
  %63 = icmp eq i32 %31, 0
  %64 = or i1 %63, %62
  %65 = or i32 %1, 4194304
  %66 = select i1 %64, i32 %1, i32 %65
  br label %277

67:                                               ; preds = %58, %54
  %68 = icmp ne i32 %22, 2139095040
  %69 = icmp eq i32 %24, 0
  %70 = or i1 %69, %68
  %71 = or i32 %0, 4194304
  %72 = select i1 %70, i32 %0, i32 %71
  br label %277

73:                                               ; preds = %15
  %74 = icmp eq i32 %8, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %73
  %76 = or i32 %13, 536870912
  br label %80

77:                                               ; preds = %73
  %78 = add nsw i32 %9, -1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %261, label %80

80:                                               ; preds = %75, %77
  %81 = phi i32 [ %9, %75 ], [ %78, %77 ]
  %82 = phi i32 [ %76, %75 ], [ %13, %77 ]
  %83 = icmp slt i32 %81, 32
  br i1 %83, label %84, label %92

84:                                               ; preds = %80
  %85 = lshr i32 %82, %81
  %86 = sub nsw i32 0, %81
  %87 = and i32 %86, 31
  %88 = shl i32 %82, %87
  %89 = icmp ne i32 %88, 0
  %90 = zext i1 %89 to i32
  %91 = or i32 %85, %90
  br label %261

92:                                               ; preds = %80
  %93 = icmp ne i32 %82, 0
  %94 = zext i1 %93 to i32
  br label %261

95:                                               ; preds = %4
  %96 = icmp slt i32 %9, 0
  br i1 %96, label %97, label %179

97:                                               ; preds = %95
  %98 = icmp eq i32 %8, 255
  br i1 %98, label %99, label %159

99:                                               ; preds = %97
  %100 = icmp eq i32 %13, 0
  br i1 %100, label %155, label %101

101:                                              ; preds = %99
  %102 = shl i32 %0, 1
  %103 = icmp ult i32 %102, -8388608
  %104 = and i32 %0, 2143289344
  %105 = icmp eq i32 %104, 2139095040
  %106 = and i32 %0, 4194303
  %107 = icmp ne i32 %106, 0
  %108 = and i1 %105, %107
  %109 = shl i32 %1, 1
  %110 = icmp ugt i32 %109, -8388609
  %111 = and i32 %1, 2143289344
  %112 = icmp eq i32 %111, 2139095040
  %113 = and i32 %1, 4194303
  %114 = icmp ne i32 %113, 0
  %115 = and i1 %112, %114
  %116 = zext i1 %115 to i8
  %117 = or i1 %108, %115
  br i1 %117, label %118, label %122

118:                                              ; preds = %101
  %119 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %120, 1
  store i8 %121, i8* %119, align 1
  br label %122

122:                                              ; preds = %118, %101
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %126, label %277

126:                                              ; preds = %122
  %127 = icmp ult i32 %102, %109
  br i1 %127, label %133, label %128

128:                                              ; preds = %126
  %129 = icmp ult i32 %109, %102
  br i1 %129, label %133, label %130

130:                                              ; preds = %128
  %131 = icmp ult i32 %0, %1
  %132 = zext i1 %131 to i8
  br label %133

133:                                              ; preds = %130, %128, %126
  %134 = phi i8 [ %132, %130 ], [ 0, %126 ], [ 1, %128 ]
  br i1 %108, label %140, label %135

135:                                              ; preds = %133
  br i1 %103, label %143, label %136

136:                                              ; preds = %135
  %137 = or i8 %134, %116
  %138 = icmp eq i8 %137, 0
  %139 = and i1 %110, %138
  br i1 %139, label %143, label %149

140:                                              ; preds = %133
  %141 = icmp eq i8 %134, 0
  %142 = select i1 %115, i1 %141, i1 %110
  br i1 %142, label %143, label %149

143:                                              ; preds = %140, %136, %135
  %144 = icmp ne i32 %111, 2139095040
  %145 = icmp eq i32 %113, 0
  %146 = or i1 %145, %144
  %147 = or i32 %1, 4194304
  %148 = select i1 %146, i32 %1, i32 %147
  br label %277

149:                                              ; preds = %140, %136
  %150 = icmp ne i32 %104, 2139095040
  %151 = icmp eq i32 %106, 0
  %152 = or i1 %151, %150
  %153 = or i32 %0, 4194304
  %154 = select i1 %152, i32 %0, i32 %153
  br label %277

155:                                              ; preds = %99
  %156 = zext i8 %2 to i32
  %157 = shl i32 %156, 31
  %158 = or i32 %157, 2139095040
  br label %277

159:                                              ; preds = %97
  %160 = icmp eq i32 %6, 0
  %161 = or i32 %11, 536870912
  %162 = select i1 %160, i32 %11, i32 %161
  %163 = zext i1 %160 to i32
  %164 = add nsw i32 %9, %163
  %165 = sub nsw i32 0, %164
  %166 = icmp eq i32 %164, 0
  br i1 %166, label %261, label %167

167:                                              ; preds = %159
  %168 = icmp sgt i32 %164, -32
  br i1 %168, label %169, label %176

169:                                              ; preds = %167
  %170 = lshr i32 %162, %165
  %171 = and i32 %164, 31
  %172 = shl i32 %162, %171
  %173 = icmp ne i32 %172, 0
  %174 = zext i1 %173 to i32
  %175 = or i32 %170, %174
  br label %261

176:                                              ; preds = %167
  %177 = icmp ne i32 %162, 0
  %178 = zext i1 %177 to i32
  br label %261

179:                                              ; preds = %95
  %180 = trunc i32 %5 to i8
  switch i8 %180, label %258 [
    i8 -1, label %181
    i8 0, label %238
  ]

181:                                              ; preds = %179
  %182 = or i32 %13, %11
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %277, label %184

184:                                              ; preds = %181
  %185 = shl i32 %0, 1
  %186 = icmp ult i32 %185, -8388608
  %187 = and i32 %0, 2143289344
  %188 = icmp eq i32 %187, 2139095040
  %189 = and i32 %0, 4194303
  %190 = icmp ne i32 %189, 0
  %191 = and i1 %188, %190
  %192 = shl i32 %1, 1
  %193 = icmp ugt i32 %192, -8388609
  %194 = and i32 %1, 2143289344
  %195 = icmp eq i32 %194, 2139095040
  %196 = and i32 %1, 4194303
  %197 = icmp ne i32 %196, 0
  %198 = and i1 %195, %197
  %199 = zext i1 %198 to i8
  %200 = or i1 %191, %198
  br i1 %200, label %201, label %205

201:                                              ; preds = %184
  %202 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %203 = load i8, i8* %202, align 1
  %204 = or i8 %203, 1
  store i8 %204, i8* %202, align 1
  br label %205

205:                                              ; preds = %201, %184
  %206 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %207 = load i8, i8* %206, align 1
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %209, label %277

209:                                              ; preds = %205
  %210 = icmp ult i32 %185, %192
  br i1 %210, label %216, label %211

211:                                              ; preds = %209
  %212 = icmp ult i32 %192, %185
  br i1 %212, label %216, label %213

213:                                              ; preds = %211
  %214 = icmp ult i32 %0, %1
  %215 = zext i1 %214 to i8
  br label %216

216:                                              ; preds = %213, %211, %209
  %217 = phi i8 [ %215, %213 ], [ 0, %209 ], [ 1, %211 ]
  br i1 %191, label %223, label %218

218:                                              ; preds = %216
  br i1 %186, label %226, label %219

219:                                              ; preds = %218
  %220 = or i8 %217, %199
  %221 = icmp eq i8 %220, 0
  %222 = and i1 %193, %221
  br i1 %222, label %226, label %232

223:                                              ; preds = %216
  %224 = icmp eq i8 %217, 0
  %225 = select i1 %198, i1 %224, i1 %193
  br i1 %225, label %226, label %232

226:                                              ; preds = %223, %219, %218
  %227 = icmp ne i32 %194, 2139095040
  %228 = icmp eq i32 %196, 0
  %229 = or i1 %228, %227
  %230 = or i32 %1, 4194304
  %231 = select i1 %229, i32 %1, i32 %230
  br label %277

232:                                              ; preds = %223, %219
  %233 = icmp ne i32 %187, 2139095040
  %234 = icmp eq i32 %189, 0
  %235 = or i1 %234, %233
  %236 = or i32 %0, 4194304
  %237 = select i1 %235, i32 %0, i32 %236
  br label %277

238:                                              ; preds = %179
  %239 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 0
  br i1 %241, label %252, label %242

242:                                              ; preds = %238
  %243 = or i32 %13, %11
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %249, label %245

245:                                              ; preds = %242
  %246 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %247 = load i8, i8* %246, align 1
  %248 = or i8 %247, -128
  store i8 %248, i8* %246, align 1
  br label %249

249:                                              ; preds = %242, %245
  %250 = zext i8 %2 to i32
  %251 = shl i32 %250, 31
  br label %277

252:                                              ; preds = %238
  %253 = add nuw nsw i32 %13, %11
  %254 = lshr exact i32 %253, 6
  %255 = zext i8 %2 to i32
  %256 = shl i32 %255, 31
  %257 = or i32 %254, %256
  br label %277

258:                                              ; preds = %179
  %259 = or i32 %11, 1073741824
  %260 = add nuw nsw i32 %259, %13
  br label %273

261:                                              ; preds = %176, %169, %159, %92, %84, %77
  %262 = phi i32 [ %11, %77 ], [ %11, %84 ], [ %11, %92 ], [ %175, %169 ], [ %178, %176 ], [ %162, %159 ]
  %263 = phi i32 [ %13, %77 ], [ %91, %84 ], [ %94, %92 ], [ %13, %169 ], [ %13, %176 ], [ %13, %159 ]
  %264 = phi i32 [ %6, %77 ], [ %6, %84 ], [ %6, %92 ], [ %8, %169 ], [ %8, %176 ], [ %8, %159 ]
  %265 = or i32 %262, 536870912
  %266 = add i32 %265, %263
  %267 = shl i32 %266, 1
  %268 = icmp slt i32 %267, 0
  %269 = xor i1 %268, true
  %270 = sext i1 %269 to i32
  %271 = add nsw i32 %264, %270
  %272 = select i1 %268, i32 %266, i32 %267
  br label %273

273:                                              ; preds = %261, %258
  %274 = phi i32 [ %6, %258 ], [ %271, %261 ]
  %275 = phi i32 [ %260, %258 ], [ %272, %261 ]
  %276 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %2, i32 %274, i32 %275, %struct.float_status* %3)
  br label %277

277:                                              ; preds = %232, %226, %205, %149, %143, %122, %67, %61, %40, %181, %17, %273, %252, %249, %155
  %278 = phi i32 [ %276, %273 ], [ %158, %155 ], [ %251, %249 ], [ %257, %252 ], [ %0, %17 ], [ %0, %181 ], [ %66, %61 ], [ %72, %67 ], [ -4194304, %40 ], [ %148, %143 ], [ %154, %149 ], [ -4194304, %122 ], [ %231, %226 ], [ %237, %232 ], [ -4194304, %20
  ret i32 %278
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @subFloat32Sigs(i32 %0, i32 %1, i8 zeroext %2, %struct.float_status* nocapture %3) unnamed_addr #13 {
  %5 = lshr i32 %0, 23
  %6 = and i32 %5, 255
  %7 = lshr i32 %1, 23
  %8 = and i32 %7, 255
  %9 = sub nsw i32 %6, %8
  %10 = shl i32 %0, 7
  %11 = and i32 %10, 1073741696
  %12 = shl i32 %1, 7
  %13 = and i32 %12, 1073741696
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %184, label %15

15:                                               ; preds = %4
  %16 = icmp slt i32 %9, 0
  br i1 %16, label %92, label %17

17:                                               ; preds = %15
  %18 = trunc i32 %5 to i8
  switch i8 %18, label %81 [
    i8 -1, label %19
    i8 0, label %80
  ]

19:                                               ; preds = %17
  %20 = or i32 %13, %11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %76, label %22

22:                                               ; preds = %19
  %23 = shl i32 %0, 1
  %24 = icmp ult i32 %23, -8388608
  %25 = and i32 %0, 2143289344
  %26 = icmp eq i32 %25, 2139095040
  %27 = and i32 %0, 4194303
  %28 = icmp ne i32 %27, 0
  %29 = and i1 %26, %28
  %30 = shl i32 %1, 1
  %31 = icmp ugt i32 %30, -8388609
  %32 = and i32 %1, 2143289344
  %33 = icmp eq i32 %32, 2139095040
  %34 = and i32 %1, 4194303
  %35 = icmp ne i32 %34, 0
  %36 = and i1 %33, %35
  %37 = zext i1 %36 to i8
  %38 = or i1 %29, %36
  br i1 %38, label %39, label %43

39:                                               ; preds = %22
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 1
  br label %43

43:                                               ; preds = %39, %22
  %44 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %281

47:                                               ; preds = %43
  %48 = icmp ult i32 %23, %30
  br i1 %48, label %54, label %49

49:                                               ; preds = %47
  %50 = icmp ult i32 %30, %23
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = icmp ult i32 %0, %1
  %53 = zext i1 %52 to i8
  br label %54

54:                                               ; preds = %51, %49, %47
  %55 = phi i8 [ %53, %51 ], [ 0, %47 ], [ 1, %49 ]
  br i1 %29, label %61, label %56

56:                                               ; preds = %54
  br i1 %24, label %64, label %57

57:                                               ; preds = %56
  %58 = or i8 %55, %37
  %59 = icmp eq i8 %58, 0
  %60 = and i1 %31, %59
  br i1 %60, label %64, label %70

61:                                               ; preds = %54
  %62 = icmp eq i8 %55, 0
  %63 = select i1 %36, i1 %62, i1 %31
  br i1 %63, label %64, label %70

64:                                               ; preds = %61, %57, %56
  %65 = icmp ne i32 %32, 2139095040
  %66 = icmp eq i32 %34, 0
  %67 = or i1 %66, %65
  %68 = or i32 %1, 4194304
  %69 = select i1 %67, i32 %1, i32 %68
  br label %281

70:                                               ; preds = %61, %57
  %71 = icmp ne i32 %25, 2139095040
  %72 = icmp eq i32 %27, 0
  %73 = or i1 %72, %71
  %74 = or i32 %0, 4194304
  %75 = select i1 %73, i32 %0, i32 %74
  br label %281

76:                                               ; preds = %19
  %77 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %78, 1
  store i8 %79, i8* %77, align 1
  br label %281

80:                                               ; preds = %17
  br label %81

81:                                               ; preds = %17, %80
  %82 = phi i32 [ 1, %80 ], [ %6, %17 ]
  %83 = phi i32 [ 1, %80 ], [ %8, %17 ]
  %84 = icmp ult i32 %13, %11
  br i1 %84, label %267, label %85

85:                                               ; preds = %81
  %86 = icmp ult i32 %11, %13
  br i1 %86, label %178, label %87

87:                                               ; preds = %85
  %88 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 1
  %91 = select i1 %90, i32 -2147483648, i32 0
  br label %281

92:                                               ; preds = %15
  %93 = icmp eq i32 %8, 255
  br i1 %93, label %94, label %155

94:                                               ; preds = %92
  %95 = icmp eq i32 %13, 0
  br i1 %95, label %150, label %96

96:                                               ; preds = %94
  %97 = shl i32 %0, 1
  %98 = icmp ult i32 %97, -8388608
  %99 = and i32 %0, 2143289344
  %100 = icmp eq i32 %99, 2139095040
  %101 = and i32 %0, 4194303
  %102 = icmp ne i32 %101, 0
  %103 = and i1 %100, %102
  %104 = shl i32 %1, 1
  %105 = icmp ugt i32 %104, -8388609
  %106 = and i32 %1, 2143289344
  %107 = icmp eq i32 %106, 2139095040
  %108 = and i32 %1, 4194303
  %109 = icmp ne i32 %108, 0
  %110 = and i1 %107, %109
  %111 = zext i1 %110 to i8
  %112 = or i1 %103, %110
  br i1 %112, label %113, label %117

113:                                              ; preds = %96
  %114 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %115, 1
  store i8 %116, i8* %114, align 1
  br label %117

117:                                              ; preds = %113, %96
  %118 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %281

121:                                              ; preds = %117
  %122 = icmp ult i32 %97, %104
  br i1 %122, label %128, label %123

123:                                              ; preds = %121
  %124 = icmp ult i32 %104, %97
  br i1 %124, label %128, label %125

125:                                              ; preds = %123
  %126 = icmp ult i32 %0, %1
  %127 = zext i1 %126 to i8
  br label %128

128:                                              ; preds = %125, %123, %121
  %129 = phi i8 [ %127, %125 ], [ 0, %121 ], [ 1, %123 ]
  br i1 %103, label %135, label %130

130:                                              ; preds = %128
  br i1 %98, label %138, label %131

131:                                              ; preds = %130
  %132 = or i8 %129, %111
  %133 = icmp eq i8 %132, 0
  %134 = and i1 %105, %133
  br i1 %134, label %138, label %144

135:                                              ; preds = %128
  %136 = icmp eq i8 %129, 0
  %137 = select i1 %110, i1 %136, i1 %105
  br i1 %137, label %138, label %144

138:                                              ; preds = %135, %131, %130
  %139 = icmp ne i32 %106, 2139095040
  %140 = icmp eq i32 %108, 0
  %141 = or i1 %140, %139
  %142 = or i32 %1, 4194304
  %143 = select i1 %141, i32 %1, i32 %142
  br label %281

144:                                              ; preds = %135, %131
  %145 = icmp ne i32 %99, 2139095040
  %146 = icmp eq i32 %101, 0
  %147 = or i1 %146, %145
  %148 = or i32 %0, 4194304
  %149 = select i1 %147, i32 %0, i32 %148
  br label %281

150:                                              ; preds = %94
  %151 = xor i8 %2, 1
  %152 = zext i8 %151 to i32
  %153 = shl i32 %152, 31
  %154 = or i32 %153, 2139095040
  br label %281

155:                                              ; preds = %92
  %156 = icmp eq i32 %6, 0
  %157 = or i32 %11, 1073741824
  %158 = select i1 %156, i32 %11, i32 %157
  %159 = zext i1 %156 to i32
  %160 = add nsw i32 %9, %159
  %161 = sub nsw i32 0, %160
  %162 = icmp eq i32 %160, 0
  br i1 %162, label %175, label %163

163:                                              ; preds = %155
  %164 = icmp sgt i32 %160, -32
  br i1 %164, label %165, label %172

165:                                              ; preds = %163
  %166 = lshr i32 %158, %161
  %167 = and i32 %160, 31
  %168 = shl i32 %158, %167
  %169 = icmp ne i32 %168, 0
  %170 = zext i1 %169 to i32
  %171 = or i32 %166, %170
  br label %175

172:                                              ; preds = %163
  %173 = icmp ne i32 %158, 0
  %174 = zext i1 %173 to i32
  br label %175

175:                                              ; preds = %155, %165, %172
  %176 = phi i32 [ %171, %165 ], [ %174, %172 ], [ %158, %155 ]
  %177 = or i32 %13, 1073741824
  br label %178

178:                                              ; preds = %85, %175
  %179 = phi i32 [ %176, %175 ], [ %11, %85 ]
  %180 = phi i32 [ %177, %175 ], [ %13, %85 ]
  %181 = phi i32 [ %8, %175 ], [ %83, %85 ]
  %182 = sub i32 %180, %179
  %183 = xor i8 %2, 1
  br label %272

184:                                              ; preds = %4
  %185 = icmp eq i32 %6, 255
  br i1 %185, label %186, label %242

186:                                              ; preds = %184
  %187 = icmp eq i32 %11, 0
  br i1 %187, label %281, label %188

188:                                              ; preds = %186
  %189 = shl i32 %0, 1
  %190 = icmp ult i32 %189, -8388608
  %191 = and i32 %0, 2143289344
  %192 = icmp eq i32 %191, 2139095040
  %193 = and i32 %0, 4194303
  %194 = icmp ne i32 %193, 0
  %195 = and i1 %192, %194
  %196 = shl i32 %1, 1
  %197 = icmp ugt i32 %196, -8388609
  %198 = and i32 %1, 2143289344
  %199 = icmp eq i32 %198, 2139095040
  %200 = and i32 %1, 4194303
  %201 = icmp ne i32 %200, 0
  %202 = and i1 %199, %201
  %203 = zext i1 %202 to i8
  %204 = or i1 %195, %202
  br i1 %204, label %205, label %209

205:                                              ; preds = %188
  %206 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %207 = load i8, i8* %206, align 1
  %208 = or i8 %207, 1
  store i8 %208, i8* %206, align 1
  br label %209

209:                                              ; preds = %205, %188
  %210 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %213, label %281

213:                                              ; preds = %209
  %214 = icmp ult i32 %189, %196
  br i1 %214, label %220, label %215

215:                                              ; preds = %213
  %216 = icmp ult i32 %196, %189
  br i1 %216, label %220, label %217

217:                                              ; preds = %215
  %218 = icmp ult i32 %0, %1
  %219 = zext i1 %218 to i8
  br label %220

220:                                              ; preds = %217, %215, %213
  %221 = phi i8 [ %219, %217 ], [ 0, %213 ], [ 1, %215 ]
  br i1 %195, label %227, label %222

222:                                              ; preds = %220
  br i1 %190, label %230, label %223

223:                                              ; preds = %222
  %224 = or i8 %221, %203
  %225 = icmp eq i8 %224, 0
  %226 = and i1 %197, %225
  br i1 %226, label %230, label %236

227:                                              ; preds = %220
  %228 = icmp eq i8 %221, 0
  %229 = select i1 %202, i1 %228, i1 %197
  br i1 %229, label %230, label %236

230:                                              ; preds = %227, %223, %222
  %231 = icmp ne i32 %198, 2139095040
  %232 = icmp eq i32 %200, 0
  %233 = or i1 %232, %231
  %234 = or i32 %1, 4194304
  %235 = select i1 %233, i32 %1, i32 %234
  br label %281

236:                                              ; preds = %227, %223
  %237 = icmp ne i32 %191, 2139095040
  %238 = icmp eq i32 %193, 0
  %239 = or i1 %238, %237
  %240 = or i32 %0, 4194304
  %241 = select i1 %239, i32 %0, i32 %240
  br label %281

242:                                              ; preds = %184
  %243 = icmp eq i32 %8, 0
  br i1 %243, label %246, label %244

244:                                              ; preds = %242
  %245 = or i32 %13, 1073741824
  br label %249

246:                                              ; preds = %242
  %247 = add nsw i32 %9, -1
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %264, label %249

249:                                              ; preds = %244, %246
  %250 = phi i32 [ %9, %244 ], [ %247, %246 ]
  %251 = phi i32 [ %245, %244 ], [ %13, %246 ]
  %252 = icmp slt i32 %250, 32
  br i1 %252, label %253, label %261

253:                                              ; preds = %249
  %254 = lshr i32 %251, %250
  %255 = sub nsw i32 0, %250
  %256 = and i32 %255, 31
  %257 = shl i32 %251, %256
  %258 = icmp ne i32 %257, 0
  %259 = zext i1 %258 to i32
  %260 = or i32 %254, %259
  br label %264

261:                                              ; preds = %249
  %262 = icmp ne i32 %251, 0
  %263 = zext i1 %262 to i32
  br label %264

264:                                              ; preds = %246, %253, %261
  %265 = phi i32 [ %260, %253 ], [ %263, %261 ], [ %13, %246 ]
  %266 = or i32 %11, 1073741824
  br label %267

267:                                              ; preds = %81, %264
  %268 = phi i32 [ %266, %264 ], [ %11, %81 ]
  %269 = phi i32 [ %265, %264 ], [ %13, %81 ]
  %270 = phi i32 [ %6, %264 ], [ %82, %81 ]
  %271 = sub i32 %268, %269
  br label %272

272:                                              ; preds = %267, %178
  %273 = phi i8 [ %2, %267 ], [ %183, %178 ]
  %274 = phi i32 [ %270, %267 ], [ %181, %178 ]
  %275 = phi i32 [ %271, %267 ], [ %182, %178 ]
  %ctlz.sh = lshr i32 %275, 1
  %ctlz.step = or i32 %275, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %276 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %276, 1431655765
  %ctpop.sh = lshr i32 %276, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %277 = add nsw i32 %ctpop.part, -1
  %278 = sub nsw i32 %274, %ctpop.part
  %279 = shl i32 %275, %277
  %280 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %273, i32 %278, i32 %279, %struct.float_status* %3) #23
  br label %281

281:                                              ; preds = %236, %230, %209, %144, %138, %117, %70, %64, %43, %186, %272, %150, %87, %76
  %282 = phi i32 [ %280, %272 ], [ %154, %150 ], [ -4194304, %76 ], [ %91, %87 ], [ %0, %186 ], [ %69, %64 ], [ %75, %70 ], [ -4194304, %43 ], [ %143, %138 ], [ %149, %144 ], [ -4194304, %117 ], [ %235, %230 ], [ %241, %236 ], [ -4194304, %209 ]
  ret i32 %282
}

; Function Attrs: nounwind uwtable
define i32 @float32_sub(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  %35 = lshr i32 %32, 31
  %36 = trunc i32 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i32 @subFloat32Sigs(i32 %31, i32 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i32 @addFloat32Sigs(i32 %31, i32 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i32 [ %39, %38 ], [ %41, %40 ]
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define i32 @float32_mul(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 8388607
  %34 = lshr i32 %31, 23
  %35 = and i32 %34, 255
  %36 = and i32 %32, 8388607
  %37 = lshr i32 %32, 23
  %38 = and i32 %37, 255
  %39 = xor i32 %32, %31
  %40 = lshr i32 %39, 31
  %41 = trunc i32 %40 to i8
  %42 = icmp eq i32 %35, 255
  br i1 %42, label %43, label %113

43:                                               ; preds = %30
  %44 = icmp eq i32 %33, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %43
  %46 = icmp eq i32 %38, 255
  %47 = icmp ne i32 %36, 0
  %48 = and i1 %47, %46
  br i1 %48, label %49, label %103

49:                                               ; preds = %43, %45
  %50 = shl i32 %31, 1
  %51 = icmp ult i32 %50, -8388608
  %52 = and i32 %31, 2143289344
  %53 = icmp eq i32 %52, 2139095040
  %54 = and i32 %31, 4194303
  %55 = icmp ne i32 %54, 0
  %56 = and i1 %53, %55
  %57 = shl i32 %32, 1
  %58 = icmp ugt i32 %57, -8388609
  %59 = and i32 %32, 2143289344
  %60 = icmp eq i32 %59, 2139095040
  %61 = and i32 %32, 4194303
  %62 = icmp ne i32 %61, 0
  %63 = and i1 %60, %62
  %64 = zext i1 %63 to i8
  %65 = or i1 %56, %63
  br i1 %65, label %66, label %70

66:                                               ; preds = %49
  %67 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %68 = load i8, i8* %67, align 1
  %69 = or i8 %68, 1
  store i8 %69, i8* %67, align 1
  br label %70

70:                                               ; preds = %66, %49
  %71 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %228

74:                                               ; preds = %70
  %75 = icmp ult i32 %50, %57
  br i1 %75, label %81, label %76

76:                                               ; preds = %74
  %77 = icmp ult i32 %57, %50
  br i1 %77, label %81, label %78

78:                                               ; preds = %76
  %79 = icmp ult i32 %31, %32
  %80 = zext i1 %79 to i8
  br label %81

81:                                               ; preds = %78, %76, %74
  %82 = phi i8 [ %80, %78 ], [ 0, %74 ], [ 1, %76 ]
  br i1 %56, label %88, label %83

83:                                               ; preds = %81
  br i1 %51, label %91, label %84

84:                                               ; preds = %83
  %85 = or i8 %82, %64
  %86 = icmp eq i8 %85, 0
  %87 = and i1 %58, %86
  br i1 %87, label %91, label %97

88:                                               ; preds = %81
  %89 = icmp eq i8 %82, 0
  %90 = select i1 %63, i1 %89, i1 %58
  br i1 %90, label %91, label %97

91:                                               ; preds = %88, %84, %83
  %92 = icmp ne i32 %59, 2139095040
  %93 = icmp eq i32 %61, 0
  %94 = or i1 %93, %92
  %95 = or i32 %32, 4194304
  %96 = select i1 %94, i32 %32, i32 %95
  br label %228

97:                                               ; preds = %88, %84
  %98 = icmp ne i32 %52, 2139095040
  %99 = icmp eq i32 %54, 0
  %100 = or i1 %99, %98
  %101 = or i32 %31, 4194304
  %102 = select i1 %100, i32 %31, i32 %101
  br label %228

103:                                              ; preds = %45
  %104 = or i32 %38, %36
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %110

106:                                              ; preds = %103
  %107 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %108, 1
  store i8 %109, i8* %107, align 1
  br label %228

110:                                              ; preds = %103
  %111 = and i32 %39, -2147483648
  %112 = or i32 %111, 2139095040
  br label %228

113:                                              ; preds = %30
  %114 = icmp eq i32 %38, 255
  br i1 %114, label %115, label %181

115:                                              ; preds = %113
  %116 = icmp eq i32 %36, 0
  br i1 %116, label %171, label %117

117:                                              ; preds = %115
  %118 = shl i32 %31, 1
  %119 = icmp ult i32 %118, -8388608
  %120 = and i32 %31, 2143289344
  %121 = icmp eq i32 %120, 2139095040
  %122 = and i32 %31, 4194303
  %123 = icmp ne i32 %122, 0
  %124 = and i1 %121, %123
  %125 = shl i32 %32, 1
  %126 = icmp ugt i32 %125, -8388609
  %127 = and i32 %32, 2143289344
  %128 = icmp eq i32 %127, 2139095040
  %129 = and i32 %32, 4194303
  %130 = icmp ne i32 %129, 0
  %131 = and i1 %128, %130
  %132 = zext i1 %131 to i8
  %133 = or i1 %124, %131
  br i1 %133, label %134, label %138

134:                                              ; preds = %117
  %135 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %136 = load i8, i8* %135, align 1
  %137 = or i8 %136, 1
  store i8 %137, i8* %135, align 1
  br label %138

138:                                              ; preds = %134, %117
  %139 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %142, label %228

142:                                              ; preds = %138
  %143 = icmp ult i32 %118, %125
  br i1 %143, label %149, label %144

144:                                              ; preds = %142
  %145 = icmp ult i32 %125, %118
  br i1 %145, label %149, label %146

146:                                              ; preds = %144
  %147 = icmp ult i32 %31, %32
  %148 = zext i1 %147 to i8
  br label %149

149:                                              ; preds = %146, %144, %142
  %150 = phi i8 [ %148, %146 ], [ 0, %142 ], [ 1, %144 ]
  br i1 %124, label %156, label %151

151:                                              ; preds = %149
  br i1 %119, label %159, label %152

152:                                              ; preds = %151
  %153 = or i8 %150, %132
  %154 = icmp eq i8 %153, 0
  %155 = and i1 %126, %154
  br i1 %155, label %159, label %165

156:                                              ; preds = %149
  %157 = icmp eq i8 %150, 0
  %158 = select i1 %131, i1 %157, i1 %126
  br i1 %158, label %159, label %165

159:                                              ; preds = %156, %152, %151
  %160 = icmp ne i32 %127, 2139095040
  %161 = icmp eq i32 %129, 0
  %162 = or i1 %161, %160
  %163 = or i32 %32, 4194304
  %164 = select i1 %162, i32 %32, i32 %163
  br label %228

165:                                              ; preds = %156, %152
  %166 = icmp ne i32 %120, 2139095040
  %167 = icmp eq i32 %122, 0
  %168 = or i1 %167, %166
  %169 = or i32 %31, 4194304
  %170 = select i1 %168, i32 %31, i32 %169
  br label %228

171:                                              ; preds = %115
  %172 = or i32 %35, %33
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %178

174:                                              ; preds = %171
  %175 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %176 = load i8, i8* %175, align 1
  %177 = or i8 %176, 1
  store i8 %177, i8* %175, align 1
  br label %228

178:                                              ; preds = %171
  %179 = and i32 %39, -2147483648
  %180 = or i32 %179, 2139095040
  br label %228

181:                                              ; preds = %113
  %182 = icmp eq i32 %35, 0
  br i1 %182, label %183, label %192

183:                                              ; preds = %181
  %184 = icmp eq i32 %33, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = and i32 %39, -2147483648
  br label %228

187:                                              ; preds = %183
  %ctlz.sh = lshr i32 %33, 1
  %ctlz.step = or i32 %33, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %188 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %188, 1431655765
  %ctpop.sh = lshr i32 %188, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %189 = add nsw i32 %ctpop.part, -8
  %190 = shl i32 %33, %189
  %191 = sub nsw i32 9, %ctpop.part
  br label %192

192:                                              ; preds = %187, %181
  %193 = phi i32 [ %190, %187 ], [ %33, %181 ]
  %194 = phi i32 [ %191, %187 ], [ %35, %181 ]
  %195 = icmp eq i32 %38, 0
  br i1 %195, label %196, label %205

196:                                              ; preds = %192
  %197 = icmp eq i32 %36, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %196
  %199 = and i32 %39, -2147483648
  br label %228

200:                                              ; preds = %196
  %ctlz.sh25 = lshr i32 %36, 1
  %ctlz.step26 = or i32 %36, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %201 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %201, 1431655765
  %ctpop.sh36 = lshr i32 %201, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %202 = add nsw i32 %ctpop.part55, -8
  %203 = shl i32 %36, %202
  %204 = sub nsw i32 9, %ctpop.part55
  br label %205

205:                                              ; preds = %200, %192
  %206 = phi i32 [ %204, %200 ], [ %38, %192 ]
  %207 = phi i32 [ %203, %200 ], [ %36, %192 ]
  %208 = add nsw i32 %206, %194
  %209 = shl i32 %193, 7
  %210 = or i32 %209, 1073741824
  %211 = shl i32 %207, 8
  %212 = or i32 %211, -2147483648
  %213 = zext i32 %210 to i64
  %214 = zext i32 %212 to i64
  %215 = mul nuw i64 %214, %213
  %216 = lshr i64 %215, 32
  %217 = and i64 %215, 4294934528
  %218 = icmp ne i64 %217, 0
  %219 = zext i1 %218 to i64
  %220 = or i64 %216, %219
  %221 = trunc i64 %220 to i32
  %222 = shl i32 %221, 1
  %223 = icmp sgt i32 %222, -1
  %224 = select i1 %223, i32 -128, i32 -127
  %225 = add nsw i32 %208, %224
  %226 = select i1 %223, i32 %222, i32 %221
  %227 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %41, i32 %225, i32 %226, %struct.float_status* nonnull %2)
  br label %228

228:                                              ; preds = %165, %159, %138, %97, %91, %70, %205, %198, %185, %178, %174, %110, %106
  %229 = phi i32 [ -4194304, %106 ], [ %112, %110 ], [ -4194304, %174 ], [ %180, %178 ], [ %186, %185 ], [ %199, %198 ], [ %227, %205 ], [ %96, %91 ], [ %102, %97 ], [ -4194304, %70 ], [ %164, %159 ], [ %170, %165 ], [ -4194304, %138 ]
  ret i32 %229
}

; Function Attrs: nounwind uwtable
define i32 @float32_div(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 8388607
  %34 = lshr i32 %31, 23
  %35 = and i32 %34, 255
  %36 = and i32 %32, 8388607
  %37 = lshr i32 %32, 23
  %38 = and i32 %37, 255
  %39 = xor i32 %32, %31
  %40 = lshr i32 %39, 31
  %41 = trunc i32 %40 to i8
  %42 = icmp eq i32 %35, 255
  br i1 %42, label %43, label %164

43:                                               ; preds = %30
  %44 = icmp eq i32 %33, 0
  br i1 %44, label %99, label %45

45:                                               ; preds = %43
  %46 = shl i32 %31, 1
  %47 = icmp ult i32 %46, -8388608
  %48 = and i32 %31, 2143289344
  %49 = icmp eq i32 %48, 2139095040
  %50 = and i32 %31, 4194303
  %51 = icmp ne i32 %50, 0
  %52 = and i1 %49, %51
  %53 = shl i32 %32, 1
  %54 = icmp ugt i32 %53, -8388609
  %55 = and i32 %32, 2143289344
  %56 = icmp eq i32 %55, 2139095040
  %57 = and i32 %32, 4194303
  %58 = icmp ne i32 %57, 0
  %59 = and i1 %56, %58
  %60 = zext i1 %59 to i8
  %61 = or i1 %52, %59
  br i1 %61, label %62, label %66

62:                                               ; preds = %45
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %64, 1
  store i8 %65, i8* %63, align 1
  br label %66

66:                                               ; preds = %62, %45
  %67 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %286

70:                                               ; preds = %66
  %71 = icmp ult i32 %46, %53
  br i1 %71, label %77, label %72

72:                                               ; preds = %70
  %73 = icmp ult i32 %53, %46
  br i1 %73, label %77, label %74

74:                                               ; preds = %72
  %75 = icmp ult i32 %31, %32
  %76 = zext i1 %75 to i8
  br label %77

77:                                               ; preds = %74, %72, %70
  %78 = phi i8 [ %76, %74 ], [ 0, %70 ], [ 1, %72 ]
  br i1 %52, label %84, label %79

79:                                               ; preds = %77
  br i1 %47, label %87, label %80

80:                                               ; preds = %79
  %81 = or i8 %78, %60
  %82 = icmp eq i8 %81, 0
  %83 = and i1 %54, %82
  br i1 %83, label %87, label %93

84:                                               ; preds = %77
  %85 = icmp eq i8 %78, 0
  %86 = select i1 %59, i1 %85, i1 %54
  br i1 %86, label %87, label %93

87:                                               ; preds = %84, %80, %79
  %88 = icmp ne i32 %55, 2139095040
  %89 = icmp eq i32 %57, 0
  %90 = or i1 %89, %88
  %91 = or i32 %32, 4194304
  %92 = select i1 %90, i32 %32, i32 %91
  br label %286

93:                                               ; preds = %84, %80
  %94 = icmp ne i32 %48, 2139095040
  %95 = icmp eq i32 %50, 0
  %96 = or i1 %95, %94
  %97 = or i32 %31, 4194304
  %98 = select i1 %96, i32 %31, i32 %97
  br label %286

99:                                               ; preds = %43
  %100 = icmp eq i32 %38, 255
  br i1 %100, label %101, label %161

101:                                              ; preds = %99
  %102 = icmp eq i32 %36, 0
  br i1 %102, label %157, label %103

103:                                              ; preds = %101
  %104 = shl i32 %31, 1
  %105 = icmp ult i32 %104, -8388608
  %106 = and i32 %31, 2143289344
  %107 = icmp eq i32 %106, 2139095040
  %108 = and i32 %31, 4194303
  %109 = icmp ne i32 %108, 0
  %110 = and i1 %107, %109
  %111 = shl i32 %32, 1
  %112 = icmp ugt i32 %111, -8388609
  %113 = and i32 %32, 2143289344
  %114 = icmp eq i32 %113, 2139095040
  %115 = and i32 %32, 4194303
  %116 = icmp ne i32 %115, 0
  %117 = and i1 %114, %116
  %118 = zext i1 %117 to i8
  %119 = or i1 %110, %117
  br i1 %119, label %120, label %124

120:                                              ; preds = %103
  %121 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %122 = load i8, i8* %121, align 1
  %123 = or i8 %122, 1
  store i8 %123, i8* %121, align 1
  br label %124

124:                                              ; preds = %120, %103
  %125 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %286

128:                                              ; preds = %124
  %129 = icmp ult i32 %104, %111
  br i1 %129, label %135, label %130

130:                                              ; preds = %128
  %131 = icmp ult i32 %111, %104
  br i1 %131, label %135, label %132

132:                                              ; preds = %130
  %133 = icmp ult i32 %31, %32
  %134 = zext i1 %133 to i8
  br label %135

135:                                              ; preds = %132, %130, %128
  %136 = phi i8 [ %134, %132 ], [ 0, %128 ], [ 1, %130 ]
  br i1 %110, label %142, label %137

137:                                              ; preds = %135
  br i1 %105, label %145, label %138

138:                                              ; preds = %137
  %139 = or i8 %136, %118
  %140 = icmp eq i8 %139, 0
  %141 = and i1 %112, %140
  br i1 %141, label %145, label %151

142:                                              ; preds = %135
  %143 = icmp eq i8 %136, 0
  %144 = select i1 %117, i1 %143, i1 %112
  br i1 %144, label %145, label %151

145:                                              ; preds = %142, %138, %137
  %146 = icmp ne i32 %113, 2139095040
  %147 = icmp eq i32 %115, 0
  %148 = or i1 %147, %146
  %149 = or i32 %32, 4194304
  %150 = select i1 %148, i32 %32, i32 %149
  br label %286

151:                                              ; preds = %142, %138
  %152 = icmp ne i32 %106, 2139095040
  %153 = icmp eq i32 %108, 0
  %154 = or i1 %153, %152
  %155 = or i32 %31, 4194304
  %156 = select i1 %154, i32 %31, i32 %155
  br label %286

157:                                              ; preds = %101
  %158 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %159 = load i8, i8* %158, align 1
  %160 = or i8 %159, 1
  store i8 %160, i8* %158, align 1
  br label %286

161:                                              ; preds = %99
  %162 = and i32 %39, -2147483648
  %163 = or i32 %162, 2139095040
  br label %286

164:                                              ; preds = %30
  %165 = trunc i32 %37 to i8
  switch i8 %165, label %242 [
    i8 -1, label %166
    i8 0, label %224
  ]

166:                                              ; preds = %164
  %167 = icmp eq i32 %36, 0
  br i1 %167, label %222, label %168

168:                                              ; preds = %166
  %169 = shl i32 %31, 1
  %170 = icmp ult i32 %169, -8388608
  %171 = and i32 %31, 2143289344
  %172 = icmp eq i32 %171, 2139095040
  %173 = and i32 %31, 4194303
  %174 = icmp ne i32 %173, 0
  %175 = and i1 %172, %174
  %176 = shl i32 %32, 1
  %177 = icmp ugt i32 %176, -8388609
  %178 = and i32 %32, 2143289344
  %179 = icmp eq i32 %178, 2139095040
  %180 = and i32 %32, 4194303
  %181 = icmp ne i32 %180, 0
  %182 = and i1 %179, %181
  %183 = zext i1 %182 to i8
  %184 = or i1 %175, %182
  br i1 %184, label %185, label %189

185:                                              ; preds = %168
  %186 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %187 = load i8, i8* %186, align 1
  %188 = or i8 %187, 1
  store i8 %188, i8* %186, align 1
  br label %189

189:                                              ; preds = %185, %168
  %190 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %193, label %286

193:                                              ; preds = %189
  %194 = icmp ult i32 %169, %176
  br i1 %194, label %200, label %195

195:                                              ; preds = %193
  %196 = icmp ult i32 %176, %169
  br i1 %196, label %200, label %197

197:                                              ; preds = %195
  %198 = icmp ult i32 %31, %32
  %199 = zext i1 %198 to i8
  br label %200

200:                                              ; preds = %197, %195, %193
  %201 = phi i8 [ %199, %197 ], [ 0, %193 ], [ 1, %195 ]
  br i1 %175, label %207, label %202

202:                                              ; preds = %200
  br i1 %170, label %210, label %203

203:                                              ; preds = %202
  %204 = or i8 %201, %183
  %205 = icmp eq i8 %204, 0
  %206 = and i1 %177, %205
  br i1 %206, label %210, label %216

207:                                              ; preds = %200
  %208 = icmp eq i8 %201, 0
  %209 = select i1 %182, i1 %208, i1 %177
  br i1 %209, label %210, label %216

210:                                              ; preds = %207, %203, %202
  %211 = icmp ne i32 %178, 2139095040
  %212 = icmp eq i32 %180, 0
  %213 = or i1 %212, %211
  %214 = or i32 %32, 4194304
  %215 = select i1 %213, i32 %32, i32 %214
  br label %286

216:                                              ; preds = %207, %203
  %217 = icmp ne i32 %171, 2139095040
  %218 = icmp eq i32 %173, 0
  %219 = or i1 %218, %217
  %220 = or i32 %31, 4194304
  %221 = select i1 %219, i32 %31, i32 %220
  br label %286

222:                                              ; preds = %166
  %223 = and i32 %39, -2147483648
  br label %286

224:                                              ; preds = %164
  %225 = icmp eq i32 %36, 0
  br i1 %225, label %226, label %237

226:                                              ; preds = %224
  %227 = or i32 %35, %33
  %228 = icmp eq i32 %227, 0
  %229 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %230 = load i8, i8* %229, align 1
  br i1 %228, label %231, label %233

231:                                              ; preds = %226
  %232 = or i8 %230, 1
  store i8 %232, i8* %229, align 1
  br label %286

233:                                              ; preds = %226
  %234 = or i8 %230, 4
  store i8 %234, i8* %229, align 1
  %235 = and i32 %39, -2147483648
  %236 = or i32 %235, 2139095040
  br label %286

237:                                              ; preds = %224
  %ctlz.sh = lshr i32 %36, 1
  %ctlz.step = or i32 %36, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %238 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %238, 1431655765
  %ctpop.sh = lshr i32 %238, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %239 = add nsw i32 %ctpop.part, -8
  %240 = shl i32 %36, %239
  %241 = sub nsw i32 9, %ctpop.part
  br label %242

242:                                              ; preds = %164, %237
  %243 = phi i32 [ %38, %164 ], [ %241, %237 ]
  %244 = phi i32 [ %36, %164 ], [ %240, %237 ]
  %245 = icmp eq i32 %35, 0
  br i1 %245, label %246, label %255

246:                                              ; preds = %242
  %247 = icmp eq i32 %33, 0
  br i1 %247, label %248, label %250

248:                                              ; preds = %246
  %249 = and i32 %39, -2147483648
  br label %286

250:                                              ; preds = %246
  %ctlz.sh25 = lshr i32 %33, 1
  %ctlz.step26 = or i32 %33, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %251 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %251, 1431655765
  %ctpop.sh36 = lshr i32 %251, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %252 = add nsw i32 %ctpop.part55, -8
  %253 = shl i32 %33, %252
  %254 = sub nsw i32 9, %ctpop.part55
  br label %255

255:                                              ; preds = %250, %242
  %256 = phi i32 [ %254, %250 ], [ %35, %242 ]
  %257 = phi i32 [ %253, %250 ], [ %33, %242 ]
  %258 = sub nsw i32 %256, %243
  %259 = shl i32 %257, 7
  %260 = or i32 %259, 1073741824
  %261 = shl i32 %244, 8
  %262 = or i32 %261, -2147483648
  %263 = shl i32 %260, 1
  %264 = icmp ugt i32 %262, %263
  %265 = xor i1 %264, true
  %266 = zext i1 %265 to i32
  %267 = lshr exact i32 %260, %266
  %268 = select i1 %264, i32 125, i32 126
  %269 = add nsw i32 %258, %268
  %270 = zext i32 %267 to i64
  %271 = shl nuw i64 %270, 32
  %272 = zext i32 %262 to i64
  %273 = udiv i64 %271, %272
  %274 = trunc i64 %273 to i32
  %275 = and i32 %274, 63
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %283

277:                                              ; preds = %255
  %278 = and i64 %273, 4294967295
  %279 = mul nuw i64 %278, %272
  %280 = icmp ne i64 %279, %271
  %281 = zext i1 %280 to i32
  %282 = or i32 %281, %274
  br label %283

283:                                              ; preds = %277, %255
  %284 = phi i32 [ %282, %277 ], [ %274, %255 ]
  %285 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %41, i32 %269, i32 %284, %struct.float_status* nonnull %2)
  br label %286

286:                                              ; preds = %216, %210, %189, %151, %145, %124, %93, %87, %66, %283, %248, %233, %231, %222, %161, %157
  %287 = phi i32 [ -4194304, %157 ], [ %163, %161 ], [ %223, %222 ], [ -4194304, %231 ], [ %236, %233 ], [ %249, %248 ], [ %285, %283 ], [ %92, %87 ], [ %98, %93 ], [ -4194304, %66 ], [ %150, %145 ], [ %156, %151 ], [ -4194304, %124 ], [ %215, %210 ], [ 
  ret i32 %287
}

; Function Attrs: nounwind uwtable
define i32 @float32_rem(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 8388607
  %34 = lshr i32 %31, 23
  %35 = and i32 %34, 255
  %36 = lshr i32 %31, 31
  %37 = and i32 %32, 8388607
  %38 = lshr i32 %32, 23
  %39 = and i32 %38, 255
  %40 = icmp eq i32 %35, 255
  br i1 %40, label %41, label %105

41:                                               ; preds = %30
  %42 = icmp eq i32 %33, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  %44 = icmp eq i32 %39, 255
  %45 = icmp ne i32 %37, 0
  %46 = and i1 %45, %44
  br i1 %46, label %47, label %101

47:                                               ; preds = %41, %43
  %48 = shl i32 %31, 1
  %49 = icmp ult i32 %48, -8388608
  %50 = and i32 %31, 2143289344
  %51 = icmp eq i32 %50, 2139095040
  %52 = and i32 %31, 4194303
  %53 = icmp ne i32 %52, 0
  %54 = and i1 %51, %53
  %55 = shl i32 %32, 1
  %56 = icmp ugt i32 %55, -8388609
  %57 = and i32 %32, 2143289344
  %58 = icmp eq i32 %57, 2139095040
  %59 = and i32 %32, 4194303
  %60 = icmp ne i32 %59, 0
  %61 = and i1 %58, %60
  %62 = zext i1 %61 to i8
  %63 = or i1 %54, %61
  br i1 %63, label %64, label %68

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %66, 1
  store i8 %67, i8* %65, align 1
  br label %68

68:                                               ; preds = %64, %47
  %69 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %324

72:                                               ; preds = %68
  %73 = icmp ult i32 %48, %55
  br i1 %73, label %79, label %74

74:                                               ; preds = %72
  %75 = icmp ult i32 %55, %48
  br i1 %75, label %79, label %76

76:                                               ; preds = %74
  %77 = icmp ult i32 %31, %32
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %76, %74, %72
  %80 = phi i8 [ %78, %76 ], [ 0, %72 ], [ 1, %74 ]
  br i1 %54, label %86, label %81

81:                                               ; preds = %79
  br i1 %49, label %89, label %82

82:                                               ; preds = %81
  %83 = or i8 %80, %62
  %84 = icmp eq i8 %83, 0
  %85 = and i1 %56, %84
  br i1 %85, label %89, label %95

86:                                               ; preds = %79
  %87 = icmp eq i8 %80, 0
  %88 = select i1 %61, i1 %87, i1 %56
  br i1 %88, label %89, label %95

89:                                               ; preds = %86, %82, %81
  %90 = icmp ne i32 %57, 2139095040
  %91 = icmp eq i32 %59, 0
  %92 = or i1 %91, %90
  %93 = or i32 %32, 4194304
  %94 = select i1 %92, i32 %32, i32 %93
  br label %324

95:                                               ; preds = %86, %82
  %96 = icmp ne i32 %50, 2139095040
  %97 = icmp eq i32 %52, 0
  %98 = or i1 %97, %96
  %99 = or i32 %31, 4194304
  %100 = select i1 %98, i32 %31, i32 %99
  br label %324

101:                                              ; preds = %43
  %102 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %103, 1
  store i8 %104, i8* %102, align 1
  br label %324

105:                                              ; preds = %30
  %106 = trunc i32 %38 to i8
  switch i8 %106, label %174 [
    i8 -1, label %107
    i8 0, label %163
  ]

107:                                              ; preds = %105
  %108 = icmp eq i32 %37, 0
  br i1 %108, label %324, label %109

109:                                              ; preds = %107
  %110 = shl i32 %31, 1
  %111 = icmp ult i32 %110, -8388608
  %112 = and i32 %31, 2143289344
  %113 = icmp eq i32 %112, 2139095040
  %114 = and i32 %31, 4194303
  %115 = icmp ne i32 %114, 0
  %116 = and i1 %113, %115
  %117 = shl i32 %32, 1
  %118 = icmp ugt i32 %117, -8388609
  %119 = and i32 %32, 2143289344
  %120 = icmp eq i32 %119, 2139095040
  %121 = and i32 %32, 4194303
  %122 = icmp ne i32 %121, 0
  %123 = and i1 %120, %122
  %124 = zext i1 %123 to i8
  %125 = or i1 %116, %123
  br i1 %125, label %126, label %130

126:                                              ; preds = %109
  %127 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %128 = load i8, i8* %127, align 1
  %129 = or i8 %128, 1
  store i8 %129, i8* %127, align 1
  br label %130

130:                                              ; preds = %126, %109
  %131 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %324

134:                                              ; preds = %130
  %135 = icmp ult i32 %110, %117
  br i1 %135, label %141, label %136

136:                                              ; preds = %134
  %137 = icmp ult i32 %117, %110
  br i1 %137, label %141, label %138

138:                                              ; preds = %136
  %139 = icmp ult i32 %31, %32
  %140 = zext i1 %139 to i8
  br label %141

141:                                              ; preds = %138, %136, %134
  %142 = phi i8 [ %140, %138 ], [ 0, %134 ], [ 1, %136 ]
  br i1 %116, label %148, label %143

143:                                              ; preds = %141
  br i1 %111, label %151, label %144

144:                                              ; preds = %143
  %145 = or i8 %142, %124
  %146 = icmp eq i8 %145, 0
  %147 = and i1 %118, %146
  br i1 %147, label %151, label %157

148:                                              ; preds = %141
  %149 = icmp eq i8 %142, 0
  %150 = select i1 %123, i1 %149, i1 %118
  br i1 %150, label %151, label %157

151:                                              ; preds = %148, %144, %143
  %152 = icmp ne i32 %119, 2139095040
  %153 = icmp eq i32 %121, 0
  %154 = or i1 %153, %152
  %155 = or i32 %32, 4194304
  %156 = select i1 %154, i32 %32, i32 %155
  br label %324

157:                                              ; preds = %148, %144
  %158 = icmp ne i32 %112, 2139095040
  %159 = icmp eq i32 %114, 0
  %160 = or i1 %159, %158
  %161 = or i32 %31, 4194304
  %162 = select i1 %160, i32 %31, i32 %161
  br label %324

163:                                              ; preds = %105
  %164 = icmp eq i32 %37, 0
  br i1 %164, label %165, label %169

165:                                              ; preds = %163
  %166 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %167 = load i8, i8* %166, align 1
  %168 = or i8 %167, 1
  store i8 %168, i8* %166, align 1
  br label %324

169:                                              ; preds = %163
  %ctlz.sh = lshr i32 %37, 1
  %ctlz.step = or i32 %37, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %170 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %170, 1431655765
  %ctpop.sh = lshr i32 %170, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %171 = add nsw i32 %ctpop.part, -8
  %172 = shl i32 %37, %171
  %173 = sub nsw i32 9, %ctpop.part
  br label %174

174:                                              ; preds = %105, %169
  %175 = phi i32 [ %39, %105 ], [ %173, %169 ]
  %176 = phi i32 [ %37, %105 ], [ %172, %169 ]
  %177 = icmp eq i32 %35, 0
  br i1 %177, label %178, label %185

178:                                              ; preds = %174
  %179 = icmp eq i32 %33, 0
  br i1 %179, label %324, label %180

180:                                              ; preds = %178
  %ctlz.sh25 = lshr i32 %33, 1
  %ctlz.step26 = or i32 %33, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %181 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %181, 1431655765
  %ctpop.sh36 = lshr i32 %181, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %182 = add nsw i32 %ctpop.part55, -8
  %183 = shl i32 %33, %182
  %184 = sub nsw i32 9, %ctpop.part55
  br label %185

185:                                              ; preds = %180, %174
  %186 = phi i32 [ %184, %180 ], [ %35, %174 ]
  %187 = phi i32 [ %183, %180 ], [ %33, %174 ]
  %188 = sub nsw i32 %186, %175
  %189 = or i32 %187, 8388608
  %190 = or i32 %176, 8388608
  %191 = icmp slt i32 %188, 32
  br i1 %191, label %192, label %228

192:                                              ; preds = %185
  %193 = shl i32 %189, 8
  %194 = shl i32 %190, 8
  %195 = icmp slt i32 %188, 0
  br i1 %195, label %196, label %201

196:                                              ; preds = %192
  %197 = icmp eq i32 %188, -1
  br i1 %197, label %198, label %324

198:                                              ; preds = %196
  %199 = shl i32 %189, 7
  %200 = and i32 %199, 2147483520
  br label %221

201:                                              ; preds = %192
  %202 = icmp uge i32 %193, %194
  %203 = select i1 %202, i32 %194, i32 0
  %204 = sub i32 %193, %203
  %205 = icmp eq i32 %188, 0
  br i1 %205, label %221, label %206

206:                                              ; preds = %201
  %207 = zext i32 %204 to i64
  %208 = shl nuw i64 %207, 32
  %209 = zext i32 %194 to i64
  %210 = udiv i64 %208, %209
  %211 = trunc i64 %210 to i32
  %212 = sub nuw nsw i32 32, %188
  %213 = lshr i32 %211, %212
  %214 = shl i32 %190, 6
  %215 = and i32 %214, 1073741760
  %216 = lshr exact i32 %204, 1
  %217 = add nsw i32 %188, -1
  %218 = shl i32 %216, %217
  %219 = mul i32 %213, %215
  %220 = sub i32 %218, %219
  br label %289

221:                                              ; preds = %201, %198
  %222 = phi i32 [ %200, %198 ], [ %204, %201 ]
  %223 = phi i1 [ false, %198 ], [ %202, %201 ]
  %224 = zext i1 %223 to i32
  %225 = lshr exact i32 %222, 2
  %226 = shl i32 %190, 6
  %227 = and i32 %226, 1073741760
  br label %289

228:                                              ; preds = %185
  %229 = icmp ult i32 %189, %190
  %230 = select i1 %229, i32 0, i32 %190
  %231 = sub i32 %189, %230
  %232 = zext i32 %231 to i64
  %233 = shl i64 %232, 40
  %234 = zext i32 %190 to i64
  %235 = shl i64 %234, 40
  %236 = add nsw i32 %188, -64
  %237 = shl nuw nsw i64 %234, 8
  %238 = and i64 %237, 4294967040
  %239 = mul i64 %234, -274877906944
  br label %240

240:                                              ; preds = %273, %228
  %241 = phi i32 [ %236, %228 ], [ %275, %273 ]
  %242 = phi i64 [ %233, %228 ], [ %274, %273 ]
  %243 = icmp sgt i32 %241, 0
  %244 = icmp ugt i64 %235, %242
  br i1 %244, label %245, label %268

245:                                              ; preds = %240
  %246 = udiv i64 %242, %238
  %247 = shl i64 %246, 32
  %248 = and i64 %246, 4294967295
  %249 = mul nuw i64 %248, %238
  %250 = sub i64 %242, %249
  %251 = icmp slt i64 %250, 0
  br i1 %251, label %252, label %258

252:                                              ; preds = %245, %252
  %253 = phi i64 [ %255, %252 ], [ %247, %245 ]
  %254 = phi i64 [ %256, %252 ], [ %250, %245 ]
  %255 = add i64 %253, -4294967296
  %256 = add i64 %254, %238
  %257 = icmp slt i64 %256, 0
  br i1 %257, label %252, label %258

258:                                              ; preds = %252, %245
  %259 = phi i64 [ %250, %245 ], [ %256, %252 ]
  %260 = phi i64 [ %247, %245 ], [ %255, %252 ]
  %261 = shl i64 %259, 32
  %262 = icmp ugt i64 %235, %261
  br i1 %262, label %263, label %265

263:                                              ; preds = %258
  %264 = udiv i64 %261, %238
  br label %265

265:                                              ; preds = %263, %258
  %266 = phi i64 [ %264, %263 ], [ 4294967295, %258 ]
  %267 = or i64 %266, %260
  br label %268

268:                                              ; preds = %240, %265
  %269 = phi i64 [ %267, %265 ], [ -1, %240 ]
  %270 = sub i64 %269, 2
  %271 = icmp ult i64 %269, 2
  %272 = select i1 %271, i64 0, i64 %270
  br i1 %243, label %273, label %276

273:                                              ; preds = %268
  %274 = mul i64 %239, %272
  %275 = add nsw i32 %241, -62
  br label %240

276:                                              ; preds = %268
  %277 = sub i32 0, %241
  %278 = zext i32 %277 to i64
  %279 = lshr i64 %272, %278
  %280 = trunc i64 %279 to i32
  %281 = shl i32 %190, 6
  %282 = lshr i64 %242, 33
  %283 = add nsw i32 %241, 63
  %284 = zext i32 %283 to i64
  %285 = shl i64 %282, %284
  %286 = mul i32 %281, %280
  %287 = trunc i64 %285 to i32
  %288 = sub i32 %287, %286
  br label %289

289:                                              ; preds = %206, %221, %276
  %290 = phi i32 [ %220, %206 ], [ %225, %221 ], [ %288, %276 ]
  %291 = phi i32 [ %215, %206 ], [ %227, %221 ], [ %281, %276 ]
  %292 = phi i32 [ %213, %206 ], [ %224, %221 ], [ %280, %276 ]
  br label %293

293:                                              ; preds = %293, %289
  %294 = phi i32 [ %290, %289 ], [ %297, %293 ]
  %295 = phi i32 [ %292, %289 ], [ %296, %293 ]
  %296 = add i32 %295, 1
  %297 = sub i32 %294, %291
  %298 = icmp sgt i32 %297, -1
  br i1 %298, label %293, label %299

299:                                              ; preds = %293
  %300 = add i32 %297, %294
  %301 = icmp slt i32 %300, 0
  br i1 %301, label %307, label %302

302:                                              ; preds = %299
  %303 = icmp ne i32 %300, 0
  %304 = and i32 %296, 1
  %305 = icmp eq i32 %304, 0
  %306 = or i1 %303, %305
  br i1 %306, label %310, label %307

307:                                              ; preds = %299, %302
  %308 = lshr i32 %294, 31
  %309 = icmp slt i32 %294, 0
  br i1 %309, label %310, label %314

310:                                              ; preds = %302, %307
  %311 = phi i32 [ %308, %307 ], [ 1, %302 ]
  %312 = phi i32 [ %294, %307 ], [ %297, %302 ]
  %313 = sub i32 0, %312
  br label %314

314:                                              ; preds = %310, %307
  %315 = phi i32 [ %311, %310 ], [ %308, %307 ]
  %316 = phi i32 [ %313, %310 ], [ %294, %307 ]
  %317 = xor i32 %315, %36
  %318 = trunc i32 %317 to i8
  %ctlz.sh56 = lshr i32 %316, 1
  %ctlz.step57 = or i32 %316, %ctlz.sh56
  %ctlz.sh58 = lshr i32 %ctlz.step57, 2
  %ctlz.step59 = or i32 %ctlz.step57, %ctlz.sh58
  %ctlz.sh60 = lshr i32 %ctlz.step59, 4
  %ctlz.step61 = or i32 %ctlz.step59, %ctlz.sh60
  %ctlz.sh62 = lshr i32 %ctlz.step61, 8
  %ctlz.step63 = or i32 %ctlz.step61, %ctlz.sh62
  %ctlz.sh64 = lshr i32 %ctlz.step63, 16
  %ctlz.step65 = or i32 %ctlz.step63, %ctlz.sh64
  %319 = xor i32 %ctlz.step65, -1
  %cppop.and166 = and i32 %319, 1431655765
  %ctpop.sh67 = lshr i32 %319, 1
  %cppop.and268 = and i32 %ctpop.sh67, 1431655765
  %ctpop.step69 = add i32 %cppop.and166, %cppop.and268
  %cppop.and170 = and i32 %ctpop.step69, 858993459
  %ctpop.sh71 = lshr i32 %ctpop.step69, 2
  %cppop.and272 = and i32 %ctpop.sh71, 858993459
  %ctpop.step73 = add i32 %cppop.and170, %cppop.and272
  %cppop.and174 = and i32 %ctpop.step73, 252645135
  %ctpop.sh75 = lshr i32 %ctpop.step73, 4
  %cppop.and276 = and i32 %ctpop.sh75, 252645135
  %ctpop.step77 = add i32 %cppop.and174, %cppop.and276
  %cppop.and178 = and i32 %ctpop.step77, 16711935
  %ctpop.sh79 = lshr i32 %ctpop.step77, 8
  %cppop.and280 = and i32 %ctpop.sh79, 16711935
  %ctpop.step81 = add i32 %cppop.and178, %cppop.and280
  %cppop.and182 = and i32 %ctpop.step81, 65535
  %ctpop.sh83 = lshr i32 %ctpop.step81, 16
  %cppop.and284 = and i32 %ctpop.sh83, 65535
  %ctpop.step85 = add i32 %cppop.and182, %cppop.and284
  %ctpop.part86 = add i32 %ctpop.step85, 0
  %320 = add nsw i32 %ctpop.part86, -1
  %321 = sub nsw i32 %175, %320
  %322 = shl i32 %316, %320
  %323 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %318, i32 %321, i32 %322, %struct.float_status* %2) #23
  br label %324

324:                                              ; preds = %157, %151, %130, %95, %89, %68, %196, %178, %107, %314, %165, %101
  %325 = phi i32 [ -4194304, %101 ], [ -4194304, %165 ], [ %323, %314 ], [ %31, %107 ], [ %31, %178 ], [ %31, %196 ], [ %94, %89 ], [ %100, %95 ], [ -4194304, %68 ], [ %156, %151 ], [ %162, %157 ], [ -4194304, %130 ]
  ret i32 %325
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.usub.sat.i64(i64, i64) #14

; Function Attrs: nounwind uwtable
define i32 @float32_muladd(i32 %0, i32 %1, i32 %2, i32 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %44, label %9

9:                                                ; preds = %5
  %10 = and i32 %0, 2139095040
  %11 = icmp ne i32 %10, 0
  %12 = and i32 %0, 8388607
  %13 = icmp eq i32 %12, 0
  %14 = or i1 %11, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = or i8 %17, 64
  store i8 %18, i8* %16, align 1
  %19 = and i32 %0, -2147483648
  br label %20

20:                                               ; preds = %9, %15
  %21 = phi i32 [ %0, %9 ], [ %19, %15 ]
  %22 = and i32 %1, 2139095040
  %23 = icmp ne i32 %22, 0
  %24 = and i32 %1, 8388607
  %25 = icmp eq i32 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %29 = load i8, i8* %28, align 1
  %30 = or i8 %29, 64
  store i8 %30, i8* %28, align 1
  %31 = and i32 %1, -2147483648
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi i32 [ %1, %20 ], [ %31, %27 ]
  %34 = and i32 %2, 2139095040
  %35 = icmp ne i32 %34, 0
  %36 = and i32 %2, 8388607
  %37 = icmp eq i32 %36, 0
  %38 = or i1 %35, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 64
  store i8 %42, i8* %40, align 1
  %43 = and i32 %2, -2147483648
  br label %44

44:                                               ; preds = %5, %32, %39
  %45 = phi i32 [ %33, %39 ], [ %33, %32 ], [ %1, %5 ]
  %46 = phi i32 [ %21, %39 ], [ %21, %32 ], [ %0, %5 ]
  %47 = phi i32 [ %43, %39 ], [ %2, %32 ], [ %2, %5 ]
  %48 = and i32 %46, 8388607
  %49 = lshr i32 %46, 23
  %50 = and i32 %49, 255
  %51 = and i32 %45, 8388607
  %52 = lshr i32 %45, 23
  %53 = and i32 %52, 255
  %54 = and i32 %47, 8388607
  %55 = lshr i32 %47, 23
  %56 = and i32 %55, 255
  %57 = lshr i32 %47, 31
  %58 = or i32 %50, %48
  %59 = icmp eq i32 %53, 255
  %60 = or i32 %58, %51
  %61 = icmp eq i32 %60, 0
  %62 = and i1 %59, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %44
  %64 = icmp eq i32 %50, 255
  %65 = or i32 %53, %51
  %66 = or i32 %65, %48
  %67 = icmp eq i32 %66, 0
  %68 = and i1 %64, %67
  br label %69

69:                                               ; preds = %63, %44
  %70 = phi i1 [ true, %44 ], [ %68, %63 ]
  %71 = icmp eq i32 %50, 255
  %72 = icmp ne i32 %48, 0
  %73 = and i1 %72, %71
  %74 = icmp ne i32 %51, 0
  %75 = and i1 %74, %59
  %76 = or i1 %75, %73
  br i1 %76, label %81, label %77

77:                                               ; preds = %69
  %78 = icmp eq i32 %56, 255
  %79 = icmp ne i32 %54, 0
  %80 = and i1 %79, %78
  br i1 %80, label %81, label %134

81:                                               ; preds = %77, %69
  %82 = shl i32 %46, 1
  %83 = icmp ugt i32 %82, -8388609
  %84 = and i32 %46, 2143289344
  %85 = icmp eq i32 %84, 2139095040
  %86 = and i32 %46, 4194303
  %87 = icmp ne i32 %86, 0
  %88 = and i1 %85, %87
  %89 = shl i32 %45, 1
  %90 = icmp ugt i32 %89, -8388609
  %91 = and i32 %45, 2143289344
  %92 = icmp eq i32 %91, 2139095040
  %93 = and i32 %45, 4194303
  %94 = icmp ne i32 %93, 0
  %95 = and i1 %92, %94
  %96 = and i32 %47, 2143289344
  %97 = icmp eq i32 %96, 2139095040
  %98 = and i32 %47, 4194303
  %99 = icmp ne i32 %98, 0
  %100 = and i1 %97, %99
  %101 = or i1 %95, %88
  %102 = or i1 %101, %100
  br i1 %102, label %103, label %107

103:                                              ; preds = %81
  %104 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %105, 1
  store i8 %106, i8* %104, align 1
  br label %107

107:                                              ; preds = %103, %81
  %108 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %377

111:                                              ; preds = %107
  %112 = or i1 %90, %95
  %113 = or i1 %83, %88
  %114 = select i1 %112, i32 1, i32 2
  %115 = select i1 %113, i32 0, i32 %114
  switch i32 %115, label %377 [
    i32 0, label %116
    i32 1, label %122
    i32 2, label %128
  ]

116:                                              ; preds = %111
  %117 = icmp ne i32 %84, 2139095040
  %118 = icmp eq i32 %86, 0
  %119 = or i1 %118, %117
  %120 = or i32 %46, 4194304
  %121 = select i1 %119, i32 %46, i32 %120
  br label %377

122:                                              ; preds = %111
  %123 = icmp ne i32 %91, 2139095040
  %124 = icmp eq i32 %93, 0
  %125 = or i1 %124, %123
  %126 = or i32 %45, 4194304
  %127 = select i1 %125, i32 %45, i32 %126
  br label %377

128:                                              ; preds = %111
  %129 = icmp ne i32 %96, 2139095040
  %130 = icmp eq i32 %98, 0
  %131 = or i1 %130, %129
  %132 = or i32 %47, 4194304
  %133 = select i1 %131, i32 %47, i32 %132
  br label %377

134:                                              ; preds = %77
  br i1 %70, label %135, label %139

135:                                              ; preds = %134
  %136 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %137 = load i8, i8* %136, align 1
  %138 = or i8 %137, 1
  store i8 %138, i8* %136, align 1
  br label %377

139:                                              ; preds = %134
  %140 = and i32 %3, 1
  %141 = xor i32 %57, %140
  %142 = trunc i32 %141 to i8
  %143 = and i32 %3, 3
  %144 = icmp ne i32 %143, 0
  %145 = xor i32 %46, %45
  %146 = lshr i32 %145, 31
  %147 = lshr i32 %3, 1
  %148 = and i32 %147, 1
  %149 = xor i32 %146, %148
  %150 = trunc i32 %149 to i8
  %151 = or i1 %59, %71
  %152 = icmp eq i32 %58, 0
  %153 = or i32 %53, %51
  %154 = icmp eq i32 %153, 0
  %155 = or i1 %154, %152
  br i1 %78, label %156, label %169

156:                                              ; preds = %139
  %157 = xor i1 %151, true
  %158 = icmp eq i8 %150, %142
  %159 = or i1 %158, %157
  br i1 %159, label %164, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %162 = load i8, i8* %161, align 1
  %163 = or i8 %162, 1
  store i8 %163, i8* %161, align 1
  br label %377

164:                                              ; preds = %156
  %165 = zext i1 %144 to i32
  %166 = xor i32 %141, %165
  %167 = shl nuw i32 %166, 31
  %168 = or i32 %167, 2139095040
  br label %377

169:                                              ; preds = %139
  br i1 %151, label %170, label %175

170:                                              ; preds = %169
  %171 = zext i1 %144 to i32
  %172 = xor i32 %149, %171
  %173 = shl nuw i32 %172, 31
  %174 = or i32 %173, 2139095040
  br label %377

175:                                              ; preds = %169
  br i1 %155, label %176, label %206

176:                                              ; preds = %175
  %177 = icmp eq i32 %56, 0
  br i1 %177, label %178, label %203

178:                                              ; preds = %176
  %179 = icmp eq i32 %54, 0
  br i1 %179, label %180, label %192

180:                                              ; preds = %178
  %181 = icmp eq i8 %150, %142
  br i1 %181, label %187, label %182

182:                                              ; preds = %180
  %183 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i8 %184, 1
  %186 = zext i1 %185 to i32
  br label %187

187:                                              ; preds = %182, %180
  %188 = phi i32 [ %149, %180 ], [ %186, %182 ]
  %189 = zext i1 %144 to i32
  %190 = xor i32 %188, %189
  %191 = shl i32 %190, 31
  br label %377

192:                                              ; preds = %178
  %193 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 4
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %203, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %198 = load i8, i8* %197, align 1
  %199 = or i8 %198, -128
  store i8 %199, i8* %197, align 1
  %200 = zext i1 %144 to i32
  %201 = xor i32 %141, %200
  %202 = shl nuw i32 %201, 31
  br label %377

203:                                              ; preds = %192, %176
  %204 = select i1 %144, i32 -2147483648, i32 0
  %205 = xor i32 %47, %204
  br label %377

206:                                              ; preds = %175
  %207 = icmp eq i32 %50, 0
  %ctlz.sh = lshr i32 %48, 1
  %ctlz.step = or i32 %48, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %208 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %208, 1431655765
  %ctpop.sh = lshr i32 %208, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %209 = add nsw i32 %ctpop.part, -8
  %210 = shl i32 %48, %209
  %211 = sub nsw i32 9, %ctpop.part
  %212 = select i1 %207, i32 %211, i32 %50
  %213 = select i1 %207, i32 %210, i32 %48
  %214 = icmp eq i32 %53, 0
  %ctlz.sh25 = lshr i32 %51, 1
  %ctlz.step26 = or i32 %51, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %215 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %215, 1431655765
  %ctpop.sh36 = lshr i32 %215, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %216 = add nsw i32 %ctpop.part55, -8
  %217 = shl i32 %51, %216
  %218 = sub nsw i32 9, %ctpop.part55
  %219 = select i1 %214, i32 %218, i32 %53
  %220 = select i1 %214, i32 %217, i32 %51
  %221 = add nsw i32 %219, %212
  %222 = shl i32 %213, 7
  %223 = or i32 %222, 1073741824
  %224 = shl i32 %220, 8
  %225 = or i32 %224, -2147483648
  %226 = zext i32 %223 to i64
  %227 = zext i32 %225 to i64
  %228 = mul nuw i64 %227, %226
  %229 = shl i64 %228, 1
  %230 = icmp sgt i64 %229, -1
  %231 = select i1 %230, i64 %229, i64 %228
  %232 = select i1 %230, i32 -127, i32 -126
  %233 = add nsw i32 %221, %232
  %234 = zext i1 %144 to i8
  %235 = xor i8 %150, %234
  %236 = icmp eq i32 %56, 0
  br i1 %236, label %237, label %253

237:                                              ; preds = %206
  %238 = icmp eq i32 %54, 0
  br i1 %238, label %239, label %248

239:                                              ; preds = %237
  %240 = lshr i64 %231, 32
  %241 = and i64 %231, 4294967294
  %242 = icmp ne i64 %241, 0
  %243 = zext i1 %242 to i64
  %244 = or i64 %240, %243
  %245 = trunc i64 %244 to i32
  %246 = add nsw i32 %233, -1
  %247 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %235, i32 %246, i32 %245, %struct.float_status* nonnull %4)
  br label %377

248:                                              ; preds = %237
  %ctlz.sh56 = lshr i32 %54, 1
  %ctlz.step57 = or i32 %54, %ctlz.sh56
  %ctlz.sh58 = lshr i32 %ctlz.step57, 2
  %ctlz.step59 = or i32 %ctlz.step57, %ctlz.sh58
  %ctlz.sh60 = lshr i32 %ctlz.step59, 4
  %ctlz.step61 = or i32 %ctlz.step59, %ctlz.sh60
  %ctlz.sh62 = lshr i32 %ctlz.step61, 8
  %ctlz.step63 = or i32 %ctlz.step61, %ctlz.sh62
  %ctlz.sh64 = lshr i32 %ctlz.step63, 16
  %ctlz.step65 = or i32 %ctlz.step63, %ctlz.sh64
  %249 = xor i32 %ctlz.step65, -1
  %cppop.and166 = and i32 %249, 1431655765
  %ctpop.sh67 = lshr i32 %249, 1
  %cppop.and268 = and i32 %ctpop.sh67, 1431655765
  %ctpop.step69 = add i32 %cppop.and166, %cppop.and268
  %cppop.and170 = and i32 %ctpop.step69, 858993459
  %ctpop.sh71 = lshr i32 %ctpop.step69, 2
  %cppop.and272 = and i32 %ctpop.sh71, 858993459
  %ctpop.step73 = add i32 %cppop.and170, %cppop.and272
  %cppop.and174 = and i32 %ctpop.step73, 252645135
  %ctpop.sh75 = lshr i32 %ctpop.step73, 4
  %cppop.and276 = and i32 %ctpop.sh75, 252645135
  %ctpop.step77 = add i32 %cppop.and174, %cppop.and276
  %cppop.and178 = and i32 %ctpop.step77, 16711935
  %ctpop.sh79 = lshr i32 %ctpop.step77, 8
  %cppop.and280 = and i32 %ctpop.sh79, 16711935
  %ctpop.step81 = add i32 %cppop.and178, %cppop.and280
  %cppop.and182 = and i32 %ctpop.step81, 65535
  %ctpop.sh83 = lshr i32 %ctpop.step81, 16
  %cppop.and284 = and i32 %ctpop.sh83, 65535
  %ctpop.step85 = add i32 %cppop.and182, %cppop.and284
  %ctpop.part86 = add i32 %ctpop.step85, 0
  %250 = add nsw i32 %ctpop.part86, -8
  %251 = shl i32 %54, %250
  %252 = sub nsw i32 9, %ctpop.part86
  br label %253

253:                                              ; preds = %248, %206
  %254 = phi i32 [ %252, %248 ], [ %56, %206 ]
  %255 = phi i32 [ %251, %248 ], [ %54, %206 ]
  %256 = zext i32 %255 to i64
  %257 = shl i64 %256, 39
  %258 = or i64 %257, 4611686018427387904
  %259 = sub nsw i32 %233, %254
  %260 = icmp eq i8 %150, %142
  %261 = icmp sgt i32 %259, 0
  br i1 %260, label %262, label %304

262:                                              ; preds = %253
  br i1 %261, label %263, label %275

263:                                              ; preds = %262
  %264 = icmp slt i32 %259, 64
  br i1 %264, label %265, label %292

265:                                              ; preds = %263
  %266 = zext i32 %259 to i64
  %267 = lshr i64 %258, %266
  %268 = sub nsw i32 0, %259
  %269 = and i32 %268, 63
  %270 = zext i32 %269 to i64
  %271 = shl i64 %258, %270
  %272 = icmp ne i64 %271, 0
  %273 = zext i1 %272 to i64
  %274 = or i64 %267, %273
  br label %292

275:                                              ; preds = %262
  %276 = icmp slt i32 %259, 0
  br i1 %276, label %277, label %292

277:                                              ; preds = %275
  %278 = icmp sgt i32 %259, -64
  br i1 %278, label %279, label %289

279:                                              ; preds = %277
  %280 = sub nsw i32 0, %259
  %281 = zext i32 %280 to i64
  %282 = lshr i64 %231, %281
  %283 = and i32 %259, 63
  %284 = zext i32 %283 to i64
  %285 = shl i64 %231, %284
  %286 = icmp ne i64 %285, 0
  %287 = zext i1 %286 to i64
  %288 = or i64 %282, %287
  br label %292

289:                                              ; preds = %277
  %290 = icmp ne i64 %231, 0
  %291 = zext i1 %290 to i64
  br label %292

292:                                              ; preds = %289, %279, %265, %263, %275
  %293 = phi i64 [ %231, %275 ], [ %231, %263 ], [ %231, %265 ], [ %288, %279 ], [ %291, %289 ]
  %294 = phi i64 [ %258, %275 ], [ 1, %263 ], [ %274, %265 ], [ %258, %279 ], [ %258, %289 ]
  %295 = phi i32 [ %254, %275 ], [ %233, %263 ], [ %233, %265 ], [ %254, %279 ], [ %254, %289 ]
  %296 = add i64 %294, %293
  %297 = icmp slt i64 %296, 0
  br i1 %297, label %298, label %302

298:                                              ; preds = %292
  %299 = lshr i64 %296, 1
  %300 = and i64 %296, 1
  %301 = or i64 %299, %300
  br label %366

302:                                              ; preds = %292
  %303 = add nsw i32 %295, -1
  br label %366

304:                                              ; preds = %253
  br i1 %261, label %305, label %320

305:                                              ; preds = %304
  %306 = icmp slt i32 %259, 64
  br i1 %306, label %307, label %317

307:                                              ; preds = %305
  %308 = zext i32 %259 to i64
  %309 = lshr i64 %258, %308
  %310 = sub nsw i32 0, %259
  %311 = and i32 %310, 63
  %312 = zext i32 %311 to i64
  %313 = shl i64 %258, %312
  %314 = icmp ne i64 %313, 0
  %315 = zext i1 %314 to i64
  %316 = or i64 %309, %315
  br label %317

317:                                              ; preds = %305, %307
  %318 = phi i64 [ %316, %307 ], [ 1, %305 ]
  %319 = sub i64 %231, %318
  br label %356

320:                                              ; preds = %304
  %321 = icmp slt i32 %259, 0
  br i1 %321, label %322, label %341

322:                                              ; preds = %320
  %323 = icmp sgt i32 %259, -64
  br i1 %323, label %324, label %334

324:                                              ; preds = %322
  %325 = sub nsw i32 0, %259
  %326 = zext i32 %325 to i64
  %327 = lshr i64 %231, %326
  %328 = and i32 %259, 63
  %329 = zext i32 %328 to i64
  %330 = shl i64 %231, %329
  %331 = icmp ne i64 %330, 0
  %332 = zext i1 %331 to i64
  %333 = or i64 %327, %332
  br label %337

334:                                              ; preds = %322
  %335 = icmp ne i64 %231, 0
  %336 = zext i1 %335 to i64
  br label %337

337:                                              ; preds = %324, %334
  %338 = phi i64 [ %333, %324 ], [ %336, %334 ]
  %339 = sub i64 %258, %338
  %340 = xor i8 %235, 1
  br label %356

341:                                              ; preds = %320
  %342 = icmp ult i64 %258, %231
  br i1 %342, label %343, label %345

343:                                              ; preds = %341
  %344 = sub i64 %231, %258
  br label %356

345:                                              ; preds = %341
  %346 = icmp ult i64 %231, %258
  br i1 %346, label %347, label %350

347:                                              ; preds = %345
  %348 = sub i64 %258, %231
  %349 = xor i8 %235, 1
  br label %356

350:                                              ; preds = %345
  %351 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 1
  %354 = xor i1 %144, %353
  %355 = select i1 %354, i32 -2147483648, i32 0
  br label %377

356:                                              ; preds = %337, %347, %343, %317
  %357 = phi i64 [ %319, %317 ], [ %339, %337 ], [ %344, %343 ], [ %348, %347 ]
  %358 = phi i32 [ %233, %317 ], [ %254, %337 ], [ %233, %343 ], [ %233, %347 ]
  %359 = phi i8 [ %235, %317 ], [ %340, %337 ], [ %235, %343 ], [ %349, %347 ]
  %ctlz.sh87 = lshr i64 %357, 1
  %ctlz.step88 = or i64 %357, %ctlz.sh87
  %ctlz.sh89 = lshr i64 %ctlz.step88, 2
  %ctlz.step90 = or i64 %ctlz.step88, %ctlz.sh89
  %ctlz.sh91 = lshr i64 %ctlz.step90, 4
  %ctlz.step92 = or i64 %ctlz.step90, %ctlz.sh91
  %ctlz.sh93 = lshr i64 %ctlz.step92, 8
  %ctlz.step94 = or i64 %ctlz.step92, %ctlz.sh93
  %ctlz.sh95 = lshr i64 %ctlz.step94, 16
  %ctlz.step96 = or i64 %ctlz.step94, %ctlz.sh95
  %ctlz.sh97 = lshr i64 %ctlz.step96, 32
  %ctlz.step98 = or i64 %ctlz.step96, %ctlz.sh97
  %360 = xor i64 %ctlz.step98, -1
  %cppop.and199 = and i64 %360, 6148914691236517205
  %ctpop.sh100 = lshr i64 %360, 1
  %cppop.and2101 = and i64 %ctpop.sh100, 6148914691236517205
  %ctpop.step102 = add i64 %cppop.and199, %cppop.and2101
  %cppop.and1103 = and i64 %ctpop.step102, 3689348814741910323
  %ctpop.sh104 = lshr i64 %ctpop.step102, 2
  %cppop.and2105 = and i64 %ctpop.sh104, 3689348814741910323
  %ctpop.step106 = add i64 %cppop.and1103, %cppop.and2105
  %cppop.and1107 = and i64 %ctpop.step106, 1085102592571150095
  %ctpop.sh108 = lshr i64 %ctpop.step106, 4
  %cppop.and2109 = and i64 %ctpop.sh108, 1085102592571150095
  %ctpop.step110 = add i64 %cppop.and1107, %cppop.and2109
  %cppop.and1111 = and i64 %ctpop.step110, 71777214294589695
  %ctpop.sh112 = lshr i64 %ctpop.step110, 8
  %cppop.and2113 = and i64 %ctpop.sh112, 71777214294589695
  %ctpop.step114 = add i64 %cppop.and1111, %cppop.and2113
  %cppop.and1115 = and i64 %ctpop.step114, 281470681808895
  %ctpop.sh116 = lshr i64 %ctpop.step114, 16
  %cppop.and2117 = and i64 %ctpop.sh116, 281470681808895
  %ctpop.step118 = add i64 %cppop.and1115, %cppop.and2117
  %cppop.and1119 = and i64 %ctpop.step118, 4294967295
  %ctpop.sh120 = lshr i64 %ctpop.step118, 32
  %cppop.and2121 = and i64 %ctpop.sh120, 4294967295
  %ctpop.step122 = add i64 %cppop.and1119, %cppop.and2121
  %ctpop.part123 = add i64 %ctpop.step122, 0
  %361 = trunc i64 %ctpop.part123 to i32
  %362 = add nuw nsw i64 %ctpop.part123, 4294967295
  %363 = and i64 %362, 4294967295
  %364 = shl i64 %357, %363
  %365 = sub nsw i32 %358, %361
  br label %366

366:                                              ; preds = %298, %302, %356
  %367 = phi i64 [ %301, %298 ], [ %296, %302 ], [ %364, %356 ]
  %368 = phi i32 [ %295, %298 ], [ %303, %302 ], [ %365, %356 ]
  %369 = phi i8 [ %235, %298 ], [ %235, %302 ], [ %359, %356 ]
  %370 = lshr i64 %367, 32
  %371 = and i64 %367, 4294967295
  %372 = icmp ne i64 %371, 0
  %373 = zext i1 %372 to i64
  %374 = or i64 %370, %373
  %375 = trunc i64 %374 to i32
  %376 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %369, i32 %368, i32 %375, %struct.float_status* nonnull %4)
  br label %377

377:                                              ; preds = %128, %122, %116, %111, %107, %366, %350, %239, %203, %196, %187, %170, %164, %160, %135
  %378 = phi i32 [ -4194304, %135 ], [ -4194304, %160 ], [ %168, %164 ], [ %174, %170 ], [ %191, %187 ], [ %202, %196 ], [ %205, %203 ], [ %376, %366 ], [ %355, %350 ], [ %247, %239 ], [ %133, %128 ], [ %127, %122 ], [ %121, %116 ], [ -4194304, %107 ], [
  ret i32 %378
}

; Function Attrs: nounwind uwtable
define i32 @float32_sqrt(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 255
  br i1 %22, label %23, label %55

23:                                               ; preds = %17
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %49, label %25

25:                                               ; preds = %23
  %26 = shl i32 %18, 1
  %27 = icmp ugt i32 %26, -8388609
  %28 = and i32 %18, 2143289344
  %29 = icmp eq i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp ne i32 %30, 0
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %33, %25
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %162

41:                                               ; preds = %37
  %42 = or i1 %27, %32
  br i1 %42, label %43, label %162

43:                                               ; preds = %41
  %44 = icmp ne i32 %28, 2139095040
  %45 = icmp eq i32 %30, 0
  %46 = or i1 %45, %44
  %47 = or i32 %18, 4194304
  %48 = select i1 %46, i32 %18, i32 %47
  br label %162

49:                                               ; preds = %23
  %50 = icmp sgt i32 %18, -1
  br i1 %50, label %162, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 1
  store i8 %54, i8* %52, align 1
  br label %162

55:                                               ; preds = %17
  %56 = icmp sgt i32 %18, -1
  br i1 %56, label %64, label %57

57:                                               ; preds = %55
  %58 = or i32 %21, %19
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %162, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %62 = load i8, i8* %61, align 1
  %63 = or i8 %62, 1
  store i8 %63, i8* %61, align 1
  br label %162

64:                                               ; preds = %55
  %65 = icmp eq i32 %21, 0
  br i1 %65, label %66, label %73

66:                                               ; preds = %64
  %67 = icmp eq i32 %19, 0
  br i1 %67, label %162, label %68

68:                                               ; preds = %66
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %69 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %69, 1431655765
  %ctpop.sh = lshr i32 %69, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %70 = add nsw i32 %ctpop.part, -8
  %71 = shl i32 %19, %70
  %72 = sub nsw i32 9, %ctpop.part
  br label %73

73:                                               ; preds = %68, %64
  %74 = phi i32 [ %72, %68 ], [ %21, %64 ]
  %75 = phi i32 [ %71, %68 ], [ %19, %64 ]
  %76 = add nsw i32 %74, -127
  %77 = ashr i32 %76, 1
  %78 = add nsw i32 %77, 126
  %79 = shl i32 %75, 8
  %80 = or i32 %79, -2147483648
  %81 = lshr i32 %75, 19
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 15
  %84 = and i32 %74, 1
  %85 = icmp eq i32 %84, 0
  %86 = lshr i32 %80, 17
  br i1 %85, label %99, label %87

87:                                               ; preds = %73
  %88 = add nuw nsw i32 %86, 16384
  %89 = zext i8 %83 to i64
  %90 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = sub nsw i32 %88, %92
  %94 = udiv i32 %80, %93
  %95 = shl i32 %94, 14
  %96 = shl nsw i32 %93, 15
  %97 = add i32 %96, %95
  %98 = lshr exact i32 %80, 1
  br label %114

99:                                               ; preds = %73
  %100 = or i32 %86, 32768
  %101 = zext i8 %83 to i64
  %102 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = sub nsw i32 %100, %104
  %106 = udiv i32 %80, %105
  %107 = add i32 %105, %106
  %108 = icmp ugt i32 %107, 131071
  %109 = shl i32 %107, 15
  %110 = select i1 %108, i32 -32768, i32 %109
  %111 = icmp ugt i32 %110, %80
  br i1 %111, label %114, label %112

112:                                              ; preds = %99
  %113 = ashr exact i32 %80, 1
  br label %124

114:                                              ; preds = %99, %87
  %115 = phi i32 [ %98, %87 ], [ %80, %99 ]
  %116 = phi i32 [ %97, %87 ], [ %110, %99 ]
  %117 = zext i32 %115 to i64
  %118 = shl nuw nsw i64 %117, 31
  %119 = zext i32 %116 to i64
  %120 = udiv i64 %118, %119
  %121 = trunc i64 %120 to i32
  %122 = lshr i32 %116, 1
  %123 = add i32 %122, %121
  br label %124

124:                                              ; preds = %112, %114
  %125 = phi i32 [ %123, %114 ], [ %113, %112 ]
  %126 = add i32 %125, 2
  %127 = and i32 %126, 126
  %128 = icmp ult i32 %127, 6
  br i1 %128, label %129, label %154

129:                                              ; preds = %124
  %130 = icmp ugt i32 %125, -3
  br i1 %130, label %159, label %131

131:                                              ; preds = %129
  %132 = lshr i32 %80, %84
  %133 = zext i32 %126 to i64
  %134 = mul nuw i64 %133, %133
  %135 = zext i32 %132 to i64
  %136 = shl nuw i64 %135, 32
  %137 = sub i64 %136, %134
  %138 = icmp slt i64 %137, 0
  br i1 %138, label %139, label %148

139:                                              ; preds = %131, %139
  %140 = phi i64 [ %146, %139 ], [ %137, %131 ]
  %141 = phi i32 [ %142, %139 ], [ %126, %131 ]
  %142 = add i32 %141, -1
  %143 = zext i32 %142 to i64
  %144 = shl nuw nsw i64 %143, 1
  %145 = or i64 %144, 1
  %146 = add i64 %145, %140
  %147 = icmp slt i64 %146, 0
  br i1 %147, label %139, label %148

148:                                              ; preds = %139, %131
  %149 = phi i32 [ %126, %131 ], [ %142, %139 ]
  %150 = phi i64 [ %137, %131 ], [ %146, %139 ]
  %151 = icmp ne i64 %150, 0
  %152 = zext i1 %151 to i32
  %153 = or i32 %149, %152
  br label %154

154:                                              ; preds = %148, %124
  %155 = phi i32 [ %153, %148 ], [ %126, %124 ]
  %156 = lshr i32 %155, 1
  %157 = and i32 %155, 1
  %158 = or i32 %156, %157
  br label %159

159:                                              ; preds = %129, %154
  %160 = phi i32 [ %158, %154 ], [ 2147483647, %129 ]
  %161 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext 0, i32 %78, i32 %160, %struct.float_status* %1)
  br label %162

162:                                              ; preds = %41, %43, %37, %66, %57, %49, %159, %60, %51
  %163 = phi i32 [ -4194304, %51 ], [ -4194304, %60 ], [ %161, %159 ], [ %18, %49 ], [ %18, %57 ], [ 0, %66 ], [ %48, %43 ], [ -4194304, %37 ], [ 0, %41 ]
  ret i32 %163
}

; Function Attrs: nounwind uwtable
define i32 @float32_exp2(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 255
  br i1 %22, label %23, label %52

23:                                               ; preds = %17
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %49, label %25

25:                                               ; preds = %23
  %26 = shl i32 %18, 1
  %27 = icmp ugt i32 %26, -8388609
  %28 = and i32 %18, 2143289344
  %29 = icmp eq i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp ne i32 %30, 0
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %33, %25
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %110

41:                                               ; preds = %37
  %42 = or i1 %27, %32
  br i1 %42, label %43, label %110

43:                                               ; preds = %41
  %44 = icmp ne i32 %28, 2139095040
  %45 = icmp eq i32 %30, 0
  %46 = or i1 %45, %44
  %47 = or i32 %18, 4194304
  %48 = select i1 %46, i32 %18, i32 %47
  br label %110

49:                                               ; preds = %23
  %50 = icmp sgt i32 %18, 0
  %51 = select i1 %50, i32 %18, i32 0
  br label %110

52:                                               ; preds = %17
  %53 = or i32 %21, %19
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %110, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  %59 = tail call i64 @float32_to_float64(i32 %18, %struct.float_status* nonnull %1)
  %60 = tail call i64 @float64_mul(i64 %59, i64 4604418534313441775, %struct.float_status* nonnull %1)
  br label %61

61:                                               ; preds = %103, %55
  %62 = phi i64 [ 0, %55 ], [ %106, %103 ]
  %63 = phi i64 [ %60, %55 ], [ %105, %103 ]
  %64 = phi i64 [ 4607182418800017408, %55 ], [ %104, %103 ]
  %65 = getelementptr inbounds [15 x i64], [15 x i64]* @float32_exp2_coefficients, i64 0, i64 %62
  %66 = load i64, i64* %65, align 8
  %67 = tail call i64 @float64_mul(i64 %63, i64 %66, %struct.float_status* nonnull %1)
  %68 = load i8, i8* %3, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %91, label %70

70:                                               ; preds = %61
  %71 = and i64 %64, 9218868437227405312
  %72 = icmp ne i64 %71, 0
  %73 = and i64 %64, 4503599627370495
  %74 = icmp eq i64 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %80, label %76

76:                                               ; preds = %70
  %77 = load i8, i8* %56, align 1
  %78 = or i8 %77, 64
  store i8 %78, i8* %56, align 1
  %79 = and i64 %64, -9223372036854775808
  br label %80

80:                                               ; preds = %76, %70
  %81 = phi i64 [ %64, %70 ], [ %79, %76 ]
  %82 = and i64 %67, 9218868437227405312
  %83 = icmp ne i64 %82, 0
  %84 = and i64 %67, 4503599627370495
  %85 = icmp eq i64 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %80
  %88 = load i8, i8* %56, align 1
  %89 = or i8 %88, 64
  store i8 %89, i8* %56, align 1
  %90 = and i64 %67, -9223372036854775808
  br label %91

91:                                               ; preds = %87, %80, %61
  %92 = phi i64 [ %81, %87 ], [ %81, %80 ], [ %64, %61 ]
  %93 = phi i64 [ %90, %87 ], [ %67, %80 ], [ %67, %61 ]
  %94 = lshr i64 %92, 63
  %95 = trunc i64 %94 to i8
  %96 = lshr i64 %93, 63
  %97 = trunc i64 %96 to i8
  %98 = icmp eq i8 %95, %97
  br i1 %98, label %99, label %101

99:                                               ; preds = %91
  %100 = tail call fastcc i64 @addFloat64Sigs(i64 %92, i64 %93, i8 zeroext %95, %struct.float_status* nonnull %1) #23
  br label %103

101:                                              ; preds = %91
  %102 = tail call fastcc i64 @subFloat64Sigs(i64 %92, i64 %93, i8 zeroext %95, %struct.float_status* nonnull %1) #23
  br label %103

103:                                              ; preds = %99, %101
  %104 = phi i64 [ %100, %99 ], [ %102, %101 ]
  %105 = tail call i64 @float64_mul(i64 %63, i64 %60, %struct.float_status* nonnull %1)
  %106 = add nuw nsw i64 %62, 1
  %107 = icmp eq i64 %106, 15
  br i1 %107, label %108, label %61

108:                                              ; preds = %103
  %109 = tail call i32 @float64_to_float32(i64 %104, %struct.float_status* nonnull %1)
  br label %110

110:                                              ; preds = %41, %43, %37, %52, %108, %49
  %111 = phi i32 [ %51, %49 ], [ %109, %108 ], [ 1065353216, %52 ], [ %48, %43 ], [ -4194304, %37 ], [ 0, %41 ]
  ret i32 %111
}

; Function Attrs: nounwind uwtable
define i64 @float64_mul(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 4503599627370495
  %34 = lshr i64 %31, 52
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 2047
  %37 = and i64 %32, 4503599627370495
  %38 = lshr i64 %32, 52
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 2047
  %41 = xor i64 %32, %31
  %42 = lshr i64 %41, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i32 %36, 2047
  br i1 %44, label %45, label %116

45:                                               ; preds = %30
  %46 = icmp eq i64 %33, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = icmp eq i32 %40, 2047
  %49 = icmp ne i64 %37, 0
  %50 = and i1 %49, %48
  br i1 %50, label %51, label %105

51:                                               ; preds = %45, %47
  %52 = shl i64 %31, 1
  %53 = icmp ult i64 %52, -4503599627370496
  %54 = and i64 %31, 9221120237041090560
  %55 = icmp eq i64 %54, 9218868437227405312
  %56 = and i64 %31, 2251799813685247
  %57 = icmp ne i64 %56, 0
  %58 = and i1 %55, %57
  %59 = shl i64 %32, 1
  %60 = icmp ugt i64 %59, -4503599627370497
  %61 = and i64 %32, 9221120237041090560
  %62 = icmp eq i64 %61, 9218868437227405312
  %63 = and i64 %32, 2251799813685247
  %64 = icmp ne i64 %63, 0
  %65 = and i1 %62, %64
  %66 = zext i1 %65 to i8
  %67 = or i1 %58, %65
  br i1 %67, label %68, label %72

68:                                               ; preds = %51
  %69 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %70, 1
  store i8 %71, i8* %69, align 1
  br label %72

72:                                               ; preds = %68, %51
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %255

76:                                               ; preds = %72
  %77 = icmp ult i64 %52, %59
  br i1 %77, label %83, label %78

78:                                               ; preds = %76
  %79 = icmp ult i64 %59, %52
  br i1 %79, label %83, label %80

80:                                               ; preds = %78
  %81 = icmp ult i64 %31, %32
  %82 = zext i1 %81 to i8
  br label %83

83:                                               ; preds = %80, %78, %76
  %84 = phi i8 [ %82, %80 ], [ 0, %76 ], [ 1, %78 ]
  br i1 %58, label %90, label %85

85:                                               ; preds = %83
  br i1 %53, label %93, label %86

86:                                               ; preds = %85
  %87 = or i8 %84, %66
  %88 = icmp eq i8 %87, 0
  %89 = and i1 %60, %88
  br i1 %89, label %93, label %99

90:                                               ; preds = %83
  %91 = icmp eq i8 %84, 0
  %92 = select i1 %65, i1 %91, i1 %60
  br i1 %92, label %93, label %99

93:                                               ; preds = %90, %86, %85
  %94 = icmp ne i64 %61, 9218868437227405312
  %95 = icmp eq i64 %63, 0
  %96 = or i1 %95, %94
  %97 = or i64 %32, 2251799813685248
  %98 = select i1 %96, i64 %32, i64 %97
  br label %255

99:                                               ; preds = %90, %86
  %100 = icmp ne i64 %54, 9218868437227405312
  %101 = icmp eq i64 %56, 0
  %102 = or i1 %101, %100
  %103 = or i64 %31, 2251799813685248
  %104 = select i1 %102, i64 %31, i64 %103
  br label %255

105:                                              ; preds = %47
  %106 = zext i32 %40 to i64
  %107 = or i64 %37, %106
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %113

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %111, 1
  store i8 %112, i8* %110, align 1
  br label %255

113:                                              ; preds = %105
  %114 = and i64 %41, -9223372036854775808
  %115 = or i64 %114, 9218868437227405312
  br label %255

116:                                              ; preds = %30
  %117 = icmp eq i32 %40, 2047
  br i1 %117, label %118, label %185

118:                                              ; preds = %116
  %119 = icmp eq i64 %37, 0
  br i1 %119, label %174, label %120

120:                                              ; preds = %118
  %121 = shl i64 %31, 1
  %122 = icmp ult i64 %121, -4503599627370496
  %123 = and i64 %31, 9221120237041090560
  %124 = icmp eq i64 %123, 9218868437227405312
  %125 = and i64 %31, 2251799813685247
  %126 = icmp ne i64 %125, 0
  %127 = and i1 %124, %126
  %128 = shl i64 %32, 1
  %129 = icmp ugt i64 %128, -4503599627370497
  %130 = and i64 %32, 9221120237041090560
  %131 = icmp eq i64 %130, 9218868437227405312
  %132 = and i64 %32, 2251799813685247
  %133 = icmp ne i64 %132, 0
  %134 = and i1 %131, %133
  %135 = zext i1 %134 to i8
  %136 = or i1 %127, %134
  br i1 %136, label %137, label %141

137:                                              ; preds = %120
  %138 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %139 = load i8, i8* %138, align 1
  %140 = or i8 %139, 1
  store i8 %140, i8* %138, align 1
  br label %141

141:                                              ; preds = %137, %120
  %142 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %145, label %255

145:                                              ; preds = %141
  %146 = icmp ult i64 %121, %128
  br i1 %146, label %152, label %147

147:                                              ; preds = %145
  %148 = icmp ult i64 %128, %121
  br i1 %148, label %152, label %149

149:                                              ; preds = %147
  %150 = icmp ult i64 %31, %32
  %151 = zext i1 %150 to i8
  br label %152

152:                                              ; preds = %149, %147, %145
  %153 = phi i8 [ %151, %149 ], [ 0, %145 ], [ 1, %147 ]
  br i1 %127, label %159, label %154

154:                                              ; preds = %152
  br i1 %122, label %162, label %155

155:                                              ; preds = %154
  %156 = or i8 %153, %135
  %157 = icmp eq i8 %156, 0
  %158 = and i1 %129, %157
  br i1 %158, label %162, label %168

159:                                              ; preds = %152
  %160 = icmp eq i8 %153, 0
  %161 = select i1 %134, i1 %160, i1 %129
  br i1 %161, label %162, label %168

162:                                              ; preds = %159, %155, %154
  %163 = icmp ne i64 %130, 9218868437227405312
  %164 = icmp eq i64 %132, 0
  %165 = or i1 %164, %163
  %166 = or i64 %32, 2251799813685248
  %167 = select i1 %165, i64 %32, i64 %166
  br label %255

168:                                              ; preds = %159, %155
  %169 = icmp ne i64 %123, 9218868437227405312
  %170 = icmp eq i64 %125, 0
  %171 = or i1 %170, %169
  %172 = or i64 %31, 2251799813685248
  %173 = select i1 %171, i64 %31, i64 %172
  br label %255

174:                                              ; preds = %118
  %175 = zext i32 %36 to i64
  %176 = or i64 %33, %175
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %182

178:                                              ; preds = %174
  %179 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %180 = load i8, i8* %179, align 1
  %181 = or i8 %180, 1
  store i8 %181, i8* %179, align 1
  br label %255

182:                                              ; preds = %174
  %183 = and i64 %41, -9223372036854775808
  %184 = or i64 %183, 9218868437227405312
  br label %255

185:                                              ; preds = %116
  %186 = icmp eq i32 %36, 0
  br i1 %186, label %187, label %200

187:                                              ; preds = %185
  %188 = icmp eq i64 %33, 0
  br i1 %188, label %189, label %191

189:                                              ; preds = %187
  %190 = and i64 %41, -9223372036854775808
  br label %255

191:                                              ; preds = %187
  %ctlz.sh = lshr i64 %33, 1
  %ctlz.step = or i64 %33, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %192 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %192, 6148914691236517205
  %ctpop.sh = lshr i64 %192, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %193 = trunc i64 %ctpop.part to i32
  %194 = shl nuw nsw i32 %193, 24
  %195 = add nsw i32 %194, -184549376
  %196 = ashr exact i32 %195, 24
  %197 = zext i32 %196 to i64
  %198 = shl i64 %33, %197
  %199 = sub nsw i32 1, %196
  br label %200

200:                                              ; preds = %191, %185
  %201 = phi i64 [ %198, %191 ], [ %33, %185 ]
  %202 = phi i32 [ %199, %191 ], [ %36, %185 ]
  %203 = icmp eq i32 %40, 0
  br i1 %203, label %204, label %217

204:                                              ; preds = %200
  %205 = icmp eq i64 %37, 0
  br i1 %205, label %206, label %208

206:                                              ; preds = %204
  %207 = and i64 %41, -9223372036854775808
  br label %255

208:                                              ; preds = %204
  %ctlz.sh31 = lshr i64 %37, 1
  %ctlz.step32 = or i64 %37, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %209 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %209, 6148914691236517205
  %ctpop.sh44 = lshr i64 %209, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %210 = trunc i64 %ctpop.part67 to i32
  %211 = shl nuw nsw i32 %210, 24
  %212 = add nsw i32 %211, -184549376
  %213 = ashr exact i32 %212, 24
  %214 = zext i32 %213 to i64
  %215 = shl i64 %37, %214
  %216 = sub nsw i32 1, %213
  br label %217

217:                                              ; preds = %208, %200
  %218 = phi i32 [ %216, %208 ], [ %40, %200 ]
  %219 = phi i64 [ %215, %208 ], [ %37, %200 ]
  %220 = add nsw i32 %218, %202
  %221 = shl i64 %201, 10
  %222 = shl i64 %219, 11
  %223 = lshr i64 %201, 22
  %224 = and i64 %223, 3221225471
  %225 = or i64 %224, 1073741824
  %226 = lshr i64 %219, 21
  %227 = and i64 %226, 2147483647
  %228 = or i64 %227, 2147483648
  %229 = and i64 %221, 4294966272
  %230 = and i64 %222, 4294965248
  %231 = mul nuw i64 %230, %229
  %232 = mul nuw i64 %228, %229
  %233 = mul nuw i64 %230, %225
  %234 = mul nuw i64 %228, %225
  %235 = add i64 %232, %233
  %236 = icmp ult i64 %235, %233
  %237 = select i1 %236, i64 4294967296, i64 0
  %238 = lshr i64 %235, 32
  %239 = or i64 %237, %238
  %240 = add i64 %239, %234
  %241 = shl i64 %235, 32
  %242 = add i64 %241, %231
  %243 = icmp ult i64 %242, %241
  %244 = zext i1 %243 to i64
  %245 = add i64 %240, %244
  %246 = icmp ne i64 %242, 0
  %247 = zext i1 %246 to i64
  %248 = or i64 %245, %247
  %249 = shl i64 %248, 1
  %250 = icmp sgt i64 %249, -1
  %251 = select i1 %250, i64 %249, i64 %248
  %252 = select i1 %250, i32 -1024, i32 -1023
  %253 = add nsw i32 %220, %252
  %254 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %43, i32 %253, i64 %251, %struct.float_status* nonnull %2)
  br label %255

255:                                              ; preds = %168, %162, %141, %99, %93, %72, %217, %206, %189, %182, %178, %113, %109
  %256 = phi i64 [ -2251799813685248, %109 ], [ %115, %113 ], [ -2251799813685248, %178 ], [ %184, %182 ], [ %190, %189 ], [ %207, %206 ], [ %254, %217 ], [ %98, %93 ], [ %104, %99 ], [ -2251799813685248, %72 ], [ %167, %162 ], [ %173, %168 ], [ -2251799
  ret i64 %256
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @addFloat64Sigs(i64 %0, i64 %1, i8 zeroext %2, %struct.float_status* nocapture %3) unnamed_addr #13 {
  %5 = lshr i64 %0, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = lshr i64 %1, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 %7, %10
  %12 = shl i64 %0, 9
  %13 = and i64 %12, 2305843009213693440
  %14 = shl i64 %1, 9
  %15 = and i64 %14, 2305843009213693440
  %16 = icmp sgt i32 %11, 0
  br i1 %16, label %17, label %99

17:                                               ; preds = %4
  %18 = icmp eq i32 %7, 2047
  br i1 %18, label %19, label %75

19:                                               ; preds = %17
  %20 = icmp eq i64 %13, 0
  br i1 %20, label %282, label %21

21:                                               ; preds = %19
  %22 = shl i64 %0, 1
  %23 = icmp ult i64 %22, -4503599627370496
  %24 = and i64 %0, 9221120237041090560
  %25 = icmp eq i64 %24, 9218868437227405312
  %26 = and i64 %0, 2251799813685247
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %25, %27
  %29 = shl i64 %1, 1
  %30 = icmp ugt i64 %29, -4503599627370497
  %31 = and i64 %1, 9221120237041090560
  %32 = icmp eq i64 %31, 9218868437227405312
  %33 = and i64 %1, 2251799813685247
  %34 = icmp ne i64 %33, 0
  %35 = and i1 %32, %34
  %36 = zext i1 %35 to i8
  %37 = or i1 %28, %35
  br i1 %37, label %38, label %42

38:                                               ; preds = %21
  %39 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %40, 1
  store i8 %41, i8* %39, align 1
  br label %42

42:                                               ; preds = %38, %21
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %282

46:                                               ; preds = %42
  %47 = icmp ult i64 %22, %29
  br i1 %47, label %53, label %48

48:                                               ; preds = %46
  %49 = icmp ult i64 %29, %22
  br i1 %49, label %53, label %50

50:                                               ; preds = %48
  %51 = icmp ult i64 %0, %1
  %52 = zext i1 %51 to i8
  br label %53

53:                                               ; preds = %50, %48, %46
  %54 = phi i8 [ %52, %50 ], [ 0, %46 ], [ 1, %48 ]
  br i1 %28, label %60, label %55

55:                                               ; preds = %53
  br i1 %23, label %63, label %56

56:                                               ; preds = %55
  %57 = or i8 %54, %36
  %58 = icmp eq i8 %57, 0
  %59 = and i1 %30, %58
  br i1 %59, label %63, label %69

60:                                               ; preds = %53
  %61 = icmp eq i8 %54, 0
  %62 = select i1 %35, i1 %61, i1 %30
  br i1 %62, label %63, label %69

63:                                               ; preds = %60, %56, %55
  %64 = icmp ne i64 %31, 9218868437227405312
  %65 = icmp eq i64 %33, 0
  %66 = or i1 %65, %64
  %67 = or i64 %1, 2251799813685248
  %68 = select i1 %66, i64 %1, i64 %67
  br label %282

69:                                               ; preds = %60, %56
  %70 = icmp ne i64 %24, 9218868437227405312
  %71 = icmp eq i64 %26, 0
  %72 = or i1 %71, %70
  %73 = or i64 %0, 2251799813685248
  %74 = select i1 %72, i64 %0, i64 %73
  br label %282

75:                                               ; preds = %17
  %76 = icmp eq i32 %10, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %75
  %78 = or i64 %15, 2305843009213693952
  br label %82

79:                                               ; preds = %75
  %80 = add nsw i32 %11, -1
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %266, label %82

82:                                               ; preds = %77, %79
  %83 = phi i32 [ %11, %77 ], [ %80, %79 ]
  %84 = phi i64 [ %78, %77 ], [ %15, %79 ]
  %85 = icmp slt i32 %83, 64
  br i1 %85, label %86, label %96

86:                                               ; preds = %82
  %87 = zext i32 %83 to i64
  %88 = lshr i64 %84, %87
  %89 = sub nsw i32 0, %83
  %90 = and i32 %89, 63
  %91 = zext i32 %90 to i64
  %92 = shl i64 %84, %91
  %93 = icmp ne i64 %92, 0
  %94 = zext i1 %93 to i64
  %95 = or i64 %88, %94
  br label %266

96:                                               ; preds = %82
  %97 = icmp ne i64 %84, 0
  %98 = zext i1 %97 to i64
  br label %266

99:                                               ; preds = %4
  %100 = icmp slt i32 %11, 0
  br i1 %100, label %101, label %185

101:                                              ; preds = %99
  %102 = icmp eq i32 %10, 2047
  br i1 %102, label %103, label %163

103:                                              ; preds = %101
  %104 = icmp eq i64 %15, 0
  br i1 %104, label %159, label %105

105:                                              ; preds = %103
  %106 = shl i64 %0, 1
  %107 = icmp ult i64 %106, -4503599627370496
  %108 = and i64 %0, 9221120237041090560
  %109 = icmp eq i64 %108, 9218868437227405312
  %110 = and i64 %0, 2251799813685247
  %111 = icmp ne i64 %110, 0
  %112 = and i1 %109, %111
  %113 = shl i64 %1, 1
  %114 = icmp ugt i64 %113, -4503599627370497
  %115 = and i64 %1, 9221120237041090560
  %116 = icmp eq i64 %115, 9218868437227405312
  %117 = and i64 %1, 2251799813685247
  %118 = icmp ne i64 %117, 0
  %119 = and i1 %116, %118
  %120 = zext i1 %119 to i8
  %121 = or i1 %112, %119
  br i1 %121, label %122, label %126

122:                                              ; preds = %105
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %124 = load i8, i8* %123, align 1
  %125 = or i8 %124, 1
  store i8 %125, i8* %123, align 1
  br label %126

126:                                              ; preds = %122, %105
  %127 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %282

130:                                              ; preds = %126
  %131 = icmp ult i64 %106, %113
  br i1 %131, label %137, label %132

132:                                              ; preds = %130
  %133 = icmp ult i64 %113, %106
  br i1 %133, label %137, label %134

134:                                              ; preds = %132
  %135 = icmp ult i64 %0, %1
  %136 = zext i1 %135 to i8
  br label %137

137:                                              ; preds = %134, %132, %130
  %138 = phi i8 [ %136, %134 ], [ 0, %130 ], [ 1, %132 ]
  br i1 %112, label %144, label %139

139:                                              ; preds = %137
  br i1 %107, label %147, label %140

140:                                              ; preds = %139
  %141 = or i8 %138, %120
  %142 = icmp eq i8 %141, 0
  %143 = and i1 %114, %142
  br i1 %143, label %147, label %153

144:                                              ; preds = %137
  %145 = icmp eq i8 %138, 0
  %146 = select i1 %119, i1 %145, i1 %114
  br i1 %146, label %147, label %153

147:                                              ; preds = %144, %140, %139
  %148 = icmp ne i64 %115, 9218868437227405312
  %149 = icmp eq i64 %117, 0
  %150 = or i1 %149, %148
  %151 = or i64 %1, 2251799813685248
  %152 = select i1 %150, i64 %1, i64 %151
  br label %282

153:                                              ; preds = %144, %140
  %154 = icmp ne i64 %108, 9218868437227405312
  %155 = icmp eq i64 %110, 0
  %156 = or i1 %155, %154
  %157 = or i64 %0, 2251799813685248
  %158 = select i1 %156, i64 %0, i64 %157
  br label %282

159:                                              ; preds = %103
  %160 = zext i8 %2 to i64
  %161 = shl i64 %160, 63
  %162 = or i64 %161, 9218868437227405312
  br label %282

163:                                              ; preds = %101
  %164 = icmp eq i32 %7, 0
  %165 = or i64 %13, 2305843009213693952
  %166 = select i1 %164, i64 %13, i64 %165
  %167 = zext i1 %164 to i32
  %168 = add nsw i32 %11, %167
  %169 = sub nsw i32 0, %168
  %170 = icmp eq i32 %168, 0
  br i1 %170, label %266, label %171

171:                                              ; preds = %163
  %172 = icmp sgt i32 %168, -64
  br i1 %172, label %173, label %182

173:                                              ; preds = %171
  %174 = zext i32 %169 to i64
  %175 = lshr i64 %166, %174
  %176 = and i32 %168, 63
  %177 = zext i32 %176 to i64
  %178 = shl i64 %166, %177
  %179 = icmp ne i64 %178, 0
  %180 = zext i1 %179 to i64
  %181 = or i64 %175, %180
  br label %266

182:                                              ; preds = %171
  %183 = icmp ne i64 %166, 0
  %184 = zext i1 %183 to i64
  br label %266

185:                                              ; preds = %99
  switch i32 %7, label %263 [
    i32 2047, label %186
    i32 0, label %243
  ]

186:                                              ; preds = %185
  %187 = or i64 %15, %13
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %282, label %189

189:                                              ; preds = %186
  %190 = shl i64 %0, 1
  %191 = icmp ult i64 %190, -4503599627370496
  %192 = and i64 %0, 9221120237041090560
  %193 = icmp eq i64 %192, 9218868437227405312
  %194 = and i64 %0, 2251799813685247
  %195 = icmp ne i64 %194, 0
  %196 = and i1 %193, %195
  %197 = shl i64 %1, 1
  %198 = icmp ugt i64 %197, -4503599627370497
  %199 = and i64 %1, 9221120237041090560
  %200 = icmp eq i64 %199, 9218868437227405312
  %201 = and i64 %1, 2251799813685247
  %202 = icmp ne i64 %201, 0
  %203 = and i1 %200, %202
  %204 = zext i1 %203 to i8
  %205 = or i1 %196, %203
  br i1 %205, label %206, label %210

206:                                              ; preds = %189
  %207 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %208 = load i8, i8* %207, align 1
  %209 = or i8 %208, 1
  store i8 %209, i8* %207, align 1
  br label %210

210:                                              ; preds = %206, %189
  %211 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %212 = load i8, i8* %211, align 1
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %214, label %282

214:                                              ; preds = %210
  %215 = icmp ult i64 %190, %197
  br i1 %215, label %221, label %216

216:                                              ; preds = %214
  %217 = icmp ult i64 %197, %190
  br i1 %217, label %221, label %218

218:                                              ; preds = %216
  %219 = icmp ult i64 %0, %1
  %220 = zext i1 %219 to i8
  br label %221

221:                                              ; preds = %218, %216, %214
  %222 = phi i8 [ %220, %218 ], [ 0, %214 ], [ 1, %216 ]
  br i1 %196, label %228, label %223

223:                                              ; preds = %221
  br i1 %191, label %231, label %224

224:                                              ; preds = %223
  %225 = or i8 %222, %204
  %226 = icmp eq i8 %225, 0
  %227 = and i1 %198, %226
  br i1 %227, label %231, label %237

228:                                              ; preds = %221
  %229 = icmp eq i8 %222, 0
  %230 = select i1 %203, i1 %229, i1 %198
  br i1 %230, label %231, label %237

231:                                              ; preds = %228, %224, %223
  %232 = icmp ne i64 %199, 9218868437227405312
  %233 = icmp eq i64 %201, 0
  %234 = or i1 %233, %232
  %235 = or i64 %1, 2251799813685248
  %236 = select i1 %234, i64 %1, i64 %235
  br label %282

237:                                              ; preds = %228, %224
  %238 = icmp ne i64 %192, 9218868437227405312
  %239 = icmp eq i64 %194, 0
  %240 = or i1 %239, %238
  %241 = or i64 %0, 2251799813685248
  %242 = select i1 %240, i64 %0, i64 %241
  br label %282

243:                                              ; preds = %185
  %244 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %245 = load i8, i8* %244, align 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %257, label %247

247:                                              ; preds = %243
  %248 = or i64 %15, %13
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %254, label %250

250:                                              ; preds = %247
  %251 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %252 = load i8, i8* %251, align 1
  %253 = or i8 %252, -128
  store i8 %253, i8* %251, align 1
  br label %254

254:                                              ; preds = %247, %250
  %255 = zext i8 %2 to i64
  %256 = shl i64 %255, 63
  br label %282

257:                                              ; preds = %243
  %258 = add nuw nsw i64 %15, %13
  %259 = lshr exact i64 %258, 9
  %260 = zext i8 %2 to i64
  %261 = shl i64 %260, 63
  %262 = or i64 %259, %261
  br label %282

263:                                              ; preds = %185
  %264 = or i64 %13, 4611686018427387904
  %265 = add nuw nsw i64 %264, %15
  br label %278

266:                                              ; preds = %182, %173, %163, %96, %86, %79
  %267 = phi i64 [ %13, %79 ], [ %13, %86 ], [ %13, %96 ], [ %181, %173 ], [ %184, %182 ], [ %166, %163 ]
  %268 = phi i64 [ %15, %79 ], [ %95, %86 ], [ %98, %96 ], [ %15, %173 ], [ %15, %182 ], [ %15, %163 ]
  %269 = phi i32 [ %7, %79 ], [ %7, %86 ], [ %7, %96 ], [ %10, %173 ], [ %10, %182 ], [ %10, %163 ]
  %270 = or i64 %267, 2305843009213693952
  %271 = add i64 %270, %268
  %272 = shl i64 %271, 1
  %273 = icmp slt i64 %272, 0
  %274 = xor i1 %273, true
  %275 = sext i1 %274 to i32
  %276 = add nsw i32 %269, %275
  %277 = select i1 %273, i64 %271, i64 %272
  br label %278

278:                                              ; preds = %266, %263
  %279 = phi i32 [ %7, %263 ], [ %276, %266 ]
  %280 = phi i64 [ %265, %263 ], [ %277, %266 ]
  %281 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %2, i32 %279, i64 %280, %struct.float_status* %3)
  br label %282

282:                                              ; preds = %237, %231, %210, %153, %147, %126, %69, %63, %42, %186, %19, %278, %257, %254, %159
  %283 = phi i64 [ %281, %278 ], [ %162, %159 ], [ %256, %254 ], [ %262, %257 ], [ %0, %19 ], [ %0, %186 ], [ %68, %63 ], [ %74, %69 ], [ -2251799813685248, %42 ], [ %152, %147 ], [ %158, %153 ], [ -2251799813685248, %126 ], [ %236, %231 ], [ %242, %237 
  ret i64 %283
}

; Function Attrs: nounwind uwtable
define internal fastcc i64 @subFloat64Sigs(i64 %0, i64 %1, i8 zeroext %2, %struct.float_status* nocapture %3) unnamed_addr #13 {
  %5 = lshr i64 %0, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = lshr i64 %1, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 %7, %10
  %12 = shl i64 %0, 10
  %13 = and i64 %12, 4611686018427386880
  %14 = shl i64 %1, 10
  %15 = and i64 %14, 4611686018427386880
  %16 = icmp sgt i32 %11, 0
  br i1 %16, label %187, label %17

17:                                               ; preds = %4
  %18 = icmp slt i32 %11, 0
  br i1 %18, label %93, label %19

19:                                               ; preds = %17
  switch i32 %7, label %82 [
    i32 2047, label %20
    i32 0, label %81
  ]

20:                                               ; preds = %19
  %21 = or i64 %15, %13
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %77, label %23

23:                                               ; preds = %20
  %24 = shl i64 %0, 1
  %25 = icmp ult i64 %24, -4503599627370496
  %26 = and i64 %0, 9221120237041090560
  %27 = icmp eq i64 %26, 9218868437227405312
  %28 = and i64 %0, 2251799813685247
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %27, %29
  %31 = shl i64 %1, 1
  %32 = icmp ugt i64 %31, -4503599627370497
  %33 = and i64 %1, 9221120237041090560
  %34 = icmp eq i64 %33, 9218868437227405312
  %35 = and i64 %1, 2251799813685247
  %36 = icmp ne i64 %35, 0
  %37 = and i1 %34, %36
  %38 = zext i1 %37 to i8
  %39 = or i1 %30, %37
  br i1 %39, label %40, label %44

40:                                               ; preds = %23
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 1
  store i8 %43, i8* %41, align 1
  br label %44

44:                                               ; preds = %40, %23
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %288

48:                                               ; preds = %44
  %49 = icmp ult i64 %24, %31
  br i1 %49, label %55, label %50

50:                                               ; preds = %48
  %51 = icmp ult i64 %31, %24
  br i1 %51, label %55, label %52

52:                                               ; preds = %50
  %53 = icmp ult i64 %0, %1
  %54 = zext i1 %53 to i8
  br label %55

55:                                               ; preds = %52, %50, %48
  %56 = phi i8 [ %54, %52 ], [ 0, %48 ], [ 1, %50 ]
  br i1 %30, label %62, label %57

57:                                               ; preds = %55
  br i1 %25, label %65, label %58

58:                                               ; preds = %57
  %59 = or i8 %56, %38
  %60 = icmp eq i8 %59, 0
  %61 = and i1 %32, %60
  br i1 %61, label %65, label %71

62:                                               ; preds = %55
  %63 = icmp eq i8 %56, 0
  %64 = select i1 %37, i1 %63, i1 %32
  br i1 %64, label %65, label %71

65:                                               ; preds = %62, %58, %57
  %66 = icmp ne i64 %33, 9218868437227405312
  %67 = icmp eq i64 %35, 0
  %68 = or i1 %67, %66
  %69 = or i64 %1, 2251799813685248
  %70 = select i1 %68, i64 %1, i64 %69
  br label %288

71:                                               ; preds = %62, %58
  %72 = icmp ne i64 %26, 9218868437227405312
  %73 = icmp eq i64 %28, 0
  %74 = or i1 %73, %72
  %75 = or i64 %0, 2251799813685248
  %76 = select i1 %74, i64 %0, i64 %75
  br label %288

77:                                               ; preds = %20
  %78 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %79, 1
  store i8 %80, i8* %78, align 1
  br label %288

81:                                               ; preds = %19
  br label %82

82:                                               ; preds = %19, %81
  %83 = phi i32 [ 1, %81 ], [ %7, %19 ]
  %84 = phi i32 [ 1, %81 ], [ %10, %19 ]
  %85 = icmp ult i64 %15, %13
  br i1 %85, label %272, label %86

86:                                               ; preds = %82
  %87 = icmp ult i64 %13, %15
  br i1 %87, label %181, label %88

88:                                               ; preds = %86
  %89 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 1
  %92 = select i1 %91, i64 -9223372036854775808, i64 0
  br label %288

93:                                               ; preds = %17
  %94 = icmp eq i32 %10, 2047
  br i1 %94, label %95, label %156

95:                                               ; preds = %93
  %96 = icmp eq i64 %15, 0
  br i1 %96, label %151, label %97

97:                                               ; preds = %95
  %98 = shl i64 %0, 1
  %99 = icmp ult i64 %98, -4503599627370496
  %100 = and i64 %0, 9221120237041090560
  %101 = icmp eq i64 %100, 9218868437227405312
  %102 = and i64 %0, 2251799813685247
  %103 = icmp ne i64 %102, 0
  %104 = and i1 %101, %103
  %105 = shl i64 %1, 1
  %106 = icmp ugt i64 %105, -4503599627370497
  %107 = and i64 %1, 9221120237041090560
  %108 = icmp eq i64 %107, 9218868437227405312
  %109 = and i64 %1, 2251799813685247
  %110 = icmp ne i64 %109, 0
  %111 = and i1 %108, %110
  %112 = zext i1 %111 to i8
  %113 = or i1 %104, %111
  br i1 %113, label %114, label %118

114:                                              ; preds = %97
  %115 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %116 = load i8, i8* %115, align 1
  %117 = or i8 %116, 1
  store i8 %117, i8* %115, align 1
  br label %118

118:                                              ; preds = %114, %97
  %119 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %122, label %288

122:                                              ; preds = %118
  %123 = icmp ult i64 %98, %105
  br i1 %123, label %129, label %124

124:                                              ; preds = %122
  %125 = icmp ult i64 %105, %98
  br i1 %125, label %129, label %126

126:                                              ; preds = %124
  %127 = icmp ult i64 %0, %1
  %128 = zext i1 %127 to i8
  br label %129

129:                                              ; preds = %126, %124, %122
  %130 = phi i8 [ %128, %126 ], [ 0, %122 ], [ 1, %124 ]
  br i1 %104, label %136, label %131

131:                                              ; preds = %129
  br i1 %99, label %139, label %132

132:                                              ; preds = %131
  %133 = or i8 %130, %112
  %134 = icmp eq i8 %133, 0
  %135 = and i1 %106, %134
  br i1 %135, label %139, label %145

136:                                              ; preds = %129
  %137 = icmp eq i8 %130, 0
  %138 = select i1 %111, i1 %137, i1 %106
  br i1 %138, label %139, label %145

139:                                              ; preds = %136, %132, %131
  %140 = icmp ne i64 %107, 9218868437227405312
  %141 = icmp eq i64 %109, 0
  %142 = or i1 %141, %140
  %143 = or i64 %1, 2251799813685248
  %144 = select i1 %142, i64 %1, i64 %143
  br label %288

145:                                              ; preds = %136, %132
  %146 = icmp ne i64 %100, 9218868437227405312
  %147 = icmp eq i64 %102, 0
  %148 = or i1 %147, %146
  %149 = or i64 %0, 2251799813685248
  %150 = select i1 %148, i64 %0, i64 %149
  br label %288

151:                                              ; preds = %95
  %152 = xor i8 %2, 1
  %153 = zext i8 %152 to i64
  %154 = shl i64 %153, 63
  %155 = or i64 %154, 9218868437227405312
  br label %288

156:                                              ; preds = %93
  %157 = icmp eq i32 %7, 0
  %158 = or i64 %13, 4611686018427387904
  %159 = select i1 %157, i64 %13, i64 %158
  %160 = zext i1 %157 to i32
  %161 = add nsw i32 %11, %160
  %162 = sub nsw i32 0, %161
  %163 = icmp eq i32 %161, 0
  br i1 %163, label %178, label %164

164:                                              ; preds = %156
  %165 = icmp sgt i32 %161, -64
  br i1 %165, label %166, label %175

166:                                              ; preds = %164
  %167 = zext i32 %162 to i64
  %168 = lshr i64 %159, %167
  %169 = and i32 %161, 63
  %170 = zext i32 %169 to i64
  %171 = shl i64 %159, %170
  %172 = icmp ne i64 %171, 0
  %173 = zext i1 %172 to i64
  %174 = or i64 %168, %173
  br label %178

175:                                              ; preds = %164
  %176 = icmp ne i64 %159, 0
  %177 = zext i1 %176 to i64
  br label %178

178:                                              ; preds = %156, %166, %175
  %179 = phi i64 [ %174, %166 ], [ %177, %175 ], [ %159, %156 ]
  %180 = or i64 %15, 4611686018427387904
  br label %181

181:                                              ; preds = %86, %178
  %182 = phi i64 [ %179, %178 ], [ %13, %86 ]
  %183 = phi i64 [ %180, %178 ], [ %15, %86 ]
  %184 = phi i32 [ %10, %178 ], [ %84, %86 ]
  %185 = sub i64 %183, %182
  %186 = xor i8 %2, 1
  br label %277

187:                                              ; preds = %4
  %188 = icmp eq i32 %7, 2047
  br i1 %188, label %189, label %245

189:                                              ; preds = %187
  %190 = icmp eq i64 %13, 0
  br i1 %190, label %288, label %191

191:                                              ; preds = %189
  %192 = shl i64 %0, 1
  %193 = icmp ult i64 %192, -4503599627370496
  %194 = and i64 %0, 9221120237041090560
  %195 = icmp eq i64 %194, 9218868437227405312
  %196 = and i64 %0, 2251799813685247
  %197 = icmp ne i64 %196, 0
  %198 = and i1 %195, %197
  %199 = shl i64 %1, 1
  %200 = icmp ugt i64 %199, -4503599627370497
  %201 = and i64 %1, 9221120237041090560
  %202 = icmp eq i64 %201, 9218868437227405312
  %203 = and i64 %1, 2251799813685247
  %204 = icmp ne i64 %203, 0
  %205 = and i1 %202, %204
  %206 = zext i1 %205 to i8
  %207 = or i1 %198, %205
  br i1 %207, label %208, label %212

208:                                              ; preds = %191
  %209 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %210 = load i8, i8* %209, align 1
  %211 = or i8 %210, 1
  store i8 %211, i8* %209, align 1
  br label %212

212:                                              ; preds = %208, %191
  %213 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %288

216:                                              ; preds = %212
  %217 = icmp ult i64 %192, %199
  br i1 %217, label %223, label %218

218:                                              ; preds = %216
  %219 = icmp ult i64 %199, %192
  br i1 %219, label %223, label %220

220:                                              ; preds = %218
  %221 = icmp ult i64 %0, %1
  %222 = zext i1 %221 to i8
  br label %223

223:                                              ; preds = %220, %218, %216
  %224 = phi i8 [ %222, %220 ], [ 0, %216 ], [ 1, %218 ]
  br i1 %198, label %230, label %225

225:                                              ; preds = %223
  br i1 %193, label %233, label %226

226:                                              ; preds = %225
  %227 = or i8 %224, %206
  %228 = icmp eq i8 %227, 0
  %229 = and i1 %200, %228
  br i1 %229, label %233, label %239

230:                                              ; preds = %223
  %231 = icmp eq i8 %224, 0
  %232 = select i1 %205, i1 %231, i1 %200
  br i1 %232, label %233, label %239

233:                                              ; preds = %230, %226, %225
  %234 = icmp ne i64 %201, 9218868437227405312
  %235 = icmp eq i64 %203, 0
  %236 = or i1 %235, %234
  %237 = or i64 %1, 2251799813685248
  %238 = select i1 %236, i64 %1, i64 %237
  br label %288

239:                                              ; preds = %230, %226
  %240 = icmp ne i64 %194, 9218868437227405312
  %241 = icmp eq i64 %196, 0
  %242 = or i1 %241, %240
  %243 = or i64 %0, 2251799813685248
  %244 = select i1 %242, i64 %0, i64 %243
  br label %288

245:                                              ; preds = %187
  %246 = icmp eq i32 %10, 0
  br i1 %246, label %249, label %247

247:                                              ; preds = %245
  %248 = or i64 %15, 4611686018427387904
  br label %252

249:                                              ; preds = %245
  %250 = add nsw i32 %11, -1
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %269, label %252

252:                                              ; preds = %247, %249
  %253 = phi i32 [ %11, %247 ], [ %250, %249 ]
  %254 = phi i64 [ %248, %247 ], [ %15, %249 ]
  %255 = icmp slt i32 %253, 64
  br i1 %255, label %256, label %266

256:                                              ; preds = %252
  %257 = zext i32 %253 to i64
  %258 = lshr i64 %254, %257
  %259 = sub nsw i32 0, %253
  %260 = and i32 %259, 63
  %261 = zext i32 %260 to i64
  %262 = shl i64 %254, %261
  %263 = icmp ne i64 %262, 0
  %264 = zext i1 %263 to i64
  %265 = or i64 %258, %264
  br label %269

266:                                              ; preds = %252
  %267 = icmp ne i64 %254, 0
  %268 = zext i1 %267 to i64
  br label %269

269:                                              ; preds = %249, %256, %266
  %270 = phi i64 [ %265, %256 ], [ %268, %266 ], [ %15, %249 ]
  %271 = or i64 %13, 4611686018427387904
  br label %272

272:                                              ; preds = %82, %269
  %273 = phi i64 [ %271, %269 ], [ %13, %82 ]
  %274 = phi i64 [ %270, %269 ], [ %15, %82 ]
  %275 = phi i32 [ %7, %269 ], [ %83, %82 ]
  %276 = sub i64 %273, %274
  br label %277

277:                                              ; preds = %272, %181
  %278 = phi i8 [ %2, %272 ], [ %186, %181 ]
  %279 = phi i32 [ %275, %272 ], [ %184, %181 ]
  %280 = phi i64 [ %276, %272 ], [ %185, %181 ]
  %ctlz.sh = lshr i64 %280, 1
  %ctlz.step = or i64 %280, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %281 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %281, 6148914691236517205
  %ctpop.sh = lshr i64 %281, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %282 = trunc i64 %ctpop.part to i32
  %283 = add nuw nsw i64 %ctpop.part, 4294967295
  %284 = sub nsw i32 %279, %282
  %285 = and i64 %283, 4294967295
  %286 = shl i64 %280, %285
  %287 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %278, i32 %284, i64 %286, %struct.float_status* %3) #23
  br label %288

288:                                              ; preds = %239, %233, %212, %145, %139, %118, %71, %65, %44, %189, %277, %151, %88, %77
  %289 = phi i64 [ %287, %277 ], [ %155, %151 ], [ -2251799813685248, %77 ], [ %92, %88 ], [ %0, %189 ], [ %70, %65 ], [ %76, %71 ], [ -2251799813685248, %44 ], [ %144, %139 ], [ %150, %145 ], [ -2251799813685248, %118 ], [ %238, %233 ], [ %244, %239 ], 
  ret i64 %289
}

; Function Attrs: nounwind uwtable
define i32 @float64_to_float32(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = icmp eq i32 %22, 2047
  br i1 %24, label %25, label %54

25:                                               ; preds = %17
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %50, label %27

27:                                               ; preds = %25
  %28 = and i64 %18, 9221120237041090560
  %29 = icmp ne i64 %28, 9218868437227405312
  %30 = and i64 %18, 2251799813685247
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %31, %29
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !51
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !51
  br label %37

37:                                               ; preds = %27, %33
  %38 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = lshr i64 %18, 29
  %41 = and i64 %40, 8388607
  %42 = icmp ne i8 %39, 0
  %43 = icmp eq i64 %41, 0
  %44 = or i1 %43, %42
  %45 = shl nuw nsw i64 %23, 31
  %46 = or i64 %45, %41
  %47 = trunc i64 %46 to i32
  %48 = or i32 %47, 2139095040
  %49 = select i1 %44, i32 -4194304, i32 %48
  br label %69

50:                                               ; preds = %25
  %51 = shl nuw nsw i64 %23, 31
  %52 = trunc i64 %51 to i32
  %53 = or i32 %52, 2139095040
  br label %69

54:                                               ; preds = %17
  %55 = trunc i64 %23 to i8
  %56 = lshr i64 %19, 22
  %57 = and i64 %18, 4194303
  %58 = icmp ne i64 %57, 0
  %59 = zext i1 %58 to i64
  %60 = or i64 %56, %59
  %61 = trunc i64 %60 to i32
  %62 = or i32 %22, %61
  %63 = icmp eq i32 %62, 0
  %64 = or i32 %61, 1073741824
  %65 = add nsw i32 %22, -897
  %66 = select i1 %63, i32 0, i32 %65
  %67 = select i1 %63, i32 0, i32 %64
  %68 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %55, i32 %66, i32 %67, %struct.float_status* nonnull %1)
  br label %69

69:                                               ; preds = %54, %50, %37
  %70 = phi i32 [ %49, %37 ], [ %53, %50 ], [ %68, %54 ]
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define i64 @float64_add(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i64 %31, 63
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %32, 63
  %36 = trunc i64 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i64 @addFloat64Sigs(i64 %31, i64 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i64 @subFloat64Sigs(i64 %31, i64 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i64 [ %39, %38 ], [ %41, %40 ]
  ret i64 %43
}

; Function Attrs: nounwind uwtable
define i32 @float32_log2(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %17
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %332, label %25

25:                                               ; preds = %23
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %26 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %26, 1431655765
  %ctpop.sh = lshr i32 %26, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %27 = add nsw i32 %ctpop.part, -8
  %28 = shl i32 %19, %27
  %29 = sub nsw i32 9, %ctpop.part
  br label %30

30:                                               ; preds = %25, %17
  %31 = phi i32 [ %29, %25 ], [ %21, %17 ]
  %32 = phi i32 [ %28, %25 ], [ %19, %17 ]
  %33 = icmp sgt i32 %18, -1
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %332

38:                                               ; preds = %30
  %39 = icmp eq i32 %31, 255
  br i1 %39, label %40, label %65

40:                                               ; preds = %38
  %41 = icmp eq i32 %32, 0
  br i1 %41, label %332, label %42

42:                                               ; preds = %40
  %43 = icmp ugt i32 %18, 2143289343
  %44 = and i32 %18, 2143289344
  %45 = icmp eq i32 %44, 2139095040
  %46 = and i32 %18, 4194303
  %47 = icmp ne i32 %46, 0
  %48 = and i1 %45, %47
  br i1 %48, label %49, label %53

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %51, 1
  store i8 %52, i8* %50, align 1
  br label %53

53:                                               ; preds = %49, %42
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %332

57:                                               ; preds = %53
  %58 = or i1 %43, %48
  br i1 %58, label %59, label %332

59:                                               ; preds = %57
  %60 = icmp ne i32 %44, 2139095040
  %61 = icmp eq i32 %46, 0
  %62 = or i1 %61, %60
  %63 = or i32 %18, 4194304
  %64 = select i1 %62, i32 %18, i32 %63
  br label %332

65:                                               ; preds = %38
  %66 = or i32 %32, 8388608
  %67 = icmp slt i32 %31, 127
  %68 = shl nsw i32 %31, 23
  %69 = add i32 %68, -1065353216
  %70 = zext i32 %66 to i64
  %71 = mul nuw i64 %70, %70
  %72 = lshr i64 %71, 23
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 16777216
  %75 = icmp eq i32 %74, 0
  %76 = lshr i64 %71, 24
  %77 = and i64 %76, 2147483647
  %78 = select i1 %75, i64 %72, i64 %77
  %79 = lshr exact i32 %74, 2
  %80 = or i32 %79, %69
  %81 = and i64 %78, 4294967295
  %82 = mul nuw i64 %81, %81
  %83 = lshr i64 %82, 23
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 16777216
  %86 = icmp eq i32 %85, 0
  %87 = lshr i64 %82, 24
  %88 = and i64 %87, 2147483647
  %89 = select i1 %86, i64 %83, i64 %88
  %90 = lshr exact i32 %85, 3
  %91 = or i32 %90, %80
  %92 = and i64 %89, 4294967295
  %93 = mul nuw i64 %92, %92
  %94 = lshr i64 %93, 23
  %95 = trunc i64 %94 to i32
  %96 = and i32 %95, 16777216
  %97 = icmp eq i32 %96, 0
  %98 = lshr i64 %93, 24
  %99 = and i64 %98, 2147483647
  %100 = select i1 %97, i64 %94, i64 %99
  %101 = lshr exact i32 %96, 4
  %102 = or i32 %101, %91
  %103 = and i64 %100, 4294967295
  %104 = mul nuw i64 %103, %103
  %105 = lshr i64 %104, 23
  %106 = trunc i64 %105 to i32
  %107 = and i32 %106, 16777216
  %108 = icmp eq i32 %107, 0
  %109 = lshr i64 %104, 24
  %110 = and i64 %109, 2147483647
  %111 = select i1 %108, i64 %105, i64 %110
  %112 = lshr exact i32 %107, 5
  %113 = or i32 %112, %102
  %114 = and i64 %111, 4294967295
  %115 = mul nuw i64 %114, %114
  %116 = lshr i64 %115, 23
  %117 = trunc i64 %116 to i32
  %118 = and i32 %117, 16777216
  %119 = icmp eq i32 %118, 0
  %120 = lshr i64 %115, 24
  %121 = and i64 %120, 2147483647
  %122 = select i1 %119, i64 %116, i64 %121
  %123 = lshr exact i32 %118, 6
  %124 = or i32 %123, %113
  %125 = and i64 %122, 4294967295
  %126 = mul nuw i64 %125, %125
  %127 = lshr i64 %126, 23
  %128 = trunc i64 %127 to i32
  %129 = and i32 %128, 16777216
  %130 = icmp eq i32 %129, 0
  %131 = lshr i64 %126, 24
  %132 = and i64 %131, 2147483647
  %133 = select i1 %130, i64 %127, i64 %132
  %134 = lshr exact i32 %129, 7
  %135 = or i32 %134, %124
  %136 = and i64 %133, 4294967295
  %137 = mul nuw i64 %136, %136
  %138 = lshr i64 %137, 23
  %139 = trunc i64 %138 to i32
  %140 = and i32 %139, 16777216
  %141 = icmp eq i32 %140, 0
  %142 = lshr i64 %137, 24
  %143 = and i64 %142, 2147483647
  %144 = select i1 %141, i64 %138, i64 %143
  %145 = lshr exact i32 %140, 8
  %146 = or i32 %145, %135
  %147 = and i64 %144, 4294967295
  %148 = mul nuw i64 %147, %147
  %149 = lshr i64 %148, 23
  %150 = trunc i64 %149 to i32
  %151 = and i32 %150, 16777216
  %152 = icmp eq i32 %151, 0
  %153 = lshr i64 %148, 24
  %154 = and i64 %153, 2147483647
  %155 = select i1 %152, i64 %149, i64 %154
  %156 = lshr exact i32 %151, 9
  %157 = or i32 %156, %146
  %158 = and i64 %155, 4294967295
  %159 = mul nuw i64 %158, %158
  %160 = lshr i64 %159, 23
  %161 = trunc i64 %160 to i32
  %162 = and i32 %161, 16777216
  %163 = icmp eq i32 %162, 0
  %164 = lshr i64 %159, 24
  %165 = and i64 %164, 2147483647
  %166 = select i1 %163, i64 %160, i64 %165
  %167 = lshr exact i32 %162, 10
  %168 = or i32 %167, %157
  %169 = and i64 %166, 4294967295
  %170 = mul nuw i64 %169, %169
  %171 = lshr i64 %170, 23
  %172 = trunc i64 %171 to i32
  %173 = and i32 %172, 16777216
  %174 = icmp eq i32 %173, 0
  %175 = lshr i64 %170, 24
  %176 = and i64 %175, 2147483647
  %177 = select i1 %174, i64 %171, i64 %176
  %178 = lshr exact i32 %173, 11
  %179 = or i32 %178, %168
  %180 = and i64 %177, 4294967295
  %181 = mul nuw i64 %180, %180
  %182 = lshr i64 %181, 23
  %183 = trunc i64 %182 to i32
  %184 = and i32 %183, 16777216
  %185 = icmp eq i32 %184, 0
  %186 = lshr i64 %181, 24
  %187 = and i64 %186, 2147483647
  %188 = select i1 %185, i64 %182, i64 %187
  %189 = lshr exact i32 %184, 12
  %190 = or i32 %189, %179
  %191 = and i64 %188, 4294967295
  %192 = mul nuw i64 %191, %191
  %193 = lshr i64 %192, 23
  %194 = trunc i64 %193 to i32
  %195 = and i32 %194, 16777216
  %196 = icmp eq i32 %195, 0
  %197 = lshr i64 %192, 24
  %198 = and i64 %197, 2147483647
  %199 = select i1 %196, i64 %193, i64 %198
  %200 = lshr exact i32 %195, 13
  %201 = or i32 %200, %190
  %202 = and i64 %199, 4294967295
  %203 = mul nuw i64 %202, %202
  %204 = lshr i64 %203, 23
  %205 = trunc i64 %204 to i32
  %206 = and i32 %205, 16777216
  %207 = icmp eq i32 %206, 0
  %208 = lshr i64 %203, 24
  %209 = and i64 %208, 2147483647
  %210 = select i1 %207, i64 %204, i64 %209
  %211 = lshr exact i32 %206, 14
  %212 = or i32 %211, %201
  %213 = and i64 %210, 4294967295
  %214 = mul nuw i64 %213, %213
  %215 = lshr i64 %214, 23
  %216 = trunc i64 %215 to i32
  %217 = and i32 %216, 16777216
  %218 = icmp eq i32 %217, 0
  %219 = lshr i64 %214, 24
  %220 = and i64 %219, 2147483647
  %221 = select i1 %218, i64 %215, i64 %220
  %222 = lshr exact i32 %217, 15
  %223 = or i32 %222, %212
  %224 = and i64 %221, 4294967295
  %225 = mul nuw i64 %224, %224
  %226 = lshr i64 %225, 23
  %227 = trunc i64 %226 to i32
  %228 = and i32 %227, 16777216
  %229 = icmp eq i32 %228, 0
  %230 = lshr i64 %225, 24
  %231 = and i64 %230, 2147483647
  %232 = select i1 %229, i64 %226, i64 %231
  %233 = lshr exact i32 %228, 16
  %234 = or i32 %233, %223
  %235 = and i64 %232, 4294967295
  %236 = mul nuw i64 %235, %235
  %237 = lshr i64 %236, 23
  %238 = trunc i64 %237 to i32
  %239 = and i32 %238, 16777216
  %240 = icmp eq i32 %239, 0
  %241 = lshr i64 %236, 24
  %242 = and i64 %241, 2147483647
  %243 = select i1 %240, i64 %237, i64 %242
  %244 = lshr exact i32 %239, 17
  %245 = or i32 %244, %234
  %246 = and i64 %243, 4294967295
  %247 = mul nuw i64 %246, %246
  %248 = lshr i64 %247, 23
  %249 = trunc i64 %248 to i32
  %250 = and i32 %249, 16777216
  %251 = icmp eq i32 %250, 0
  %252 = lshr i64 %247, 24
  %253 = and i64 %252, 2147483647
  %254 = select i1 %251, i64 %248, i64 %253
  %255 = lshr exact i32 %250, 18
  %256 = or i32 %255, %245
  %257 = and i64 %254, 4294967295
  %258 = mul nuw i64 %257, %257
  %259 = lshr i64 %258, 23
  %260 = trunc i64 %259 to i32
  %261 = and i32 %260, 16777216
  %262 = icmp eq i32 %261, 0
  %263 = lshr i64 %258, 24
  %264 = and i64 %263, 2147483647
  %265 = select i1 %262, i64 %259, i64 %264
  %266 = lshr exact i32 %261, 19
  %267 = or i32 %266, %256
  %268 = and i64 %265, 4294967295
  %269 = mul nuw i64 %268, %268
  %270 = lshr i64 %269, 23
  %271 = trunc i64 %270 to i32
  %272 = and i32 %271, 16777216
  %273 = icmp eq i32 %272, 0
  %274 = lshr i64 %269, 24
  %275 = and i64 %274, 2147483647
  %276 = select i1 %273, i64 %270, i64 %275
  %277 = lshr exact i32 %272, 20
  %278 = or i32 %277, %267
  %279 = and i64 %276, 4294967295
  %280 = mul nuw i64 %279, %279
  %281 = lshr i64 %280, 23
  %282 = trunc i64 %281 to i32
  %283 = and i32 %282, 16777216
  %284 = icmp eq i32 %283, 0
  %285 = lshr i64 %280, 24
  %286 = and i64 %285, 2147483647
  %287 = select i1 %284, i64 %281, i64 %286
  %288 = lshr exact i32 %283, 21
  %289 = or i32 %288, %278
  %290 = and i64 %287, 4294967295
  %291 = mul nuw i64 %290, %290
  %292 = lshr i64 %291, 23
  %293 = trunc i64 %292 to i32
  %294 = and i32 %293, 16777216
  %295 = icmp eq i32 %294, 0
  %296 = lshr i64 %291, 24
  %297 = and i64 %296, 2147483647
  %298 = select i1 %295, i64 %292, i64 %297
  %299 = lshr exact i32 %294, 22
  %300 = or i32 %299, %289
  %301 = and i64 %298, 4294967295
  %302 = mul nuw i64 %301, %301
  %303 = lshr i64 %302, 23
  %304 = trunc i64 %303 to i32
  %305 = and i32 %304, 16777216
  %306 = icmp eq i32 %305, 0
  %307 = lshr i64 %302, 24
  %308 = and i64 %307, 2147483647
  %309 = select i1 %306, i64 %303, i64 %308
  %310 = lshr exact i32 %305, 23
  %311 = or i32 %310, %300
  %312 = and i64 %309, 4294967295
  %313 = mul nuw i64 %312, %312
  %314 = lshr i64 %313, 47
  %315 = trunc i64 %314 to i32
  %316 = and i32 %315, 1
  %317 = or i32 %316, %311
  br i1 %67, label %324, label %318

318:                                              ; preds = %65
  %ctlz.sh25 = lshr i32 %317, 1
  %ctlz.step26 = or i32 %317, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %319 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %319, 1431655765
  %ctpop.sh36 = lshr i32 %319, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %320 = add nsw i32 %ctpop.part55, -1
  %321 = sub nuw nsw i32 134, %ctpop.part55
  %322 = shl i32 %317, %320
  %323 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext 0, i32 %321, i32 %322, %struct.float_status* nonnull %1) #23
  br label %332

324:                                              ; preds = %65
  %325 = zext i1 %67 to i8
  %326 = sub i32 0, %317
  %ctlz.sh56 = lshr i32 %326, 1
  %ctlz.step57 = or i32 %326, %ctlz.sh56
  %ctlz.sh58 = lshr i32 %ctlz.step57, 2
  %ctlz.step59 = or i32 %ctlz.step57, %ctlz.sh58
  %ctlz.sh60 = lshr i32 %ctlz.step59, 4
  %ctlz.step61 = or i32 %ctlz.step59, %ctlz.sh60
  %ctlz.sh62 = lshr i32 %ctlz.step61, 8
  %ctlz.step63 = or i32 %ctlz.step61, %ctlz.sh62
  %ctlz.sh64 = lshr i32 %ctlz.step63, 16
  %ctlz.step65 = or i32 %ctlz.step63, %ctlz.sh64
  %327 = xor i32 %ctlz.step65, -1
  %cppop.and166 = and i32 %327, 1431655765
  %ctpop.sh67 = lshr i32 %327, 1
  %cppop.and268 = and i32 %ctpop.sh67, 1431655765
  %ctpop.step69 = add i32 %cppop.and166, %cppop.and268
  %cppop.and170 = and i32 %ctpop.step69, 858993459
  %ctpop.sh71 = lshr i32 %ctpop.step69, 2
  %cppop.and272 = and i32 %ctpop.sh71, 858993459
  %ctpop.step73 = add i32 %cppop.and170, %cppop.and272
  %cppop.and174 = and i32 %ctpop.step73, 252645135
  %ctpop.sh75 = lshr i32 %ctpop.step73, 4
  %cppop.and276 = and i32 %ctpop.sh75, 252645135
  %ctpop.step77 = add i32 %cppop.and174, %cppop.and276
  %cppop.and178 = and i32 %ctpop.step77, 16711935
  %ctpop.sh79 = lshr i32 %ctpop.step77, 8
  %cppop.and280 = and i32 %ctpop.sh79, 16711935
  %ctpop.step81 = add i32 %cppop.and178, %cppop.and280
  %cppop.and182 = and i32 %ctpop.step81, 65535
  %ctpop.sh83 = lshr i32 %ctpop.step81, 16
  %cppop.and284 = and i32 %ctpop.sh83, 65535
  %ctpop.step85 = add i32 %cppop.and182, %cppop.and284
  %ctpop.part86 = add i32 %ctpop.step85, 0
  %328 = add nsw i32 %ctpop.part86, -1
  %329 = sub nuw nsw i32 134, %ctpop.part86
  %330 = shl i32 %326, %328
  %331 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %325, i32 %329, i32 %330, %struct.float_status* nonnull %1) #23
  br label %332

332:                                              ; preds = %57, %59, %53, %23, %324, %318, %40, %34
  %333 = phi i32 [ -4194304, %34 ], [ %18, %40 ], [ %323, %318 ], [ %331, %324 ], [ -8388608, %23 ], [ %64, %59 ], [ -4194304, %53 ], [ 0, %57 ]
  ret i32 %333
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_eq(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %55

48:                                               ; preds = %38
  %49 = icmp eq i32 %31, %32
  %50 = or i32 %32, %31
  %51 = and i32 %50, 2147483647
  %52 = icmp eq i32 %51, 0
  %53 = or i1 %49, %52
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %48, %44
  %56 = phi i32 [ 0, %44 ], [ %54, %48 ]
  ret i32 %56
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_le(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i32 %31, 31
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %32, 31
  %52 = trunc i32 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = icmp slt i32 %31, 0
  %56 = or i32 %32, %31
  %57 = and i32 %56, 2147483647
  %58 = icmp eq i32 %57, 0
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %48
  %61 = icmp eq i32 %31, %32
  %62 = icmp ult i32 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_lt(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i32 %31, 31
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %32, 31
  %52 = trunc i32 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = or i32 %32, %31
  %56 = and i32 %55, 2147483647
  %57 = icmp ne i32 %56, 0
  %58 = icmp slt i32 %31, 0
  %59 = and i1 %58, %57
  br label %66

60:                                               ; preds = %48
  %61 = icmp ne i32 %31, %32
  %62 = icmp ult i32 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = and i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_unordered(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i32 [ %0, %7 ], [ 0, %13 ]
  %19 = and i32 %1, 2139095040
  %20 = icmp ne i32 %19, 0
  %21 = and i32 %1, 8388607
  %22 = icmp eq i32 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i32 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i32 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i32 %29, 2139095040
  %32 = icmp ne i32 %31, 2139095040
  %33 = and i32 %29, 8388607
  %34 = icmp eq i32 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i32 %30, 2139095040
  %38 = icmp ne i32 %37, 2139095040
  %39 = and i32 %30, 8388607
  %40 = icmp eq i32 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %36, %28
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  br label %46

46:                                               ; preds = %36, %42
  %47 = phi i32 [ 1, %42 ], [ 0, %36 ]
  ret i32 %47
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_eq_quiet(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %67, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %67

60:                                               ; preds = %38
  %61 = icmp eq i32 %31, %32
  %62 = or i32 %32, %31
  %63 = and i32 %62, 2147483647
  %64 = icmp eq i32 %63, 0
  %65 = or i1 %61, %64
  %66 = zext i1 %65 to i32
  br label %67

67:                                               ; preds = %60, %56, %50
  %68 = phi i32 [ 0, %50 ], [ 0, %56 ], [ %66, %60 ]
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_le_quiet(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i32 %31, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %32, 31
  %64 = trunc i32 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = icmp slt i32 %31, 0
  %68 = or i32 %32, %31
  %69 = and i32 %68, 2147483647
  %70 = icmp eq i32 %69, 0
  %71 = or i1 %67, %70
  br label %78

72:                                               ; preds = %60
  %73 = icmp eq i32 %31, %32
  %74 = icmp ult i32 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = or i1 %73, %76
  br label %78

78:                                               ; preds = %72, %66, %56, %50
  %79 = phi i1 [ false, %50 ], [ false, %56 ], [ %71, %66 ], [ %77, %72 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_lt_quiet(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i32 %31, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %32, 31
  %64 = trunc i32 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = or i32 %32, %31
  %68 = and i32 %67, 2147483647
  %69 = icmp ne i32 %68, 0
  %70 = icmp slt i32 %31, 0
  %71 = and i1 %70, %69
  br label %78

72:                                               ; preds = %60
  %73 = icmp ne i32 %31, %32
  %74 = icmp ult i32 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = and i1 %73, %76
  br label %78

78:                                               ; preds = %72, %66, %56, %50
  %79 = phi i1 [ false, %50 ], [ false, %56 ], [ %71, %66 ], [ %77, %72 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_unordered_quiet(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i32 [ %0, %7 ], [ 0, %13 ]
  %19 = and i32 %1, 2139095040
  %20 = icmp ne i32 %19, 0
  %21 = and i32 %1, 8388607
  %22 = icmp eq i32 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i32 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i32 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i32 %29, 2139095040
  %32 = icmp ne i32 %31, 2139095040
  %33 = and i32 %29, 8388607
  %34 = icmp eq i32 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i32 %30, 2139095040
  %38 = icmp ne i32 %37, 2139095040
  %39 = and i32 %30, 8388607
  %40 = icmp eq i32 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %58, label %42

42:                                               ; preds = %36, %28
  %43 = and i32 %29, 2143289344
  %44 = icmp ne i32 %43, 2139095040
  %45 = and i32 %29, 4194303
  %46 = icmp eq i32 %45, 0
  %47 = or i1 %46, %44
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = and i32 %30, 2143289344
  %50 = icmp ne i32 %49, 2139095040
  %51 = and i32 %30, 4194303
  %52 = icmp eq i32 %51, 0
  %53 = or i1 %52, %50
  br i1 %53, label %58, label %54

54:                                               ; preds = %48, %42
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %36, %54, %48
  %59 = phi i32 [ 1, %48 ], [ 1, %54 ], [ 0, %36 ]
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define i32 @float64_to_int32(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = trunc i64 %23 to i8
  %25 = icmp eq i32 %22, 2047
  %26 = icmp ne i64 %19, 0
  %27 = and i1 %26, %25
  %28 = select i1 %27, i8 0, i8 %24
  %29 = icmp eq i32 %22, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = or i64 %19, 4503599627370496
  %32 = icmp ult i32 %22, 1068
  br i1 %32, label %33, label %51

33:                                               ; preds = %17, %30
  %34 = phi i64 [ %31, %30 ], [ %19, %17 ]
  %35 = sub nuw nsw i32 1068, %22
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %51, label %37

37:                                               ; preds = %33
  %38 = icmp ugt i32 %22, 1004
  br i1 %38, label %39, label %48

39:                                               ; preds = %37
  %40 = zext i32 %35 to i64
  %41 = lshr i64 %34, %40
  %42 = add nuw nsw i64 %20, 20
  %43 = and i64 %42, 63
  %44 = shl i64 %34, %43
  %45 = icmp ne i64 %44, 0
  %46 = zext i1 %45 to i64
  %47 = or i64 %41, %46
  br label %51

48:                                               ; preds = %37
  %49 = icmp ne i64 %34, 0
  %50 = zext i1 %49 to i64
  br label %51

51:                                               ; preds = %48, %39, %33, %30
  %52 = phi i64 [ %31, %30 ], [ %47, %39 ], [ %50, %48 ], [ %34, %33 ]
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %66, label %56

56:                                               ; preds = %51
  %57 = icmp eq i8 %54, 3
  br i1 %57, label %66, label %58

58:                                               ; preds = %56
  %59 = icmp eq i8 %28, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %58
  %61 = icmp eq i8 %54, 2
  %62 = select i1 %61, i64 0, i64 127
  br label %66

63:                                               ; preds = %58
  %64 = icmp eq i8 %54, 1
  %65 = select i1 %64, i64 0, i64 127
  br label %66

66:                                               ; preds = %63, %60, %56, %51
  %67 = phi i64 [ 64, %51 ], [ 0, %56 ], [ %62, %60 ], [ %65, %63 ]
  %68 = trunc i64 %52 to i8
  %69 = and i8 %68, 127
  %70 = add i64 %67, %52
  %71 = lshr i64 %70, 7
  %72 = icmp eq i8 %69, 64
  %73 = and i1 %55, %72
  %74 = zext i1 %73 to i64
  %75 = xor i64 %74, 4294967295
  %76 = and i64 %71, %75
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i8 %28, 0
  %79 = sub nsw i32 0, %77
  %80 = select i1 %78, i32 %77, i32 %79
  %81 = icmp ugt i64 %70, 549755813887
  br i1 %81, label %88, label %82

82:                                               ; preds = %66
  %83 = icmp eq i32 %80, 0
  br i1 %83, label %93, label %84

84:                                               ; preds = %82
  %85 = lshr i32 %80, 31
  %86 = zext i8 %28 to i32
  %87 = icmp eq i32 %85, %86
  br i1 %87, label %93, label %88

88:                                               ; preds = %84, %66
  %89 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %90, 1
  store i8 %91, i8* %89, align 1
  %92 = select i1 %78, i32 2147483647, i32 -2147483648
  br label %99

93:                                               ; preds = %84, %82
  %94 = icmp eq i8 %69, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %93
  %96 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %97, 32
  store i8 %98, i8* %96, align 1
  br label %99

99:                                               ; preds = %88, %93, %95
  %100 = phi i32 [ %92, %88 ], [ %80, %93 ], [ %80, %95 ]
  ret i32 %100
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_to_int32_round_to_zero(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = trunc i64 %23 to i8
  %25 = icmp ugt i32 %22, 1054
  br i1 %25, label %26, label %31

26:                                               ; preds = %17
  %27 = icmp eq i32 %22, 2047
  %28 = icmp ne i64 %19, 0
  %29 = and i1 %28, %27
  %30 = select i1 %29, i8 0, i8 %24
  br label %53

31:                                               ; preds = %17
  %32 = icmp ult i32 %22, 1023
  br i1 %32, label %33, label %41

33:                                               ; preds = %31
  %34 = icmp ne i32 %22, 0
  %35 = icmp ne i64 %19, 0
  %36 = or i1 %35, %34
  br i1 %36, label %37, label %67

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 32
  store i8 %40, i8* %38, align 1
  br label %67

41:                                               ; preds = %31
  %42 = or i64 %19, 4503599627370496
  %43 = sub nuw nsw i32 1075, %22
  %44 = zext i32 %43 to i64
  %45 = lshr i64 %42, %44
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i64 %18, -1
  %48 = sub nsw i32 0, %46
  %49 = select i1 %47, i32 %46, i32 %48
  %50 = lshr i32 %49, 31
  %51 = trunc i64 %23 to i32
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %60, label %53

53:                                               ; preds = %26, %41
  %54 = phi i8 [ %24, %41 ], [ %30, %26 ]
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  %58 = icmp eq i8 %54, 0
  %59 = select i1 %58, i32 2147483647, i32 -2147483648
  br label %67

60:                                               ; preds = %41
  %61 = shl i64 %45, %44
  %62 = icmp eq i64 %61, %42
  br i1 %62, label %67, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %65 = load i8, i8* %64, align 1
  %66 = or i8 %65, 32
  store i8 %66, i8* %64, align 1
  br label %67

67:                                               ; preds = %63, %60, %37, %33, %53
  %68 = phi i32 [ %59, %53 ], [ 0, %33 ], [ 0, %37 ], [ %49, %60 ], [ %49, %63 ]
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_to_int16_round_to_zero(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = and i64 %0, 4503599627370495
  %4 = lshr i64 %0, 52
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 2047
  %7 = lshr i64 %0, 63
  %8 = trunc i64 %7 to i8
  %9 = icmp ugt i32 %6, 1038
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = icmp eq i32 %6, 2047
  %12 = icmp ne i64 %3, 0
  %13 = and i1 %12, %11
  %14 = select i1 %13, i8 0, i8 %8
  br label %38

15:                                               ; preds = %2
  %16 = icmp ult i32 %6, 1023
  br i1 %16, label %17, label %25

17:                                               ; preds = %15
  %18 = icmp ne i32 %6, 0
  %19 = icmp ne i64 %3, 0
  %20 = or i1 %19, %18
  br i1 %20, label %21, label %52

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %23, 32
  store i8 %24, i8* %22, align 1
  br label %52

25:                                               ; preds = %15
  %26 = or i64 %3, 4503599627370496
  %27 = sub nuw nsw i32 1075, %6
  %28 = zext i32 %27 to i64
  %29 = lshr i64 %26, %28
  %30 = trunc i64 %29 to i32
  %31 = icmp sgt i64 %0, -1
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %30, i32 %32
  %34 = lshr i32 %33, 15
  %35 = and i32 %34, 1
  %36 = trunc i64 %7 to i32
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %45, label %38

38:                                               ; preds = %10, %25
  %39 = phi i8 [ %8, %25 ], [ %14, %10 ]
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 1
  %43 = icmp eq i8 %39, 0
  %44 = select i1 %43, i32 32767, i32 -32768
  br label %52

45:                                               ; preds = %25
  %46 = shl i64 %29, %28
  %47 = icmp eq i64 %46, %26
  br i1 %47, label %52, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, 32
  store i8 %51, i8* %49, align 1
  br label %52

52:                                               ; preds = %48, %45, %21, %17, %38
  %53 = phi i32 [ %44, %38 ], [ 0, %17 ], [ 0, %21 ], [ %33, %45 ], [ %33, %48 ]
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define i64 @float64_to_int64(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %44, label %25

25:                                               ; preds = %17
  %26 = or i64 %19, 4503599627370496
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %44

28:                                               ; preds = %25
  %29 = icmp ugt i32 %22, 1086
  br i1 %29, label %30, label %40

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %32 = load i8, i8* %31, align 1
  %33 = or i8 %32, 1
  store i8 %33, i8* %31, align 1
  %34 = icmp sgt i64 %18, -1
  br i1 %34, label %119, label %35

35:                                               ; preds = %30
  %36 = icmp eq i32 %22, 2047
  %37 = icmp ne i64 %26, 4503599627370496
  %38 = and i1 %37, %36
  %39 = select i1 %38, i64 9223372036854775807, i64 -9223372036854775808
  br label %119

40:                                               ; preds = %28
  %41 = add nsw i32 %22, -1075
  %42 = zext i32 %41 to i64
  %43 = shl i64 %26, %42
  br label %61

44:                                               ; preds = %17, %25
  %45 = phi i64 [ %26, %25 ], [ %19, %17 ]
  %46 = sub nuw nsw i32 1075, %22
  %47 = add nuw nsw i64 %20, 13
  %48 = and i64 %47, 63
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %44
  %51 = icmp ugt i32 %22, 1011
  br i1 %51, label %52, label %56

52:                                               ; preds = %50
  %53 = shl i64 %45, %48
  %54 = zext i32 %46 to i64
  %55 = lshr i64 %45, %54
  br label %61

56:                                               ; preds = %50
  %57 = icmp eq i32 %46, 64
  br i1 %57, label %61, label %58

58:                                               ; preds = %56
  %59 = icmp ne i64 %45, 0
  %60 = zext i1 %59 to i64
  br label %61

61:                                               ; preds = %58, %52, %44, %56, %40
  %62 = phi i64 [ %43, %40 ], [ %55, %52 ], [ %45, %44 ], [ 0, %58 ], [ 0, %56 ]
  %63 = phi i64 [ 0, %40 ], [ %53, %52 ], [ 0, %44 ], [ %60, %58 ], [ %45, %56 ]
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  %67 = lshr i64 %63, 63
  %68 = trunc i64 %67 to i8
  br i1 %66, label %83, label %69

69:                                               ; preds = %61
  %70 = icmp eq i8 %65, 3
  br i1 %70, label %96, label %71

71:                                               ; preds = %69
  %72 = icmp sgt i64 %18, -1
  br i1 %72, label %78, label %73

73:                                               ; preds = %71
  %74 = icmp eq i8 %65, 1
  %75 = icmp ne i64 %63, 0
  %76 = and i1 %75, %74
  %77 = zext i1 %76 to i8
  br label %83

78:                                               ; preds = %71
  %79 = icmp eq i8 %65, 2
  %80 = icmp ne i64 %63, 0
  %81 = and i1 %80, %79
  %82 = zext i1 %81 to i8
  br label %83

83:                                               ; preds = %78, %73, %61
  %84 = phi i8 [ %68, %61 ], [ %77, %73 ], [ %82, %78 ]
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %83
  %87 = add i64 %62, 1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %107, label %89

89:                                               ; preds = %86
  %90 = and i64 %63, 9223372036854775807
  %91 = icmp eq i64 %90, 0
  %92 = and i1 %91, %66
  %93 = zext i1 %92 to i64
  %94 = xor i64 %93, -1
  %95 = and i64 %87, %94
  br label %96

96:                                               ; preds = %89, %83, %69
  %97 = phi i64 [ %95, %89 ], [ %62, %83 ], [ %62, %69 ]
  %98 = icmp sgt i64 %18, -1
  %99 = sub nsw i64 0, %97
  %100 = select i1 %98, i64 %97, i64 %99
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %113, label %102

102:                                              ; preds = %96
  %103 = lshr i64 %100, 63
  %104 = trunc i64 %103 to i32
  %105 = trunc i64 %23 to i32
  %106 = icmp eq i32 %104, %105
  br i1 %106, label %113, label %107

107:                                              ; preds = %102, %86
  %108 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %109, 1
  store i8 %110, i8* %108, align 1
  %111 = icmp sgt i64 %18, -1
  %112 = select i1 %111, i64 9223372036854775807, i64 -9223372036854775808
  br label %119

113:                                              ; preds = %102, %96
  %114 = icmp eq i64 %63, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %117, 32
  store i8 %118, i8* %116, align 1
  br label %119

119:                                              ; preds = %115, %113, %107, %35, %30
  %120 = phi i64 [ 9223372036854775807, %30 ], [ %39, %35 ], [ %112, %107 ], [ %100, %113 ], [ %100, %115 ]
  ret i64 %120
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float64_to_int64_round_to_zero(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  %24 = or i64 %19, 4503599627370496
  %25 = select i1 %23, i64 %19, i64 %24
  %26 = add nsw i32 %22, -1075
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %45

28:                                               ; preds = %17
  %29 = icmp ugt i32 %22, 1085
  br i1 %29, label %30, label %42

30:                                               ; preds = %28
  %31 = icmp eq i64 %18, -4332462841530417152
  br i1 %31, label %41, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = icmp sgt i64 %18, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %32
  %38 = icmp eq i32 %22, 2047
  %39 = icmp ne i64 %25, 4503599627370496
  %40 = and i1 %38, %39
  br i1 %40, label %72, label %41

41:                                               ; preds = %30, %37
  br label %72

42:                                               ; preds = %28
  %43 = zext i32 %26 to i64
  %44 = shl i64 %25, %43
  br label %67

45:                                               ; preds = %17
  %46 = icmp ult i32 %22, 1022
  br i1 %46, label %47, label %55

47:                                               ; preds = %45
  %48 = zext i32 %22 to i64
  %49 = or i64 %25, %48
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %72, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 32
  store i8 %54, i8* %52, align 1
  br label %72

55:                                               ; preds = %45
  %56 = sub nuw nsw i32 1075, %22
  %57 = zext i32 %56 to i64
  %58 = lshr i64 %25, %57
  %59 = and i32 %26, 63
  %60 = zext i32 %59 to i64
  %61 = shl i64 %25, %60
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %65 = load i8, i8* %64, align 1
  %66 = or i8 %65, 32
  store i8 %66, i8* %64, align 1
  br label %67

67:                                               ; preds = %55, %63, %42
  %68 = phi i64 [ %44, %42 ], [ %58, %63 ], [ %58, %55 ]
  %69 = icmp sgt i64 %18, -1
  %70 = sub nsw i64 0, %68
  %71 = select i1 %69, i64 %68, i64 %70
  br label %72

72:                                               ; preds = %51, %47, %37, %32, %67, %41
  %73 = phi i64 [ -9223372036854775808, %41 ], [ %71, %67 ], [ 9223372036854775807, %32 ], [ 9223372036854775807, %37 ], [ 0, %47 ], [ 0, %51 ]
  ret i64 %73
}

; Function Attrs: nofree nounwind uwtable
define i32 @float16_to_float32(i16 zeroext %0, i8 zeroext %1, %struct.float_status* nocapture %2) local_unnamed_addr #19 {
  %4 = lshr i16 %0, 15
  %5 = zext i16 %4 to i32
  %6 = lshr i16 %0, 10
  %7 = and i16 %6, 31
  %8 = and i16 %0, 1023
  %9 = zext i16 %8 to i32
  %10 = icmp ne i16 %7, 31
  %11 = icmp eq i8 %1, 0
  %12 = or i1 %11, %10
  br i1 %12, label %44, label %13

13:                                               ; preds = %3
  %14 = icmp eq i16 %8, 0
  br i1 %14, label %41, label %15

15:                                               ; preds = %13
  %16 = zext i16 %0 to i32
  %17 = and i32 %16, 32256
  %18 = icmp ne i32 %17, 31744
  %19 = and i32 %16, 511
  %20 = icmp eq i32 %19, 0
  %21 = or i1 %20, %18
  br i1 %21, label %26, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %24 = load i8, i8* %23, align 1, !noalias !54
  %25 = or i8 %24, 1
  store i8 %25, i8* %23, align 1, !noalias !54
  br label %26

26:                                               ; preds = %15, %22
  %27 = zext i16 %0 to i64
  %28 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %29 = load i8, i8* %28, align 1
  %30 = shl nuw nsw i64 %27, 13
  %31 = and i64 %27, 1023
  %32 = icmp ne i8 %29, 0
  %33 = icmp eq i64 %31, 0
  %34 = or i1 %33, %32
  %35 = zext i16 %4 to i64
  %36 = shl nuw nsw i64 %35, 31
  %37 = or i64 %36, %30
  %38 = trunc i64 %37 to i32
  %39 = or i32 %38, 2139095040
  %40 = select i1 %34, i32 -4194304, i32 %39
  br label %65

41:                                               ; preds = %13
  %42 = shl nuw i32 %5, 31
  %43 = or i32 %42, 2139095040
  br label %65

44:                                               ; preds = %3
  %45 = zext i16 %7 to i32
  %46 = icmp eq i16 %7, 0
  br i1 %46, label %47, label %56

47:                                               ; preds = %44
  %48 = icmp eq i16 %8, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %47
  %ctlz.sh = lshr i32 %9, 1
  %ctlz.step = or i32 %9, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %50 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %50, 1431655765
  %ctpop.sh = lshr i32 %50, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %51 = add nsw i32 %ctpop.part, -21
  %52 = shl i32 %9, %51
  %53 = sub nsw i32 21, %ctpop.part
  br label %56

54:                                               ; preds = %47
  %55 = shl nuw i32 %5, 31
  br label %65

56:                                               ; preds = %49, %44
  %57 = phi i32 [ %45, %44 ], [ %53, %49 ]
  %58 = phi i32 [ %9, %44 ], [ %52, %49 ]
  %59 = shl i32 %58, 13
  %60 = shl nuw i32 %5, 31
  %61 = shl nsw i32 %57, 23
  %62 = or i32 %60, 939524096
  %63 = add i32 %62, %61
  %64 = add i32 %63, %59
  br label %65

65:                                               ; preds = %54, %56, %41, %26
  %66 = phi i32 [ %40, %26 ], [ %43, %41 ], [ %64, %56 ], [ %55, %54 ]
  ret i32 %66
}

; Function Attrs: nofree norecurse nounwind uwtable
define zeroext i16 @float32_to_float16(i32 %0, i8 zeroext %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %3, %7, %13
  %19 = phi i32 [ %17, %13 ], [ %0, %3 ], [ %0, %7 ]
  %20 = and i32 %19, 8388607
  %21 = lshr i32 %19, 23
  %22 = and i32 %21, 255
  %23 = lshr i32 %19, 31
  %24 = icmp eq i32 %22, 255
  br i1 %24, label %25, label %66

25:                                               ; preds = %18
  %26 = icmp eq i32 %20, 0
  br i1 %26, label %53, label %27

27:                                               ; preds = %25
  %28 = and i32 %19, 2143289344
  %29 = icmp ne i32 %28, 2139095040
  %30 = and i32 %19, 4194303
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %31, %29
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !57
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !57
  br label %37

37:                                               ; preds = %27, %33
  %38 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = lshr i32 %19, 13
  %41 = and i32 %40, 1023
  %42 = icmp ne i8 %39, 0
  %43 = icmp eq i32 %41, 0
  %44 = or i1 %43, %42
  %45 = shl nuw nsw i32 %23, 15
  %46 = or i32 %45, %41
  %47 = trunc i32 %46 to i16
  %48 = or i16 %47, 31744
  %49 = select i1 %44, i16 -512, i16 %48
  %50 = icmp eq i8 %1, 0
  %51 = trunc i32 %45 to i16
  %52 = select i1 %50, i16 %51, i16 %49
  ret i16 %52

53:                                               ; preds = %25
  %54 = icmp eq i8 %1, 0
  br i1 %54, label %55, label %62

55:                                               ; preds = %53
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  %59 = shl nuw nsw i32 %23, 15
  %60 = trunc i32 %59 to i16
  %61 = or i16 %60, 32767
  br label %162

62:                                               ; preds = %53
  %63 = shl nuw nsw i32 %23, 15
  %64 = trunc i32 %63 to i16
  %65 = or i16 %64, 31744
  br label %162

66:                                               ; preds = %18
  %67 = or i32 %22, %20
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %66
  %70 = shl nuw nsw i32 %23, 15
  %71 = trunc i32 %70 to i16
  br label %162

72:                                               ; preds = %66
  %73 = or i32 %20, 8388608
  %74 = add nsw i32 %22, -127
  %75 = icmp ult i32 %22, 113
  br i1 %75, label %76, label %81

76:                                               ; preds = %72
  %77 = icmp ugt i32 %22, 102
  br i1 %77, label %78, label %81

78:                                               ; preds = %76
  %79 = add nsw i32 %22, -102
  %80 = lshr i32 16777215, %79
  br label %81

81:                                               ; preds = %72, %76, %78
  %82 = phi i32 [ %80, %78 ], [ 16777215, %76 ], [ 8191, %72 ]
  %83 = and i32 %82, %73
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %112, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %87, 16
  store i8 %88, i8* %86, align 1
  %89 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  switch i32 %91, label %105 [
    i32 0, label %92
    i32 2, label %99
    i32 1, label %102
  ]

92:                                               ; preds = %85
  %93 = add nuw nsw i32 %82, 1
  %94 = lshr i32 %93, 1
  %95 = icmp eq i32 %83, %94
  br i1 %95, label %96, label %105

96:                                               ; preds = %92
  %97 = and i32 %73, 16777214
  %98 = and i32 %97, %93
  br label %105

99:                                               ; preds = %85
  %100 = icmp slt i32 %19, 0
  %101 = select i1 %100, i32 0, i32 %82
  br label %105

102:                                              ; preds = %85
  %103 = icmp slt i32 %19, 0
  %104 = select i1 %103, i32 %82, i32 0
  br label %105

105:                                              ; preds = %85, %92, %96, %102, %99
  %106 = phi i32 [ %104, %102 ], [ %101, %99 ], [ %98, %96 ], [ %94, %92 ], [ 0, %85 ]
  %107 = add i32 %106, %73
  %108 = icmp ugt i32 %107, 16777215
  br i1 %108, label %109, label %121

109:                                              ; preds = %105
  %110 = lshr i32 %107, 1
  %111 = add nsw i32 %22, -126
  br label %121

112:                                              ; preds = %81
  br i1 %75, label %113, label %121

113:                                              ; preds = %112
  %114 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 0
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 1
  br i1 %116, label %117, label %121

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %119 = load i8, i8* %118, align 1
  %120 = or i8 %119, 16
  store i8 %120, i8* %118, align 1
  br label %121

121:                                              ; preds = %112, %113, %117, %105, %109
  %122 = phi i32 [ %111, %109 ], [ %74, %105 ], [ %74, %117 ], [ %74, %113 ], [ %74, %112 ]
  %123 = phi i32 [ %110, %109 ], [ %107, %105 ], [ %73, %117 ], [ %73, %113 ], [ %73, %112 ]
  %124 = icmp eq i8 %1, 0
  br i1 %124, label %134, label %125

125:                                              ; preds = %121
  %126 = icmp sgt i32 %122, 15
  br i1 %126, label %127, label %143

127:                                              ; preds = %125
  %128 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %129, 40
  store i8 %130, i8* %128, align 1
  %131 = shl nuw nsw i32 %23, 15
  %132 = trunc i32 %131 to i16
  %133 = or i16 %132, 31744
  br label %162

134:                                              ; preds = %121
  %135 = icmp sgt i32 %122, 16
  br i1 %135, label %136, label %143

136:                                              ; preds = %134
  %137 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %138 = load i8, i8* %137, align 1
  %139 = or i8 %138, 33
  store i8 %139, i8* %137, align 1
  %140 = shl nuw nsw i32 %23, 15
  %141 = trunc i32 %140 to i16
  %142 = or i16 %141, 32767
  br label %162

143:                                              ; preds = %134, %125
  %144 = icmp slt i32 %122, -24
  br i1 %144, label %145, label %148

145:                                              ; preds = %143
  %146 = shl nuw nsw i32 %23, 15
  %147 = trunc i32 %146 to i16
  br label %162

148:                                              ; preds = %143
  %149 = icmp slt i32 %122, -14
  %150 = sub nsw i32 -14, %122
  %151 = select i1 %149, i32 %150, i32 0
  %152 = lshr i32 %123, %151
  %153 = lshr i32 %152, 13
  %154 = trunc i32 %153 to i16
  %155 = shl nuw nsw i32 %23, 15
  %156 = shl nsw i32 %122, 10
  %157 = add i32 %156, 14336
  %158 = select i1 %149, i32 0, i32 %157
  %159 = add nuw nsw i32 %158, %155
  %160 = trunc i32 %159 to i16
  %161 = add i16 %160, %154
  br label %162

162:                                              ; preds = %148, %145, %136, %127, %69, %62, %55
  %163 = phi i16 [ %65, %62 ], [ %61, %55 ], [ %71, %69 ], [ %133, %127 ], [ %147, %145 ], [ %161, %148 ], [ %142, %136 ]
  ret i16 %163
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @float64_to_floatx80(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  switch i32 %22, label %65 [
    i32 2047, label %24
    i32 0, label %51
  ]

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %47, label %26

26:                                               ; preds = %24
  %27 = and i64 %18, 9221120237041090560
  %28 = icmp ne i64 %27, 9218868437227405312
  %29 = and i64 %18, 2251799813685247
  %30 = icmp eq i64 %29, 0
  %31 = or i1 %30, %28
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1, !noalias !60
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1, !noalias !60
  br label %36

36:                                               ; preds = %26, %32
  %37 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp ne i8 %38, 0
  %40 = shl i64 %18, 11
  %41 = or i64 %40, -9223372036854775808
  %42 = shl nuw nsw i64 %23, 15
  %43 = trunc i64 %42 to i16
  %44 = or i16 %43, 32767
  %45 = select i1 %39, i64 -4611686018427387904, i64 %41
  %46 = select i1 %39, i16 -1, i16 %44
  br label %75

47:                                               ; preds = %24
  %48 = shl nuw nsw i64 %23, 15
  %49 = trunc i64 %48 to i16
  %50 = or i16 %49, 32767
  br label %75

51:                                               ; preds = %17
  %52 = icmp eq i64 %19, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %51
  %54 = shl nuw nsw i64 %23, 15
  %55 = trunc i64 %54 to i16
  br label %75

56:                                               ; preds = %51
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %57 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %57, 6148914691236517205
  %ctpop.sh = lshr i64 %57, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %58 = trunc i64 %ctpop.part to i32
  %59 = shl nuw nsw i32 %58, 24
  %60 = add nsw i32 %59, -184549376
  %61 = ashr exact i32 %60, 24
  %62 = zext i32 %61 to i64
  %63 = shl i64 %19, %62
  %64 = sub nsw i32 1, %61
  br label %65

65:                                               ; preds = %17, %56
  %66 = phi i64 [ %19, %17 ], [ %63, %56 ]
  %67 = phi i32 [ %22, %17 ], [ %64, %56 ]
  %68 = shl i64 %66, 11
  %69 = or i64 %68, -9223372036854775808
  %70 = shl nuw nsw i64 %23, 15
  %71 = trunc i64 %70 to i32
  %72 = or i32 %71, 15360
  %73 = add nsw i32 %72, %67
  %74 = trunc i32 %73 to i16
  br label %75

75:                                               ; preds = %36, %65, %53, %47
  %76 = phi i64 [ -9223372036854775808, %47 ], [ 0, %53 ], [ %69, %65 ], [ %45, %36 ]
  %77 = phi i16 [ %50, %47 ], [ %55, %53 ], [ %74, %65 ], [ %46, %36 ]
  %78 = insertvalue { i64, i16 } undef, i64 %76, 0
  %79 = insertvalue { i64, i16 } %78, i16 %77, 1
  ret { i64, i16 } %79
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float64_to_float128(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = and i64 %18, -9223372036854775808
  switch i32 %22, label %58 [
    i32 2047, label %24
    i32 0, label %47
  ]

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %45, label %26

26:                                               ; preds = %24
  %27 = and i64 %18, 9221120237041090560
  %28 = icmp ne i64 %27, 9218868437227405312
  %29 = and i64 %18, 2251799813685247
  %30 = icmp eq i64 %29, 0
  %31 = or i1 %30, %28
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1, !noalias !63
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1, !noalias !63
  br label %36

36:                                               ; preds = %26, %32
  %37 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %68

40:                                               ; preds = %36
  %41 = shl i64 %18, 60
  %42 = lshr i64 %18, 4
  %43 = or i64 %42, %23
  %44 = or i64 %43, 9223090561878065152
  br label %68

45:                                               ; preds = %24
  %46 = or i64 %23, 9223090561878065152
  br label %68

47:                                               ; preds = %17
  %48 = icmp eq i64 %19, 0
  br i1 %48, label %68, label %49

49:                                               ; preds = %47
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %50 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %50, 6148914691236517205
  %ctpop.sh = lshr i64 %50, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %51 = trunc i64 %ctpop.part to i32
  %52 = shl nuw nsw i32 %51, 24
  %53 = add nsw i32 %52, -184549376
  %54 = ashr exact i32 %53, 24
  %55 = zext i32 %54 to i64
  %56 = shl i64 %19, %55
  %57 = sub nsw i32 0, %54
  br label %58

58:                                               ; preds = %17, %49
  %59 = phi i64 [ %19, %17 ], [ %56, %49 ]
  %60 = phi i32 [ %22, %17 ], [ %57, %49 ]
  %61 = shl i64 %59, 60
  %62 = lshr i64 %59, 4
  %63 = add nsw i32 %60, 15360
  %64 = zext i32 %63 to i64
  %65 = shl nuw nsw i64 %64, 48
  %66 = or i64 %62, %23
  %67 = add nuw i64 %65, %66
  br label %68

68:                                               ; preds = %47, %40, %36, %58, %45
  %69 = phi i64 [ 0, %45 ], [ %61, %58 ], [ %41, %40 ], [ 0, %36 ], [ 0, %47 ]
  %70 = phi i64 [ %46, %45 ], [ %67, %58 ], [ %44, %40 ], [ -140737488355328, %36 ], [ %23, %47 ]
  %71 = insertvalue { i64, i64 } undef, i64 %69, 0
  %72 = insertvalue { i64, i64 } %71, i64 %70, 1
  ret { i64, i64 } %72
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float64_round_to_int(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = lshr i64 %18, 52
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 2047
  %22 = icmp ugt i32 %21, 1074
  br i1 %22, label %23, label %48

23:                                               ; preds = %17
  %24 = icmp ne i32 %21, 2047
  %25 = and i64 %18, 4503599627370495
  %26 = icmp eq i64 %25, 0
  %27 = or i1 %26, %24
  br i1 %27, label %106, label %28

28:                                               ; preds = %23
  %29 = and i64 %18, 9221120237041090560
  %30 = icmp eq i64 %29, 9218868437227405312
  %31 = and i64 %18, 2251799813685247
  %32 = icmp ne i64 %31, 0
  %33 = and i1 %30, %32
  br i1 %33, label %34, label %38

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %34, %28
  %39 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %106

42:                                               ; preds = %38
  %43 = icmp ne i64 %29, 9218868437227405312
  %44 = icmp eq i64 %31, 0
  %45 = or i1 %44, %43
  %46 = or i64 %18, 2251799813685248
  %47 = select i1 %45, i64 %18, i64 %46
  br label %106

48:                                               ; preds = %17
  %49 = icmp ult i32 %21, 1023
  br i1 %49, label %50, label %74

50:                                               ; preds = %48
  %51 = and i64 %18, 9223372036854775807
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %106, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %55, 32
  store i8 %56, i8* %54, align 1
  %57 = and i64 %18, -9223372036854775808
  %58 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  switch i32 %60, label %106 [
    i32 0, label %61
    i32 1, label %68
    i32 2, label %71
  ]

61:                                               ; preds = %53
  %62 = icmp ne i32 %21, 1022
  %63 = and i64 %18, 4503599627370495
  %64 = icmp eq i64 %63, 0
  %65 = or i1 %64, %62
  %66 = or i64 %57, 4607182418800017408
  %67 = select i1 %65, i64 %57, i64 %66
  ret i64 %67

68:                                               ; preds = %53
  %69 = icmp slt i64 %18, 0
  %70 = select i1 %69, i64 -4616189618054758400, i64 0
  br label %106

71:                                               ; preds = %53
  %72 = icmp sgt i64 %18, -1
  %73 = select i1 %72, i64 4607182418800017408, i64 -9223372036854775808
  br label %106

74:                                               ; preds = %48
  %75 = sub nuw nsw i32 1075, %21
  %76 = zext i32 %75 to i64
  %77 = shl nuw nsw i64 1, %76
  %78 = add nsw i64 %77, -1
  %79 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %80 = load i8, i8* %79, align 1
  switch i8 %80, label %89 [
    i8 0, label %81
    i8 3, label %97
  ]

81:                                               ; preds = %74
  %82 = lshr i64 %77, 1
  %83 = add i64 %82, %18
  %84 = and i64 %83, %78
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %97

86:                                               ; preds = %81
  %87 = xor i64 %77, -1
  %88 = and i64 %83, %87
  br label %97

89:                                               ; preds = %74
  %90 = lshr i64 %18, 63
  %91 = trunc i64 %90 to i8
  %92 = icmp eq i8 %80, 2
  %93 = zext i1 %92 to i8
  %94 = icmp eq i8 %91, %93
  %95 = select i1 %94, i64 0, i64 %78
  %96 = add i64 %95, %18
  br label %97

97:                                               ; preds = %89, %74, %81, %86
  %98 = phi i64 [ %88, %86 ], [ %83, %81 ], [ %18, %74 ], [ %96, %89 ]
  %99 = sub nsw i64 0, %77
  %100 = and i64 %98, %99
  %101 = icmp eq i64 %100, %18
  br i1 %101, label %106, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %104 = load i8, i8* %103, align 1
  %105 = or i8 %104, 32
  store i8 %105, i8* %103, align 1
  br label %106

106:                                              ; preds = %53, %23, %42, %38, %102, %97, %50, %71, %68
  %107 = phi i64 [ %73, %71 ], [ %70, %68 ], [ %18, %23 ], [ %18, %50 ], [ %18, %97 ], [ %100, %102 ], [ %47, %42 ], [ -2251799813685248, %38 ], [ %57, %53 ]
  ret i64 %107
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float64_trunc_to_int(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 1
  store i8 3, i8* %3, align 1
  %5 = tail call i64 @float64_round_to_int(i64 %0, %struct.float_status* %1)
  store i8 %4, i8* %3, align 1
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define i64 @float64_sub(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i64 %31, 63
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %32, 63
  %36 = trunc i64 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i64 @subFloat64Sigs(i64 %31, i64 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i64 @addFloat64Sigs(i64 %31, i64 %32, i8 zeroext %34, %struct.float_status* nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i64 [ %39, %38 ], [ %41, %40 ]
  ret i64 %43
}

; Function Attrs: nounwind uwtable
define i64 @float64_div(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 4503599627370495
  %34 = lshr i64 %31, 52
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 2047
  %37 = and i64 %32, 4503599627370495
  %38 = lshr i64 %32, 52
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 2047
  %41 = xor i64 %32, %31
  %42 = lshr i64 %41, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i32 %36, 2047
  br i1 %44, label %45, label %166

45:                                               ; preds = %30
  %46 = icmp eq i64 %33, 0
  br i1 %46, label %101, label %47

47:                                               ; preds = %45
  %48 = shl i64 %31, 1
  %49 = icmp ult i64 %48, -4503599627370496
  %50 = and i64 %31, 9221120237041090560
  %51 = icmp eq i64 %50, 9218868437227405312
  %52 = and i64 %31, 2251799813685247
  %53 = icmp ne i64 %52, 0
  %54 = and i1 %51, %53
  %55 = shl i64 %32, 1
  %56 = icmp ugt i64 %55, -4503599627370497
  %57 = and i64 %32, 9221120237041090560
  %58 = icmp eq i64 %57, 9218868437227405312
  %59 = and i64 %32, 2251799813685247
  %60 = icmp ne i64 %59, 0
  %61 = and i1 %58, %60
  %62 = zext i1 %61 to i8
  %63 = or i1 %54, %61
  br i1 %63, label %64, label %68

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %66, 1
  store i8 %67, i8* %65, align 1
  br label %68

68:                                               ; preds = %64, %47
  %69 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %374

72:                                               ; preds = %68
  %73 = icmp ult i64 %48, %55
  br i1 %73, label %79, label %74

74:                                               ; preds = %72
  %75 = icmp ult i64 %55, %48
  br i1 %75, label %79, label %76

76:                                               ; preds = %74
  %77 = icmp ult i64 %31, %32
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %76, %74, %72
  %80 = phi i8 [ %78, %76 ], [ 0, %72 ], [ 1, %74 ]
  br i1 %54, label %86, label %81

81:                                               ; preds = %79
  br i1 %49, label %89, label %82

82:                                               ; preds = %81
  %83 = or i8 %80, %62
  %84 = icmp eq i8 %83, 0
  %85 = and i1 %56, %84
  br i1 %85, label %89, label %95

86:                                               ; preds = %79
  %87 = icmp eq i8 %80, 0
  %88 = select i1 %61, i1 %87, i1 %56
  br i1 %88, label %89, label %95

89:                                               ; preds = %86, %82, %81
  %90 = icmp ne i64 %57, 9218868437227405312
  %91 = icmp eq i64 %59, 0
  %92 = or i1 %91, %90
  %93 = or i64 %32, 2251799813685248
  %94 = select i1 %92, i64 %32, i64 %93
  br label %374

95:                                               ; preds = %86, %82
  %96 = icmp ne i64 %50, 9218868437227405312
  %97 = icmp eq i64 %52, 0
  %98 = or i1 %97, %96
  %99 = or i64 %31, 2251799813685248
  %100 = select i1 %98, i64 %31, i64 %99
  br label %374

101:                                              ; preds = %45
  %102 = icmp eq i32 %40, 2047
  br i1 %102, label %103, label %163

103:                                              ; preds = %101
  %104 = icmp eq i64 %37, 0
  br i1 %104, label %159, label %105

105:                                              ; preds = %103
  %106 = shl i64 %31, 1
  %107 = icmp ult i64 %106, -4503599627370496
  %108 = and i64 %31, 9221120237041090560
  %109 = icmp eq i64 %108, 9218868437227405312
  %110 = and i64 %31, 2251799813685247
  %111 = icmp ne i64 %110, 0
  %112 = and i1 %109, %111
  %113 = shl i64 %32, 1
  %114 = icmp ugt i64 %113, -4503599627370497
  %115 = and i64 %32, 9221120237041090560
  %116 = icmp eq i64 %115, 9218868437227405312
  %117 = and i64 %32, 2251799813685247
  %118 = icmp ne i64 %117, 0
  %119 = and i1 %116, %118
  %120 = zext i1 %119 to i8
  %121 = or i1 %112, %119
  br i1 %121, label %122, label %126

122:                                              ; preds = %105
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %124 = load i8, i8* %123, align 1
  %125 = or i8 %124, 1
  store i8 %125, i8* %123, align 1
  br label %126

126:                                              ; preds = %122, %105
  %127 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %374

130:                                              ; preds = %126
  %131 = icmp ult i64 %106, %113
  br i1 %131, label %137, label %132

132:                                              ; preds = %130
  %133 = icmp ult i64 %113, %106
  br i1 %133, label %137, label %134

134:                                              ; preds = %132
  %135 = icmp ult i64 %31, %32
  %136 = zext i1 %135 to i8
  br label %137

137:                                              ; preds = %134, %132, %130
  %138 = phi i8 [ %136, %134 ], [ 0, %130 ], [ 1, %132 ]
  br i1 %112, label %144, label %139

139:                                              ; preds = %137
  br i1 %107, label %147, label %140

140:                                              ; preds = %139
  %141 = or i8 %138, %120
  %142 = icmp eq i8 %141, 0
  %143 = and i1 %114, %142
  br i1 %143, label %147, label %153

144:                                              ; preds = %137
  %145 = icmp eq i8 %138, 0
  %146 = select i1 %119, i1 %145, i1 %114
  br i1 %146, label %147, label %153

147:                                              ; preds = %144, %140, %139
  %148 = icmp ne i64 %115, 9218868437227405312
  %149 = icmp eq i64 %117, 0
  %150 = or i1 %149, %148
  %151 = or i64 %32, 2251799813685248
  %152 = select i1 %150, i64 %32, i64 %151
  br label %374

153:                                              ; preds = %144, %140
  %154 = icmp ne i64 %108, 9218868437227405312
  %155 = icmp eq i64 %110, 0
  %156 = or i1 %155, %154
  %157 = or i64 %31, 2251799813685248
  %158 = select i1 %156, i64 %31, i64 %157
  br label %374

159:                                              ; preds = %103
  %160 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %161 = load i8, i8* %160, align 1
  %162 = or i8 %161, 1
  store i8 %162, i8* %160, align 1
  br label %374

163:                                              ; preds = %101
  %164 = and i64 %41, -9223372036854775808
  %165 = or i64 %164, 9218868437227405312
  br label %374

166:                                              ; preds = %30
  switch i32 %40, label %248 [
    i32 2047, label %167
    i32 0, label %225
  ]

167:                                              ; preds = %166
  %168 = icmp eq i64 %37, 0
  br i1 %168, label %223, label %169

169:                                              ; preds = %167
  %170 = shl i64 %31, 1
  %171 = icmp ult i64 %170, -4503599627370496
  %172 = and i64 %31, 9221120237041090560
  %173 = icmp eq i64 %172, 9218868437227405312
  %174 = and i64 %31, 2251799813685247
  %175 = icmp ne i64 %174, 0
  %176 = and i1 %173, %175
  %177 = shl i64 %32, 1
  %178 = icmp ugt i64 %177, -4503599627370497
  %179 = and i64 %32, 9221120237041090560
  %180 = icmp eq i64 %179, 9218868437227405312
  %181 = and i64 %32, 2251799813685247
  %182 = icmp ne i64 %181, 0
  %183 = and i1 %180, %182
  %184 = zext i1 %183 to i8
  %185 = or i1 %176, %183
  br i1 %185, label %186, label %190

186:                                              ; preds = %169
  %187 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %188 = load i8, i8* %187, align 1
  %189 = or i8 %188, 1
  store i8 %189, i8* %187, align 1
  br label %190

190:                                              ; preds = %186, %169
  %191 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %194, label %374

194:                                              ; preds = %190
  %195 = icmp ult i64 %170, %177
  br i1 %195, label %201, label %196

196:                                              ; preds = %194
  %197 = icmp ult i64 %177, %170
  br i1 %197, label %201, label %198

198:                                              ; preds = %196
  %199 = icmp ult i64 %31, %32
  %200 = zext i1 %199 to i8
  br label %201

201:                                              ; preds = %198, %196, %194
  %202 = phi i8 [ %200, %198 ], [ 0, %194 ], [ 1, %196 ]
  br i1 %176, label %208, label %203

203:                                              ; preds = %201
  br i1 %171, label %211, label %204

204:                                              ; preds = %203
  %205 = or i8 %202, %184
  %206 = icmp eq i8 %205, 0
  %207 = and i1 %178, %206
  br i1 %207, label %211, label %217

208:                                              ; preds = %201
  %209 = icmp eq i8 %202, 0
  %210 = select i1 %183, i1 %209, i1 %178
  br i1 %210, label %211, label %217

211:                                              ; preds = %208, %204, %203
  %212 = icmp ne i64 %179, 9218868437227405312
  %213 = icmp eq i64 %181, 0
  %214 = or i1 %213, %212
  %215 = or i64 %32, 2251799813685248
  %216 = select i1 %214, i64 %32, i64 %215
  br label %374

217:                                              ; preds = %208, %204
  %218 = icmp ne i64 %172, 9218868437227405312
  %219 = icmp eq i64 %174, 0
  %220 = or i1 %219, %218
  %221 = or i64 %31, 2251799813685248
  %222 = select i1 %220, i64 %31, i64 %221
  br label %374

223:                                              ; preds = %167
  %224 = and i64 %41, -9223372036854775808
  br label %374

225:                                              ; preds = %166
  %226 = icmp eq i64 %37, 0
  br i1 %226, label %227, label %239

227:                                              ; preds = %225
  %228 = zext i32 %36 to i64
  %229 = or i64 %33, %228
  %230 = icmp eq i64 %229, 0
  %231 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %232 = load i8, i8* %231, align 1
  br i1 %230, label %233, label %235

233:                                              ; preds = %227
  %234 = or i8 %232, 1
  store i8 %234, i8* %231, align 1
  br label %374

235:                                              ; preds = %227
  %236 = or i8 %232, 4
  store i8 %236, i8* %231, align 1
  %237 = and i64 %41, -9223372036854775808
  %238 = or i64 %237, 9218868437227405312
  br label %374

239:                                              ; preds = %225
  %ctlz.sh = lshr i64 %37, 1
  %ctlz.step = or i64 %37, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %240 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %240, 6148914691236517205
  %ctpop.sh = lshr i64 %240, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %241 = trunc i64 %ctpop.part to i32
  %242 = shl nuw nsw i32 %241, 24
  %243 = add nsw i32 %242, -184549376
  %244 = ashr exact i32 %243, 24
  %245 = zext i32 %244 to i64
  %246 = shl i64 %37, %245
  %247 = sub nsw i32 1, %244
  br label %248

248:                                              ; preds = %166, %239
  %249 = phi i64 [ %37, %166 ], [ %246, %239 ]
  %250 = phi i32 [ %40, %166 ], [ %247, %239 ]
  %251 = icmp eq i32 %36, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %248
  %253 = icmp eq i64 %33, 0
  br i1 %253, label %254, label %256

254:                                              ; preds = %252
  %255 = and i64 %41, -9223372036854775808
  br label %374

256:                                              ; preds = %252
  %ctlz.sh31 = lshr i64 %33, 1
  %ctlz.step32 = or i64 %33, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %257 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %257, 6148914691236517205
  %ctpop.sh44 = lshr i64 %257, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %258 = trunc i64 %ctpop.part67 to i32
  %259 = shl nuw nsw i32 %258, 24
  %260 = add nsw i32 %259, -184549376
  %261 = ashr exact i32 %260, 24
  %262 = zext i32 %261 to i64
  %263 = shl i64 %33, %262
  %264 = sub nsw i32 1, %261
  br label %265

265:                                              ; preds = %256, %248
  %266 = phi i64 [ %263, %256 ], [ %33, %248 ]
  %267 = phi i32 [ %264, %256 ], [ %36, %248 ]
  %268 = sub nsw i32 %267, %250
  %269 = shl i64 %266, 10
  %270 = or i64 %269, 4611686018427387904
  %271 = shl i64 %249, 11
  %272 = or i64 %271, -9223372036854775808
  %273 = shl i64 %270, 1
  %274 = icmp ugt i64 %272, %273
  %275 = xor i1 %274, true
  %276 = zext i1 %275 to i64
  %277 = lshr exact i64 %270, %276
  %278 = select i1 %274, i32 1021, i32 1022
  %279 = add nsw i32 %268, %278
  %280 = icmp ugt i64 %272, %277
  br i1 %280, label %281, label %371

281:                                              ; preds = %265
  %282 = lshr i64 %272, 32
  %283 = and i64 %272, -4294967296
  %284 = icmp ugt i64 %283, %277
  br i1 %284, label %285, label %288

285:                                              ; preds = %281
  %286 = udiv i64 %277, %282
  %287 = shl i64 %286, 32
  br label %288

288:                                              ; preds = %285, %281
  %289 = phi i64 [ %287, %285 ], [ -4294967296, %281 ]
  %290 = lshr exact i64 %289, 32
  %291 = and i64 %271, 4294965248
  %292 = mul nuw i64 %290, %291
  %293 = mul nuw i64 %290, %282
  %294 = lshr i64 %292, 32
  %295 = shl i64 %292, 32
  %296 = sub i64 0, %295
  %297 = icmp ne i64 %295, 0
  %298 = sext i1 %297 to i64
  %299 = sub i64 %277, %293
  %300 = sub i64 %299, %294
  %301 = add i64 %300, %298
  %302 = icmp slt i64 %301, 0
  br i1 %302, label %303, label %316

303:                                              ; preds = %288
  %304 = shl i64 %249, 43
  br label %305

305:                                              ; preds = %305, %303
  %306 = phi i64 [ %289, %303 ], [ %309, %305 ]
  %307 = phi i64 [ %301, %303 ], [ %314, %305 ]
  %308 = phi i64 [ %296, %303 ], [ %310, %305 ]
  %309 = add i64 %306, -4294967296
  %310 = add i64 %308, %304
  %311 = add i64 %307, %282
  %312 = icmp ult i64 %310, %308
  %313 = zext i1 %312 to i64
  %314 = add i64 %311, %313
  %315 = icmp slt i64 %314, 0
  br i1 %315, label %305, label %316

316:                                              ; preds = %305, %288
  %317 = phi i64 [ %296, %288 ], [ %310, %305 ]
  %318 = phi i64 [ %301, %288 ], [ %314, %305 ]
  %319 = phi i64 [ %289, %288 ], [ %309, %305 ]
  %320 = shl i64 %318, 32
  %321 = lshr i64 %317, 32
  %322 = or i64 %320, %321
  %323 = icmp ugt i64 %283, %322
  br i1 %323, label %324, label %326

324:                                              ; preds = %316
  %325 = udiv i64 %322, %282
  br label %326

326:                                              ; preds = %316, %324
  %327 = phi i64 [ %325, %324 ], [ 4294967295, %316 ]
  %328 = or i64 %327, %319
  %329 = and i64 %328, 511
  %330 = icmp ult i64 %329, 3
  br i1 %330, label %331, label %371

331:                                              ; preds = %326
  %332 = lshr i64 %328, 32
  %333 = and i64 %328, 4294967295
  %334 = mul nuw i64 %333, %291
  %335 = mul nuw i64 %332, %291
  %336 = mul nuw i64 %333, %282
  %337 = mul nuw i64 %332, %282
  %338 = add i64 %335, %336
  %339 = icmp ult i64 %338, %336
  %340 = select i1 %339, i64 4294967296, i64 0
  %341 = lshr i64 %338, 32
  %342 = or i64 %340, %341
  %343 = shl i64 %338, 32
  %344 = add i64 %343, %334
  %345 = icmp ult i64 %344, %343
  %346 = sub i64 0, %344
  %347 = sext i1 %345 to i64
  %348 = icmp ne i64 %344, 0
  %349 = sext i1 %348 to i64
  %350 = sub i64 %277, %337
  %351 = sub i64 %350, %342
  %352 = add i64 %351, %347
  %353 = add i64 %352, %349
  %354 = icmp slt i64 %353, 0
  br i1 %354, label %355, label %365

355:                                              ; preds = %331, %355
  %356 = phi i64 [ %359, %355 ], [ %328, %331 ]
  %357 = phi i64 [ %360, %355 ], [ %346, %331 ]
  %358 = phi i64 [ %363, %355 ], [ %353, %331 ]
  %359 = add i64 %356, -1
  %360 = add i64 %357, %272
  %361 = icmp ult i64 %360, %357
  %362 = zext i1 %361 to i64
  %363 = add nsw i64 %358, %362
  %364 = icmp slt i64 %363, 0
  br i1 %364, label %355, label %365

365:                                              ; preds = %355, %331
  %366 = phi i64 [ %346, %331 ], [ %360, %355 ]
  %367 = phi i64 [ %328, %331 ], [ %359, %355 ]
  %368 = icmp ne i64 %366, 0
  %369 = zext i1 %368 to i64
  %370 = or i64 %367, %369
  br label %371

371:                                              ; preds = %265, %365, %326
  %372 = phi i64 [ %370, %365 ], [ %328, %326 ], [ -1, %265 ]
  %373 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %43, i32 %279, i64 %372, %struct.float_status* %2)
  br label %374

374:                                              ; preds = %217, %211, %190, %153, %147, %126, %95, %89, %68, %371, %254, %235, %233, %223, %163, %159
  %375 = phi i64 [ -2251799813685248, %159 ], [ %165, %163 ], [ %224, %223 ], [ -2251799813685248, %233 ], [ %238, %235 ], [ %255, %254 ], [ %373, %371 ], [ %94, %89 ], [ %100, %95 ], [ -2251799813685248, %68 ], [ %152, %147 ], [ %158, %153 ], [ -2251799
  ret i64 %375
}

; Function Attrs: nounwind uwtable
define i64 @float64_rem(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 4503599627370495
  %34 = lshr i64 %31, 52
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 2047
  %37 = lshr i64 %31, 63
  %38 = trunc i64 %37 to i8
  %39 = and i64 %32, 4503599627370495
  %40 = lshr i64 %32, 52
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 2047
  %43 = icmp eq i32 %36, 2047
  br i1 %43, label %44, label %108

44:                                               ; preds = %30
  %45 = icmp eq i64 %33, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %44
  %47 = icmp eq i32 %42, 2047
  %48 = icmp ne i64 %39, 0
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %104

50:                                               ; preds = %44, %46
  %51 = shl i64 %31, 1
  %52 = icmp ult i64 %51, -4503599627370496
  %53 = and i64 %31, 9221120237041090560
  %54 = icmp eq i64 %53, 9218868437227405312
  %55 = and i64 %31, 2251799813685247
  %56 = icmp ne i64 %55, 0
  %57 = and i1 %54, %56
  %58 = shl i64 %32, 1
  %59 = icmp ugt i64 %58, -4503599627370497
  %60 = and i64 %32, 9221120237041090560
  %61 = icmp eq i64 %60, 9218868437227405312
  %62 = and i64 %32, 2251799813685247
  %63 = icmp ne i64 %62, 0
  %64 = and i1 %61, %63
  %65 = zext i1 %64 to i8
  %66 = or i1 %57, %64
  br i1 %66, label %67, label %71

67:                                               ; preds = %50
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %69, 1
  store i8 %70, i8* %68, align 1
  br label %71

71:                                               ; preds = %67, %50
  %72 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %73 = load i8, i8* %72, align 1
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %389

75:                                               ; preds = %71
  %76 = icmp ult i64 %51, %58
  br i1 %76, label %82, label %77

77:                                               ; preds = %75
  %78 = icmp ult i64 %58, %51
  br i1 %78, label %82, label %79

79:                                               ; preds = %77
  %80 = icmp ult i64 %31, %32
  %81 = zext i1 %80 to i8
  br label %82

82:                                               ; preds = %79, %77, %75
  %83 = phi i8 [ %81, %79 ], [ 0, %75 ], [ 1, %77 ]
  br i1 %57, label %89, label %84

84:                                               ; preds = %82
  br i1 %52, label %92, label %85

85:                                               ; preds = %84
  %86 = or i8 %83, %65
  %87 = icmp eq i8 %86, 0
  %88 = and i1 %59, %87
  br i1 %88, label %92, label %98

89:                                               ; preds = %82
  %90 = icmp eq i8 %83, 0
  %91 = select i1 %64, i1 %90, i1 %59
  br i1 %91, label %92, label %98

92:                                               ; preds = %89, %85, %84
  %93 = icmp ne i64 %60, 9218868437227405312
  %94 = icmp eq i64 %62, 0
  %95 = or i1 %94, %93
  %96 = or i64 %32, 2251799813685248
  %97 = select i1 %95, i64 %32, i64 %96
  br label %389

98:                                               ; preds = %89, %85
  %99 = icmp ne i64 %53, 9218868437227405312
  %100 = icmp eq i64 %55, 0
  %101 = or i1 %100, %99
  %102 = or i64 %31, 2251799813685248
  %103 = select i1 %101, i64 %31, i64 %102
  br label %389

104:                                              ; preds = %46
  %105 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %106, 1
  store i8 %107, i8* %105, align 1
  br label %389

108:                                              ; preds = %30
  switch i32 %42, label %180 [
    i32 2047, label %109
    i32 0, label %165
  ]

109:                                              ; preds = %108
  %110 = icmp eq i64 %39, 0
  br i1 %110, label %389, label %111

111:                                              ; preds = %109
  %112 = shl i64 %31, 1
  %113 = icmp ult i64 %112, -4503599627370496
  %114 = and i64 %31, 9221120237041090560
  %115 = icmp eq i64 %114, 9218868437227405312
  %116 = and i64 %31, 2251799813685247
  %117 = icmp ne i64 %116, 0
  %118 = and i1 %115, %117
  %119 = shl i64 %32, 1
  %120 = icmp ugt i64 %119, -4503599627370497
  %121 = and i64 %32, 9221120237041090560
  %122 = icmp eq i64 %121, 9218868437227405312
  %123 = and i64 %32, 2251799813685247
  %124 = icmp ne i64 %123, 0
  %125 = and i1 %122, %124
  %126 = zext i1 %125 to i8
  %127 = or i1 %118, %125
  br i1 %127, label %128, label %132

128:                                              ; preds = %111
  %129 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %130 = load i8, i8* %129, align 1
  %131 = or i8 %130, 1
  store i8 %131, i8* %129, align 1
  br label %132

132:                                              ; preds = %128, %111
  %133 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %389

136:                                              ; preds = %132
  %137 = icmp ult i64 %112, %119
  br i1 %137, label %143, label %138

138:                                              ; preds = %136
  %139 = icmp ult i64 %119, %112
  br i1 %139, label %143, label %140

140:                                              ; preds = %138
  %141 = icmp ult i64 %31, %32
  %142 = zext i1 %141 to i8
  br label %143

143:                                              ; preds = %140, %138, %136
  %144 = phi i8 [ %142, %140 ], [ 0, %136 ], [ 1, %138 ]
  br i1 %118, label %150, label %145

145:                                              ; preds = %143
  br i1 %113, label %153, label %146

146:                                              ; preds = %145
  %147 = or i8 %144, %126
  %148 = icmp eq i8 %147, 0
  %149 = and i1 %120, %148
  br i1 %149, label %153, label %159

150:                                              ; preds = %143
  %151 = icmp eq i8 %144, 0
  %152 = select i1 %125, i1 %151, i1 %120
  br i1 %152, label %153, label %159

153:                                              ; preds = %150, %146, %145
  %154 = icmp ne i64 %121, 9218868437227405312
  %155 = icmp eq i64 %123, 0
  %156 = or i1 %155, %154
  %157 = or i64 %32, 2251799813685248
  %158 = select i1 %156, i64 %32, i64 %157
  br label %389

159:                                              ; preds = %150, %146
  %160 = icmp ne i64 %114, 9218868437227405312
  %161 = icmp eq i64 %116, 0
  %162 = or i1 %161, %160
  %163 = or i64 %31, 2251799813685248
  %164 = select i1 %162, i64 %31, i64 %163
  br label %389

165:                                              ; preds = %108
  %166 = icmp eq i64 %39, 0
  br i1 %166, label %167, label %171

167:                                              ; preds = %165
  %168 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %169 = load i8, i8* %168, align 1
  %170 = or i8 %169, 1
  store i8 %170, i8* %168, align 1
  br label %389

171:                                              ; preds = %165
  %ctlz.sh = lshr i64 %39, 1
  %ctlz.step = or i64 %39, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %172 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %172, 6148914691236517205
  %ctpop.sh = lshr i64 %172, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %173 = trunc i64 %ctpop.part to i32
  %174 = shl nuw nsw i32 %173, 24
  %175 = add nsw i32 %174, -184549376
  %176 = ashr exact i32 %175, 24
  %177 = zext i32 %176 to i64
  %178 = shl i64 %39, %177
  %179 = sub nsw i32 1, %176
  br label %180

180:                                              ; preds = %108, %171
  %181 = phi i32 [ %42, %108 ], [ %179, %171 ]
  %182 = phi i64 [ %39, %108 ], [ %178, %171 ]
  %183 = icmp eq i32 %36, 0
  br i1 %183, label %184, label %195

184:                                              ; preds = %180
  %185 = icmp eq i64 %33, 0
  br i1 %185, label %389, label %186

186:                                              ; preds = %184
  %ctlz.sh31 = lshr i64 %33, 1
  %ctlz.step32 = or i64 %33, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %187 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %187, 6148914691236517205
  %ctpop.sh44 = lshr i64 %187, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %188 = trunc i64 %ctpop.part67 to i32
  %189 = shl nuw nsw i32 %188, 24
  %190 = add nsw i32 %189, -184549376
  %191 = ashr exact i32 %190, 24
  %192 = zext i32 %191 to i64
  %193 = shl i64 %33, %192
  %194 = sub nsw i32 1, %191
  br label %195

195:                                              ; preds = %186, %180
  %196 = phi i32 [ %194, %186 ], [ %36, %180 ]
  %197 = phi i64 [ %193, %186 ], [ %33, %180 ]
  %198 = sub nsw i32 %196, %181
  %199 = shl i64 %197, 11
  %200 = or i64 %199, -9223372036854775808
  %201 = shl i64 %182, 11
  %202 = or i64 %201, -9223372036854775808
  %203 = icmp slt i32 %198, 0
  br i1 %203, label %204, label %208

204:                                              ; preds = %195
  %205 = icmp eq i32 %198, -1
  br i1 %205, label %206, label %389

206:                                              ; preds = %204
  %207 = lshr exact i64 %200, 1
  br label %347

208:                                              ; preds = %195
  %209 = icmp uge i64 %200, %202
  %210 = zext i1 %209 to i64
  %211 = select i1 %209, i64 %202, i64 0
  %212 = sub nsw i64 %200, %211
  %213 = add nsw i32 %198, -64
  %214 = icmp sgt i32 %198, 64
  br i1 %214, label %215, label %277

215:                                              ; preds = %208
  %216 = lshr i64 %202, 32
  %217 = and i64 %202, -4294967296
  %218 = and i64 %201, 4294965248
  %219 = shl i64 %182, 43
  %220 = lshr exact i64 %202, 2
  br label %221

221:                                              ; preds = %215, %268
  %222 = phi i32 [ %213, %215 ], [ %275, %268 ]
  %223 = phi i64 [ %212, %215 ], [ %274, %268 ]
  %224 = icmp ugt i64 %202, %223
  br i1 %224, label %225, label %268

225:                                              ; preds = %221
  %226 = icmp ugt i64 %217, %223
  br i1 %226, label %227, label %230

227:                                              ; preds = %225
  %228 = udiv i64 %223, %216
  %229 = shl i64 %228, 32
  br label %230

230:                                              ; preds = %227, %225
  %231 = phi i64 [ %229, %227 ], [ -4294967296, %225 ]
  %232 = lshr exact i64 %231, 32
  %233 = mul nuw i64 %232, %218
  %234 = mul nuw i64 %232, %216
  %235 = lshr i64 %233, 32
  %236 = shl i64 %233, 32
  %237 = sub i64 0, %236
  %238 = icmp ne i64 %236, 0
  %239 = sext i1 %238 to i64
  %240 = sub i64 %223, %234
  %241 = sub i64 %240, %235
  %242 = add i64 %241, %239
  %243 = icmp slt i64 %242, 0
  br i1 %243, label %244, label %255

244:                                              ; preds = %230, %244
  %245 = phi i64 [ %248, %244 ], [ %231, %230 ]
  %246 = phi i64 [ %253, %244 ], [ %242, %230 ]
  %247 = phi i64 [ %249, %244 ], [ %237, %230 ]
  %248 = add i64 %245, -4294967296
  %249 = add i64 %247, %219
  %250 = add i64 %246, %216
  %251 = icmp ult i64 %249, %247
  %252 = zext i1 %251 to i64
  %253 = add i64 %250, %252
  %254 = icmp slt i64 %253, 0
  br i1 %254, label %244, label %255

255:                                              ; preds = %244, %230
  %256 = phi i64 [ %237, %230 ], [ %249, %244 ]
  %257 = phi i64 [ %242, %230 ], [ %253, %244 ]
  %258 = phi i64 [ %231, %230 ], [ %248, %244 ]
  %259 = shl i64 %257, 32
  %260 = lshr i64 %256, 32
  %261 = or i64 %259, %260
  %262 = icmp ugt i64 %217, %261
  br i1 %262, label %263, label %265

263:                                              ; preds = %255
  %264 = udiv i64 %261, %216
  br label %265

265:                                              ; preds = %263, %255
  %266 = phi i64 [ %264, %263 ], [ 4294967295, %255 ]
  %267 = or i64 %266, %258
  br label %268

268:                                              ; preds = %221, %265
  %269 = phi i64 [ %267, %265 ], [ -1, %221 ]
  %270 = sub i64 %269, 2
  %271 = icmp ult i64 %269, 2
  %272 = select i1 %271, i64 0, i64 %270
  %273 = mul i64 %220, %272
  %274 = sub i64 0, %273
  %275 = add nsw i32 %222, -62
  %276 = icmp sgt i32 %222, 62
  br i1 %276, label %221, label %277

277:                                              ; preds = %268, %208
  %278 = phi i64 [ %212, %208 ], [ %274, %268 ]
  %279 = phi i32 [ %213, %208 ], [ %275, %268 ]
  %280 = phi i64 [ %210, %208 ], [ %272, %268 ]
  %281 = icmp sgt i32 %279, -64
  br i1 %281, label %282, label %347

282:                                              ; preds = %277
  %283 = icmp ugt i64 %202, %278
  br i1 %283, label %284, label %332

284:                                              ; preds = %282
  %285 = lshr i64 %202, 32
  %286 = and i64 %202, -4294967296
  %287 = icmp ugt i64 %286, %278
  br i1 %287, label %288, label %291

288:                                              ; preds = %284
  %289 = udiv i64 %278, %285
  %290 = shl i64 %289, 32
  br label %291

291:                                              ; preds = %288, %284
  %292 = phi i64 [ %290, %288 ], [ -4294967296, %284 ]
  %293 = lshr exact i64 %292, 32
  %294 = and i64 %201, 4294965248
  %295 = mul nuw i64 %293, %294
  %296 = mul nuw i64 %293, %285
  %297 = lshr i64 %295, 32
  %298 = shl i64 %295, 32
  %299 = sub i64 0, %298
  %300 = icmp ne i64 %298, 0
  %301 = sext i1 %300 to i64
  %302 = sub i64 %278, %296
  %303 = sub i64 %302, %297
  %304 = add i64 %303, %301
  %305 = icmp slt i64 %304, 0
  br i1 %305, label %306, label %319

306:                                              ; preds = %291
  %307 = shl i64 %182, 43
  br label %308

308:                                              ; preds = %308, %306
  %309 = phi i64 [ %292, %306 ], [ %312, %308 ]
  %310 = phi i64 [ %304, %306 ], [ %317, %308 ]
  %311 = phi i64 [ %299, %306 ], [ %313, %308 ]
  %312 = add i64 %309, -4294967296
  %313 = add i64 %311, %307
  %314 = add i64 %310, %285
  %315 = icmp ult i64 %313, %311
  %316 = zext i1 %315 to i64
  %317 = add i64 %314, %316
  %318 = icmp slt i64 %317, 0
  br i1 %318, label %308, label %319

319:                                              ; preds = %308, %291
  %320 = phi i64 [ %299, %291 ], [ %313, %308 ]
  %321 = phi i64 [ %304, %291 ], [ %317, %308 ]
  %322 = phi i64 [ %292, %291 ], [ %312, %308 ]
  %323 = shl i64 %321, 32
  %324 = lshr i64 %320, 32
  %325 = or i64 %323, %324
  %326 = icmp ugt i64 %286, %325
  br i1 %326, label %327, label %329

327:                                              ; preds = %319
  %328 = udiv i64 %325, %285
  br label %329

329:                                              ; preds = %327, %319
  %330 = phi i64 [ %328, %327 ], [ 4294967295, %319 ]
  %331 = or i64 %330, %322
  br label %332

332:                                              ; preds = %282, %329
  %333 = phi i64 [ %331, %329 ], [ -1, %282 ]
  %334 = sub i64 %333, 2
  %335 = icmp ult i64 %333, 2
  %336 = select i1 %335, i64 0, i64 %334
  %337 = sub i32 0, %279
  %338 = zext i32 %337 to i64
  %339 = lshr i64 %336, %338
  %340 = lshr exact i64 %202, 2
  %341 = lshr i64 %278, 1
  %342 = add nsw i32 %279, 63
  %343 = zext i32 %342 to i64
  %344 = shl i64 %341, %343
  %345 = mul i64 %339, %340
  %346 = sub i64 %344, %345
  br label %352

347:                                              ; preds = %206, %277
  %348 = phi i64 [ 0, %206 ], [ %280, %277 ]
  %349 = phi i64 [ %207, %206 ], [ %278, %277 ]
  %350 = lshr i64 %349, 2
  %351 = lshr exact i64 %202, 2
  br label %352

352:                                              ; preds = %347, %332
  %353 = phi i64 [ %346, %332 ], [ %350, %347 ]
  %354 = phi i64 [ %340, %332 ], [ %351, %347 ]
  %355 = phi i64 [ %339, %332 ], [ %348, %347 ]
  br label %356

356:                                              ; preds = %356, %352
  %357 = phi i64 [ %353, %352 ], [ %360, %356 ]
  %358 = phi i64 [ %355, %352 ], [ %359, %356 ]
  %359 = add i64 %358, 1
  %360 = sub i64 %357, %354
  %361 = icmp sgt i64 %360, -1
  br i1 %361, label %356, label %362

362:                                              ; preds = %356
  %363 = add i64 %360, %357
  %364 = icmp slt i64 %363, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %362
  %366 = icmp ne i64 %363, 0
  %367 = and i64 %359, 1
  %368 = icmp eq i64 %367, 0
  %369 = or i1 %366, %368
  br i1 %369, label %374, label %370

370:                                              ; preds = %362, %365
  %371 = lshr i64 %357, 63
  %372 = trunc i64 %371 to i8
  %373 = icmp slt i64 %357, 0
  br i1 %373, label %374, label %378

374:                                              ; preds = %365, %370
  %375 = phi i8 [ %372, %370 ], [ 1, %365 ]
  %376 = phi i64 [ %357, %370 ], [ %360, %365 ]
  %377 = sub i64 0, %376
  br label %378

378:                                              ; preds = %374, %370
  %379 = phi i8 [ %375, %374 ], [ %372, %370 ]
  %380 = phi i64 [ %377, %374 ], [ %357, %370 ]
  %381 = xor i8 %379, %38
  %ctlz.sh68 = lshr i64 %380, 1
  %ctlz.step69 = or i64 %380, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %382 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %382, 6148914691236517205
  %ctpop.sh81 = lshr i64 %382, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %383 = trunc i64 %ctpop.part104 to i32
  %384 = add nsw i32 %383, -1
  %385 = sub nsw i32 %181, %384
  %386 = zext i32 %384 to i64
  %387 = shl i64 %380, %386
  %388 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %381, i32 %385, i64 %387, %struct.float_status* %2) #23
  br label %389

389:                                              ; preds = %159, %153, %132, %98, %92, %71, %204, %184, %109, %378, %167, %104
  %390 = phi i64 [ -2251799813685248, %104 ], [ -2251799813685248, %167 ], [ %388, %378 ], [ %31, %109 ], [ %31, %184 ], [ %31, %204 ], [ %97, %92 ], [ %103, %98 ], [ -2251799813685248, %71 ], [ %158, %153 ], [ %164, %159 ], [ -2251799813685248, %132 ]
  ret i64 %390
}

; Function Attrs: nounwind uwtable
define i64 @float64_muladd(i64 %0, i64 %1, i64 %2, i32 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %44, label %9

9:                                                ; preds = %5
  %10 = and i64 %0, 9218868437227405312
  %11 = icmp ne i64 %10, 0
  %12 = and i64 %0, 4503599627370495
  %13 = icmp eq i64 %12, 0
  %14 = or i1 %11, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = or i8 %17, 64
  store i8 %18, i8* %16, align 1
  %19 = and i64 %0, -9223372036854775808
  br label %20

20:                                               ; preds = %9, %15
  %21 = phi i64 [ %0, %9 ], [ %19, %15 ]
  %22 = and i64 %1, 9218868437227405312
  %23 = icmp ne i64 %22, 0
  %24 = and i64 %1, 4503599627370495
  %25 = icmp eq i64 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %29 = load i8, i8* %28, align 1
  %30 = or i8 %29, 64
  store i8 %30, i8* %28, align 1
  %31 = and i64 %1, -9223372036854775808
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi i64 [ %1, %20 ], [ %31, %27 ]
  %34 = and i64 %2, 9218868437227405312
  %35 = icmp ne i64 %34, 0
  %36 = and i64 %2, 4503599627370495
  %37 = icmp eq i64 %36, 0
  %38 = or i1 %35, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 64
  store i8 %42, i8* %40, align 1
  %43 = and i64 %2, -9223372036854775808
  br label %44

44:                                               ; preds = %5, %32, %39
  %45 = phi i64 [ %33, %39 ], [ %33, %32 ], [ %1, %5 ]
  %46 = phi i64 [ %21, %39 ], [ %21, %32 ], [ %0, %5 ]
  %47 = phi i64 [ %43, %39 ], [ %2, %32 ], [ %2, %5 ]
  %48 = and i64 %46, 4503599627370495
  %49 = lshr i64 %46, 52
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, 2047
  %52 = and i64 %45, 4503599627370495
  %53 = lshr i64 %45, 52
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 2047
  %56 = and i64 %47, 4503599627370495
  %57 = lshr i64 %47, 52
  %58 = trunc i64 %57 to i32
  %59 = and i32 %58, 2047
  %60 = lshr i64 %47, 63
  %61 = trunc i64 %60 to i8
  %62 = icmp eq i32 %51, 0
  %63 = icmp eq i64 %48, 0
  %64 = and i1 %63, %62
  %65 = icmp eq i32 %55, 2047
  %66 = and i1 %65, %64
  %67 = icmp eq i64 %52, 0
  %68 = and i1 %67, %66
  br i1 %68, label %80, label %69

69:                                               ; preds = %44
  %70 = icmp eq i32 %51, 2047
  %71 = and i1 %63, %70
  %72 = icmp eq i32 %55, 0
  %73 = and i1 %72, %71
  %74 = and i1 %67, %73
  %75 = icmp ne i64 %48, 0
  %76 = and i1 %75, %70
  %77 = icmp ne i64 %52, 0
  %78 = and i1 %77, %65
  %79 = or i1 %78, %76
  br i1 %79, label %86, label %80

80:                                               ; preds = %69, %44
  %81 = phi i1 [ true, %44 ], [ %74, %69 ]
  %82 = phi i1 [ false, %44 ], [ %70, %69 ]
  %83 = icmp eq i32 %59, 2047
  %84 = icmp ne i64 %56, 0
  %85 = and i1 %84, %83
  br i1 %85, label %86, label %139

86:                                               ; preds = %80, %69
  %87 = shl i64 %46, 1
  %88 = icmp ugt i64 %87, -4503599627370497
  %89 = and i64 %46, 9221120237041090560
  %90 = icmp eq i64 %89, 9218868437227405312
  %91 = and i64 %46, 2251799813685247
  %92 = icmp ne i64 %91, 0
  %93 = and i1 %90, %92
  %94 = shl i64 %45, 1
  %95 = icmp ugt i64 %94, -4503599627370497
  %96 = and i64 %45, 9221120237041090560
  %97 = icmp eq i64 %96, 9218868437227405312
  %98 = and i64 %45, 2251799813685247
  %99 = icmp ne i64 %98, 0
  %100 = and i1 %97, %99
  %101 = and i64 %47, 9221120237041090560
  %102 = icmp eq i64 %101, 9218868437227405312
  %103 = and i64 %47, 2251799813685247
  %104 = icmp ne i64 %103, 0
  %105 = and i1 %102, %104
  %106 = or i1 %100, %93
  %107 = or i1 %106, %105
  br i1 %107, label %108, label %112

108:                                              ; preds = %86
  %109 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %110 = load i8, i8* %109, align 1
  %111 = or i8 %110, 1
  store i8 %111, i8* %109, align 1
  br label %112

112:                                              ; preds = %108, %86
  %113 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %116, label %549

116:                                              ; preds = %112
  %117 = or i1 %95, %100
  %118 = or i1 %88, %93
  %119 = select i1 %117, i32 1, i32 2
  %120 = select i1 %118, i32 0, i32 %119
  switch i32 %120, label %549 [
    i32 0, label %121
    i32 1, label %127
    i32 2, label %133
  ]

121:                                              ; preds = %116
  %122 = icmp ne i64 %89, 9218868437227405312
  %123 = icmp eq i64 %91, 0
  %124 = or i1 %123, %122
  %125 = or i64 %46, 2251799813685248
  %126 = select i1 %124, i64 %46, i64 %125
  br label %549

127:                                              ; preds = %116
  %128 = icmp ne i64 %96, 9218868437227405312
  %129 = icmp eq i64 %98, 0
  %130 = or i1 %129, %128
  %131 = or i64 %45, 2251799813685248
  %132 = select i1 %130, i64 %45, i64 %131
  br label %549

133:                                              ; preds = %116
  %134 = icmp ne i64 %101, 9218868437227405312
  %135 = icmp eq i64 %103, 0
  %136 = or i1 %135, %134
  %137 = or i64 %47, 2251799813685248
  %138 = select i1 %136, i64 %47, i64 %137
  br label %549

139:                                              ; preds = %80
  br i1 %81, label %140, label %144

140:                                              ; preds = %139
  %141 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %142 = load i8, i8* %141, align 1
  %143 = or i8 %142, 1
  store i8 %143, i8* %141, align 1
  br label %549

144:                                              ; preds = %139
  %145 = trunc i32 %3 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, %61
  %148 = and i32 %3, 3
  %149 = icmp ne i32 %148, 0
  %150 = xor i64 %46, %45
  %151 = lshr i64 %150, 63
  %152 = trunc i64 %151 to i8
  %153 = lshr i32 %3, 1
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, %152
  %157 = or i1 %65, %82
  %158 = zext i32 %51 to i64
  %159 = or i64 %48, %158
  %160 = icmp eq i64 %159, 0
  %161 = zext i32 %55 to i64
  %162 = or i64 %52, %161
  %163 = icmp eq i64 %162, 0
  %164 = or i1 %163, %160
  br i1 %83, label %165, label %179

165:                                              ; preds = %144
  %166 = xor i1 %157, true
  %167 = icmp eq i8 %156, %147
  %168 = or i1 %167, %166
  br i1 %168, label %173, label %169

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %171 = load i8, i8* %170, align 1
  %172 = or i8 %171, 1
  store i8 %172, i8* %170, align 1
  br label %549

173:                                              ; preds = %165
  %174 = zext i1 %149 to i8
  %175 = xor i8 %147, %174
  %176 = zext i8 %175 to i64
  %177 = shl nuw i64 %176, 63
  %178 = or i64 %177, 9218868437227405312
  br label %549

179:                                              ; preds = %144
  br i1 %157, label %180, label %186

180:                                              ; preds = %179
  %181 = zext i1 %149 to i8
  %182 = xor i8 %156, %181
  %183 = zext i8 %182 to i64
  %184 = shl nuw i64 %183, 63
  %185 = or i64 %184, 9218868437227405312
  br label %549

186:                                              ; preds = %179
  br i1 %164, label %187, label %219

187:                                              ; preds = %186
  %188 = icmp eq i32 %59, 0
  br i1 %188, label %189, label %216

189:                                              ; preds = %187
  %190 = icmp eq i64 %56, 0
  br i1 %190, label %191, label %204

191:                                              ; preds = %189
  %192 = icmp eq i8 %156, %147
  br i1 %192, label %198, label %193

193:                                              ; preds = %191
  %194 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %195, 1
  %197 = zext i1 %196 to i8
  br label %198

198:                                              ; preds = %193, %191
  %199 = phi i8 [ %147, %191 ], [ %197, %193 ]
  %200 = zext i1 %149 to i8
  %201 = xor i8 %199, %200
  %202 = zext i8 %201 to i64
  %203 = shl i64 %202, 63
  br label %549

204:                                              ; preds = %189
  %205 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 4
  %206 = load i8, i8* %205, align 1
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %216, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %210 = load i8, i8* %209, align 1
  %211 = or i8 %210, -128
  store i8 %211, i8* %209, align 1
  %212 = zext i1 %149 to i8
  %213 = xor i8 %147, %212
  %214 = zext i8 %213 to i64
  %215 = shl nuw i64 %214, 63
  br label %549

216:                                              ; preds = %204, %187
  %217 = select i1 %149, i64 -9223372036854775808, i64 0
  %218 = xor i64 %47, %217
  br label %549

219:                                              ; preds = %186
  br i1 %62, label %220, label %229

220:                                              ; preds = %219
  %ctlz.sh = lshr i64 %48, 1
  %ctlz.step = or i64 %48, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %221 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %221, 6148914691236517205
  %ctpop.sh = lshr i64 %221, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %222 = trunc i64 %ctpop.part to i32
  %223 = shl nuw nsw i32 %222, 24
  %224 = add nsw i32 %223, -184549376
  %225 = ashr exact i32 %224, 24
  %226 = zext i32 %225 to i64
  %227 = shl i64 %48, %226
  %228 = sub nsw i32 1, %225
  br label %229

229:                                              ; preds = %220, %219
  %230 = phi i32 [ %228, %220 ], [ %51, %219 ]
  %231 = phi i64 [ %227, %220 ], [ %48, %219 ]
  %232 = icmp eq i32 %55, 0
  br i1 %232, label %233, label %242

233:                                              ; preds = %229
  %ctlz.sh31 = lshr i64 %52, 1
  %ctlz.step32 = or i64 %52, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %234 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %234, 6148914691236517205
  %ctpop.sh44 = lshr i64 %234, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %235 = trunc i64 %ctpop.part67 to i32
  %236 = shl nuw nsw i32 %235, 24
  %237 = add nsw i32 %236, -184549376
  %238 = ashr exact i32 %237, 24
  %239 = zext i32 %238 to i64
  %240 = shl i64 %52, %239
  %241 = sub nsw i32 1, %238
  br label %242

242:                                              ; preds = %233, %229
  %243 = phi i32 [ %241, %233 ], [ %55, %229 ]
  %244 = phi i64 [ %240, %233 ], [ %52, %229 ]
  %245 = add nsw i32 %243, %230
  %246 = add nsw i32 %245, -1022
  %247 = shl i64 %231, 10
  %248 = shl i64 %244, 11
  %249 = lshr i64 %231, 22
  %250 = and i64 %249, 3221225471
  %251 = or i64 %250, 1073741824
  %252 = lshr i64 %244, 21
  %253 = and i64 %252, 2147483647
  %254 = or i64 %253, 2147483648
  %255 = and i64 %247, 4294966272
  %256 = and i64 %248, 4294965248
  %257 = mul nuw i64 %256, %255
  %258 = mul nuw i64 %254, %255
  %259 = mul nuw i64 %256, %251
  %260 = mul nuw i64 %254, %251
  %261 = add i64 %258, %259
  %262 = icmp ult i64 %261, %259
  %263 = select i1 %262, i64 4294967296, i64 0
  %264 = lshr i64 %261, 32
  %265 = or i64 %263, %264
  %266 = add i64 %265, %260
  %267 = shl i64 %261, 32
  %268 = add i64 %267, %257
  %269 = icmp ult i64 %268, %267
  %270 = zext i1 %269 to i64
  %271 = add i64 %266, %270
  %272 = and i64 %271, 4611686018427387904
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %280

274:                                              ; preds = %242
  %275 = shl i64 %268, 1
  %276 = shl i64 %271, 1
  %277 = lshr i64 %268, 63
  %278 = or i64 %276, %277
  %279 = add nsw i32 %245, -1023
  br label %280

280:                                              ; preds = %274, %242
  %281 = phi i64 [ %278, %274 ], [ %271, %242 ]
  %282 = phi i64 [ %275, %274 ], [ %268, %242 ]
  %283 = phi i32 [ %279, %274 ], [ %246, %242 ]
  %284 = zext i1 %149 to i8
  %285 = xor i8 %156, %284
  %286 = icmp eq i32 %59, 0
  br i1 %286, label %287, label %304

287:                                              ; preds = %280
  %288 = icmp eq i64 %56, 0
  br i1 %288, label %289, label %295

289:                                              ; preds = %287
  %290 = icmp ne i64 %282, 0
  %291 = zext i1 %290 to i64
  %292 = or i64 %281, %291
  %293 = add nsw i32 %283, -1
  %294 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %285, i32 %293, i64 %292, %struct.float_status* nonnull %4)
  br label %549

295:                                              ; preds = %287
  %ctlz.sh68 = lshr i64 %56, 1
  %ctlz.step69 = or i64 %56, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %296 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %296, 6148914691236517205
  %ctpop.sh81 = lshr i64 %296, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %297 = trunc i64 %ctpop.part104 to i32
  %298 = shl nuw nsw i32 %297, 24
  %299 = add nsw i32 %298, -184549376
  %300 = ashr exact i32 %299, 24
  %301 = zext i32 %300 to i64
  %302 = shl i64 %56, %301
  %303 = sub nsw i32 1, %300
  br label %304

304:                                              ; preds = %295, %280
  %305 = phi i32 [ %303, %295 ], [ %59, %280 ]
  %306 = phi i64 [ %302, %295 ], [ %56, %280 ]
  %307 = shl i64 %306, 10
  %308 = or i64 %307, 4611686018427387904
  %309 = sub nsw i32 %283, %305
  %310 = icmp eq i8 %156, %147
  %311 = icmp sgt i32 %309, 0
  br i1 %310, label %312, label %406

312:                                              ; preds = %304
  br i1 %311, label %313, label %336

313:                                              ; preds = %312
  %314 = trunc i32 %309 to i8
  %315 = sub i8 0, %314
  %316 = and i8 %315, 63
  %317 = icmp slt i32 %309, 64
  br i1 %317, label %318, label %323

318:                                              ; preds = %313
  %319 = zext i8 %316 to i64
  %320 = shl i64 %308, %319
  %321 = zext i32 %309 to i64
  %322 = lshr i64 %308, %321
  br label %377

323:                                              ; preds = %313
  %324 = icmp eq i32 %309, 64
  br i1 %324, label %377, label %325

325:                                              ; preds = %323
  %326 = icmp slt i32 %309, 128
  br i1 %326, label %327, label %377

327:                                              ; preds = %325
  %328 = and i32 %309, 63
  %329 = zext i32 %328 to i64
  %330 = lshr i64 %308, %329
  %331 = zext i8 %316 to i64
  %332 = shl i64 %308, %331
  %333 = icmp ne i64 %332, 0
  %334 = zext i1 %333 to i64
  %335 = or i64 %330, %334
  br label %377

336:                                              ; preds = %312
  %337 = icmp slt i32 %309, 0
  br i1 %337, label %338, label %377

338:                                              ; preds = %336
  %339 = sub nsw i32 0, %309
  %340 = trunc i32 %339 to i8
  %341 = sub i8 0, %340
  %342 = and i8 %341, 63
  %343 = icmp sgt i32 %309, -64
  br i1 %343, label %344, label %355

344:                                              ; preds = %338
  %345 = zext i8 %342 to i64
  %346 = shl i64 %281, %345
  %347 = zext i32 %339 to i64
  %348 = lshr i64 %282, %347
  %349 = or i64 %346, %348
  %350 = shl i64 %282, %345
  %351 = icmp ne i64 %350, 0
  %352 = zext i1 %351 to i64
  %353 = or i64 %349, %352
  %354 = lshr i64 %281, %347
  br label %377

355:                                              ; preds = %338
  %356 = icmp eq i32 %339, 64
  br i1 %356, label %357, label %361

357:                                              ; preds = %355
  %358 = icmp ne i64 %282, 0
  %359 = zext i1 %358 to i64
  %360 = or i64 %281, %359
  br label %377

361:                                              ; preds = %355
  %362 = icmp sgt i32 %309, -128
  br i1 %362, label %363, label %373

363:                                              ; preds = %361
  %364 = and i32 %339, 63
  %365 = zext i32 %364 to i64
  %366 = lshr i64 %281, %365
  %367 = zext i8 %342 to i64
  %368 = shl i64 %281, %367
  %369 = or i64 %368, %282
  %370 = icmp ne i64 %369, 0
  %371 = zext i1 %370 to i64
  %372 = or i64 %366, %371
  br label %377

373:                                              ; preds = %361
  %374 = or i64 %282, %281
  %375 = icmp ne i64 %374, 0
  %376 = zext i1 %375 to i64
  br label %377

377:                                              ; preds = %373, %363, %357, %344, %327, %318, %323, %325, %336
  %378 = phi i64 [ %281, %336 ], [ %281, %325 ], [ %281, %323 ], [ %281, %318 ], [ %281, %327 ], [ %354, %344 ], [ 0, %357 ], [ 0, %363 ], [ 0, %373 ]
  %379 = phi i64 [ %282, %336 ], [ %282, %325 ], [ %282, %323 ], [ %282, %318 ], [ %282, %327 ], [ %353, %344 ], [ %360, %357 ], [ %372, %363 ], [ %376, %373 ]
  %380 = phi i64 [ %308, %336 ], [ 0, %325 ], [ 0, %323 ], [ %322, %318 ], [ 0, %327 ], [ %308, %344 ], [ %308, %357 ], [ %308, %363 ], [ %308, %373 ]
  %381 = phi i64 [ 0, %336 ], [ 1, %325 ], [ %308, %323 ], [ %320, %318 ], [ %335, %327 ], [ 0, %344 ], [ 0, %357 ], [ 0, %363 ], [ 0, %373 ]
  %382 = phi i32 [ %305, %336 ], [ %283, %325 ], [ %283, %323 ], [ %283, %318 ], [ %283, %327 ], [ %305, %344 ], [ %305, %357 ], [ %305, %363 ], [ %305, %373 ]
  %383 = add i64 %381, %379
  %384 = add i64 %380, %378
  %385 = icmp ult i64 %383, %379
  %386 = zext i1 %385 to i64
  %387 = add i64 %384, %386
  %388 = icmp slt i64 %387, 0
  br i1 %388, label %389, label %396

389:                                              ; preds = %377
  %390 = shl i64 %387, 63
  %391 = lshr i64 %383, 1
  %392 = and i64 %383, 1
  %393 = or i64 %392, %391
  %394 = or i64 %393, %390
  %395 = lshr i64 %387, 1
  br label %398

396:                                              ; preds = %377
  %397 = add nsw i32 %382, -1
  br label %398

398:                                              ; preds = %396, %389
  %399 = phi i64 [ %395, %389 ], [ %387, %396 ]
  %400 = phi i64 [ %394, %389 ], [ %383, %396 ]
  %401 = phi i32 [ %382, %389 ], [ %397, %396 ]
  %402 = icmp ne i64 %400, 0
  %403 = zext i1 %402 to i64
  %404 = or i64 %399, %403
  %405 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %285, i32 %401, i64 %404, %struct.float_status* nonnull %4)
  br label %549

406:                                              ; preds = %304
  br i1 %311, label %407, label %439

407:                                              ; preds = %406
  %408 = trunc i32 %309 to i8
  %409 = sub i8 0, %408
  %410 = and i8 %409, 63
  %411 = icmp slt i32 %309, 64
  br i1 %411, label %412, label %418

412:                                              ; preds = %407
  %413 = zext i8 %410 to i64
  %414 = shl i64 %308, %413
  %415 = zext i32 %309 to i64
  %416 = lshr i64 %308, %415
  %417 = sub nsw i64 0, %416
  br label %431

418:                                              ; preds = %407
  %419 = icmp eq i32 %309, 64
  br i1 %419, label %431, label %420

420:                                              ; preds = %418
  %421 = icmp slt i32 %309, 128
  br i1 %421, label %422, label %431

422:                                              ; preds = %420
  %423 = and i32 %309, 63
  %424 = zext i32 %423 to i64
  %425 = lshr i64 %308, %424
  %426 = zext i8 %410 to i64
  %427 = shl i64 %308, %426
  %428 = icmp ne i64 %427, 0
  %429 = zext i1 %428 to i64
  %430 = or i64 %425, %429
  br label %431

431:                                              ; preds = %420, %418, %412, %422
  %432 = phi i64 [ %414, %412 ], [ %430, %422 ], [ %308, %418 ], [ 1, %420 ]
  %433 = phi i64 [ %417, %412 ], [ 0, %422 ], [ 0, %418 ], [ 0, %420 ]
  %434 = sub i64 %282, %432
  %435 = add i64 %433, %281
  %436 = icmp ult i64 %282, %432
  %437 = sext i1 %436 to i64
  %438 = add i64 %435, %437
  br label %512

439:                                              ; preds = %406
  %440 = icmp slt i32 %309, 0
  br i1 %440, label %441, label %490

441:                                              ; preds = %439
  %442 = sub nsw i32 0, %309
  %443 = trunc i32 %442 to i8
  %444 = sub i8 0, %443
  %445 = and i8 %444, 63
  %446 = icmp sgt i32 %309, -64
  br i1 %446, label %447, label %459

447:                                              ; preds = %441
  %448 = zext i8 %445 to i64
  %449 = shl i64 %281, %448
  %450 = zext i32 %442 to i64
  %451 = lshr i64 %282, %450
  %452 = or i64 %449, %451
  %453 = shl i64 %282, %448
  %454 = icmp ne i64 %453, 0
  %455 = zext i1 %454 to i64
  %456 = or i64 %452, %455
  %457 = lshr i64 %281, %450
  %458 = sub nsw i64 0, %457
  br label %481

459:                                              ; preds = %441
  %460 = icmp eq i32 %442, 64
  br i1 %460, label %461, label %465

461:                                              ; preds = %459
  %462 = icmp ne i64 %282, 0
  %463 = zext i1 %462 to i64
  %464 = or i64 %281, %463
  br label %481

465:                                              ; preds = %459
  %466 = icmp sgt i32 %309, -128
  br i1 %466, label %467, label %477

467:                                              ; preds = %465
  %468 = and i32 %442, 63
  %469 = zext i32 %468 to i64
  %470 = lshr i64 %281, %469
  %471 = zext i8 %445 to i64
  %472 = shl i64 %281, %471
  %473 = or i64 %472, %282
  %474 = icmp ne i64 %473, 0
  %475 = zext i1 %474 to i64
  %476 = or i64 %470, %475
  br label %481

477:                                              ; preds = %465
  %478 = or i64 %282, %281
  %479 = icmp ne i64 %478, 0
  %480 = zext i1 %479 to i64
  br label %481

481:                                              ; preds = %447, %461, %467, %477
  %482 = phi i64 [ %456, %447 ], [ %464, %461 ], [ %476, %467 ], [ %480, %477 ]
  %483 = phi i64 [ %458, %447 ], [ 0, %461 ], [ 0, %467 ], [ 0, %477 ]
  %484 = sub i64 0, %482
  %485 = add i64 %483, %308
  %486 = icmp ne i64 %482, 0
  %487 = sext i1 %486 to i64
  %488 = add i64 %485, %487
  %489 = xor i8 %285, 1
  br label %512

490:                                              ; preds = %439
  %491 = icmp ugt i64 %281, %308
  %492 = icmp eq i64 %281, %308
  %493 = icmp ne i64 %282, 0
  %494 = and i1 %493, %492
  %495 = or i1 %491, %494
  br i1 %495, label %496, label %498

496:                                              ; preds = %490
  %497 = sub i64 %281, %308
  br label %512

498:                                              ; preds = %490
  %499 = icmp ult i64 %281, %308
  br i1 %499, label %500, label %506

500:                                              ; preds = %498
  %501 = sub i64 0, %282
  %502 = sext i1 %493 to i64
  %503 = sub i64 %502, %281
  %504 = add i64 %503, %308
  %505 = xor i8 %285, 1
  br label %512

506:                                              ; preds = %498
  %507 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %508 = load i8, i8* %507, align 1
  %509 = icmp eq i8 %508, 1
  %510 = xor i1 %149, %509
  %511 = select i1 %510, i64 -9223372036854775808, i64 0
  br label %549

512:                                              ; preds = %481, %500, %496, %431
  %513 = phi i64 [ %438, %431 ], [ %488, %481 ], [ %504, %500 ], [ %497, %496 ]
  %514 = phi i64 [ %434, %431 ], [ %484, %481 ], [ %501, %500 ], [ %282, %496 ]
  %515 = phi i8 [ %285, %431 ], [ %489, %481 ], [ %505, %500 ], [ %285, %496 ]
  %516 = phi i32 [ %283, %431 ], [ %305, %481 ], [ %283, %500 ], [ %283, %496 ]
  %517 = icmp eq i64 %513, 0
  br i1 %517, label %536, label %518

518:                                              ; preds = %512
  %ctlz.sh105 = lshr i64 %513, 1
  %ctlz.step106 = or i64 %513, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %519 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %519, 6148914691236517205
  %ctpop.sh118 = lshr i64 %519, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %520 = trunc i64 %ctpop.part141 to i32
  %521 = add nsw i32 %520, -1
  %522 = zext i32 %521 to i64
  %523 = shl i64 %514, %522
  %524 = icmp eq i32 %521, 0
  br i1 %524, label %531, label %525

525:                                              ; preds = %518
  %526 = shl i64 %513, %522
  %527 = sub nsw i64 1, %ctpop.part141
  %528 = and i64 %527, 63
  %529 = lshr i64 %514, %528
  %530 = or i64 %526, %529
  br label %531

531:                                              ; preds = %518, %525
  %532 = phi i64 [ %530, %525 ], [ %513, %518 ]
  %533 = icmp ne i64 %523, 0
  %534 = zext i1 %533 to i64
  %535 = or i64 %532, %534
  br label %543

536:                                              ; preds = %512
  %ctlz.sh142 = lshr i64 %514, 1
  %ctlz.step143 = or i64 %514, %ctlz.sh142
  %ctlz.sh144 = lshr i64 %ctlz.step143, 2
  %ctlz.step145 = or i64 %ctlz.step143, %ctlz.sh144
  %ctlz.sh146 = lshr i64 %ctlz.step145, 4
  %ctlz.step147 = or i64 %ctlz.step145, %ctlz.sh146
  %ctlz.sh148 = lshr i64 %ctlz.step147, 8
  %ctlz.step149 = or i64 %ctlz.step147, %ctlz.sh148
  %ctlz.sh150 = lshr i64 %ctlz.step149, 16
  %ctlz.step151 = or i64 %ctlz.step149, %ctlz.sh150
  %ctlz.sh152 = lshr i64 %ctlz.step151, 32
  %ctlz.step153 = or i64 %ctlz.step151, %ctlz.sh152
  %537 = xor i64 %ctlz.step153, -1
  %cppop.and1154 = and i64 %537, 6148914691236517205
  %ctpop.sh155 = lshr i64 %537, 1
  %cppop.and2156 = and i64 %ctpop.sh155, 6148914691236517205
  %ctpop.step157 = add i64 %cppop.and1154, %cppop.and2156
  %cppop.and1158 = and i64 %ctpop.step157, 3689348814741910323
  %ctpop.sh159 = lshr i64 %ctpop.step157, 2
  %cppop.and2160 = and i64 %ctpop.sh159, 3689348814741910323
  %ctpop.step161 = add i64 %cppop.and1158, %cppop.and2160
  %cppop.and1162 = and i64 %ctpop.step161, 1085102592571150095
  %ctpop.sh163 = lshr i64 %ctpop.step161, 4
  %cppop.and2164 = and i64 %ctpop.sh163, 1085102592571150095
  %ctpop.step165 = add i64 %cppop.and1162, %cppop.and2164
  %cppop.and1166 = and i64 %ctpop.step165, 71777214294589695
  %ctpop.sh167 = lshr i64 %ctpop.step165, 8
  %cppop.and2168 = and i64 %ctpop.sh167, 71777214294589695
  %ctpop.step169 = add i64 %cppop.and1166, %cppop.and2168
  %cppop.and1170 = and i64 %ctpop.step169, 281470681808895
  %ctpop.sh171 = lshr i64 %ctpop.step169, 16
  %cppop.and2172 = and i64 %ctpop.sh171, 281470681808895
  %ctpop.step173 = add i64 %cppop.and1170, %cppop.and2172
  %cppop.and1174 = and i64 %ctpop.step173, 4294967295
  %ctpop.sh175 = lshr i64 %ctpop.step173, 32
  %cppop.and2176 = and i64 %ctpop.sh175, 4294967295
  %ctpop.step177 = add i64 %cppop.and1174, %cppop.and2176
  %ctpop.part178 = add i64 %ctpop.step177, 0
  %538 = trunc i64 %ctpop.part178 to i32
  %539 = add nuw nsw i64 %ctpop.part178, 4294967295
  %540 = and i64 %539, 4294967295
  %541 = shl i64 %514, %540
  %542 = add nuw nsw i32 %538, 63
  br label %543

543:                                              ; preds = %531, %536
  %544 = phi i64 [ %541, %536 ], [ %535, %531 ]
  %545 = phi i32 [ %542, %536 ], [ %521, %531 ]
  %546 = xor i32 %545, -1
  %547 = add i32 %516, %546
  %548 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %515, i32 %547, i64 %544, %struct.float_status* nonnull %4)
  br label %549

549:                                              ; preds = %133, %127, %121, %116, %112, %543, %506, %398, %289, %216, %208, %198, %180, %173, %169, %140
  %550 = phi i64 [ -2251799813685248, %140 ], [ -2251799813685248, %169 ], [ %178, %173 ], [ %185, %180 ], [ %203, %198 ], [ %215, %208 ], [ %218, %216 ], [ %405, %398 ], [ %548, %543 ], [ %511, %506 ], [ %294, %289 ], [ %138, %133 ], [ %132, %127 ], [ %
  ret i64 %550
}

; Function Attrs: nounwind uwtable
define i64 @float64_sqrt(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 2047
  br i1 %23, label %24, label %52

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %46, label %26

26:                                               ; preds = %24
  %27 = and i64 %18, 9221120237041090560
  %28 = icmp eq i64 %27, 9218868437227405312
  %29 = and i64 %18, 2251799813685247
  %30 = icmp ne i64 %29, 0
  %31 = and i1 %28, %30
  br i1 %31, label %32, label %36

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  br label %36

36:                                               ; preds = %32, %26
  %37 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %219

40:                                               ; preds = %36
  %41 = icmp ne i64 %27, 9218868437227405312
  %42 = icmp eq i64 %29, 0
  %43 = or i1 %42, %41
  %44 = or i64 %18, 2251799813685248
  %45 = select i1 %43, i64 %18, i64 %44
  br label %219

46:                                               ; preds = %24
  %47 = icmp sgt i64 %18, -1
  br i1 %47, label %219, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, 1
  store i8 %51, i8* %49, align 1
  br label %219

52:                                               ; preds = %17
  %53 = icmp sgt i64 %18, -1
  br i1 %53, label %62, label %54

54:                                               ; preds = %52
  %55 = zext i32 %22 to i64
  %56 = or i64 %19, %55
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %219, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %60, 1
  store i8 %61, i8* %59, align 1
  br label %219

62:                                               ; preds = %52
  %63 = icmp eq i32 %22, 0
  br i1 %63, label %64, label %75

64:                                               ; preds = %62
  %65 = icmp eq i64 %19, 0
  br i1 %65, label %219, label %66

66:                                               ; preds = %64
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %67 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %67, 6148914691236517205
  %ctpop.sh = lshr i64 %67, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %68 = trunc i64 %ctpop.part to i32
  %69 = shl nuw nsw i32 %68, 24
  %70 = add nsw i32 %69, -184549376
  %71 = ashr exact i32 %70, 24
  %72 = zext i32 %71 to i64
  %73 = shl i64 %19, %72
  %74 = sub nsw i32 1, %71
  br label %75

75:                                               ; preds = %66, %62
  %76 = phi i64 [ %73, %66 ], [ %19, %62 ]
  %77 = phi i32 [ %74, %66 ], [ %22, %62 ]
  %78 = add nsw i32 %77, -1023
  %79 = ashr i32 %78, 1
  %80 = add nsw i32 %79, 1022
  %81 = or i64 %76, 4503599627370496
  %82 = lshr i64 %81, 21
  %83 = trunc i64 %82 to i32
  %84 = lshr i64 %76, 48
  %85 = trunc i64 %84 to i8
  %86 = and i8 %85, 15
  %87 = and i32 %77, 1
  %88 = icmp eq i32 %87, 0
  %89 = lshr i64 %81, 38
  %90 = trunc i64 %89 to i32
  %91 = and i32 %90, 32767
  br i1 %88, label %105, label %92

92:                                               ; preds = %75
  %93 = add nuw nsw i32 %91, 16384
  %94 = zext i8 %86 to i64
  %95 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = sub nsw i32 %93, %97
  %99 = udiv i32 %83, %98
  %100 = shl i32 %99, 14
  %101 = shl nsw i32 %98, 15
  %102 = add i32 %101, %100
  %103 = lshr i64 %81, 22
  %104 = and i64 %103, 2147483647
  br label %120

105:                                              ; preds = %75
  %106 = or i32 %91, 32768
  %107 = zext i8 %86 to i64
  %108 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = sub nsw i32 %106, %110
  %112 = udiv i32 %83, %111
  %113 = add i32 %111, %112
  %114 = icmp ugt i32 %113, 131071
  %115 = shl i32 %113, 15
  %116 = select i1 %114, i32 -32768, i32 %115
  %117 = icmp ugt i32 %116, %83
  br i1 %117, label %120, label %118

118:                                              ; preds = %105
  %119 = ashr i32 %83, 1
  br label %130

120:                                              ; preds = %105, %92
  %121 = phi i64 [ %104, %92 ], [ %82, %105 ]
  %122 = phi i32 [ %102, %92 ], [ %116, %105 ]
  %123 = shl i64 %121, 31
  %124 = and i64 %123, 9223372034707292160
  %125 = zext i32 %122 to i64
  %126 = udiv i64 %124, %125
  %127 = trunc i64 %126 to i32
  %128 = lshr i32 %122, 1
  %129 = add i32 %128, %127
  br label %130

130:                                              ; preds = %118, %120
  %131 = phi i32 [ %129, %120 ], [ %119, %118 ]
  %132 = zext i32 %131 to i64
  %133 = sub nuw nsw i32 9, %87
  %134 = zext i32 %133 to i64
  %135 = shl i64 %81, %134
  %136 = shl nuw i64 %132, 32
  %137 = icmp ugt i64 %136, %135
  br i1 %137, label %138, label %161

138:                                              ; preds = %130
  %139 = udiv i64 %135, %132
  %140 = shl i64 %139, 32
  %141 = and i64 %139, 4294967295
  %142 = mul nuw i64 %141, %132
  %143 = sub i64 %135, %142
  %144 = icmp slt i64 %143, 0
  br i1 %144, label %145, label %151

145:                                              ; preds = %138, %145
  %146 = phi i64 [ %148, %145 ], [ %140, %138 ]
  %147 = phi i64 [ %149, %145 ], [ %143, %138 ]
  %148 = add i64 %146, -4294967296
  %149 = add i64 %147, %132
  %150 = icmp slt i64 %149, 0
  br i1 %150, label %145, label %151

151:                                              ; preds = %145, %138
  %152 = phi i64 [ %143, %138 ], [ %149, %145 ]
  %153 = phi i64 [ %140, %138 ], [ %148, %145 ]
  %154 = shl i64 %152, 32
  %155 = icmp ugt i64 %136, %154
  br i1 %155, label %156, label %158

156:                                              ; preds = %151
  %157 = udiv i64 %154, %132
  br label %158

158:                                              ; preds = %156, %151
  %159 = phi i64 [ %157, %156 ], [ 4294967295, %151 ]
  %160 = or i64 %159, %153
  br label %161

161:                                              ; preds = %130, %158
  %162 = phi i64 [ %160, %158 ], [ -1, %130 ]
  %163 = shl nuw nsw i64 %132, 30
  %164 = add i64 %162, %163
  %165 = and i64 %164, 510
  %166 = icmp ult i64 %165, 6
  br i1 %166, label %167, label %216

167:                                              ; preds = %161
  %168 = lshr i64 %164, 32
  %169 = and i64 %164, 4294967295
  %170 = mul nuw i64 %169, %169
  %171 = mul nuw i64 %168, %169
  %172 = mul nuw i64 %168, %168
  %173 = shl i64 %171, 1
  %174 = icmp ult i64 %173, %171
  %175 = select i1 %174, i64 4294967296, i64 0
  %176 = lshr i64 %171, 31
  %177 = and i64 %176, 4294967295
  %178 = or i64 %175, %177
  %179 = shl i64 %171, 33
  %180 = add i64 %179, %170
  %181 = icmp ult i64 %180, %179
  %182 = sub i64 0, %180
  %183 = sext i1 %181 to i64
  %184 = icmp ne i64 %180, 0
  %185 = sext i1 %184 to i64
  %186 = sub i64 %135, %172
  %187 = sub i64 %186, %178
  %188 = add i64 %187, %183
  %189 = add i64 %188, %185
  %190 = icmp slt i64 %189, 0
  br i1 %190, label %191, label %208

191:                                              ; preds = %167
  %192 = shl i64 %164, 1
  br label %193

193:                                              ; preds = %191, %193
  %194 = phi i64 [ %199, %193 ], [ %192, %191 ]
  %195 = phi i64 [ %198, %193 ], [ %164, %191 ]
  %196 = phi i64 [ %202, %193 ], [ %182, %191 ]
  %197 = phi i64 [ %206, %193 ], [ %189, %191 ]
  %198 = add i64 %195, -1
  %199 = add i64 %194, -2
  %200 = lshr i64 %198, 63
  %201 = or i64 %199, 1
  %202 = add i64 %201, %196
  %203 = add nsw i64 %200, %197
  %204 = icmp ult i64 %202, %196
  %205 = zext i1 %204 to i64
  %206 = add nsw i64 %203, %205
  %207 = icmp slt i64 %206, 0
  br i1 %207, label %193, label %208

208:                                              ; preds = %193, %167
  %209 = phi i64 [ %189, %167 ], [ %206, %193 ]
  %210 = phi i64 [ %182, %167 ], [ %202, %193 ]
  %211 = phi i64 [ %164, %167 ], [ %198, %193 ]
  %212 = or i64 %210, %209
  %213 = icmp ne i64 %212, 0
  %214 = zext i1 %213 to i64
  %215 = or i64 %211, %214
  br label %216

216:                                              ; preds = %208, %161
  %217 = phi i64 [ %215, %208 ], [ %164, %161 ]
  %218 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext 0, i32 %80, i64 %217, %struct.float_status* %1)
  br label %219

219:                                              ; preds = %40, %36, %64, %54, %46, %216, %58, %48
  %220 = phi i64 [ -2251799813685248, %48 ], [ -2251799813685248, %58 ], [ %218, %216 ], [ %18, %46 ], [ %18, %54 ], [ 0, %64 ], [ %45, %40 ], [ -2251799813685248, %36 ]
  ret i64 %220
}

; Function Attrs: nounwind uwtable
define i64 @float64_log2(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %35

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %128, label %26

26:                                               ; preds = %24
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %27 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %27, 6148914691236517205
  %ctpop.sh = lshr i64 %27, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %28 = trunc i64 %ctpop.part to i32
  %29 = shl nuw nsw i32 %28, 24
  %30 = add nsw i32 %29, -184549376
  %31 = ashr exact i32 %30, 24
  %32 = zext i32 %31 to i64
  %33 = shl i64 %19, %32
  %34 = sub nsw i32 1, %31
  br label %35

35:                                               ; preds = %26, %17
  %36 = phi i64 [ %33, %26 ], [ %19, %17 ]
  %37 = phi i32 [ %34, %26 ], [ %22, %17 ]
  %38 = icmp sgt i64 %18, -1
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 1
  br label %128

43:                                               ; preds = %35
  %44 = icmp eq i32 %37, 2047
  br i1 %44, label %45, label %70

45:                                               ; preds = %43
  %46 = icmp eq i64 %36, 0
  br i1 %46, label %128, label %47

47:                                               ; preds = %45
  %48 = icmp ugt i64 %18, 9221120237041090559
  %49 = and i64 %18, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  %51 = and i64 %18, 2251799813685247
  %52 = icmp ne i64 %51, 0
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %54, %47
  %59 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %128

62:                                               ; preds = %58
  %63 = or i1 %48, %53
  br i1 %63, label %64, label %128

64:                                               ; preds = %62
  %65 = icmp ne i64 %49, 9218868437227405312
  %66 = icmp eq i64 %51, 0
  %67 = or i1 %66, %65
  %68 = or i64 %18, 2251799813685248
  %69 = select i1 %67, i64 %18, i64 %68
  br label %128

70:                                               ; preds = %43
  %71 = add nsw i32 %37, 3073
  %72 = or i64 %36, 4503599627370496
  %73 = icmp slt i32 %37, 1023
  %74 = zext i32 %71 to i64
  %75 = shl i64 %74, 52
  br label %76

76:                                               ; preds = %70, %76
  %77 = phi i64 [ 2251799813685248, %70 ], [ %107, %76 ]
  %78 = phi i64 [ %75, %70 ], [ %106, %76 ]
  %79 = phi i64 [ %72, %70 ], [ %104, %76 ]
  %80 = lshr i64 %79, 32
  %81 = and i64 %79, 4294967295
  %82 = mul nuw i64 %81, %81
  %83 = mul nuw i64 %80, %81
  %84 = mul nuw i64 %80, %80
  %85 = shl i64 %83, 1
  %86 = icmp ult i64 %85, %83
  %87 = select i1 %86, i64 4294967296, i64 0
  %88 = lshr i64 %83, 31
  %89 = and i64 %88, 4294967295
  %90 = or i64 %87, %89
  %91 = add i64 %90, %84
  %92 = shl i64 %83, 33
  %93 = add i64 %92, %82
  %94 = icmp ult i64 %93, %92
  %95 = zext i1 %94 to i64
  %96 = add i64 %91, %95
  %97 = shl i64 %96, 12
  %98 = lshr i64 %93, 52
  %99 = or i64 %97, %98
  %100 = and i64 %96, 2199023255552
  %101 = icmp eq i64 %100, 0
  %102 = xor i1 %101, true
  %103 = zext i1 %102 to i64
  %104 = lshr i64 %99, %103
  %105 = select i1 %101, i64 0, i64 %77
  %106 = or i64 %105, %78
  %107 = lshr i64 %77, 1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %76

109:                                              ; preds = %76
  br i1 %73, label %118, label %110

110:                                              ; preds = %109
  %ctlz.sh31 = lshr i64 %106, 1
  %ctlz.step32 = or i64 %106, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %111 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %111, 6148914691236517205
  %ctpop.sh44 = lshr i64 %111, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %112 = trunc i64 %ctpop.part67 to i32
  %113 = add nuw nsw i64 %ctpop.part67, 4294967295
  %114 = sub nuw nsw i32 1033, %112
  %115 = and i64 %113, 4294967295
  %116 = shl i64 %106, %115
  %117 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext 0, i32 %114, i64 %116, %struct.float_status* %1) #23
  br label %128

118:                                              ; preds = %109
  %119 = zext i1 %73 to i8
  %120 = sub i64 0, %106
  %ctlz.sh68 = lshr i64 %120, 1
  %ctlz.step69 = or i64 %120, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %121 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %121, 6148914691236517205
  %ctpop.sh81 = lshr i64 %121, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %122 = trunc i64 %ctpop.part104 to i32
  %123 = add nuw nsw i64 %ctpop.part104, 4294967295
  %124 = sub nuw nsw i32 1033, %122
  %125 = and i64 %123, 4294967295
  %126 = shl i64 %120, %125
  %127 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %119, i32 %124, i64 %126, %struct.float_status* %1) #23
  br label %128

128:                                              ; preds = %62, %64, %58, %24, %118, %110, %45, %39
  %129 = phi i64 [ -2251799813685248, %39 ], [ %18, %45 ], [ %117, %110 ], [ %127, %118 ], [ -4503599627370496, %24 ], [ %69, %64 ], [ -2251799813685248, %58 ], [ 0, %62 ]
  ret i64 %129
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_eq(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %55

48:                                               ; preds = %38
  %49 = icmp eq i64 %31, %32
  %50 = or i64 %32, %31
  %51 = and i64 %50, 9223372036854775807
  %52 = icmp eq i64 %51, 0
  %53 = or i1 %49, %52
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %48, %44
  %56 = phi i32 [ 0, %44 ], [ %54, %48 ]
  ret i32 %56
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_le(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i64 %31, 63
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %32, 63
  %52 = trunc i64 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = icmp slt i64 %31, 0
  %56 = or i64 %32, %31
  %57 = and i64 %56, 9223372036854775807
  %58 = icmp eq i64 %57, 0
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %48
  %61 = icmp eq i64 %31, %32
  %62 = icmp ult i64 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_lt(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i64 %31, 63
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %32, 63
  %52 = trunc i64 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = icmp slt i64 %31, 0
  %56 = or i64 %32, %31
  %57 = and i64 %56, 9223372036854775807
  %58 = icmp ne i64 %57, 0
  %59 = and i1 %55, %58
  br label %66

60:                                               ; preds = %48
  %61 = icmp ne i64 %31, %32
  %62 = icmp ult i64 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = and i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_unordered(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i64 [ %0, %7 ], [ 0, %13 ]
  %19 = and i64 %1, 9218868437227405312
  %20 = icmp ne i64 %19, 0
  %21 = and i64 %1, 4503599627370495
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i64 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i64 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i64 %29, 9218868437227405312
  %32 = icmp ne i64 %31, 9218868437227405312
  %33 = and i64 %29, 4503599627370495
  %34 = icmp eq i64 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i64 %30, 9218868437227405312
  %38 = icmp ne i64 %37, 9218868437227405312
  %39 = and i64 %30, 4503599627370495
  %40 = icmp eq i64 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %36, %28
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  br label %46

46:                                               ; preds = %36, %42
  %47 = phi i32 [ 1, %42 ], [ 0, %36 ]
  ret i32 %47
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_eq_quiet(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %67, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %67

60:                                               ; preds = %38
  %61 = icmp eq i64 %31, %32
  %62 = or i64 %32, %31
  %63 = and i64 %62, 9223372036854775807
  %64 = icmp eq i64 %63, 0
  %65 = or i1 %61, %64
  %66 = zext i1 %65 to i32
  br label %67

67:                                               ; preds = %60, %56, %50
  %68 = phi i32 [ 0, %50 ], [ 0, %56 ], [ %66, %60 ]
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_le_quiet(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i64 %31, 63
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %32, 63
  %64 = trunc i64 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = icmp slt i64 %31, 0
  %68 = or i64 %32, %31
  %69 = and i64 %68, 9223372036854775807
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %67, %70
  br label %78

72:                                               ; preds = %60
  %73 = icmp eq i64 %31, %32
  %74 = icmp ult i64 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = or i1 %73, %76
  br label %78

78:                                               ; preds = %72, %66, %56, %50
  %79 = phi i1 [ false, %50 ], [ false, %56 ], [ %71, %66 ], [ %77, %72 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_lt_quiet(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i64 %31, 63
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %32, 63
  %64 = trunc i64 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = icmp slt i64 %31, 0
  %68 = or i64 %32, %31
  %69 = and i64 %68, 9223372036854775807
  %70 = icmp ne i64 %69, 0
  %71 = and i1 %67, %70
  br label %78

72:                                               ; preds = %60
  %73 = icmp ne i64 %31, %32
  %74 = icmp ult i64 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = and i1 %73, %76
  br label %78

78:                                               ; preds = %72, %66, %56, %50
  %79 = phi i1 [ false, %50 ], [ false, %56 ], [ %71, %66 ], [ %77, %72 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_unordered_quiet(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i64 [ %0, %7 ], [ 0, %13 ]
  %19 = and i64 %1, 9218868437227405312
  %20 = icmp ne i64 %19, 0
  %21 = and i64 %1, 4503599627370495
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i64 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i64 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i64 %29, 9218868437227405312
  %32 = icmp ne i64 %31, 9218868437227405312
  %33 = and i64 %29, 4503599627370495
  %34 = icmp eq i64 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i64 %30, 9218868437227405312
  %38 = icmp ne i64 %37, 9218868437227405312
  %39 = and i64 %30, 4503599627370495
  %40 = icmp eq i64 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %58, label %42

42:                                               ; preds = %36, %28
  %43 = and i64 %29, 9221120237041090560
  %44 = icmp ne i64 %43, 9218868437227405312
  %45 = and i64 %29, 2251799813685247
  %46 = icmp eq i64 %45, 0
  %47 = or i1 %46, %44
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = and i64 %30, 9221120237041090560
  %50 = icmp ne i64 %49, 9218868437227405312
  %51 = and i64 %30, 2251799813685247
  %52 = icmp eq i64 %51, 0
  %53 = or i1 %52, %50
  br i1 %53, label %58, label %54

54:                                               ; preds = %48, %42
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %36, %54, %48
  %59 = phi i32 [ 1, %48 ], [ 1, %54 ], [ 0, %36 ]
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define i32 @floatx80_to_int32(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = icmp eq i16 %4, 32767
  %9 = and i64 %0, 9223372036854775807
  %10 = icmp eq i64 %9, 0
  %11 = select i1 %10, i8 %7, i8 0
  %12 = select i1 %8, i8 %11, i8 %7
  %13 = sub nsw i32 16439, %5
  %14 = icmp sgt i32 %13, 1
  %15 = select i1 %14, i32 %13, i32 1
  %16 = icmp slt i32 %15, 64
  br i1 %16, label %17, label %27

17:                                               ; preds = %3
  %18 = zext i32 %15 to i64
  %19 = lshr i64 %0, %18
  %20 = sub nsw i32 0, %15
  %21 = and i32 %20, 63
  %22 = zext i32 %21 to i64
  %23 = shl i64 %0, %22
  %24 = icmp ne i64 %23, 0
  %25 = zext i1 %24 to i64
  %26 = or i64 %19, %25
  br label %30

27:                                               ; preds = %3
  %28 = icmp ne i64 %0, 0
  %29 = zext i1 %28 to i64
  br label %30

30:                                               ; preds = %17, %27
  %31 = phi i64 [ %26, %17 ], [ %29, %27 ]
  %32 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %45, label %35

35:                                               ; preds = %30
  %36 = icmp eq i8 %33, 3
  br i1 %36, label %45, label %37

37:                                               ; preds = %35
  %38 = icmp eq i8 %12, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %37
  %40 = icmp eq i8 %33, 2
  %41 = select i1 %40, i64 0, i64 127
  br label %45

42:                                               ; preds = %37
  %43 = icmp eq i8 %33, 1
  %44 = select i1 %43, i64 0, i64 127
  br label %45

45:                                               ; preds = %42, %39, %35, %30
  %46 = phi i64 [ 64, %30 ], [ 0, %35 ], [ %41, %39 ], [ %44, %42 ]
  %47 = trunc i64 %31 to i8
  %48 = and i8 %47, 127
  %49 = add i64 %46, %31
  %50 = lshr i64 %49, 7
  %51 = icmp eq i8 %48, 64
  %52 = and i1 %34, %51
  %53 = zext i1 %52 to i64
  %54 = xor i64 %53, 4294967295
  %55 = and i64 %50, %54
  %56 = trunc i64 %55 to i32
  %57 = icmp eq i8 %12, 0
  %58 = sub nsw i32 0, %56
  %59 = select i1 %57, i32 %56, i32 %58
  %60 = icmp ugt i64 %49, 549755813887
  br i1 %60, label %67, label %61

61:                                               ; preds = %45
  %62 = icmp eq i32 %59, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %61
  %64 = lshr i32 %59, 31
  %65 = zext i8 %12 to i32
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %72, label %67

67:                                               ; preds = %63, %45
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %69, 1
  store i8 %70, i8* %68, align 1
  %71 = select i1 %57, i32 2147483647, i32 -2147483648
  br label %78

72:                                               ; preds = %63, %61
  %73 = icmp eq i8 %48, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %72
  %75 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %76, 32
  store i8 %77, i8* %75, align 1
  br label %78

78:                                               ; preds = %67, %72, %74
  %79 = phi i32 [ %71, %67 ], [ %59, %72 ], [ %59, %74 ]
  ret i32 %79
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_to_int32_round_to_zero(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i64
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = icmp ugt i16 %4, 16414
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = icmp ne i16 %4, 32767
  %11 = and i64 %0, 9223372036854775807
  %12 = icmp eq i64 %11, 0
  %13 = or i1 %12, %10
  %14 = select i1 %13, i8 %7, i8 0
  br label %36

15:                                               ; preds = %3
  %16 = icmp ult i16 %4, 16383
  br i1 %16, label %17, label %25

17:                                               ; preds = %15
  %18 = icmp ne i16 %4, 0
  %19 = icmp ne i64 %0, 0
  %20 = or i1 %19, %18
  br i1 %20, label %21, label %50

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %23, 32
  store i8 %24, i8* %22, align 1
  br label %50

25:                                               ; preds = %15
  %26 = sub nsw i64 16446, %5
  %27 = and i64 %26, 4294967295
  %28 = lshr i64 %0, %27
  %29 = trunc i64 %28 to i32
  %30 = icmp sgt i16 %1, -1
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %29, i32 %31
  %33 = lshr i32 %32, 31
  %34 = zext i16 %6 to i32
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %43, label %36

36:                                               ; preds = %9, %25
  %37 = phi i8 [ %7, %25 ], [ %14, %9 ]
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 1
  store i8 %40, i8* %38, align 1
  %41 = icmp eq i8 %37, 0
  %42 = select i1 %41, i32 2147483647, i32 -2147483648
  br label %50

43:                                               ; preds = %25
  %44 = shl i64 %28, %27
  %45 = icmp eq i64 %44, %0
  br i1 %45, label %50, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %48, 32
  store i8 %49, i8* %47, align 1
  br label %50

50:                                               ; preds = %46, %43, %21, %17, %36
  %51 = phi i32 [ %42, %36 ], [ 0, %17 ], [ 0, %21 ], [ %32, %43 ], [ %32, %46 ]
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define i64 @floatx80_to_int64(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = lshr i16 %1, 15
  %7 = sub nsw i32 16446, %5
  %8 = icmp ugt i16 %4, 16445
  br i1 %8, label %9, label %21

9:                                                ; preds = %3
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = or i8 %13, 1
  store i8 %14, i8* %12, align 1
  %15 = icmp sgt i16 %1, -1
  br i1 %15, label %95, label %16

16:                                               ; preds = %11
  %17 = icmp eq i16 %4, 32767
  %18 = icmp ne i64 %0, -9223372036854775808
  %19 = and i1 %18, %17
  %20 = select i1 %19, i64 9223372036854775807, i64 -9223372036854775808
  br label %95

21:                                               ; preds = %3
  %22 = add nuw nsw i32 %5, 2
  %23 = and i32 %22, 63
  %24 = icmp eq i32 %7, 0
  br i1 %24, label %37, label %25

25:                                               ; preds = %21
  %26 = icmp ugt i16 %4, 16382
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = zext i32 %23 to i64
  %29 = shl i64 %0, %28
  %30 = zext i32 %7 to i64
  %31 = lshr i64 %0, %30
  br label %37

32:                                               ; preds = %25
  %33 = icmp eq i32 %7, 64
  br i1 %33, label %37, label %34

34:                                               ; preds = %32
  %35 = icmp ne i64 %0, 0
  %36 = zext i1 %35 to i64
  br label %37

37:                                               ; preds = %34, %27, %21, %32, %9
  %38 = phi i64 [ %0, %9 ], [ %31, %27 ], [ %0, %21 ], [ 0, %34 ], [ 0, %32 ]
  %39 = phi i64 [ 0, %9 ], [ %29, %27 ], [ 0, %21 ], [ %36, %34 ], [ %0, %32 ]
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  %43 = lshr i64 %39, 63
  %44 = trunc i64 %43 to i8
  br i1 %42, label %59, label %45

45:                                               ; preds = %37
  %46 = icmp eq i8 %41, 3
  br i1 %46, label %72, label %47

47:                                               ; preds = %45
  %48 = icmp sgt i16 %1, -1
  br i1 %48, label %54, label %49

49:                                               ; preds = %47
  %50 = icmp eq i8 %41, 1
  %51 = icmp ne i64 %39, 0
  %52 = and i1 %51, %50
  %53 = zext i1 %52 to i8
  br label %59

54:                                               ; preds = %47
  %55 = icmp eq i8 %41, 2
  %56 = icmp ne i64 %39, 0
  %57 = and i1 %56, %55
  %58 = zext i1 %57 to i8
  br label %59

59:                                               ; preds = %54, %49, %37
  %60 = phi i8 [ %44, %37 ], [ %53, %49 ], [ %58, %54 ]
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %72, label %62

62:                                               ; preds = %59
  %63 = add i64 %38, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %83, label %65

65:                                               ; preds = %62
  %66 = and i64 %39, 9223372036854775807
  %67 = icmp eq i64 %66, 0
  %68 = and i1 %67, %42
  %69 = zext i1 %68 to i64
  %70 = xor i64 %69, -1
  %71 = and i64 %63, %70
  br label %72

72:                                               ; preds = %65, %59, %45
  %73 = phi i64 [ %71, %65 ], [ %38, %59 ], [ %38, %45 ]
  %74 = icmp sgt i16 %1, -1
  %75 = sub nsw i64 0, %73
  %76 = select i1 %74, i64 %73, i64 %75
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %89, label %78

78:                                               ; preds = %72
  %79 = lshr i64 %76, 63
  %80 = trunc i64 %79 to i32
  %81 = zext i16 %6 to i32
  %82 = icmp eq i32 %80, %81
  br i1 %82, label %89, label %83

83:                                               ; preds = %78, %62
  %84 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %85, 1
  store i8 %86, i8* %84, align 1
  %87 = icmp sgt i16 %1, -1
  %88 = select i1 %87, i64 9223372036854775807, i64 -9223372036854775808
  br label %95

89:                                               ; preds = %78, %72
  %90 = icmp eq i64 %39, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %89
  %92 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %93, 32
  store i8 %94, i8* %92, align 1
  br label %95

95:                                               ; preds = %91, %89, %83, %16, %11
  %96 = phi i64 [ 9223372036854775807, %11 ], [ %20, %16 ], [ %88, %83 ], [ %76, %89 ], [ %76, %91 ]
  ret i64 %96
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @floatx80_to_int64_round_to_zero(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = add nuw nsw i32 %5, 2
  %7 = icmp ugt i16 %4, 16445
  br i1 %7, label %8, label %22

8:                                                ; preds = %3
  %9 = and i64 %0, 9223372036854775807
  %10 = icmp ne i16 %1, -16322
  %11 = icmp ne i64 %9, 0
  %12 = or i1 %10, %11
  br i1 %12, label %13, label %21

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 1
  store i8 %16, i8* %14, align 1
  %17 = icmp sgt i16 %1, -1
  %18 = icmp eq i16 %4, 32767
  %19 = and i1 %11, %18
  %20 = or i1 %17, %19
  br i1 %20, label %48, label %21

21:                                               ; preds = %13, %8
  br label %48

22:                                               ; preds = %3
  %23 = icmp ult i16 %4, 16383
  br i1 %23, label %24, label %32

24:                                               ; preds = %22
  %25 = zext i16 %4 to i64
  %26 = or i64 %25, %0
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %48, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %30 = load i8, i8* %29, align 1
  %31 = or i8 %30, 32
  store i8 %31, i8* %29, align 1
  br label %48

32:                                               ; preds = %22
  %33 = sub nuw nsw i32 16446, %5
  %34 = zext i32 %33 to i64
  %35 = lshr i64 %0, %34
  %36 = and i32 %6, 63
  %37 = zext i32 %36 to i64
  %38 = shl i64 %0, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %32
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 32
  store i8 %43, i8* %41, align 1
  br label %44

44:                                               ; preds = %32, %40
  %45 = icmp sgt i16 %1, -1
  %46 = sub nsw i64 0, %35
  %47 = select i1 %45, i64 %35, i64 %46
  br label %48

48:                                               ; preds = %28, %24, %13, %44, %21
  %49 = phi i64 [ -9223372036854775808, %21 ], [ %47, %44 ], [ 9223372036854775807, %13 ], [ 0, %24 ], [ 0, %28 ]
  ret i64 %49
}

; Function Attrs: nounwind uwtable
define i32 @floatx80_to_float32(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i16 %1, 32767
  %5 = lshr i16 %1, 15
  %6 = icmp eq i16 %4, 32767
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %7
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp ne i64 %12, 0
  %14 = icmp eq i64 %11, %0
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1, !noalias !66
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1, !noalias !66
  br label %20

20:                                               ; preds = %10, %16
  %21 = icmp slt i64 %0, 0
  %22 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %23 = load i8, i8* %22, align 1
  %24 = lshr i64 %0, 40
  %25 = and i64 %24, 8388607
  %26 = select i1 %21, i64 %25, i64 4194304
  %27 = icmp ne i8 %23, 0
  %28 = icmp eq i64 %26, 0
  %29 = or i1 %28, %27
  %30 = zext i16 %5 to i64
  %31 = shl nuw nsw i64 %30, 31
  %32 = select i1 %21, i64 %31, i64 2147483648
  %33 = or i64 %32, %26
  %34 = trunc i64 %33 to i32
  %35 = or i32 %34, 2139095040
  %36 = select i1 %29, i32 -4194304, i32 %35
  br label %56

37:                                               ; preds = %7
  %38 = zext i16 %5 to i32
  %39 = shl nuw i32 %38, 31
  %40 = or i32 %39, 2139095040
  br label %56

41:                                               ; preds = %3
  %42 = trunc i16 %5 to i8
  %43 = zext i16 %4 to i32
  %44 = lshr i64 %0, 33
  %45 = and i64 %0, 8589934591
  %46 = icmp ne i64 %45, 0
  %47 = zext i1 %46 to i64
  %48 = or i64 %44, %47
  %49 = icmp ne i16 %4, 0
  %50 = icmp ne i64 %48, 0
  %51 = or i1 %49, %50
  %52 = add nsw i32 %43, -16257
  %53 = select i1 %51, i32 %52, i32 0
  %54 = trunc i64 %48 to i32
  %55 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %42, i32 %53, i32 %54, %struct.float_status* %2)
  br label %56

56:                                               ; preds = %41, %37, %20
  %57 = phi i32 [ %36, %20 ], [ %40, %37 ], [ %55, %41 ]
  ret i32 %57
}

; Function Attrs: nounwind uwtable
define i64 @floatx80_to_float64(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i16 %1, 32767
  %5 = lshr i16 %1, 15
  %6 = icmp eq i16 %4, 32767
  br i1 %6, label %7, label %40

7:                                                ; preds = %3
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %36, label %10

10:                                               ; preds = %7
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp ne i64 %12, 0
  %14 = icmp eq i64 %11, %0
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1, !noalias !69
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1, !noalias !69
  br label %20

20:                                               ; preds = %10, %16
  %21 = icmp slt i64 %0, 0
  %22 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %23 = load i8, i8* %22, align 1
  %24 = lshr i64 %0, 11
  %25 = and i64 %24, 4503599627370495
  %26 = select i1 %21, i64 %25, i64 2251799813685248
  %27 = icmp ne i8 %23, 0
  %28 = icmp eq i64 %26, 0
  %29 = or i1 %28, %27
  %30 = zext i16 %5 to i64
  %31 = shl nuw i64 %30, 63
  %32 = select i1 %21, i64 %31, i64 -9223372036854775808
  %33 = or i64 %26, %32
  %34 = or i64 %33, 9218868437227405312
  %35 = select i1 %29, i64 -2251799813685248, i64 %34
  br label %52

36:                                               ; preds = %7
  %37 = zext i16 %5 to i64
  %38 = shl nuw i64 %37, 63
  %39 = or i64 %38, 9218868437227405312
  br label %52

40:                                               ; preds = %3
  %41 = trunc i16 %5 to i8
  %42 = zext i16 %4 to i32
  %43 = lshr i64 %0, 1
  %44 = and i64 %0, 1
  %45 = or i64 %43, %44
  %46 = icmp ne i16 %4, 0
  %47 = icmp ne i64 %0, 0
  %48 = or i1 %47, %46
  %49 = add nsw i32 %42, -15361
  %50 = select i1 %48, i32 %49, i32 0
  %51 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %41, i32 %50, i64 %45, %struct.float_status* %2)
  br label %52

52:                                               ; preds = %40, %36, %20
  %53 = phi i64 [ %35, %20 ], [ %39, %36 ], [ %51, %40 ]
  ret i64 %53
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @floatx80_to_float128(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i16 %1, 32767
  %5 = lshr i16 %1, 15
  %6 = icmp ne i16 %4, 32767
  %7 = and i64 %0, 9223372036854775807
  %8 = icmp eq i64 %7, 0
  %9 = or i1 %8, %6
  br i1 %9, label %35, label %10

10:                                               ; preds = %3
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp ne i64 %12, 0
  %14 = icmp eq i64 %11, %0
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1, !noalias !72
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1, !noalias !72
  br label %20

20:                                               ; preds = %10, %16
  %21 = icmp slt i64 %0, 0
  %22 = shl i64 %0, 1
  %23 = select i1 %21, i64 %22, i64 -9223372036854775808
  %24 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %45

27:                                               ; preds = %20
  %28 = shl i64 %23, 48
  %29 = lshr i64 %23, 16
  %30 = zext i16 %5 to i64
  %31 = shl nuw i64 %30, 63
  %32 = select i1 %21, i64 %31, i64 -9223372036854775808
  %33 = or i64 %29, %32
  %34 = or i64 %33, 9223090561878065152
  br label %45

35:                                               ; preds = %3
  %36 = zext i16 %5 to i64
  %37 = shl i64 %0, 49
  %38 = lshr i64 %0, 15
  %39 = and i64 %38, 281474976710655
  %40 = shl nuw i64 %36, 63
  %41 = zext i16 %4 to i64
  %42 = shl nuw nsw i64 %41, 48
  %43 = or i64 %40, %39
  %44 = or i64 %43, %42
  br label %45

45:                                               ; preds = %27, %20, %35
  %46 = phi i64 [ %37, %35 ], [ %28, %27 ], [ 0, %20 ]
  %47 = phi i64 [ %44, %35 ], [ %34, %27 ], [ -140737488355328, %20 ]
  %48 = insertvalue { i64, i64 } undef, i64 %46, 0
  %49 = insertvalue { i64, i64 } %48, i64 %47, 1
  ret { i64, i64 } %49
}

; Function Attrs: nofree norecurse nounwind uwtable
define { i64, i16 } @floatx80_round_to_int(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i64
  %6 = icmp ugt i16 %4, 16445
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp ne i16 %4, 32767
  %9 = and i64 %0, 9223372036854775807
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %10, %8
  br i1 %11, label %98, label %12

12:                                               ; preds = %7
  %13 = and i64 %0, -4611686018427387905
  %14 = and i64 %0, 4611686018427387903
  %15 = icmp ne i64 %14, 0
  %16 = icmp eq i64 %13, %0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %22

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %20 = load i8, i8* %19, align 1
  %21 = or i8 %20, 1
  store i8 %21, i8* %19, align 1
  br label %22

22:                                               ; preds = %18, %12
  %23 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  %26 = or i64 %0, -4611686018427387904
  %27 = select i1 %17, i64 %26, i64 %0
  %28 = select i1 %25, i64 %27, i64 -4611686018427387904
  %29 = select i1 %25, i16 %1, i16 -1
  br label %98

30:                                               ; preds = %3
  %31 = icmp ult i16 %4, 16383
  br i1 %31, label %32, label %62

32:                                               ; preds = %30
  %33 = icmp eq i16 %4, 0
  %34 = and i64 %0, 9223372036854775807
  %35 = icmp eq i64 %34, 0
  %36 = and i1 %35, %33
  br i1 %36, label %98, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 32
  store i8 %40, i8* %38, align 1
  %41 = and i16 %1, -32768
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  switch i32 %44, label %98 [
    i32 0, label %45
    i32 1, label %51
    i32 2, label %56
  ]

45:                                               ; preds = %37
  %46 = icmp ne i16 %4, 16382
  %47 = or i1 %35, %46
  %48 = or i16 %41, 16383
  %49 = select i1 %47, i64 0, i64 -9223372036854775808
  %50 = select i1 %47, i16 %41, i16 %48
  br label %98

51:                                               ; preds = %37
  %52 = zext i16 %41 to i64
  %53 = shl nuw i64 %52, 48
  %54 = icmp slt i16 %1, 0
  %55 = select i1 %54, i16 -16385, i16 0
  br label %98

56:                                               ; preds = %37
  %57 = icmp sgt i16 %1, -1
  %58 = zext i16 %41 to i64
  %59 = shl nuw i64 %58, 48
  %60 = xor i64 %59, -9223372036854775808
  %61 = select i1 %57, i16 16383, i16 -32768
  br label %98

62:                                               ; preds = %30
  %63 = sub nsw i64 16446, %5
  %64 = and i64 %63, 4294967295
  %65 = shl nuw i64 1, %64
  %66 = add i64 %65, -1
  %67 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %68 = load i8, i8* %67, align 1
  switch i8 %68, label %77 [
    i8 0, label %69
    i8 3, label %85
  ]

69:                                               ; preds = %62
  %70 = lshr i64 %65, 1
  %71 = add i64 %70, %0
  %72 = and i64 %71, %66
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %85

74:                                               ; preds = %69
  %75 = xor i64 %65, -1
  %76 = and i64 %71, %75
  br label %85

77:                                               ; preds = %62
  %78 = lshr i16 %1, 15
  %79 = trunc i16 %78 to i8
  %80 = icmp eq i8 %68, 2
  %81 = zext i1 %80 to i8
  %82 = icmp eq i8 %79, %81
  %83 = select i1 %82, i64 0, i64 %66
  %84 = add i64 %83, %0
  br label %85

85:                                               ; preds = %77, %62, %69, %74
  %86 = phi i64 [ %76, %74 ], [ %71, %69 ], [ %0, %62 ], [ %84, %77 ]
  %87 = sub i64 0, %65
  %88 = and i64 %86, %87
  %89 = icmp eq i64 %88, 0
  %90 = zext i1 %89 to i16
  %91 = add i16 %90, %1
  %92 = select i1 %89, i64 -9223372036854775808, i64 %88
  %93 = icmp eq i64 %92, %0
  br i1 %93, label %98, label %94

94:                                               ; preds = %85
  %95 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %96, 32
  store i8 %97, i8* %95, align 1
  br label %98

98:                                               ; preds = %45, %37, %56, %51, %32, %7, %94, %85, %22
  %99 = phi i64 [ %28, %22 ], [ %0, %7 ], [ %0, %85 ], [ %92, %94 ], [ %0, %32 ], [ %53, %51 ], [ %60, %56 ], [ 0, %37 ], [ %49, %45 ]
  %100 = phi i16 [ %29, %22 ], [ %1, %7 ], [ %91, %85 ], [ %91, %94 ], [ %1, %32 ], [ %55, %51 ], [ %61, %56 ], [ %41, %37 ], [ %50, %45 ]
  %101 = insertvalue { i64, i16 } undef, i64 %99, 0
  %102 = insertvalue { i64, i16 } %101, i16 %100, 1
  ret { i64, i16 } %102
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @floatx80_add(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = lshr i16 %3, 15
  %9 = trunc i16 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i16 } @addFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i16 } @subFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i16 } [ %14, %13 ], [ %12, %11 ]
  ret { i64, i16 } %16
}

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i16 } @addFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 zeroext %4, %struct.float_status* nocapture %5) unnamed_addr #13 {
  %7 = and i16 %1, 32767
  %8 = zext i16 %7 to i32
  %9 = and i16 %3, 32767
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %8, %10
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %88

13:                                               ; preds = %6
  %14 = icmp eq i16 %7, 32767
  br i1 %14, label %15, label %69

15:                                               ; preds = %13
  %16 = and i64 %0, 9223372036854775807
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %261, label %18

18:                                               ; preds = %15
  %19 = and i64 %0, 4611686018427387904
  %20 = icmp eq i64 %19, 0
  %21 = and i64 %0, -4611686018427387905
  %22 = and i64 %0, 4611686018427387903
  %23 = icmp ne i64 %22, 0
  %24 = icmp eq i64 %21, %0
  %25 = and i1 %24, %23
  %26 = icmp eq i16 %9, 32767
  %27 = and i64 %2, 4611686018427387904
  %28 = icmp ne i64 %27, 0
  %29 = and i1 %28, %26
  %30 = and i64 %2, -4611686018427387905
  %31 = and i64 %2, 4611686018427387903
  %32 = icmp ne i64 %31, 0
  %33 = icmp eq i64 %30, %2
  %34 = and i1 %32, %26
  %35 = and i1 %33, %34
  %36 = zext i1 %35 to i8
  %37 = or i1 %25, %35
  br i1 %37, label %38, label %42

38:                                               ; preds = %18
  %39 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %40, 1
  store i8 %41, i8* %39, align 1
  br label %42

42:                                               ; preds = %38, %18
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 6
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %261

46:                                               ; preds = %42
  %47 = icmp ult i64 %0, %2
  br i1 %47, label %53, label %48

48:                                               ; preds = %46
  %49 = icmp ult i64 %2, %0
  br i1 %49, label %53, label %50

50:                                               ; preds = %48
  %51 = icmp ult i16 %1, %3
  %52 = zext i1 %51 to i8
  br label %53

53:                                               ; preds = %50, %48, %46
  %54 = phi i8 [ %52, %50 ], [ 0, %46 ], [ 1, %48 ]
  br i1 %25, label %60, label %55

55:                                               ; preds = %53
  br i1 %20, label %63, label %56

56:                                               ; preds = %55
  %57 = or i8 %54, %36
  %58 = icmp eq i8 %57, 0
  %59 = and i1 %29, %58
  br i1 %59, label %63, label %66

60:                                               ; preds = %53
  %61 = icmp eq i8 %54, 0
  %62 = select i1 %35, i1 %61, i1 %29
  br i1 %62, label %63, label %66

63:                                               ; preds = %55, %60, %56
  %64 = or i64 %2, -4611686018427387904
  %65 = select i1 %35, i64 %64, i64 %2
  br label %261

66:                                               ; preds = %60, %56
  %67 = or i64 %0, -4611686018427387904
  %68 = select i1 %25, i64 %67, i64 %0
  br label %261

69:                                               ; preds = %13
  %70 = icmp eq i16 %9, 0
  %71 = sext i1 %70 to i32
  %72 = add nsw i32 %11, %71
  %73 = sub nsw i32 0, %72
  %74 = and i32 %73, 63
  %75 = icmp eq i32 %72, 0
  br i1 %75, label %234, label %76

76:                                               ; preds = %69
  %77 = icmp slt i32 %72, 64
  br i1 %77, label %78, label %83

78:                                               ; preds = %76
  %79 = zext i32 %74 to i64
  %80 = shl i64 %2, %79
  %81 = zext i32 %72 to i64
  %82 = lshr i64 %2, %81
  br label %234

83:                                               ; preds = %76
  %84 = icmp eq i32 %72, 64
  br i1 %84, label %234, label %85

85:                                               ; preds = %83
  %86 = icmp ne i64 %2, 0
  %87 = zext i1 %86 to i64
  br label %234

88:                                               ; preds = %6
  %89 = icmp slt i32 %11, 0
  br i1 %89, label %90, label %169

90:                                               ; preds = %88
  %91 = icmp eq i16 %9, 32767
  br i1 %91, label %92, label %150

92:                                               ; preds = %90
  %93 = and i64 %2, 9223372036854775807
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %146, label %95

95:                                               ; preds = %92
  %96 = icmp eq i16 %7, 32767
  %97 = and i64 %0, 4611686018427387904
  %98 = icmp ne i64 %97, 0
  %99 = and i1 %98, %96
  %100 = and i64 %0, -4611686018427387905
  %101 = and i64 %0, 4611686018427387903
  %102 = icmp ne i64 %101, 0
  %103 = icmp eq i64 %100, %0
  %104 = and i1 %102, %96
  %105 = and i1 %103, %104
  %106 = and i64 %2, 4611686018427387904
  %107 = icmp ne i64 %106, 0
  %108 = and i64 %2, -4611686018427387905
  %109 = and i64 %2, 4611686018427387903
  %110 = icmp ne i64 %109, 0
  %111 = icmp eq i64 %108, %2
  %112 = and i1 %111, %110
  %113 = zext i1 %112 to i8
  %114 = or i1 %105, %112
  br i1 %114, label %115, label %119

115:                                              ; preds = %95
  %116 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %117, 1
  store i8 %118, i8* %116, align 1
  br label %119

119:                                              ; preds = %115, %95
  %120 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 6
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %261

123:                                              ; preds = %119
  %124 = icmp ult i64 %0, %2
  br i1 %124, label %130, label %125

125:                                              ; preds = %123
  %126 = icmp ult i64 %2, %0
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = icmp ult i16 %1, %3
  %129 = zext i1 %128 to i8
  br label %130

130:                                              ; preds = %127, %125, %123
  %131 = phi i8 [ %129, %127 ], [ 0, %123 ], [ 1, %125 ]
  br i1 %105, label %137, label %132

132:                                              ; preds = %130
  br i1 %99, label %133, label %140

133:                                              ; preds = %132
  %134 = or i8 %131, %113
  %135 = icmp eq i8 %134, 0
  %136 = and i1 %107, %135
  br i1 %136, label %140, label %143

137:                                              ; preds = %130
  %138 = icmp eq i8 %131, 0
  %139 = select i1 %112, i1 %138, i1 %107
  br i1 %139, label %140, label %143

140:                                              ; preds = %137, %133, %132
  %141 = or i64 %2, -4611686018427387904
  %142 = select i1 %112, i64 %141, i64 %2
  br label %261

143:                                              ; preds = %137, %133
  %144 = or i64 %0, -4611686018427387904
  %145 = select i1 %105, i64 %144, i64 %0
  br label %261

146:                                              ; preds = %92
  %147 = zext i8 %4 to i16
  %148 = shl i16 %147, 15
  %149 = or i16 %148, 32767
  br label %261

150:                                              ; preds = %90
  %151 = icmp eq i16 %7, 0
  %152 = zext i1 %151 to i32
  %153 = add nsw i32 %11, %152
  %154 = sub nsw i32 0, %153
  %155 = and i32 %153, 63
  %156 = icmp eq i32 %153, 0
  br i1 %156, label %234, label %157

157:                                              ; preds = %150
  %158 = icmp sgt i32 %153, -64
  br i1 %158, label %159, label %164

159:                                              ; preds = %157
  %160 = zext i32 %155 to i64
  %161 = shl i64 %0, %160
  %162 = zext i32 %154 to i64
  %163 = lshr i64 %0, %162
  br label %234

164:                                              ; preds = %157
  %165 = icmp eq i32 %154, 64
  br i1 %165, label %234, label %166

166:                                              ; preds = %164
  %167 = icmp ne i64 %0, 0
  %168 = zext i1 %167 to i64
  br label %234

169:                                              ; preds = %88
  %170 = icmp eq i16 %7, 32767
  br i1 %170, label %171, label %226

171:                                              ; preds = %169
  %172 = or i64 %2, %0
  %173 = and i64 %172, 9223372036854775807
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %261, label %175

175:                                              ; preds = %171
  %176 = and i64 %0, 4611686018427387904
  %177 = icmp eq i64 %176, 0
  %178 = and i64 %0, -4611686018427387905
  %179 = and i64 %0, 4611686018427387903
  %180 = icmp ne i64 %179, 0
  %181 = icmp eq i64 %178, %0
  %182 = and i1 %181, %180
  %183 = icmp eq i16 %9, 32767
  %184 = and i64 %2, 4611686018427387904
  %185 = icmp ne i64 %184, 0
  %186 = and i1 %185, %183
  %187 = and i64 %2, -4611686018427387905
  %188 = and i64 %2, 4611686018427387903
  %189 = icmp ne i64 %188, 0
  %190 = icmp eq i64 %187, %2
  %191 = and i1 %189, %183
  %192 = and i1 %190, %191
  %193 = zext i1 %192 to i8
  %194 = or i1 %182, %192
  br i1 %194, label %195, label %199

195:                                              ; preds = %175
  %196 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %197 = load i8, i8* %196, align 1
  %198 = or i8 %197, 1
  store i8 %198, i8* %196, align 1
  br label %199

199:                                              ; preds = %195, %175
  %200 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 6
  %201 = load i8, i8* %200, align 1
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %203, label %261

203:                                              ; preds = %199
  %204 = icmp ult i64 %0, %2
  br i1 %204, label %210, label %205

205:                                              ; preds = %203
  %206 = icmp ult i64 %2, %0
  br i1 %206, label %210, label %207

207:                                              ; preds = %205
  %208 = icmp ult i16 %1, %3
  %209 = zext i1 %208 to i8
  br label %210

210:                                              ; preds = %207, %205, %203
  %211 = phi i8 [ %209, %207 ], [ 0, %203 ], [ 1, %205 ]
  br i1 %182, label %217, label %212

212:                                              ; preds = %210
  br i1 %177, label %220, label %213

213:                                              ; preds = %212
  %214 = or i8 %211, %193
  %215 = icmp eq i8 %214, 0
  %216 = and i1 %186, %215
  br i1 %216, label %220, label %223

217:                                              ; preds = %210
  %218 = icmp eq i8 %211, 0
  %219 = select i1 %192, i1 %218, i1 %186
  br i1 %219, label %220, label %223

220:                                              ; preds = %212, %217, %213
  %221 = or i64 %2, -4611686018427387904
  %222 = select i1 %192, i64 %221, i64 %2
  br label %261

223:                                              ; preds = %217, %213
  %224 = or i64 %0, -4611686018427387904
  %225 = select i1 %182, i64 %224, i64 %0
  br label %261

226:                                              ; preds = %169
  %227 = add i64 %2, %0
  %228 = icmp eq i16 %7, 0
  br i1 %228, label %229, label %241

229:                                              ; preds = %226
  %ctlz.sh = lshr i64 %227, 1
  %ctlz.step = or i64 %227, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %230 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %230, 6148914691236517205
  %ctpop.sh = lshr i64 %230, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %231 = trunc i64 %ctpop.part to i32
  %232 = shl i64 %227, %ctpop.part
  %233 = sub nsw i32 1, %231
  br label %252

234:                                              ; preds = %166, %159, %150, %164, %85, %78, %69, %83
  %235 = phi i64 [ %0, %83 ], [ %0, %69 ], [ %0, %78 ], [ %0, %85 ], [ %163, %159 ], [ %0, %150 ], [ 0, %166 ], [ 0, %164 ]
  %236 = phi i64 [ 0, %83 ], [ %2, %69 ], [ %82, %78 ], [ 0, %85 ], [ %2, %159 ], [ %2, %150 ], [ %2, %166 ], [ %2, %164 ]
  %237 = phi i64 [ %2, %83 ], [ 0, %69 ], [ %80, %78 ], [ %87, %85 ], [ %161, %159 ], [ 0, %150 ], [ %168, %166 ], [ %0, %164 ]
  %238 = phi i32 [ %8, %83 ], [ %8, %69 ], [ %8, %78 ], [ %8, %85 ], [ %10, %159 ], [ %10, %150 ], [ %10, %166 ], [ %10, %164 ]
  %239 = add i64 %236, %235
  %240 = icmp slt i64 %239, 0
  br i1 %240, label %252, label %241

241:                                              ; preds = %226, %234
  %242 = phi i32 [ %238, %234 ], [ %8, %226 ]
  %243 = phi i64 [ %239, %234 ], [ %227, %226 ]
  %244 = phi i64 [ %237, %234 ], [ 0, %226 ]
  %245 = shl i64 %243, 63
  %246 = icmp ne i64 %244, 0
  %247 = zext i1 %246 to i64
  %248 = or i64 %245, %247
  %249 = lshr i64 %243, 1
  %250 = or i64 %249, -9223372036854775808
  %251 = add nuw nsw i32 %242, 1
  br label %252

252:                                              ; preds = %234, %241, %229
  %253 = phi i32 [ %238, %234 ], [ %251, %241 ], [ %233, %229 ]
  %254 = phi i64 [ %239, %234 ], [ %250, %241 ], [ %232, %229 ]
  %255 = phi i64 [ %237, %234 ], [ %248, %241 ], [ 0, %229 ]
  %256 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 3
  %257 = load i8, i8* %256, align 1
  %258 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %257, i8 zeroext %4, i32 %253, i64 %254, i64 %255, %struct.float_status* %5)
  %259 = extractvalue { i64, i16 } %258, 0
  %260 = extractvalue { i64, i16 } %258, 1
  br label %261

261:                                              ; preds = %223, %220, %199, %143, %140, %119, %66, %63, %42, %171, %15, %252, %146
  %262 = phi i64 [ %259, %252 ], [ -9223372036854775808, %146 ], [ %0, %15 ], [ %0, %171 ], [ %65, %63 ], [ %68, %66 ], [ -4611686018427387904, %42 ], [ %142, %140 ], [ %145, %143 ], [ -4611686018427387904, %119 ], [ %222, %220 ], [ %225, %223 ], [ -4611
  %263 = phi i16 [ %260, %252 ], [ %149, %146 ], [ %1, %15 ], [ %1, %171 ], [ %3, %63 ], [ %1, %66 ], [ -1, %42 ], [ %3, %140 ], [ %1, %143 ], [ -1, %119 ], [ %3, %220 ], [ %1, %223 ], [ -1, %199 ]
  %264 = insertvalue { i64, i16 } undef, i64 %262, 0
  %265 = insertvalue { i64, i16 } %264, i16 %263, 1
  ret { i64, i16 } %265
}

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i16 } @subFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 zeroext %4, %struct.float_status* nocapture %5) unnamed_addr #13 {
  %7 = and i16 %1, 32767
  %8 = zext i16 %7 to i32
  %9 = and i16 %3, 32767
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %8, %10
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %192, label %13

13:                                               ; preds = %6
  %14 = icmp slt i32 %11, 0
  br i1 %14, label %90, label %15

15:                                               ; preds = %13
  switch i32 %8, label %79 [
    i32 32767, label %16
    i32 0, label %78
  ]

16:                                               ; preds = %15
  %17 = or i64 %2, %0
  %18 = and i64 %17, 9223372036854775807
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %74, label %20

20:                                               ; preds = %16
  %21 = icmp eq i16 %7, 32767
  %22 = and i64 %0, 4611686018427387904
  %23 = icmp ne i64 %22, 0
  %24 = and i1 %23, %21
  %25 = and i64 %0, -4611686018427387905
  %26 = and i64 %0, 4611686018427387903
  %27 = icmp ne i64 %26, 0
  %28 = icmp eq i64 %25, %0
  %29 = and i1 %27, %21
  %30 = and i1 %28, %29
  %31 = icmp eq i16 %9, 32767
  %32 = and i64 %2, 4611686018427387904
  %33 = icmp ne i64 %32, 0
  %34 = and i1 %33, %31
  %35 = and i64 %2, -4611686018427387905
  %36 = and i64 %2, 4611686018427387903
  %37 = icmp ne i64 %36, 0
  %38 = icmp eq i64 %35, %2
  %39 = and i1 %37, %31
  %40 = and i1 %38, %39
  %41 = zext i1 %40 to i8
  %42 = or i1 %30, %40
  br i1 %42, label %43, label %47

43:                                               ; preds = %20
  %44 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, 1
  store i8 %46, i8* %44, align 1
  br label %47

47:                                               ; preds = %43, %20
  %48 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 6
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %316

51:                                               ; preds = %47
  %52 = icmp ult i64 %0, %2
  br i1 %52, label %58, label %53

53:                                               ; preds = %51
  %54 = icmp ult i64 %2, %0
  br i1 %54, label %58, label %55

55:                                               ; preds = %53
  %56 = icmp ult i16 %1, %3
  %57 = zext i1 %56 to i8
  br label %58

58:                                               ; preds = %55, %53, %51
  %59 = phi i8 [ %57, %55 ], [ 0, %51 ], [ 1, %53 ]
  br i1 %30, label %65, label %60

60:                                               ; preds = %58
  br i1 %24, label %61, label %68

61:                                               ; preds = %60
  %62 = or i8 %59, %41
  %63 = icmp eq i8 %62, 0
  %64 = and i1 %34, %63
  br i1 %64, label %68, label %71

65:                                               ; preds = %58
  %66 = icmp eq i8 %59, 0
  %67 = select i1 %40, i1 %66, i1 %34
  br i1 %67, label %68, label %71

68:                                               ; preds = %65, %61, %60
  %69 = or i64 %2, -4611686018427387904
  %70 = select i1 %40, i64 %69, i64 %2
  br label %316

71:                                               ; preds = %65, %61
  %72 = or i64 %0, -4611686018427387904
  %73 = select i1 %30, i64 %72, i64 %0
  br label %316

74:                                               ; preds = %16
  %75 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %76, 1
  store i8 %77, i8* %75, align 1
  br label %316

78:                                               ; preds = %15
  br label %79

79:                                               ; preds = %15, %78
  %80 = phi i32 [ 1, %78 ], [ %8, %15 ]
  %81 = phi i32 [ 1, %78 ], [ %10, %15 ]
  %82 = icmp ult i64 %2, %0
  br i1 %82, label %279, label %83

83:                                               ; preds = %79
  %84 = icmp ult i64 %0, %2
  br i1 %84, label %183, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 1
  %89 = select i1 %88, i16 -32768, i16 0
  br label %316

90:                                               ; preds = %13
  %91 = icmp eq i16 %9, 32767
  br i1 %91, label %92, label %151

92:                                               ; preds = %90
  %93 = and i64 %2, 9223372036854775807
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %146, label %95

95:                                               ; preds = %92
  %96 = icmp eq i16 %7, 32767
  %97 = and i64 %0, 4611686018427387904
  %98 = icmp ne i64 %97, 0
  %99 = and i1 %98, %96
  %100 = and i64 %0, -4611686018427387905
  %101 = and i64 %0, 4611686018427387903
  %102 = icmp ne i64 %101, 0
  %103 = icmp eq i64 %100, %0
  %104 = and i1 %102, %96
  %105 = and i1 %103, %104
  %106 = and i64 %2, 4611686018427387904
  %107 = icmp ne i64 %106, 0
  %108 = and i64 %2, -4611686018427387905
  %109 = and i64 %2, 4611686018427387903
  %110 = icmp ne i64 %109, 0
  %111 = icmp eq i64 %108, %2
  %112 = and i1 %111, %110
  %113 = zext i1 %112 to i8
  %114 = or i1 %105, %112
  br i1 %114, label %115, label %119

115:                                              ; preds = %95
  %116 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %117, 1
  store i8 %118, i8* %116, align 1
  br label %119

119:                                              ; preds = %115, %95
  %120 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 6
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %316

123:                                              ; preds = %119
  %124 = icmp ult i64 %0, %2
  br i1 %124, label %130, label %125

125:                                              ; preds = %123
  %126 = icmp ult i64 %2, %0
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = icmp ult i16 %1, %3
  %129 = zext i1 %128 to i8
  br label %130

130:                                              ; preds = %127, %125, %123
  %131 = phi i8 [ %129, %127 ], [ 0, %123 ], [ 1, %125 ]
  br i1 %105, label %137, label %132

132:                                              ; preds = %130
  br i1 %99, label %133, label %140

133:                                              ; preds = %132
  %134 = or i8 %131, %113
  %135 = icmp eq i8 %134, 0
  %136 = and i1 %107, %135
  br i1 %136, label %140, label %143

137:                                              ; preds = %130
  %138 = icmp eq i8 %131, 0
  %139 = select i1 %112, i1 %138, i1 %107
  br i1 %139, label %140, label %143

140:                                              ; preds = %137, %133, %132
  %141 = or i64 %2, -4611686018427387904
  %142 = select i1 %112, i64 %141, i64 %2
  br label %316

143:                                              ; preds = %137, %133
  %144 = or i64 %0, -4611686018427387904
  %145 = select i1 %105, i64 %144, i64 %0
  br label %316

146:                                              ; preds = %92
  %147 = xor i8 %4, 1
  %148 = zext i8 %147 to i16
  %149 = shl i16 %148, 15
  %150 = or i16 %149, 32767
  br label %316

151:                                              ; preds = %90
  %152 = icmp eq i16 %7, 0
  %153 = zext i1 %152 to i32
  %154 = add nsw i32 %11, %153
  %155 = sub nsw i32 0, %154
  %156 = trunc i32 %155 to i8
  %157 = sub i8 0, %156
  %158 = and i8 %157, 63
  %159 = icmp eq i32 %154, 0
  br i1 %159, label %183, label %160

160:                                              ; preds = %151
  %161 = icmp sgt i32 %154, -64
  br i1 %161, label %162, label %167

162:                                              ; preds = %160
  %163 = zext i8 %158 to i64
  %164 = shl i64 %0, %163
  %165 = zext i32 %155 to i64
  %166 = lshr i64 %0, %165
  br label %183

167:                                              ; preds = %160
  %168 = icmp eq i32 %155, 64
  br i1 %168, label %183, label %169

169:                                              ; preds = %167
  %170 = icmp sgt i32 %154, -128
  br i1 %170, label %171, label %180

171:                                              ; preds = %169
  %172 = and i32 %155, 63
  %173 = zext i32 %172 to i64
  %174 = lshr i64 %0, %173
  %175 = zext i8 %158 to i64
  %176 = shl i64 %0, %175
  %177 = icmp ne i64 %176, 0
  %178 = zext i1 %177 to i64
  %179 = or i64 %174, %178
  br label %183

180:                                              ; preds = %169
  %181 = icmp ne i64 %0, 0
  %182 = zext i1 %181 to i64
  br label %183

183:                                              ; preds = %180, %171, %162, %151, %167, %83
  %184 = phi i64 [ %0, %83 ], [ %166, %162 ], [ %0, %151 ], [ 0, %171 ], [ 0, %180 ], [ 0, %167 ]
  %185 = phi i64 [ 0, %83 ], [ %164, %162 ], [ 0, %151 ], [ %179, %171 ], [ %182, %180 ], [ %0, %167 ]
  %186 = phi i32 [ %81, %83 ], [ %10, %162 ], [ %10, %151 ], [ %10, %171 ], [ %10, %180 ], [ %10, %167 ]
  %187 = sub i64 %2, %184
  %188 = icmp ne i64 %185, 0
  %189 = sext i1 %188 to i64
  %190 = add i64 %187, %189
  %191 = xor i8 %4, 1
  br label %287

192:                                              ; preds = %6
  %193 = icmp eq i16 %7, 32767
  br i1 %193, label %194, label %248

194:                                              ; preds = %192
  %195 = and i64 %0, 9223372036854775807
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %316, label %197

197:                                              ; preds = %194
  %198 = and i64 %0, 4611686018427387904
  %199 = icmp eq i64 %198, 0
  %200 = and i64 %0, -4611686018427387905
  %201 = and i64 %0, 4611686018427387903
  %202 = icmp ne i64 %201, 0
  %203 = icmp eq i64 %200, %0
  %204 = and i1 %203, %202
  %205 = icmp eq i16 %9, 32767
  %206 = and i64 %2, 4611686018427387904
  %207 = icmp ne i64 %206, 0
  %208 = and i1 %207, %205
  %209 = and i64 %2, -4611686018427387905
  %210 = and i64 %2, 4611686018427387903
  %211 = icmp ne i64 %210, 0
  %212 = icmp eq i64 %209, %2
  %213 = and i1 %211, %205
  %214 = and i1 %212, %213
  %215 = zext i1 %214 to i8
  %216 = or i1 %204, %214
  br i1 %216, label %217, label %221

217:                                              ; preds = %197
  %218 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %219 = load i8, i8* %218, align 1
  %220 = or i8 %219, 1
  store i8 %220, i8* %218, align 1
  br label %221

221:                                              ; preds = %217, %197
  %222 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 6
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %225, label %316

225:                                              ; preds = %221
  %226 = icmp ult i64 %0, %2
  br i1 %226, label %232, label %227

227:                                              ; preds = %225
  %228 = icmp ult i64 %2, %0
  br i1 %228, label %232, label %229

229:                                              ; preds = %227
  %230 = icmp ult i16 %1, %3
  %231 = zext i1 %230 to i8
  br label %232

232:                                              ; preds = %229, %227, %225
  %233 = phi i8 [ %231, %229 ], [ 0, %225 ], [ 1, %227 ]
  br i1 %204, label %239, label %234

234:                                              ; preds = %232
  br i1 %199, label %242, label %235

235:                                              ; preds = %234
  %236 = or i8 %233, %215
  %237 = icmp eq i8 %236, 0
  %238 = and i1 %208, %237
  br i1 %238, label %242, label %245

239:                                              ; preds = %232
  %240 = icmp eq i8 %233, 0
  %241 = select i1 %214, i1 %240, i1 %208
  br i1 %241, label %242, label %245

242:                                              ; preds = %234, %239, %235
  %243 = or i64 %2, -4611686018427387904
  %244 = select i1 %214, i64 %243, i64 %2
  br label %316

245:                                              ; preds = %239, %235
  %246 = or i64 %0, -4611686018427387904
  %247 = select i1 %204, i64 %246, i64 %0
  br label %316

248:                                              ; preds = %192
  %249 = icmp eq i16 %9, 0
  %250 = sext i1 %249 to i32
  %251 = add nsw i32 %11, %250
  %252 = trunc i32 %251 to i8
  %253 = sub i8 0, %252
  %254 = and i8 %253, 63
  %255 = icmp eq i32 %251, 0
  br i1 %255, label %279, label %256

256:                                              ; preds = %248
  %257 = icmp slt i32 %251, 64
  br i1 %257, label %258, label %263

258:                                              ; preds = %256
  %259 = zext i8 %254 to i64
  %260 = shl i64 %2, %259
  %261 = zext i32 %251 to i64
  %262 = lshr i64 %2, %261
  br label %279

263:                                              ; preds = %256
  %264 = icmp eq i32 %251, 64
  br i1 %264, label %279, label %265

265:                                              ; preds = %263
  %266 = icmp slt i32 %251, 128
  br i1 %266, label %267, label %276

267:                                              ; preds = %265
  %268 = and i32 %251, 63
  %269 = zext i32 %268 to i64
  %270 = lshr i64 %2, %269
  %271 = zext i8 %254 to i64
  %272 = shl i64 %2, %271
  %273 = icmp ne i64 %272, 0
  %274 = zext i1 %273 to i64
  %275 = or i64 %270, %274
  br label %279

276:                                              ; preds = %265
  %277 = icmp ne i64 %2, 0
  %278 = zext i1 %277 to i64
  br label %279

279:                                              ; preds = %276, %267, %258, %248, %263, %79
  %280 = phi i64 [ %2, %79 ], [ %262, %258 ], [ %2, %248 ], [ 0, %267 ], [ 0, %276 ], [ 0, %263 ]
  %281 = phi i64 [ 0, %79 ], [ %260, %258 ], [ 0, %248 ], [ %275, %267 ], [ %278, %276 ], [ %2, %263 ]
  %282 = phi i32 [ %80, %79 ], [ %8, %258 ], [ %8, %248 ], [ %8, %267 ], [ %8, %276 ], [ %8, %263 ]
  %283 = sub i64 %0, %280
  %284 = icmp ne i64 %281, 0
  %285 = sext i1 %284 to i64
  %286 = add i64 %283, %285
  br label %287

287:                                              ; preds = %279, %183
  %288 = phi i64 [ %286, %279 ], [ %190, %183 ]
  %289 = phi i64 [ %281, %279 ], [ %185, %183 ]
  %290 = phi i8 [ %4, %279 ], [ %191, %183 ]
  %291 = phi i32 [ %282, %279 ], [ %186, %183 ]
  %292 = sub i64 0, %289
  %293 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 3
  %294 = load i8, i8* %293, align 1
  %295 = icmp eq i64 %288, 0
  %296 = add nsw i32 %291, -64
  %297 = select i1 %295, i64 %292, i64 %288
  %298 = select i1 %295, i64 0, i64 %292
  %299 = select i1 %295, i32 %296, i32 %291
  %ctlz.sh = lshr i64 %297, 1
  %ctlz.step = or i64 %297, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %300 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %300, 6148914691236517205
  %ctpop.sh = lshr i64 %300, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %301 = trunc i64 %ctpop.part to i32
  %302 = shl i64 %298, %ctpop.part
  %303 = icmp eq i32 %301, 0
  br i1 %303, label %310, label %304

304:                                              ; preds = %287
  %305 = shl i64 %297, %ctpop.part
  %306 = sub nsw i64 0, %ctpop.part
  %307 = and i64 %306, 63
  %308 = lshr i64 %298, %307
  %309 = or i64 %308, %305
  br label %310

310:                                              ; preds = %287, %304
  %311 = phi i64 [ %309, %304 ], [ %297, %287 ]
  %312 = sub nsw i32 %299, %301
  %313 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %294, i8 zeroext %290, i32 %312, i64 %311, i64 %302, %struct.float_status* nonnull %5) #23
  %314 = extractvalue { i64, i16 } %313, 0
  %315 = extractvalue { i64, i16 } %313, 1
  br label %316

316:                                              ; preds = %245, %242, %221, %143, %140, %119, %71, %68, %47, %194, %310, %146, %85, %74
  %317 = phi i64 [ %314, %310 ], [ -9223372036854775808, %146 ], [ -4611686018427387904, %74 ], [ 0, %85 ], [ %0, %194 ], [ %70, %68 ], [ %73, %71 ], [ -4611686018427387904, %47 ], [ %142, %140 ], [ %145, %143 ], [ -4611686018427387904, %119 ], [ %244, %
  %318 = phi i16 [ %315, %310 ], [ %150, %146 ], [ -1, %74 ], [ %89, %85 ], [ %1, %194 ], [ %3, %68 ], [ %1, %71 ], [ -1, %47 ], [ %3, %140 ], [ %1, %143 ], [ -1, %119 ], [ %3, %242 ], [ %1, %245 ], [ -1, %221 ]
  %319 = insertvalue { i64, i16 } undef, i64 %317, 0
  %320 = insertvalue { i64, i16 } %319, i16 %318, 1
  ret { i64, i16 } %320
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %0, i8 zeroext %1, i32 %2, i64 %3, i64 %4, %struct.float_status* nocapture %5) unnamed_addr #2 {
  %7 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  switch i8 %0, label %130 [
    i8 32, label %10
    i8 64, label %11
  ]

10:                                               ; preds = %6
  br label %11

11:                                               ; preds = %6, %10
  %12 = phi i64 [ 549755813888, %10 ], [ 1024, %6 ]
  %13 = phi i64 [ 1099511627775, %10 ], [ 2047, %6 ]
  %14 = icmp ne i64 %4, 0
  %15 = zext i1 %14 to i64
  %16 = or i64 %15, %3
  br i1 %9, label %27, label %17

17:                                               ; preds = %11
  %18 = icmp eq i8 %8, 3
  br i1 %18, label %27, label %19

19:                                               ; preds = %17
  %20 = icmp eq i8 %1, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = icmp eq i8 %8, 2
  %23 = select i1 %22, i64 0, i64 %13
  br label %27

24:                                               ; preds = %19
  %25 = icmp eq i8 %8, 1
  %26 = select i1 %25, i64 0, i64 %13
  br label %27

27:                                               ; preds = %24, %21, %17, %11
  %28 = phi i64 [ %12, %11 ], [ 0, %17 ], [ %23, %21 ], [ %26, %24 ]
  %29 = and i64 %13, %16
  %30 = add nsw i32 %2, -1
  %31 = icmp ugt i32 %30, 32764
  br i1 %31, label %32, label %104

32:                                               ; preds = %27
  %33 = icmp sgt i32 %2, 32766
  br i1 %33, label %159, label %34

34:                                               ; preds = %32
  %35 = icmp eq i32 %2, 32766
  %36 = xor i64 %16, -1
  %37 = icmp ugt i64 %28, %36
  %38 = and i1 %35, %37
  br i1 %38, label %159, label %39

39:                                               ; preds = %34
  %40 = icmp slt i32 %2, 1
  br i1 %40, label %41, label %104

41:                                               ; preds = %39
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 4
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %47 = load i8, i8* %46, align 1
  %48 = or i8 %47, -128
  store i8 %48, i8* %46, align 1
  %49 = zext i8 %1 to i16
  %50 = shl i16 %49, 15
  br label %304

51:                                               ; preds = %41
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 1
  %55 = icmp slt i32 %2, 0
  %56 = or i1 %55, %54
  %57 = icmp ule i64 %28, %36
  %58 = or i1 %57, %56
  %59 = sub nsw i32 1, %2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %75, label %61

61:                                               ; preds = %51
  %62 = icmp sgt i32 %2, -63
  br i1 %62, label %63, label %72

63:                                               ; preds = %61
  %64 = zext i32 %59 to i64
  %65 = lshr i64 %16, %64
  %66 = add nsw i32 %2, 63
  %67 = zext i32 %66 to i64
  %68 = shl i64 %16, %67
  %69 = icmp ne i64 %68, 0
  %70 = zext i1 %69 to i64
  %71 = or i64 %65, %70
  br label %75

72:                                               ; preds = %61
  %73 = icmp ne i64 %16, 0
  %74 = zext i1 %73 to i64
  br label %75

75:                                               ; preds = %51, %63, %72
  %76 = phi i64 [ %71, %63 ], [ %74, %72 ], [ %16, %51 ]
  %77 = and i64 %76, %13
  %78 = icmp ne i64 %77, 0
  %79 = and i1 %58, %78
  br i1 %79, label %80, label %84

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %82, 16
  store i8 %83, i8* %81, align 1
  br label %84

84:                                               ; preds = %80, %75
  br i1 %78, label %85, label %89

85:                                               ; preds = %84
  %86 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %87, 32
  store i8 %88, i8* %86, align 1
  br label %89

89:                                               ; preds = %85, %84
  %90 = add i64 %76, %28
  %91 = lshr i64 %90, 63
  %92 = trunc i64 %91 to i16
  %93 = add nuw nsw i64 %13, 1
  %94 = shl nuw nsw i64 %77, 1
  %95 = icmp eq i64 %94, %93
  %96 = and i1 %9, %95
  %97 = select i1 %96, i64 %93, i64 0
  %98 = or i64 %97, %13
  %99 = xor i64 %98, -1
  %100 = and i64 %90, %99
  %101 = zext i8 %1 to i16
  %102 = shl i16 %101, 15
  %103 = or i16 %102, %92
  br label %304

104:                                              ; preds = %39, %27
  %105 = icmp eq i64 %29, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %108, 32
  store i8 %109, i8* %107, align 1
  br label %110

110:                                              ; preds = %104, %106
  %111 = add i64 %28, %16
  %112 = icmp ult i64 %111, %28
  %113 = select i1 %112, i64 -9223372036854775808, i64 %111
  %114 = zext i1 %112 to i32
  %115 = add nuw nsw i32 %114, %2
  %116 = add nuw nsw i64 %13, 1
  %117 = shl nuw nsw i64 %29, 1
  %118 = icmp eq i64 %117, %116
  %119 = and i1 %9, %118
  %120 = select i1 %119, i64 %116, i64 0
  %121 = or i64 %120, %13
  %122 = xor i64 %121, -1
  %123 = and i64 %113, %122
  %124 = icmp eq i64 %123, 0
  %125 = select i1 %124, i32 0, i32 %115
  %126 = zext i8 %1 to i32
  %127 = shl nuw nsw i32 %126, 15
  %128 = add nuw nsw i32 %125, %127
  %129 = trunc i32 %128 to i16
  br label %304

130:                                              ; preds = %6
  %131 = lshr i64 %4, 63
  %132 = trunc i64 %131 to i8
  br i1 %9, label %147, label %133

133:                                              ; preds = %130
  %134 = icmp eq i8 %8, 3
  br i1 %134, label %147, label %135

135:                                              ; preds = %133
  %136 = icmp eq i8 %1, 0
  br i1 %136, label %142, label %137

137:                                              ; preds = %135
  %138 = icmp eq i8 %8, 1
  %139 = icmp ne i64 %4, 0
  %140 = and i1 %139, %138
  %141 = zext i1 %140 to i8
  br label %147

142:                                              ; preds = %135
  %143 = icmp eq i8 %8, 2
  %144 = icmp ne i64 %4, 0
  %145 = and i1 %144, %143
  %146 = zext i1 %145 to i8
  br label %147

147:                                              ; preds = %133, %142, %137, %130
  %148 = phi i8 [ %132, %130 ], [ %141, %137 ], [ %146, %142 ], [ 0, %133 ]
  %149 = add nsw i32 %2, -1
  %150 = icmp ugt i32 %149, 32764
  br i1 %150, label %151, label %274

151:                                              ; preds = %147
  %152 = icmp sgt i32 %2, 32766
  br i1 %152, label %159, label %153

153:                                              ; preds = %151
  %154 = icmp ne i32 %2, 32766
  %155 = icmp ne i64 %3, -1
  %156 = or i1 %154, %155
  %157 = icmp eq i8 %148, 0
  %158 = or i1 %156, %157
  br i1 %158, label %187, label %159

159:                                              ; preds = %151, %153, %34, %32
  %160 = phi i64 [ %13, %32 ], [ %13, %34 ], [ 0, %153 ], [ 0, %151 ]
  %161 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %162 = load i8, i8* %161, align 1
  %163 = or i8 %162, 40
  store i8 %163, i8* %161, align 1
  %164 = icmp eq i8 %8, 3
  br i1 %164, label %178, label %165

165:                                              ; preds = %159
  %166 = icmp ne i8 %1, 0
  %167 = icmp eq i8 %8, 2
  %168 = and i1 %166, %167
  br i1 %168, label %178, label %169

169:                                              ; preds = %165
  %170 = icmp eq i8 %1, 0
  br i1 %170, label %176, label %171

171:                                              ; preds = %169
  %172 = zext i8 %1 to i16
  %173 = shl i16 %172, 15
  %174 = or i16 %173, 32767
  %175 = insertvalue { i64, i16 } { i64 -9223372036854775808, i16 undef }, i16 %174, 1
  br label %183

176:                                              ; preds = %169
  %177 = icmp eq i8 %8, 1
  br i1 %177, label %178, label %183

178:                                              ; preds = %165, %176, %159
  %179 = xor i64 %160, -1
  %180 = zext i8 %1 to i16
  %181 = shl i16 %180, 15
  %182 = or i16 %181, 32766
  br label %304

183:                                              ; preds = %176, %171
  %184 = phi { i64, i16 } [ %175, %171 ], [ { i64 -9223372036854775808, i16 32767 }, %176 ]
  %185 = extractvalue { i64, i16 } %184, 0
  %186 = extractvalue { i64, i16 } %184, 1
  br label %304

187:                                              ; preds = %153
  %188 = icmp slt i32 %2, 1
  br i1 %188, label %189, label %274

189:                                              ; preds = %187
  %190 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 0
  %191 = load i8, i8* %190, align 1
  %192 = icmp ne i8 %191, 1
  %193 = icmp eq i32 %2, 0
  %194 = and i1 %193, %192
  %195 = icmp ne i8 %148, 0
  %196 = and i1 %195, %194
  %197 = xor i1 %196, true
  %198 = or i1 %155, %197
  %199 = sub nsw i32 1, %2
  %200 = add nsw i32 %2, 63
  %201 = and i32 %200, 63
  %202 = icmp eq i32 %199, 0
  br i1 %202, label %223, label %203

203:                                              ; preds = %189
  %204 = icmp sgt i32 %2, -63
  br i1 %204, label %205, label %213

205:                                              ; preds = %203
  %206 = zext i32 %201 to i64
  %207 = shl i64 %3, %206
  %208 = icmp ne i64 %4, 0
  %209 = zext i1 %208 to i64
  %210 = or i64 %207, %209
  %211 = zext i32 %199 to i64
  %212 = lshr i64 %3, %211
  br label %223

213:                                              ; preds = %203
  %214 = icmp eq i32 %199, 64
  br i1 %214, label %215, label %219

215:                                              ; preds = %213
  %216 = icmp ne i64 %4, 0
  %217 = zext i1 %216 to i64
  %218 = or i64 %217, %3
  br label %223

219:                                              ; preds = %213
  %220 = or i64 %4, %3
  %221 = icmp ne i64 %220, 0
  %222 = zext i1 %221 to i64
  br label %223

223:                                              ; preds = %189, %205, %215, %219
  %224 = phi i64 [ %210, %205 ], [ %4, %189 ], [ %218, %215 ], [ %222, %219 ]
  %225 = phi i64 [ %212, %205 ], [ %3, %189 ], [ 0, %215 ], [ 0, %219 ]
  %226 = icmp ne i64 %224, 0
  %227 = and i1 %198, %226
  br i1 %227, label %228, label %232

228:                                              ; preds = %223
  %229 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %230 = load i8, i8* %229, align 1
  %231 = or i8 %230, 16
  store i8 %231, i8* %229, align 1
  br label %237

232:                                              ; preds = %223
  %233 = icmp eq i64 %224, 0
  br i1 %233, label %241, label %234

234:                                              ; preds = %232
  %235 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %236 = load i8, i8* %235, align 1
  br label %237

237:                                              ; preds = %234, %228
  %238 = phi i8 [ %236, %234 ], [ %231, %228 ]
  %239 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %240 = or i8 %238, 32
  store i8 %240, i8* %239, align 1
  br label %241

241:                                              ; preds = %232, %237
  br i1 %9, label %242, label %245

242:                                              ; preds = %241
  %243 = lshr i64 %224, 63
  %244 = trunc i64 %243 to i8
  br label %255

245:                                              ; preds = %241
  %246 = icmp eq i8 %1, 0
  br i1 %246, label %251, label %247

247:                                              ; preds = %245
  %248 = icmp eq i8 %8, 1
  %249 = and i1 %248, %226
  %250 = zext i1 %249 to i8
  br label %255

251:                                              ; preds = %245
  %252 = icmp eq i8 %8, 2
  %253 = and i1 %252, %226
  %254 = zext i1 %253 to i8
  br label %255

255:                                              ; preds = %247, %251, %242
  %256 = phi i8 [ %244, %242 ], [ %250, %247 ], [ %254, %251 ]
  %257 = icmp eq i8 %256, 0
  br i1 %257, label %268, label %258

258:                                              ; preds = %255
  %259 = add i64 %225, 1
  %260 = and i64 %224, 9223372036854775807
  %261 = icmp eq i64 %260, 0
  %262 = and i1 %9, %261
  %263 = zext i1 %262 to i64
  %264 = xor i64 %263, -1
  %265 = and i64 %259, %264
  %266 = lshr i64 %259, 63
  %267 = trunc i64 %266 to i16
  br label %268

268:                                              ; preds = %258, %255
  %269 = phi i64 [ %225, %255 ], [ %265, %258 ]
  %270 = phi i16 [ 0, %255 ], [ %267, %258 ]
  %271 = zext i8 %1 to i16
  %272 = shl i16 %271, 15
  %273 = add i16 %270, %272
  br label %304

274:                                              ; preds = %187, %147
  %275 = icmp eq i64 %4, 0
  br i1 %275, label %280, label %276

276:                                              ; preds = %274
  %277 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %278 = load i8, i8* %277, align 1
  %279 = or i8 %278, 32
  store i8 %279, i8* %277, align 1
  br label %280

280:                                              ; preds = %274, %276
  %281 = icmp eq i8 %148, 0
  br i1 %281, label %294, label %282

282:                                              ; preds = %280
  %283 = add i64 %3, 1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %287

285:                                              ; preds = %282
  %286 = add nuw nsw i32 %2, 1
  br label %297

287:                                              ; preds = %282
  %288 = and i64 %4, 9223372036854775807
  %289 = icmp eq i64 %288, 0
  %290 = and i1 %289, %9
  %291 = zext i1 %290 to i64
  %292 = xor i64 %291, -1
  %293 = and i64 %283, %292
  br label %297

294:                                              ; preds = %280
  %295 = icmp eq i64 %3, 0
  %296 = select i1 %295, i32 0, i32 %2
  br label %297

297:                                              ; preds = %294, %285, %287
  %298 = phi i64 [ %3, %294 ], [ -9223372036854775808, %285 ], [ %293, %287 ]
  %299 = phi i32 [ %296, %294 ], [ %286, %285 ], [ %2, %287 ]
  %300 = zext i8 %1 to i32
  %301 = shl nuw nsw i32 %300, 15
  %302 = add nuw nsw i32 %299, %301
  %303 = trunc i32 %302 to i16
  br label %304

304:                                              ; preds = %297, %268, %183, %178, %110, %89, %45
  %305 = phi i64 [ %179, %178 ], [ %185, %183 ], [ %269, %268 ], [ %298, %297 ], [ 0, %45 ], [ %100, %89 ], [ %123, %110 ]
  %306 = phi i16 [ %182, %178 ], [ %186, %183 ], [ %273, %268 ], [ %303, %297 ], [ %50, %45 ], [ %103, %89 ], [ %129, %110 ]
  %307 = insertvalue { i64, i16 } undef, i64 %305, 0
  %308 = insertvalue { i64, i16 } %307, i16 %306, 1
  ret { i64, i16 } %308
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @floatx80_sub(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = lshr i16 %3, 15
  %9 = trunc i16 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i16 } @subFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i16 } @addFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i16 } [ %14, %13 ], [ %12, %11 ]
  ret { i64, i16 } %16
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @floatx80_mul(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = and i16 %1, 32767
  %7 = zext i16 %6 to i32
  %8 = and i16 %3, 32767
  %9 = zext i16 %8 to i32
  %10 = xor i16 %3, %1
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = icmp eq i16 %6, 32767
  br i1 %13, label %14, label %79

14:                                               ; preds = %5
  %15 = and i64 %0, 9223372036854775807
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %14
  %18 = icmp ne i16 %8, 32767
  %19 = and i64 %2, 9223372036854775807
  %20 = icmp eq i64 %19, 0
  %21 = or i1 %20, %18
  br i1 %21, label %73, label %22

22:                                               ; preds = %17, %14
  %23 = and i64 %0, 4611686018427387904
  %24 = icmp eq i64 %23, 0
  %25 = and i64 %0, -4611686018427387905
  %26 = and i64 %0, 4611686018427387903
  %27 = icmp ne i64 %26, 0
  %28 = icmp eq i64 %25, %0
  %29 = and i1 %28, %27
  %30 = icmp eq i16 %8, 32767
  %31 = and i64 %2, 4611686018427387904
  %32 = icmp ne i64 %31, 0
  %33 = and i1 %32, %30
  %34 = and i64 %2, -4611686018427387905
  %35 = and i64 %2, 4611686018427387903
  %36 = icmp ne i64 %35, 0
  %37 = icmp eq i64 %34, %2
  %38 = and i1 %36, %30
  %39 = and i1 %37, %38
  %40 = zext i1 %39 to i8
  %41 = or i1 %29, %39
  br i1 %41, label %42, label %46

42:                                               ; preds = %22
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  br label %46

46:                                               ; preds = %42, %22
  %47 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %175

50:                                               ; preds = %46
  %51 = icmp ult i64 %0, %2
  br i1 %51, label %57, label %52

52:                                               ; preds = %50
  %53 = icmp ult i64 %2, %0
  br i1 %53, label %57, label %54

54:                                               ; preds = %52
  %55 = icmp ult i16 %1, %3
  %56 = zext i1 %55 to i8
  br label %57

57:                                               ; preds = %54, %52, %50
  %58 = phi i8 [ %56, %54 ], [ 0, %50 ], [ 1, %52 ]
  br i1 %29, label %64, label %59

59:                                               ; preds = %57
  br i1 %24, label %67, label %60

60:                                               ; preds = %59
  %61 = or i8 %58, %40
  %62 = icmp eq i8 %61, 0
  %63 = and i1 %33, %62
  br i1 %63, label %67, label %70

64:                                               ; preds = %57
  %65 = icmp eq i8 %58, 0
  %66 = select i1 %39, i1 %65, i1 %33
  br i1 %66, label %67, label %70

67:                                               ; preds = %59, %64, %60
  %68 = or i64 %2, -4611686018427387904
  %69 = select i1 %39, i64 %68, i64 %2
  br label %175

70:                                               ; preds = %64, %60
  %71 = or i64 %0, -4611686018427387904
  %72 = select i1 %29, i64 %71, i64 %0
  br label %175

73:                                               ; preds = %17
  %74 = zext i16 %8 to i64
  %75 = or i64 %74, %2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %105, label %77

77:                                               ; preds = %73
  %78 = or i16 %10, 32767
  br label %175

79:                                               ; preds = %5
  %80 = icmp eq i16 %8, 32767
  br i1 %80, label %81, label %111

81:                                               ; preds = %79
  %82 = and i64 %2, 9223372036854775807
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %101, label %84

84:                                               ; preds = %81
  %85 = and i64 %2, -4611686018427387905
  %86 = and i64 %2, 4611686018427387903
  %87 = icmp ne i64 %86, 0
  %88 = icmp eq i64 %85, %2
  %89 = and i1 %88, %87
  br i1 %89, label %90, label %94

90:                                               ; preds = %84
  %91 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %92 = load i8, i8* %91, align 1
  %93 = or i8 %92, 1
  store i8 %93, i8* %91, align 1
  br label %94

94:                                               ; preds = %90, %84
  %95 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %175

98:                                               ; preds = %94
  %99 = or i64 %2, -4611686018427387904
  %100 = select i1 %89, i64 %99, i64 %2
  br label %175

101:                                              ; preds = %81
  %102 = zext i16 %6 to i64
  %103 = or i64 %102, %0
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %101, %73
  %106 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %107 = load i8, i8* %106, align 1
  %108 = or i8 %107, 1
  store i8 %108, i8* %106, align 1
  br label %175

109:                                              ; preds = %101
  %110 = or i16 %10, 32767
  br label %175

111:                                              ; preds = %79
  %112 = icmp eq i16 %6, 0
  br i1 %112, label %113, label %122

113:                                              ; preds = %111
  %114 = icmp eq i64 %0, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %113
  %116 = and i16 %10, -32768
  br label %175

117:                                              ; preds = %113
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %118 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %118, 6148914691236517205
  %ctpop.sh = lshr i64 %118, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %119 = trunc i64 %ctpop.part to i32
  %120 = shl i64 %0, %ctpop.part
  %121 = sub nsw i32 1, %119
  br label %122

122:                                              ; preds = %117, %111
  %123 = phi i32 [ %121, %117 ], [ %7, %111 ]
  %124 = phi i64 [ %120, %117 ], [ %0, %111 ]
  %125 = icmp eq i16 %8, 0
  br i1 %125, label %126, label %135

126:                                              ; preds = %122
  %127 = icmp eq i64 %2, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %126
  %129 = and i16 %10, -32768
  br label %175

130:                                              ; preds = %126
  %ctlz.sh31 = lshr i64 %2, 1
  %ctlz.step32 = or i64 %2, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %131 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %131, 6148914691236517205
  %ctpop.sh44 = lshr i64 %131, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %132 = trunc i64 %ctpop.part67 to i32
  %133 = shl i64 %2, %ctpop.part67
  %134 = sub nsw i32 1, %132
  br label %135

135:                                              ; preds = %130, %122
  %136 = phi i32 [ %134, %130 ], [ %9, %122 ]
  %137 = phi i64 [ %133, %130 ], [ %2, %122 ]
  %138 = add nsw i32 %136, %123
  %139 = add nsw i32 %138, -16382
  %140 = lshr i64 %124, 32
  %141 = lshr i64 %137, 32
  %142 = and i64 %124, 4294967295
  %143 = and i64 %137, 4294967295
  %144 = mul nuw i64 %143, %142
  %145 = mul nuw i64 %141, %142
  %146 = mul nuw i64 %143, %140
  %147 = mul nuw i64 %141, %140
  %148 = add i64 %145, %146
  %149 = icmp ult i64 %148, %146
  %150 = select i1 %149, i64 4294967296, i64 0
  %151 = lshr i64 %148, 32
  %152 = or i64 %150, %151
  %153 = add i64 %152, %147
  %154 = shl i64 %148, 32
  %155 = add i64 %154, %144
  %156 = icmp ult i64 %155, %154
  %157 = zext i1 %156 to i64
  %158 = add i64 %153, %157
  %159 = icmp sgt i64 %158, 0
  br i1 %159, label %160, label %166

160:                                              ; preds = %135
  %161 = shl i64 %155, 1
  %162 = shl nuw i64 %158, 1
  %163 = lshr i64 %155, 63
  %164 = or i64 %162, %163
  %165 = add nsw i32 %138, -16383
  br label %166

166:                                              ; preds = %160, %135
  %167 = phi i64 [ %164, %160 ], [ %158, %135 ]
  %168 = phi i64 [ %161, %160 ], [ %155, %135 ]
  %169 = phi i32 [ %165, %160 ], [ %139, %135 ]
  %170 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 3
  %171 = load i8, i8* %170, align 1
  %172 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %171, i8 zeroext %12, i32 %169, i64 %167, i64 %168, %struct.float_status* %4)
  %173 = extractvalue { i64, i16 } %172, 0
  %174 = extractvalue { i64, i16 } %172, 1
  br label %175

175:                                              ; preds = %98, %94, %70, %67, %46, %166, %128, %115, %109, %105, %77
  %176 = phi i64 [ -4611686018427387904, %105 ], [ -9223372036854775808, %77 ], [ -9223372036854775808, %109 ], [ 0, %115 ], [ 0, %128 ], [ %173, %166 ], [ %69, %67 ], [ %72, %70 ], [ -4611686018427387904, %46 ], [ %100, %98 ], [ -4611686018427387904, %9
  %177 = phi i16 [ -1, %105 ], [ %78, %77 ], [ %110, %109 ], [ %116, %115 ], [ %129, %128 ], [ %174, %166 ], [ %3, %67 ], [ %1, %70 ], [ -1, %46 ], [ %3, %98 ], [ -1, %94 ]
  %178 = insertvalue { i64, i16 } undef, i64 %176, 0
  %179 = insertvalue { i64, i16 } %178, i16 %177, 1
  ret { i64, i16 } %179
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @floatx80_div(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = and i16 %1, 32767
  %7 = zext i16 %6 to i32
  %8 = and i16 %3, 32767
  %9 = zext i16 %8 to i32
  %10 = xor i16 %3, %1
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = icmp eq i16 %6, 32767
  br i1 %13, label %14, label %123

14:                                               ; preds = %5
  %15 = and i64 %0, 9223372036854775807
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %68, label %17

17:                                               ; preds = %14
  %18 = and i64 %0, 4611686018427387904
  %19 = icmp eq i64 %18, 0
  %20 = and i64 %0, -4611686018427387905
  %21 = and i64 %0, 4611686018427387903
  %22 = icmp ne i64 %21, 0
  %23 = icmp eq i64 %20, %0
  %24 = and i1 %23, %22
  %25 = icmp eq i16 %8, 32767
  %26 = and i64 %2, 4611686018427387904
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %27, %25
  %29 = and i64 %2, -4611686018427387905
  %30 = and i64 %2, 4611686018427387903
  %31 = icmp ne i64 %30, 0
  %32 = icmp eq i64 %29, %2
  %33 = and i1 %31, %25
  %34 = and i1 %32, %33
  %35 = zext i1 %34 to i8
  %36 = or i1 %24, %34
  br i1 %36, label %37, label %41

37:                                               ; preds = %17
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 1
  store i8 %40, i8* %38, align 1
  br label %41

41:                                               ; preds = %37, %17
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %381

45:                                               ; preds = %41
  %46 = icmp ult i64 %0, %2
  br i1 %46, label %52, label %47

47:                                               ; preds = %45
  %48 = icmp ult i64 %2, %0
  br i1 %48, label %52, label %49

49:                                               ; preds = %47
  %50 = icmp ult i16 %1, %3
  %51 = zext i1 %50 to i8
  br label %52

52:                                               ; preds = %49, %47, %45
  %53 = phi i8 [ %51, %49 ], [ 0, %45 ], [ 1, %47 ]
  br i1 %24, label %59, label %54

54:                                               ; preds = %52
  br i1 %19, label %62, label %55

55:                                               ; preds = %54
  %56 = or i8 %53, %35
  %57 = icmp eq i8 %56, 0
  %58 = and i1 %28, %57
  br i1 %58, label %62, label %65

59:                                               ; preds = %52
  %60 = icmp eq i8 %53, 0
  %61 = select i1 %34, i1 %60, i1 %28
  br i1 %61, label %62, label %65

62:                                               ; preds = %54, %59, %55
  %63 = or i64 %2, -4611686018427387904
  %64 = select i1 %34, i64 %63, i64 %2
  br label %381

65:                                               ; preds = %59, %55
  %66 = or i64 %0, -4611686018427387904
  %67 = select i1 %24, i64 %66, i64 %0
  br label %381

68:                                               ; preds = %14
  %69 = icmp eq i16 %8, 32767
  br i1 %69, label %70, label %121

70:                                               ; preds = %68
  %71 = and i64 %2, 9223372036854775807
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %154, label %73

73:                                               ; preds = %70
  %74 = and i64 %0, 4611686018427387904
  %75 = icmp eq i64 %74, 0
  %76 = and i64 %0, -4611686018427387905
  %77 = and i64 %0, 4611686018427387903
  %78 = icmp ne i64 %77, 0
  %79 = icmp eq i64 %76, %0
  %80 = and i1 %79, %78
  %81 = and i64 %2, 4611686018427387904
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %2, -4611686018427387905
  %84 = and i64 %2, 4611686018427387903
  %85 = icmp ne i64 %84, 0
  %86 = icmp eq i64 %83, %2
  %87 = and i1 %86, %85
  %88 = zext i1 %87 to i8
  %89 = or i1 %80, %87
  br i1 %89, label %90, label %94

90:                                               ; preds = %73
  %91 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %92 = load i8, i8* %91, align 1
  %93 = or i8 %92, 1
  store i8 %93, i8* %91, align 1
  br label %94

94:                                               ; preds = %90, %73
  %95 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %381

98:                                               ; preds = %94
  %99 = icmp ult i64 %0, %2
  br i1 %99, label %105, label %100

100:                                              ; preds = %98
  %101 = icmp ult i64 %2, %0
  br i1 %101, label %105, label %102

102:                                              ; preds = %100
  %103 = icmp ult i16 %1, %3
  %104 = zext i1 %103 to i8
  br label %105

105:                                              ; preds = %102, %100, %98
  %106 = phi i8 [ %104, %102 ], [ 0, %98 ], [ 1, %100 ]
  br i1 %80, label %112, label %107

107:                                              ; preds = %105
  br i1 %75, label %115, label %108

108:                                              ; preds = %107
  %109 = or i8 %106, %88
  %110 = icmp eq i8 %109, 0
  %111 = and i1 %82, %110
  br i1 %111, label %115, label %118

112:                                              ; preds = %105
  %113 = icmp eq i8 %106, 0
  %114 = select i1 %87, i1 %113, i1 %82
  br i1 %114, label %115, label %118

115:                                              ; preds = %107, %112, %108
  %116 = or i64 %2, -4611686018427387904
  %117 = select i1 %87, i64 %116, i64 %2
  br label %381

118:                                              ; preds = %112, %108
  %119 = or i64 %0, -4611686018427387904
  %120 = select i1 %80, i64 %119, i64 %0
  br label %381

121:                                              ; preds = %68
  %122 = or i16 %10, 32767
  br label %381

123:                                              ; preds = %5
  switch i32 %9, label %168 [
    i32 32767, label %124
    i32 0, label %148
  ]

124:                                              ; preds = %123
  %125 = and i64 %2, 9223372036854775807
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %146, label %127

127:                                              ; preds = %124
  %128 = icmp eq i16 %8, 32767
  %129 = and i64 %2, -4611686018427387905
  %130 = and i64 %2, 4611686018427387903
  %131 = icmp ne i64 %130, 0
  %132 = icmp eq i64 %129, %2
  %133 = and i1 %131, %128
  %134 = and i1 %132, %133
  br i1 %134, label %135, label %139

135:                                              ; preds = %127
  %136 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %137 = load i8, i8* %136, align 1
  %138 = or i8 %137, 1
  store i8 %138, i8* %136, align 1
  br label %139

139:                                              ; preds = %135, %127
  %140 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %381

143:                                              ; preds = %139
  %144 = or i64 %2, -4611686018427387904
  %145 = select i1 %134, i64 %144, i64 %2
  br label %381

146:                                              ; preds = %124
  %147 = and i16 %10, -32768
  br label %381

148:                                              ; preds = %123
  %149 = icmp eq i64 %2, 0
  br i1 %149, label %150, label %163

150:                                              ; preds = %148
  %151 = zext i16 %6 to i64
  %152 = or i64 %151, %0
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %158

154:                                              ; preds = %70, %150
  %155 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %156 = load i8, i8* %155, align 1
  %157 = or i8 %156, 1
  store i8 %157, i8* %155, align 1
  br label %381

158:                                              ; preds = %150
  %159 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %160 = load i8, i8* %159, align 1
  %161 = or i8 %160, 4
  store i8 %161, i8* %159, align 1
  %162 = or i16 %10, 32767
  br label %381

163:                                              ; preds = %148
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %164 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %164, 6148914691236517205
  %ctpop.sh = lshr i64 %164, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %165 = trunc i64 %ctpop.part to i32
  %166 = shl i64 %2, %ctpop.part
  %167 = sub nsw i32 1, %165
  br label %168

168:                                              ; preds = %123, %163
  %169 = phi i64 [ %2, %123 ], [ %166, %163 ]
  %170 = phi i32 [ %9, %123 ], [ %167, %163 ]
  %171 = icmp eq i16 %6, 0
  br i1 %171, label %172, label %181

172:                                              ; preds = %168
  %173 = icmp eq i64 %0, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %172
  %175 = and i16 %10, -32768
  br label %381

176:                                              ; preds = %172
  %ctlz.sh31 = lshr i64 %0, 1
  %ctlz.step32 = or i64 %0, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %177 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %177, 6148914691236517205
  %ctpop.sh44 = lshr i64 %177, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %178 = trunc i64 %ctpop.part67 to i32
  %179 = shl i64 %0, %ctpop.part67
  %180 = sub nsw i32 1, %178
  br label %181

181:                                              ; preds = %176, %168
  %182 = phi i64 [ %179, %176 ], [ %0, %168 ]
  %183 = phi i32 [ %180, %176 ], [ %7, %168 ]
  %184 = sub nsw i32 %183, %170
  %185 = icmp ugt i64 %169, %182
  %186 = shl i64 %182, 63
  %187 = xor i1 %185, true
  %188 = zext i1 %187 to i64
  %189 = lshr i64 %182, %188
  %190 = select i1 %185, i64 0, i64 %186
  %191 = select i1 %185, i32 16382, i32 16383
  %192 = add nsw i32 %184, %191
  %193 = icmp ugt i64 %169, %189
  %194 = lshr i64 %169, 32
  br i1 %193, label %197, label %195

195:                                              ; preds = %181
  %196 = and i64 %169, 4294967295
  br label %244

197:                                              ; preds = %181
  %198 = and i64 %169, -4294967296
  %199 = icmp ugt i64 %198, %189
  br i1 %199, label %200, label %203

200:                                              ; preds = %197
  %201 = udiv i64 %189, %194
  %202 = shl i64 %201, 32
  br label %203

203:                                              ; preds = %200, %197
  %204 = phi i64 [ %202, %200 ], [ -4294967296, %197 ]
  %205 = lshr exact i64 %204, 32
  %206 = and i64 %169, 4294967295
  %207 = mul nuw i64 %205, %206
  %208 = mul nuw i64 %205, %194
  %209 = lshr i64 %207, 32
  %210 = shl i64 %207, 32
  %211 = sub i64 %190, %210
  %212 = icmp ult i64 %190, %210
  %213 = sext i1 %212 to i64
  %214 = sub i64 %189, %208
  %215 = sub i64 %214, %209
  %216 = add i64 %215, %213
  %217 = icmp slt i64 %216, 0
  br i1 %217, label %218, label %231

218:                                              ; preds = %203
  %219 = shl i64 %169, 32
  br label %220

220:                                              ; preds = %220, %218
  %221 = phi i64 [ %204, %218 ], [ %224, %220 ]
  %222 = phi i64 [ %216, %218 ], [ %229, %220 ]
  %223 = phi i64 [ %211, %218 ], [ %225, %220 ]
  %224 = add i64 %221, -4294967296
  %225 = add i64 %223, %219
  %226 = add i64 %222, %194
  %227 = icmp ult i64 %225, %223
  %228 = zext i1 %227 to i64
  %229 = add i64 %226, %228
  %230 = icmp slt i64 %229, 0
  br i1 %230, label %220, label %231

231:                                              ; preds = %220, %203
  %232 = phi i64 [ %211, %203 ], [ %225, %220 ]
  %233 = phi i64 [ %216, %203 ], [ %229, %220 ]
  %234 = phi i64 [ %204, %203 ], [ %224, %220 ]
  %235 = shl i64 %233, 32
  %236 = lshr i64 %232, 32
  %237 = or i64 %235, %236
  %238 = icmp ugt i64 %198, %237
  br i1 %238, label %239, label %241

239:                                              ; preds = %231
  %240 = udiv i64 %237, %194
  br label %241

241:                                              ; preds = %239, %231
  %242 = phi i64 [ %240, %239 ], [ 4294967295, %231 ]
  %243 = or i64 %242, %234
  br label %244

244:                                              ; preds = %195, %241
  %245 = phi i64 [ %196, %195 ], [ %206, %241 ]
  %246 = phi i64 [ -1, %195 ], [ %243, %241 ]
  %247 = lshr i64 %246, 32
  %248 = and i64 %246, 4294967295
  %249 = mul nuw i64 %248, %245
  %250 = mul nuw i64 %247, %245
  %251 = mul nuw i64 %248, %194
  %252 = mul nuw i64 %247, %194
  %253 = add i64 %250, %251
  %254 = icmp ult i64 %253, %251
  %255 = select i1 %254, i64 4294967296, i64 0
  %256 = lshr i64 %253, 32
  %257 = or i64 %255, %256
  %258 = shl i64 %253, 32
  %259 = add i64 %258, %249
  %260 = icmp ult i64 %259, %258
  %261 = sub i64 %190, %259
  %262 = sext i1 %260 to i64
  %263 = icmp ult i64 %190, %259
  %264 = sext i1 %263 to i64
  %265 = sub i64 %189, %252
  %266 = sub i64 %265, %257
  %267 = add i64 %266, %262
  %268 = add i64 %267, %264
  %269 = icmp slt i64 %268, 0
  br i1 %269, label %270, label %280

270:                                              ; preds = %244, %270
  %271 = phi i64 [ %274, %270 ], [ %246, %244 ]
  %272 = phi i64 [ %275, %270 ], [ %261, %244 ]
  %273 = phi i64 [ %278, %270 ], [ %268, %244 ]
  %274 = add i64 %271, -1
  %275 = add i64 %272, %169
  %276 = icmp ult i64 %275, %272
  %277 = zext i1 %276 to i64
  %278 = add nsw i64 %273, %277
  %279 = icmp slt i64 %278, 0
  br i1 %279, label %270, label %280

280:                                              ; preds = %270, %244
  %281 = phi i64 [ %261, %244 ], [ %275, %270 ]
  %282 = phi i64 [ %246, %244 ], [ %274, %270 ]
  %283 = icmp ugt i64 %169, %281
  br i1 %283, label %284, label %374

284:                                              ; preds = %280
  %285 = and i64 %169, -4294967296
  %286 = icmp ugt i64 %285, %281
  br i1 %286, label %287, label %290

287:                                              ; preds = %284
  %288 = udiv i64 %281, %194
  %289 = shl i64 %288, 32
  br label %290

290:                                              ; preds = %287, %284
  %291 = phi i64 [ %289, %287 ], [ -4294967296, %284 ]
  %292 = lshr exact i64 %291, 32
  %293 = mul nuw i64 %292, %245
  %294 = mul nuw i64 %292, %194
  %295 = lshr i64 %293, 32
  %296 = shl i64 %293, 32
  %297 = sub i64 0, %296
  %298 = icmp ne i64 %296, 0
  %299 = sext i1 %298 to i64
  %300 = sub i64 %281, %294
  %301 = sub i64 %300, %295
  %302 = add i64 %301, %299
  %303 = icmp slt i64 %302, 0
  br i1 %303, label %304, label %317

304:                                              ; preds = %290
  %305 = shl i64 %169, 32
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ %291, %304 ], [ %310, %306 ]
  %308 = phi i64 [ %302, %304 ], [ %315, %306 ]
  %309 = phi i64 [ %297, %304 ], [ %311, %306 ]
  %310 = add i64 %307, -4294967296
  %311 = add i64 %309, %305
  %312 = add i64 %308, %194
  %313 = icmp ult i64 %311, %309
  %314 = zext i1 %313 to i64
  %315 = add i64 %312, %314
  %316 = icmp slt i64 %315, 0
  br i1 %316, label %306, label %317

317:                                              ; preds = %306, %290
  %318 = phi i64 [ %297, %290 ], [ %311, %306 ]
  %319 = phi i64 [ %302, %290 ], [ %315, %306 ]
  %320 = phi i64 [ %291, %290 ], [ %310, %306 ]
  %321 = shl i64 %319, 32
  %322 = lshr i64 %318, 32
  %323 = or i64 %321, %322
  %324 = icmp ugt i64 %285, %323
  br i1 %324, label %325, label %327

325:                                              ; preds = %317
  %326 = udiv i64 %323, %194
  br label %327

327:                                              ; preds = %317, %325
  %328 = phi i64 [ %326, %325 ], [ 4294967295, %317 ]
  %329 = or i64 %328, %320
  %330 = shl i64 %329, 1
  %331 = icmp ult i64 %330, 9
  br i1 %331, label %332, label %374

332:                                              ; preds = %327
  %333 = lshr i64 %329, 32
  %334 = and i64 %329, 4294967295
  %335 = mul nuw i64 %334, %245
  %336 = mul nuw i64 %333, %245
  %337 = mul nuw i64 %334, %194
  %338 = mul nuw i64 %333, %194
  %339 = add i64 %336, %337
  %340 = icmp ult i64 %339, %337
  %341 = select i1 %340, i64 4294967296, i64 0
  %342 = lshr i64 %339, 32
  %343 = or i64 %341, %342
  %344 = shl i64 %339, 32
  %345 = add i64 %344, %335
  %346 = icmp ult i64 %345, %344
  %347 = sub i64 0, %345
  %348 = sext i1 %346 to i64
  %349 = icmp ne i64 %345, 0
  %350 = sext i1 %349 to i64
  %351 = sub i64 %281, %338
  %352 = sub i64 %351, %343
  %353 = add i64 %352, %348
  %354 = add i64 %353, %350
  %355 = icmp slt i64 %354, 0
  br i1 %355, label %356, label %366

356:                                              ; preds = %332, %356
  %357 = phi i64 [ %360, %356 ], [ %329, %332 ]
  %358 = phi i64 [ %361, %356 ], [ %347, %332 ]
  %359 = phi i64 [ %364, %356 ], [ %354, %332 ]
  %360 = add i64 %357, -1
  %361 = add i64 %358, %169
  %362 = icmp ult i64 %361, %358
  %363 = zext i1 %362 to i64
  %364 = add nsw i64 %359, %363
  %365 = icmp slt i64 %364, 0
  br i1 %365, label %356, label %366

366:                                              ; preds = %356, %332
  %367 = phi i64 [ %354, %332 ], [ 0, %356 ]
  %368 = phi i64 [ %347, %332 ], [ %361, %356 ]
  %369 = phi i64 [ %329, %332 ], [ %360, %356 ]
  %370 = or i64 %368, %367
  %371 = icmp ne i64 %370, 0
  %372 = zext i1 %371 to i64
  %373 = or i64 %369, %372
  br label %374

374:                                              ; preds = %280, %366, %327
  %375 = phi i64 [ %373, %366 ], [ %329, %327 ], [ -1, %280 ]
  %376 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 3
  %377 = load i8, i8* %376, align 1
  %378 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %377, i8 zeroext %12, i32 %192, i64 %282, i64 %375, %struct.float_status* %4)
  %379 = extractvalue { i64, i16 } %378, 0
  %380 = extractvalue { i64, i16 } %378, 1
  br label %381

381:                                              ; preds = %143, %139, %118, %115, %94, %65, %62, %41, %374, %174, %158, %154, %146, %121
  %382 = phi i64 [ -4611686018427387904, %154 ], [ -9223372036854775808, %121 ], [ 0, %146 ], [ -9223372036854775808, %158 ], [ 0, %174 ], [ %379, %374 ], [ %64, %62 ], [ %67, %65 ], [ -4611686018427387904, %41 ], [ %117, %115 ], [ %120, %118 ], [ -46116
  %383 = phi i16 [ -1, %154 ], [ %122, %121 ], [ %147, %146 ], [ %162, %158 ], [ %175, %174 ], [ %380, %374 ], [ %3, %62 ], [ %1, %65 ], [ -1, %41 ], [ %3, %115 ], [ %1, %118 ], [ -1, %94 ], [ %3, %143 ], [ -1, %139 ]
  %384 = insertvalue { i64, i16 } undef, i64 %382, 0
  %385 = insertvalue { i64, i16 } %384, i16 %383, 1
  ret { i64, i16 } %385
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @floatx80_rem(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = and i16 %1, 32767
  %7 = zext i16 %6 to i32
  %8 = lshr i16 %1, 15
  %9 = trunc i16 %8 to i8
  %10 = and i16 %3, 32767
  %11 = zext i16 %10 to i32
  %12 = icmp eq i16 %6, 32767
  br i1 %12, label %13, label %72

13:                                               ; preds = %5
  %14 = and i64 %0, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = icmp ne i16 %10, 32767
  %18 = and i64 %2, 9223372036854775807
  %19 = icmp eq i64 %18, 0
  %20 = or i1 %19, %17
  br i1 %20, label %97, label %21

21:                                               ; preds = %16, %13
  %22 = and i64 %0, 4611686018427387904
  %23 = icmp eq i64 %22, 0
  %24 = and i64 %0, -4611686018427387905
  %25 = and i64 %0, 4611686018427387903
  %26 = icmp ne i64 %25, 0
  %27 = icmp eq i64 %24, %0
  %28 = and i1 %27, %26
  %29 = icmp eq i16 %10, 32767
  %30 = and i64 %2, 4611686018427387904
  %31 = icmp ne i64 %30, 0
  %32 = and i1 %31, %29
  %33 = and i64 %2, -4611686018427387905
  %34 = and i64 %2, 4611686018427387903
  %35 = icmp ne i64 %34, 0
  %36 = icmp eq i64 %33, %2
  %37 = and i1 %35, %29
  %38 = and i1 %36, %37
  %39 = zext i1 %38 to i8
  %40 = or i1 %28, %38
  br i1 %40, label %41, label %45

41:                                               ; preds = %21
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %43, 1
  store i8 %44, i8* %42, align 1
  br label %45

45:                                               ; preds = %41, %21
  %46 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %388

49:                                               ; preds = %45
  %50 = icmp ult i64 %0, %2
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = icmp ult i64 %2, %0
  br i1 %52, label %56, label %53

53:                                               ; preds = %51
  %54 = icmp ult i16 %1, %3
  %55 = zext i1 %54 to i8
  br label %56

56:                                               ; preds = %53, %51, %49
  %57 = phi i8 [ %55, %53 ], [ 0, %49 ], [ 1, %51 ]
  br i1 %28, label %63, label %58

58:                                               ; preds = %56
  br i1 %23, label %66, label %59

59:                                               ; preds = %58
  %60 = or i8 %57, %39
  %61 = icmp eq i8 %60, 0
  %62 = and i1 %32, %61
  br i1 %62, label %66, label %69

63:                                               ; preds = %56
  %64 = icmp eq i8 %57, 0
  %65 = select i1 %38, i1 %64, i1 %32
  br i1 %65, label %66, label %69

66:                                               ; preds = %58, %63, %59
  %67 = or i64 %2, -4611686018427387904
  %68 = select i1 %38, i64 %67, i64 %2
  br label %388

69:                                               ; preds = %63, %59
  %70 = or i64 %0, -4611686018427387904
  %71 = select i1 %28, i64 %70, i64 %0
  br label %388

72:                                               ; preds = %5
  switch i32 %11, label %106 [
    i32 32767, label %73
    i32 0, label %95
  ]

73:                                               ; preds = %72
  %74 = and i64 %2, 9223372036854775807
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %388, label %76

76:                                               ; preds = %73
  %77 = icmp eq i16 %10, 32767
  %78 = and i64 %2, -4611686018427387905
  %79 = and i64 %2, 4611686018427387903
  %80 = icmp ne i64 %79, 0
  %81 = icmp eq i64 %78, %2
  %82 = and i1 %80, %77
  %83 = and i1 %81, %82
  br i1 %83, label %84, label %88

84:                                               ; preds = %76
  %85 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %86 = load i8, i8* %85, align 1
  %87 = or i8 %86, 1
  store i8 %87, i8* %85, align 1
  br label %88

88:                                               ; preds = %84, %76
  %89 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %388

92:                                               ; preds = %88
  %93 = or i64 %2, -4611686018427387904
  %94 = select i1 %83, i64 %93, i64 %2
  br label %388

95:                                               ; preds = %72
  %96 = icmp eq i64 %2, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %16, %95
  %98 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %99, 1
  store i8 %100, i8* %98, align 1
  br label %388

101:                                              ; preds = %95
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %102 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %102, 6148914691236517205
  %ctpop.sh = lshr i64 %102, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %103 = trunc i64 %ctpop.part to i32
  %104 = shl i64 %2, %ctpop.part
  %105 = sub nsw i32 1, %103
  br label %106

106:                                              ; preds = %72, %101
  %107 = phi i64 [ %2, %72 ], [ %104, %101 ]
  %108 = phi i32 [ %11, %72 ], [ %105, %101 ]
  %109 = icmp eq i16 %6, 0
  br i1 %109, label %110, label %118

110:                                              ; preds = %106
  %111 = and i64 %0, 9223372036854775807
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %388, label %113

113:                                              ; preds = %110
  %ctlz.sh31 = lshr i64 %0, 1
  %ctlz.step32 = or i64 %0, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %114 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %114, 6148914691236517205
  %ctpop.sh44 = lshr i64 %114, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %115 = trunc i64 %ctpop.part67 to i32
  %116 = shl i64 %0, %ctpop.part67
  %117 = sub nsw i32 1, %115
  br label %118

118:                                              ; preds = %113, %106
  %119 = phi i64 [ %116, %113 ], [ %0, %106 ]
  %120 = phi i32 [ %117, %113 ], [ %7, %106 ]
  %121 = or i64 %107, -9223372036854775808
  %122 = sub nsw i32 %120, %108
  %123 = icmp slt i32 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %118
  %125 = icmp eq i32 %122, -1
  br i1 %125, label %126, label %388

126:                                              ; preds = %124
  %127 = shl i64 %119, 63
  %128 = lshr i64 %119, 1
  br label %336

129:                                              ; preds = %118
  %130 = icmp uge i64 %119, %121
  %131 = zext i1 %130 to i64
  %132 = select i1 %130, i64 %121, i64 0
  %133 = sub i64 %119, %132
  %134 = add nsw i32 %122, -64
  %135 = icmp sgt i32 %122, 64
  br i1 %135, label %136, label %219

136:                                              ; preds = %129
  %137 = lshr i64 %121, 32
  %138 = and i64 %121, -4294967296
  %139 = and i64 %107, 4294967295
  %140 = shl i64 %107, 32
  br label %141

141:                                              ; preds = %136, %189
  %142 = phi i32 [ %134, %136 ], [ %217, %189 ]
  %143 = phi i64 [ 0, %136 ], [ %213, %189 ]
  %144 = phi i64 [ %133, %136 ], [ %216, %189 ]
  %145 = icmp ugt i64 %121, %144
  br i1 %145, label %146, label %189

146:                                              ; preds = %141
  %147 = icmp ugt i64 %138, %144
  br i1 %147, label %148, label %151

148:                                              ; preds = %146
  %149 = udiv i64 %144, %137
  %150 = shl i64 %149, 32
  br label %151

151:                                              ; preds = %148, %146
  %152 = phi i64 [ %150, %148 ], [ -4294967296, %146 ]
  %153 = lshr exact i64 %152, 32
  %154 = mul nuw i64 %153, %139
  %155 = mul nuw i64 %153, %137
  %156 = lshr i64 %154, 32
  %157 = shl i64 %154, 32
  %158 = sub i64 %143, %157
  %159 = icmp ult i64 %143, %157
  %160 = sext i1 %159 to i64
  %161 = sub i64 %144, %155
  %162 = sub i64 %161, %156
  %163 = add i64 %162, %160
  %164 = icmp slt i64 %163, 0
  br i1 %164, label %165, label %176

165:                                              ; preds = %151, %165
  %166 = phi i64 [ %169, %165 ], [ %152, %151 ]
  %167 = phi i64 [ %174, %165 ], [ %163, %151 ]
  %168 = phi i64 [ %170, %165 ], [ %158, %151 ]
  %169 = add i64 %166, -4294967296
  %170 = add i64 %168, %140
  %171 = add i64 %167, %137
  %172 = icmp ult i64 %170, %168
  %173 = zext i1 %172 to i64
  %174 = add i64 %171, %173
  %175 = icmp slt i64 %174, 0
  br i1 %175, label %165, label %176

176:                                              ; preds = %165, %151
  %177 = phi i64 [ %158, %151 ], [ %170, %165 ]
  %178 = phi i64 [ %163, %151 ], [ %174, %165 ]
  %179 = phi i64 [ %152, %151 ], [ %169, %165 ]
  %180 = shl i64 %178, 32
  %181 = lshr i64 %177, 32
  %182 = or i64 %180, %181
  %183 = icmp ugt i64 %138, %182
  br i1 %183, label %184, label %186

184:                                              ; preds = %176
  %185 = udiv i64 %182, %137
  br label %186

186:                                              ; preds = %184, %176
  %187 = phi i64 [ %185, %184 ], [ 4294967295, %176 ]
  %188 = or i64 %187, %179
  br label %189

189:                                              ; preds = %141, %186
  %190 = phi i64 [ %188, %186 ], [ -1, %141 ]
  %191 = sub i64 %190, 2
  %192 = icmp ult i64 %190, 2
  %193 = select i1 %192, i64 0, i64 %191
  %194 = lshr i64 %193, 32
  %195 = and i64 %193, 4294967295
  %196 = mul nuw i64 %195, %139
  %197 = mul nuw i64 %194, %139
  %198 = mul nuw i64 %195, %137
  %199 = mul nuw i64 %194, %137
  %200 = add i64 %197, %198
  %201 = lshr i64 %200, 32
  %202 = shl i64 %200, 32
  %203 = add i64 %202, %196
  %204 = icmp ult i64 %203, %202
  %205 = sub i64 %143, %203
  %206 = sext i1 %204 to i64
  %207 = icmp ult i64 %143, %203
  %208 = sext i1 %207 to i64
  %209 = sub i64 %144, %199
  %210 = sub i64 %209, %201
  %211 = add i64 %210, %206
  %212 = add i64 %211, %208
  %213 = shl i64 %205, 62
  %214 = shl i64 %212, 62
  %215 = lshr i64 %205, 2
  %216 = or i64 %214, %215
  %217 = add nsw i32 %142, -62
  %218 = icmp sgt i32 %142, 62
  br i1 %218, label %141, label %219

219:                                              ; preds = %189, %129
  %220 = phi i64 [ %133, %129 ], [ %216, %189 ]
  %221 = phi i64 [ 0, %129 ], [ %213, %189 ]
  %222 = phi i32 [ %134, %129 ], [ %217, %189 ]
  %223 = phi i64 [ %131, %129 ], [ %193, %189 ]
  %224 = add nsw i32 %222, 64
  %225 = icmp sgt i32 %222, -64
  br i1 %225, label %226, label %336

226:                                              ; preds = %219
  %227 = icmp ugt i64 %121, %220
  %228 = lshr i64 %121, 32
  br i1 %227, label %231, label %229

229:                                              ; preds = %226
  %230 = and i64 %107, 4294967295
  br label %278

231:                                              ; preds = %226
  %232 = and i64 %121, -4294967296
  %233 = icmp ugt i64 %232, %220
  br i1 %233, label %234, label %237

234:                                              ; preds = %231
  %235 = udiv i64 %220, %228
  %236 = shl i64 %235, 32
  br label %237

237:                                              ; preds = %234, %231
  %238 = phi i64 [ %236, %234 ], [ -4294967296, %231 ]
  %239 = lshr exact i64 %238, 32
  %240 = and i64 %107, 4294967295
  %241 = mul nuw i64 %239, %240
  %242 = mul nuw i64 %239, %228
  %243 = lshr i64 %241, 32
  %244 = shl i64 %241, 32
  %245 = sub i64 %221, %244
  %246 = icmp ult i64 %221, %244
  %247 = sext i1 %246 to i64
  %248 = sub i64 %220, %242
  %249 = sub i64 %248, %243
  %250 = add i64 %249, %247
  %251 = icmp slt i64 %250, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %237
  %253 = shl i64 %107, 32
  br label %254

254:                                              ; preds = %254, %252
  %255 = phi i64 [ %238, %252 ], [ %258, %254 ]
  %256 = phi i64 [ %250, %252 ], [ %263, %254 ]
  %257 = phi i64 [ %245, %252 ], [ %259, %254 ]
  %258 = add i64 %255, -4294967296
  %259 = add i64 %257, %253
  %260 = add i64 %256, %228
  %261 = icmp ult i64 %259, %257
  %262 = zext i1 %261 to i64
  %263 = add i64 %260, %262
  %264 = icmp slt i64 %263, 0
  br i1 %264, label %254, label %265

265:                                              ; preds = %254, %237
  %266 = phi i64 [ %245, %237 ], [ %259, %254 ]
  %267 = phi i64 [ %250, %237 ], [ %263, %254 ]
  %268 = phi i64 [ %238, %237 ], [ %258, %254 ]
  %269 = shl i64 %267, 32
  %270 = lshr i64 %266, 32
  %271 = or i64 %269, %270
  %272 = icmp ugt i64 %232, %271
  br i1 %272, label %273, label %275

273:                                              ; preds = %265
  %274 = udiv i64 %271, %228
  br label %275

275:                                              ; preds = %273, %265
  %276 = phi i64 [ %274, %273 ], [ 4294967295, %265 ]
  %277 = or i64 %276, %268
  br label %278

278:                                              ; preds = %229, %275
  %279 = phi i64 [ %230, %229 ], [ %240, %275 ]
  %280 = phi i64 [ -1, %229 ], [ %277, %275 ]
  %281 = sub i64 %280, 2
  %282 = icmp ult i64 %280, 2
  %283 = select i1 %282, i64 0, i64 %281
  %284 = sub i32 0, %222
  %285 = zext i32 %284 to i64
  %286 = lshr i64 %283, %285
  %287 = shl i64 %286, %285
  %288 = lshr i64 %287, 32
  %289 = and i64 %287, 4294967295
  %290 = mul nuw i64 %289, %279
  %291 = mul nuw i64 %288, %279
  %292 = mul nuw i64 %289, %228
  %293 = mul nuw i64 %288, %228
  %294 = add i64 %291, %292
  %295 = icmp ult i64 %294, %292
  %296 = select i1 %295, i64 4294967296, i64 0
  %297 = lshr i64 %294, 32
  %298 = or i64 %296, %297
  %299 = shl i64 %294, 32
  %300 = add i64 %299, %290
  %301 = icmp ult i64 %300, %299
  %302 = sub i64 %221, %300
  %303 = sext i1 %301 to i64
  %304 = icmp ult i64 %221, %300
  %305 = sext i1 %304 to i64
  %306 = sub i64 %220, %293
  %307 = sub i64 %306, %298
  %308 = add i64 %307, %303
  %309 = add i64 %308, %305
  %310 = shl i64 %121, %285
  %311 = icmp eq i32 %222, 0
  %312 = and i32 %222, 63
  %313 = zext i32 %312 to i64
  %314 = lshr i64 %121, %313
  %315 = select i1 %311, i64 0, i64 %314
  %316 = icmp ugt i64 %309, %315
  %317 = icmp eq i64 %309, %315
  %318 = icmp uge i64 %302, %310
  %319 = and i1 %317, %318
  %320 = or i1 %316, %319
  br i1 %320, label %321, label %336

321:                                              ; preds = %278, %321
  %322 = phi i64 [ %325, %321 ], [ %286, %278 ]
  %323 = phi i64 [ %326, %321 ], [ %302, %278 ]
  %324 = phi i64 [ %330, %321 ], [ %309, %278 ]
  %325 = add i64 %322, 1
  %326 = sub i64 %323, %310
  %327 = sub i64 %324, %315
  %328 = icmp ult i64 %323, %310
  %329 = sext i1 %328 to i64
  %330 = add i64 %327, %329
  %331 = icmp ugt i64 %330, %315
  %332 = icmp eq i64 %330, %315
  %333 = icmp uge i64 %326, %310
  %334 = and i1 %332, %333
  %335 = or i1 %331, %334
  br i1 %335, label %321, label %336

336:                                              ; preds = %321, %126, %278, %219
  %337 = phi i32 [ %224, %219 ], [ %224, %278 ], [ 0, %126 ], [ %224, %321 ]
  %338 = phi i32 [ %222, %219 ], [ %222, %278 ], [ -64, %126 ], [ %222, %321 ]
  %339 = phi i64 [ %220, %219 ], [ %309, %278 ], [ %128, %126 ], [ %330, %321 ]
  %340 = phi i64 [ %221, %219 ], [ %302, %278 ], [ %127, %126 ], [ %326, %321 ]
  %341 = phi i64 [ %121, %219 ], [ %315, %278 ], [ %121, %126 ], [ %315, %321 ]
  %342 = phi i64 [ 0, %219 ], [ %310, %278 ], [ 0, %126 ], [ %310, %321 ]
  %343 = phi i64 [ %223, %219 ], [ %286, %278 ], [ 0, %126 ], [ %325, %321 ]
  %344 = sub i64 %342, %340
  %345 = sub i64 %341, %339
  %346 = icmp ult i64 %342, %340
  %347 = sext i1 %346 to i64
  %348 = add i64 %345, %347
  %349 = icmp ult i64 %348, %339
  %350 = icmp eq i64 %348, %339
  %351 = icmp ult i64 %344, %340
  %352 = and i1 %351, %350
  %353 = or i1 %349, %352
  br i1 %353, label %361, label %354

354:                                              ; preds = %336
  %355 = icmp eq i64 %344, %340
  %356 = and i1 %355, %350
  %357 = xor i1 %356, true
  %358 = and i64 %343, 1
  %359 = icmp eq i64 %358, 0
  %360 = or i1 %359, %357
  br i1 %360, label %363, label %361

361:                                              ; preds = %336, %354
  %362 = xor i8 %9, 1
  br label %363

363:                                              ; preds = %354, %361
  %364 = phi i64 [ %339, %354 ], [ %348, %361 ]
  %365 = phi i64 [ %340, %354 ], [ %344, %361 ]
  %366 = phi i8 [ %9, %354 ], [ %362, %361 ]
  %367 = icmp eq i64 %364, 0
  %368 = select i1 %367, i64 %365, i64 %364
  %369 = select i1 %367, i64 0, i64 %365
  %370 = select i1 %367, i32 %338, i32 %337
  %371 = add i32 %370, %108
  %ctlz.sh68 = lshr i64 %368, 1
  %ctlz.step69 = or i64 %368, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %372 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %372, 6148914691236517205
  %ctpop.sh81 = lshr i64 %372, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %373 = trunc i64 %ctpop.part104 to i32
  %374 = shl i64 %369, %ctpop.part104
  %375 = icmp eq i32 %373, 0
  br i1 %375, label %382, label %376

376:                                              ; preds = %363
  %377 = shl i64 %368, %ctpop.part104
  %378 = sub nsw i64 0, %ctpop.part104
  %379 = and i64 %378, 63
  %380 = lshr i64 %369, %379
  %381 = or i64 %380, %377
  br label %382

382:                                              ; preds = %363, %376
  %383 = phi i64 [ %381, %376 ], [ %368, %363 ]
  %384 = sub i32 %371, %373
  %385 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext 80, i8 zeroext %366, i32 %384, i64 %383, i64 %374, %struct.float_status* %4) #23
  %386 = extractvalue { i64, i16 } %385, 0
  %387 = extractvalue { i64, i16 } %385, 1
  br label %388

388:                                              ; preds = %92, %88, %69, %66, %45, %124, %110, %73, %382, %97
  %389 = phi i64 [ -4611686018427387904, %97 ], [ %386, %382 ], [ %0, %73 ], [ %0, %110 ], [ %0, %124 ], [ %68, %66 ], [ %71, %69 ], [ -4611686018427387904, %45 ], [ %94, %92 ], [ -4611686018427387904, %88 ]
  %390 = phi i16 [ -1, %97 ], [ %387, %382 ], [ %1, %73 ], [ %1, %110 ], [ %1, %124 ], [ %3, %66 ], [ %1, %69 ], [ -1, %45 ], [ %3, %92 ], [ -1, %88 ]
  %391 = insertvalue { i64, i16 } undef, i64 %389, 0
  %392 = insertvalue { i64, i16 } %391, i16 %390, 1
  ret { i64, i16 } %392
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @floatx80_sqrt(i64 %0, i16 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = icmp eq i16 %4, 32767
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %28, label %10

10:                                               ; preds = %7
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp ne i64 %12, 0
  %14 = icmp eq i64 %11, %0
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1
  br label %20

20:                                               ; preds = %16, %10
  %21 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 0
  %24 = or i64 %0, -4611686018427387904
  %25 = select i1 %15, i64 %24, i64 %0
  %26 = select i1 %23, i64 %25, i64 -4611686018427387904
  %27 = select i1 %23, i16 %1, i16 -1
  br label %328

28:                                               ; preds = %7
  %29 = icmp sgt i16 %1, -1
  br i1 %29, label %328, label %36

30:                                               ; preds = %3
  %31 = icmp sgt i16 %1, -1
  br i1 %31, label %40, label %32

32:                                               ; preds = %30
  %33 = zext i16 %4 to i64
  %34 = or i64 %33, %0
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %328, label %36

36:                                               ; preds = %28, %32
  %37 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %38 = load i8, i8* %37, align 1
  %39 = or i8 %38, 1
  store i8 %39, i8* %37, align 1
  br label %328

40:                                               ; preds = %30
  %41 = icmp eq i16 %4, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %40
  %43 = icmp eq i64 %0, 0
  br i1 %43, label %328, label %44

44:                                               ; preds = %42
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %45 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %45, 6148914691236517205
  %ctpop.sh = lshr i64 %45, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %46 = trunc i64 %ctpop.part to i32
  %47 = shl i64 %0, %ctpop.part
  %48 = sub nsw i32 1, %46
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi i64 [ %47, %44 ], [ %0, %40 ]
  %51 = phi i32 [ %48, %44 ], [ %5, %40 ]
  %52 = add nsw i32 %51, -16383
  %53 = ashr i32 %52, 1
  %54 = add nsw i32 %53, 16383
  %55 = lshr i64 %50, 32
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %50, 59
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 15
  %60 = and i32 %51, 1
  %61 = icmp eq i32 %60, 0
  %62 = lshr i64 %50, 49
  %63 = trunc i64 %62 to i32
  br i1 %61, label %76, label %64

64:                                               ; preds = %49
  %65 = add nuw nsw i32 %63, 16384
  %66 = zext i8 %59 to i64
  %67 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = sub nsw i32 %65, %69
  %71 = udiv i32 %56, %70
  %72 = shl i32 %71, 14
  %73 = shl nsw i32 %70, 15
  %74 = add i32 %73, %72
  %75 = lshr i64 %50, 33
  br label %91

76:                                               ; preds = %49
  %77 = or i32 %63, 32768
  %78 = zext i8 %59 to i64
  %79 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = sub nsw i32 %77, %81
  %83 = udiv i32 %56, %82
  %84 = add i32 %82, %83
  %85 = icmp ugt i32 %84, 131071
  %86 = shl i32 %84, 15
  %87 = select i1 %85, i32 -32768, i32 %86
  %88 = icmp ugt i32 %87, %56
  br i1 %88, label %91, label %89

89:                                               ; preds = %76
  %90 = ashr i32 %56, 1
  br label %100

91:                                               ; preds = %64, %76
  %92 = phi i64 [ %75, %64 ], [ %55, %76 ]
  %93 = phi i32 [ %74, %64 ], [ %87, %76 ]
  %94 = shl nuw nsw i64 %92, 31
  %95 = zext i32 %93 to i64
  %96 = udiv i64 %94, %95
  %97 = trunc i64 %96 to i32
  %98 = lshr i32 %93, 1
  %99 = add i32 %98, %97
  br label %100

100:                                              ; preds = %89, %91
  %101 = phi i32 [ %90, %89 ], [ %99, %91 ]
  %102 = or i32 %60, 2
  %103 = sub nsw i32 0, %102
  %104 = zext i32 %101 to i64
  %105 = and i32 %103, 63
  %106 = zext i32 %105 to i64
  %107 = shl i64 %50, %106
  %108 = zext i32 %102 to i64
  %109 = lshr i64 %50, %108
  %110 = shl nuw i64 %104, 32
  %111 = icmp ugt i64 %110, %109
  br i1 %111, label %112, label %137

112:                                              ; preds = %100
  %113 = udiv i64 %109, %104
  %114 = shl i64 %113, 32
  %115 = and i64 %113, 4294967295
  %116 = mul nuw i64 %115, %104
  %117 = sub i64 %109, %116
  %118 = icmp slt i64 %117, 0
  br i1 %118, label %119, label %125

119:                                              ; preds = %112, %119
  %120 = phi i64 [ %122, %119 ], [ %114, %112 ]
  %121 = phi i64 [ %123, %119 ], [ %117, %112 ]
  %122 = add i64 %120, -4294967296
  %123 = add i64 %121, %104
  %124 = icmp slt i64 %123, 0
  br i1 %124, label %119, label %125

125:                                              ; preds = %119, %112
  %126 = phi i64 [ %117, %112 ], [ %123, %119 ]
  %127 = phi i64 [ %114, %112 ], [ %122, %119 ]
  %128 = shl i64 %126, 32
  %129 = lshr exact i64 %107, 32
  %130 = or i64 %128, %129
  %131 = icmp ugt i64 %110, %130
  br i1 %131, label %132, label %134

132:                                              ; preds = %125
  %133 = udiv i64 %130, %104
  br label %134

134:                                              ; preds = %132, %125
  %135 = phi i64 [ %133, %132 ], [ 4294967295, %125 ]
  %136 = or i64 %135, %127
  br label %137

137:                                              ; preds = %100, %134
  %138 = phi i64 [ %136, %134 ], [ -1, %100 ]
  %139 = shl nuw nsw i64 %104, 30
  %140 = add i64 %138, %139
  %141 = shl i64 %140, 1
  %142 = lshr i64 %140, 32
  %143 = and i64 %140, 4294967295
  %144 = mul nuw i64 %143, %143
  %145 = mul nuw i64 %142, %143
  %146 = mul nuw i64 %142, %142
  %147 = shl i64 %145, 1
  %148 = icmp ult i64 %147, %145
  %149 = select i1 %148, i64 4294967296, i64 0
  %150 = lshr i64 %145, 31
  %151 = and i64 %150, 4294967295
  %152 = or i64 %149, %151
  %153 = shl i64 %145, 33
  %154 = add i64 %153, %144
  %155 = icmp ult i64 %154, %153
  %156 = sub i64 %107, %154
  %157 = sext i1 %155 to i64
  %158 = icmp ult i64 %107, %154
  %159 = sext i1 %158 to i64
  %160 = sub i64 %109, %146
  %161 = sub i64 %160, %152
  %162 = add i64 %161, %157
  %163 = add i64 %162, %159
  %164 = icmp slt i64 %163, 0
  br i1 %164, label %165, label %180

165:                                              ; preds = %137, %165
  %166 = phi i64 [ %171, %165 ], [ %141, %137 ]
  %167 = phi i64 [ %174, %165 ], [ %156, %137 ]
  %168 = phi i64 [ %178, %165 ], [ %163, %137 ]
  %169 = phi i64 [ %170, %165 ], [ %140, %137 ]
  %170 = add i64 %169, -1
  %171 = add i64 %166, -2
  %172 = lshr i64 %170, 63
  %173 = or i64 %171, 1
  %174 = add i64 %173, %167
  %175 = add nsw i64 %172, %168
  %176 = icmp ult i64 %174, %167
  %177 = zext i1 %176 to i64
  %178 = add nsw i64 %175, %177
  %179 = icmp slt i64 %178, 0
  br i1 %179, label %165, label %180

180:                                              ; preds = %165, %137
  %181 = phi i64 [ %156, %137 ], [ %174, %165 ]
  %182 = phi i64 [ %141, %137 ], [ %171, %165 ]
  %183 = icmp ugt i64 %182, %181
  br i1 %183, label %184, label %318

184:                                              ; preds = %180
  %185 = lshr i64 %182, 32
  %186 = and i64 %182, -4294967296
  %187 = icmp ugt i64 %186, %181
  br i1 %187, label %188, label %191

188:                                              ; preds = %184
  %189 = udiv i64 %181, %185
  %190 = shl i64 %189, 32
  br label %191

191:                                              ; preds = %188, %184
  %192 = phi i64 [ %190, %188 ], [ -4294967296, %184 ]
  %193 = lshr exact i64 %192, 32
  %194 = and i64 %182, 4294967294
  %195 = mul nuw i64 %193, %194
  %196 = mul nuw i64 %193, %185
  %197 = lshr i64 %195, 32
  %198 = shl i64 %195, 32
  %199 = sub i64 0, %198
  %200 = icmp ne i64 %198, 0
  %201 = sext i1 %200 to i64
  %202 = sub i64 %181, %196
  %203 = sub i64 %202, %197
  %204 = add i64 %203, %201
  %205 = icmp slt i64 %204, 0
  br i1 %205, label %206, label %219

206:                                              ; preds = %191
  %207 = shl i64 %182, 32
  br label %208

208:                                              ; preds = %208, %206
  %209 = phi i64 [ %192, %206 ], [ %212, %208 ]
  %210 = phi i64 [ %204, %206 ], [ %217, %208 ]
  %211 = phi i64 [ %199, %206 ], [ %213, %208 ]
  %212 = add i64 %209, -4294967296
  %213 = add i64 %211, %207
  %214 = add i64 %210, %185
  %215 = icmp ult i64 %213, %211
  %216 = zext i1 %215 to i64
  %217 = add i64 %214, %216
  %218 = icmp slt i64 %217, 0
  br i1 %218, label %208, label %219

219:                                              ; preds = %208, %191
  %220 = phi i64 [ %199, %191 ], [ %213, %208 ]
  %221 = phi i64 [ %204, %191 ], [ %217, %208 ]
  %222 = phi i64 [ %192, %191 ], [ %212, %208 ]
  %223 = shl i64 %221, 32
  %224 = lshr i64 %220, 32
  %225 = or i64 %223, %224
  %226 = icmp ugt i64 %186, %225
  br i1 %226, label %227, label %229

227:                                              ; preds = %219
  %228 = udiv i64 %225, %185
  br label %229

229:                                              ; preds = %219, %227
  %230 = phi i64 [ %228, %227 ], [ 4294967295, %219 ]
  %231 = or i64 %230, %222
  %232 = and i64 %231, 4611686018427387902
  %233 = icmp ult i64 %232, 6
  br i1 %233, label %234, label %318

234:                                              ; preds = %229
  %235 = icmp eq i64 %231, 0
  %236 = select i1 %235, i64 1, i64 %231
  %237 = lshr i64 %236, 32
  %238 = and i64 %236, 4294967295
  %239 = mul nuw i64 %238, %194
  %240 = mul nuw i64 %237, %194
  %241 = mul nuw i64 %238, %185
  %242 = mul nuw i64 %237, %185
  %243 = add i64 %240, %241
  %244 = icmp ult i64 %243, %241
  %245 = select i1 %244, i64 4294967296, i64 0
  %246 = lshr i64 %243, 32
  %247 = or i64 %245, %246
  %248 = shl i64 %243, 32
  %249 = add i64 %248, %239
  %250 = icmp ult i64 %249, %248
  %251 = sub i64 0, %249
  %252 = sext i1 %250 to i64
  %253 = icmp ne i64 %249, 0
  %254 = sext i1 %253 to i64
  %255 = mul nuw i64 %238, %238
  %256 = mul nuw i64 %237, %238
  %257 = mul nuw i64 %237, %237
  %258 = shl i64 %256, 1
  %259 = icmp ult i64 %258, %256
  %260 = select i1 %259, i64 4294967296, i64 0
  %261 = lshr i64 %256, 31
  %262 = and i64 %261, 4294967295
  %263 = or i64 %260, %262
  %264 = add i64 %263, %257
  %265 = shl i64 %256, 33
  %266 = add i64 %265, %255
  %267 = icmp ult i64 %266, %265
  %268 = zext i1 %267 to i64
  %269 = add i64 %264, %268
  %270 = sub i64 0, %266
  %271 = icmp ne i64 %266, 0
  %272 = sub i64 %251, %269
  %273 = icmp ugt i64 %269, %251
  %274 = zext i1 %271 to i64
  %275 = icmp ult i64 %272, %274
  %276 = sext i1 %275 to i64
  %277 = sub i64 %272, %274
  %278 = sext i1 %273 to i64
  %279 = sub i64 %181, %242
  %280 = sub i64 %279, %247
  %281 = add i64 %280, %252
  %282 = add i64 %281, %254
  %283 = add i64 %282, %278
  %284 = add i64 %283, %276
  %285 = icmp slt i64 %284, 0
  br i1 %285, label %286, label %308

286:                                              ; preds = %234, %286
  %287 = phi i64 [ %296, %286 ], [ %270, %234 ]
  %288 = phi i64 [ %301, %286 ], [ %277, %234 ]
  %289 = phi i64 [ %306, %286 ], [ %284, %234 ]
  %290 = phi i64 [ %291, %286 ], [ %236, %234 ]
  %291 = add i64 %290, -1
  %292 = shl i64 %291, 1
  %293 = lshr i64 %291, 63
  %294 = or i64 %292, 1
  %295 = or i64 %293, %182
  %296 = add i64 %294, %287
  %297 = icmp ult i64 %296, %287
  %298 = add i64 %295, %288
  %299 = icmp ult i64 %298, %288
  %300 = zext i1 %297 to i64
  %301 = add i64 %298, %300
  %302 = icmp ult i64 %301, %300
  %303 = zext i1 %302 to i64
  %304 = zext i1 %299 to i64
  %305 = add nsw i64 %289, %304
  %306 = add nsw i64 %305, %303
  %307 = icmp slt i64 %306, 0
  br i1 %307, label %286, label %308

308:                                              ; preds = %286, %234
  %309 = phi i64 [ %236, %234 ], [ %291, %286 ]
  %310 = phi i64 [ %284, %234 ], [ %306, %286 ]
  %311 = phi i64 [ %277, %234 ], [ %301, %286 ]
  %312 = phi i64 [ %270, %234 ], [ %296, %286 ]
  %313 = or i64 %311, %310
  %314 = or i64 %313, %312
  %315 = icmp ne i64 %314, 0
  %316 = zext i1 %315 to i64
  %317 = or i64 %309, %316
  br label %318

318:                                              ; preds = %180, %308, %229
  %319 = phi i64 [ %317, %308 ], [ %231, %229 ], [ -1, %180 ]
  %320 = shl i64 %319, 1
  %321 = lshr i64 %319, 63
  %322 = or i64 %321, %182
  %323 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 3
  %324 = load i8, i8* %323, align 1
  %325 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %324, i8 zeroext 0, i32 %54, i64 %322, i64 %320, %struct.float_status* %2)
  %326 = extractvalue { i64, i16 } %325, 0
  %327 = extractvalue { i64, i16 } %325, 1
  br label %328

328:                                              ; preds = %42, %32, %28, %318, %36, %20
  %329 = phi i64 [ %26, %20 ], [ -4611686018427387904, %36 ], [ %326, %318 ], [ %0, %28 ], [ %0, %32 ], [ 0, %42 ]
  %330 = phi i16 [ %27, %20 ], [ -1, %36 ], [ %327, %318 ], [ %1, %28 ], [ %1, %32 ], [ 0, %42 ]
  %331 = insertvalue { i64, i16 } undef, i64 %329, 0
  %332 = insertvalue { i64, i16 } %331, i16 %330, 1
  ret { i64, i16 } %332
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_eq(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %32

21:                                               ; preds = %11
  %22 = icmp eq i64 %0, %2
  br i1 %22, label %23, label %32

23:                                               ; preds = %21
  %24 = icmp eq i16 %1, %3
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = icmp eq i64 %0, 0
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = or i16 %3, %1
  %29 = and i16 %28, 32767
  %30 = icmp eq i16 %29, 0
  %31 = zext i1 %30 to i32
  br label %32

32:                                               ; preds = %21, %25, %27, %23, %17
  %33 = phi i32 [ 0, %17 ], [ 0, %21 ], [ 1, %23 ], [ 0, %25 ], [ %31, %27 ]
  ret i32 %33
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_le(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %49

21:                                               ; preds = %11
  %22 = lshr i16 %1, 15
  %23 = trunc i16 %22 to i8
  %24 = lshr i16 %3, 15
  %25 = trunc i16 %24 to i8
  %26 = icmp eq i8 %23, %25
  %27 = icmp slt i16 %1, 0
  br i1 %26, label %36, label %28

28:                                               ; preds = %21
  br i1 %27, label %49, label %29

29:                                               ; preds = %28
  %30 = or i16 %3, %1
  %31 = shl i16 %30, 1
  %32 = zext i16 %31 to i64
  %33 = or i64 %2, %0
  %34 = or i64 %33, %32
  %35 = icmp eq i64 %34, 0
  br label %49

36:                                               ; preds = %21
  br i1 %27, label %37, label %43

37:                                               ; preds = %36
  %38 = icmp ult i16 %3, %1
  %39 = icmp eq i16 %3, %1
  %40 = icmp ule i64 %2, %0
  %41 = and i1 %40, %39
  %42 = or i1 %38, %41
  br label %49

43:                                               ; preds = %36
  %44 = icmp ult i16 %1, %3
  %45 = icmp eq i16 %1, %3
  %46 = icmp ule i64 %0, %2
  %47 = and i1 %46, %45
  %48 = or i1 %44, %47
  br label %49

49:                                               ; preds = %37, %43, %28, %29, %17
  %50 = phi i1 [ false, %17 ], [ true, %28 ], [ %35, %29 ], [ %42, %37 ], [ %48, %43 ]
  %51 = zext i1 %50 to i32
  ret i32 %51
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_lt(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %49

21:                                               ; preds = %11
  %22 = lshr i16 %1, 15
  %23 = trunc i16 %22 to i8
  %24 = lshr i16 %3, 15
  %25 = trunc i16 %24 to i8
  %26 = icmp eq i8 %23, %25
  %27 = icmp slt i16 %1, 0
  br i1 %26, label %36, label %28

28:                                               ; preds = %21
  br i1 %27, label %29, label %49

29:                                               ; preds = %28
  %30 = or i16 %3, %1
  %31 = shl i16 %30, 1
  %32 = zext i16 %31 to i64
  %33 = or i64 %2, %0
  %34 = or i64 %33, %32
  %35 = icmp ne i64 %34, 0
  br label %49

36:                                               ; preds = %21
  br i1 %27, label %37, label %43

37:                                               ; preds = %36
  %38 = icmp ult i16 %3, %1
  %39 = icmp eq i16 %3, %1
  %40 = icmp ult i64 %2, %0
  %41 = and i1 %40, %39
  %42 = or i1 %38, %41
  br label %49

43:                                               ; preds = %36
  %44 = icmp ult i16 %1, %3
  %45 = icmp eq i16 %1, %3
  %46 = icmp ult i64 %0, %2
  %47 = and i1 %46, %45
  %48 = or i1 %44, %47
  br label %49

49:                                               ; preds = %37, %43, %28, %29, %17
  %50 = phi i1 [ false, %17 ], [ false, %28 ], [ %35, %29 ], [ %42, %37 ], [ %48, %43 ]
  %51 = zext i1 %50 to i32
  ret i32 %51
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_unordered(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %21

21:                                               ; preds = %11, %17
  %22 = phi i32 [ 1, %17 ], [ 0, %11 ]
  ret i32 %22
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_eq_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %38, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = icmp eq i16 %6, 32767
  %20 = and i64 %0, 4611686018427387903
  %21 = icmp ne i64 %20, 0
  %22 = icmp eq i64 %18, %0
  %23 = and i1 %21, %19
  %24 = and i1 %22, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %17
  %26 = and i64 %2, -4611686018427387905
  %27 = and i16 %3, 32767
  %28 = icmp eq i16 %27, 32767
  %29 = and i64 %2, 4611686018427387903
  %30 = icmp ne i64 %29, 0
  %31 = icmp eq i64 %26, %2
  %32 = and i1 %30, %28
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %49

34:                                               ; preds = %25, %17
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %49

38:                                               ; preds = %11
  %39 = icmp eq i64 %0, %2
  br i1 %39, label %40, label %49

40:                                               ; preds = %38
  %41 = icmp eq i16 %1, %3
  br i1 %41, label %49, label %42

42:                                               ; preds = %40
  %43 = icmp eq i64 %0, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %42
  %45 = or i16 %3, %1
  %46 = and i16 %45, 32767
  %47 = icmp eq i16 %46, 0
  %48 = zext i1 %47 to i32
  br label %49

49:                                               ; preds = %25, %38, %42, %44, %40, %34
  %50 = phi i32 [ 0, %25 ], [ 0, %34 ], [ 0, %38 ], [ 1, %40 ], [ 0, %42 ], [ %48, %44 ]
  ret i32 %50
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_le_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %38, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = icmp eq i16 %6, 32767
  %20 = and i64 %0, 4611686018427387903
  %21 = icmp ne i64 %20, 0
  %22 = icmp eq i64 %18, %0
  %23 = and i1 %21, %19
  %24 = and i1 %22, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %17
  %26 = and i64 %2, -4611686018427387905
  %27 = and i16 %3, 32767
  %28 = icmp eq i16 %27, 32767
  %29 = and i64 %2, 4611686018427387903
  %30 = icmp ne i64 %29, 0
  %31 = icmp eq i64 %26, %2
  %32 = and i1 %30, %28
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %66

34:                                               ; preds = %25, %17
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %66

38:                                               ; preds = %11
  %39 = lshr i16 %1, 15
  %40 = trunc i16 %39 to i8
  %41 = lshr i16 %3, 15
  %42 = trunc i16 %41 to i8
  %43 = icmp eq i8 %40, %42
  %44 = icmp slt i16 %1, 0
  br i1 %43, label %53, label %45

45:                                               ; preds = %38
  br i1 %44, label %66, label %46

46:                                               ; preds = %45
  %47 = or i16 %3, %1
  %48 = shl i16 %47, 1
  %49 = zext i16 %48 to i64
  %50 = or i64 %2, %0
  %51 = or i64 %50, %49
  %52 = icmp eq i64 %51, 0
  br label %66

53:                                               ; preds = %38
  br i1 %44, label %54, label %60

54:                                               ; preds = %53
  %55 = icmp ult i16 %3, %1
  %56 = icmp eq i16 %3, %1
  %57 = icmp ule i64 %2, %0
  %58 = and i1 %57, %56
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %53
  %61 = icmp ult i16 %1, %3
  %62 = icmp eq i16 %1, %3
  %63 = icmp ule i64 %0, %2
  %64 = and i1 %63, %62
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %54, %60, %25, %45, %46, %34
  %67 = phi i1 [ false, %25 ], [ false, %34 ], [ true, %45 ], [ %52, %46 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_lt_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %38, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = icmp eq i16 %6, 32767
  %20 = and i64 %0, 4611686018427387903
  %21 = icmp ne i64 %20, 0
  %22 = icmp eq i64 %18, %0
  %23 = and i1 %21, %19
  %24 = and i1 %22, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %17
  %26 = and i64 %2, -4611686018427387905
  %27 = and i16 %3, 32767
  %28 = icmp eq i16 %27, 32767
  %29 = and i64 %2, 4611686018427387903
  %30 = icmp ne i64 %29, 0
  %31 = icmp eq i64 %26, %2
  %32 = and i1 %30, %28
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %66

34:                                               ; preds = %25, %17
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %66

38:                                               ; preds = %11
  %39 = lshr i16 %1, 15
  %40 = trunc i16 %39 to i8
  %41 = lshr i16 %3, 15
  %42 = trunc i16 %41 to i8
  %43 = icmp eq i8 %40, %42
  %44 = icmp slt i16 %1, 0
  br i1 %43, label %53, label %45

45:                                               ; preds = %38
  br i1 %44, label %46, label %66

46:                                               ; preds = %45
  %47 = or i16 %3, %1
  %48 = shl i16 %47, 1
  %49 = zext i16 %48 to i64
  %50 = or i64 %2, %0
  %51 = or i64 %50, %49
  %52 = icmp ne i64 %51, 0
  br label %66

53:                                               ; preds = %38
  br i1 %44, label %54, label %60

54:                                               ; preds = %53
  %55 = icmp ult i16 %3, %1
  %56 = icmp eq i16 %3, %1
  %57 = icmp ult i64 %2, %0
  %58 = and i1 %57, %56
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %53
  %61 = icmp ult i16 %1, %3
  %62 = icmp eq i16 %1, %3
  %63 = icmp ult i64 %0, %2
  %64 = and i1 %63, %62
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %54, %60, %25, %45, %46, %34
  %67 = phi i1 [ false, %25 ], [ false, %34 ], [ false, %45 ], [ %52, %46 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_unordered_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %38, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = icmp eq i16 %6, 32767
  %20 = and i64 %0, 4611686018427387903
  %21 = icmp ne i64 %20, 0
  %22 = icmp eq i64 %18, %0
  %23 = and i1 %21, %19
  %24 = and i1 %22, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %17
  %26 = and i64 %2, -4611686018427387905
  %27 = and i16 %3, 32767
  %28 = icmp eq i16 %27, 32767
  %29 = and i64 %2, 4611686018427387903
  %30 = icmp ne i64 %29, 0
  %31 = icmp eq i64 %26, %2
  %32 = and i1 %30, %28
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %38

34:                                               ; preds = %25, %17
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %25, %11, %34
  %39 = phi i32 [ 1, %25 ], [ 1, %34 ], [ 0, %11 ]
  ret i32 %39
}

; Function Attrs: nounwind uwtable
define i32 @float128_to_int32(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i32 %7, 32767
  %11 = or i64 %4, %0
  %12 = icmp eq i64 %11, 0
  %13 = select i1 %12, i8 %9, i8 0
  %14 = select i1 %10, i8 %13, i8 %9
  %15 = icmp eq i32 %7, 0
  %16 = icmp ne i64 %0, 0
  %17 = zext i1 %16 to i64
  %18 = or i64 %4, %17
  br i1 %15, label %22, label %19

19:                                               ; preds = %3
  %20 = or i64 %18, 281474976710656
  %21 = icmp ult i32 %7, 16424
  br i1 %21, label %22, label %40

22:                                               ; preds = %3, %19
  %23 = phi i64 [ %20, %19 ], [ %18, %3 ]
  %24 = sub nuw nsw i32 16424, %7
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %40, label %26

26:                                               ; preds = %22
  %27 = icmp ugt i32 %7, 16360
  br i1 %27, label %28, label %37

28:                                               ; preds = %26
  %29 = zext i32 %24 to i64
  %30 = lshr i64 %23, %29
  %31 = add nuw nsw i64 %5, 24
  %32 = and i64 %31, 63
  %33 = shl i64 %23, %32
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i64
  %36 = or i64 %30, %35
  br label %40

37:                                               ; preds = %26
  %38 = icmp ne i64 %23, 0
  %39 = zext i1 %38 to i64
  br label %40

40:                                               ; preds = %37, %28, %22, %19
  %41 = phi i64 [ %20, %19 ], [ %36, %28 ], [ %39, %37 ], [ %23, %22 ]
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %55, label %45

45:                                               ; preds = %40
  %46 = icmp eq i8 %43, 3
  br i1 %46, label %55, label %47

47:                                               ; preds = %45
  %48 = icmp eq i8 %14, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %47
  %50 = icmp eq i8 %43, 2
  %51 = select i1 %50, i64 0, i64 127
  br label %55

52:                                               ; preds = %47
  %53 = icmp eq i8 %43, 1
  %54 = select i1 %53, i64 0, i64 127
  br label %55

55:                                               ; preds = %52, %49, %45, %40
  %56 = phi i64 [ 64, %40 ], [ 0, %45 ], [ %51, %49 ], [ %54, %52 ]
  %57 = trunc i64 %41 to i8
  %58 = and i8 %57, 127
  %59 = add i64 %56, %41
  %60 = lshr i64 %59, 7
  %61 = icmp eq i8 %58, 64
  %62 = and i1 %44, %61
  %63 = zext i1 %62 to i64
  %64 = xor i64 %63, 4294967295
  %65 = and i64 %60, %64
  %66 = trunc i64 %65 to i32
  %67 = icmp eq i8 %14, 0
  %68 = sub nsw i32 0, %66
  %69 = select i1 %67, i32 %66, i32 %68
  %70 = icmp ugt i64 %59, 549755813887
  br i1 %70, label %77, label %71

71:                                               ; preds = %55
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %82, label %73

73:                                               ; preds = %71
  %74 = lshr i32 %69, 31
  %75 = zext i8 %14 to i32
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %82, label %77

77:                                               ; preds = %73, %55
  %78 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %79, 1
  store i8 %80, i8* %78, align 1
  %81 = select i1 %67, i32 2147483647, i32 -2147483648
  br label %88

82:                                               ; preds = %73, %71
  %83 = icmp eq i8 %58, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %82
  %85 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %86 = load i8, i8* %85, align 1
  %87 = or i8 %86, 32
  store i8 %87, i8* %85, align 1
  br label %88

88:                                               ; preds = %77, %82, %84
  %89 = phi i32 [ %81, %77 ], [ %69, %82 ], [ %69, %84 ]
  ret i32 %89
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_to_int32_round_to_zero(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp ne i64 %0, 0
  %11 = zext i1 %10 to i64
  %12 = or i64 %4, %11
  %13 = icmp ugt i32 %7, 16414
  br i1 %13, label %14, label %19

14:                                               ; preds = %3
  %15 = icmp eq i32 %7, 32767
  %16 = icmp ne i64 %12, 0
  %17 = and i1 %16, %15
  %18 = select i1 %17, i8 0, i8 %9
  br label %41

19:                                               ; preds = %3
  %20 = icmp ult i32 %7, 16383
  br i1 %20, label %21, label %29

21:                                               ; preds = %19
  %22 = icmp ne i32 %7, 0
  %23 = icmp ne i64 %12, 0
  %24 = or i1 %23, %22
  br i1 %24, label %25, label %55

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 32
  store i8 %28, i8* %26, align 1
  br label %55

29:                                               ; preds = %19
  %30 = or i64 %12, 281474976710656
  %31 = sub nuw nsw i32 16431, %7
  %32 = zext i32 %31 to i64
  %33 = lshr i64 %30, %32
  %34 = trunc i64 %33 to i32
  %35 = icmp sgt i64 %1, -1
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %34, i32 %36
  %38 = lshr i32 %37, 31
  %39 = trunc i64 %8 to i32
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %48, label %41

41:                                               ; preds = %14, %29
  %42 = phi i8 [ %9, %29 ], [ %18, %14 ]
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  %46 = icmp eq i8 %42, 0
  %47 = select i1 %46, i32 2147483647, i32 -2147483648
  br label %55

48:                                               ; preds = %29
  %49 = shl i64 %33, %32
  %50 = icmp eq i64 %49, %30
  br i1 %50, label %55, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 32
  store i8 %54, i8* %52, align 1
  br label %55

55:                                               ; preds = %51, %48, %25, %21, %41
  %56 = phi i32 [ %47, %41 ], [ 0, %21 ], [ 0, %25 ], [ %37, %48 ], [ %37, %51 ]
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define i64 @float128_to_int64(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %38, label %10

10:                                               ; preds = %3
  %11 = or i64 %4, 281474976710656
  %12 = icmp ugt i32 %7, 16430
  br i1 %12, label %13, label %38

13:                                               ; preds = %10
  %14 = icmp ugt i32 %7, 16446
  br i1 %14, label %15, label %27

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = or i8 %17, 1
  store i8 %18, i8* %16, align 1
  %19 = icmp sgt i64 %1, -1
  br i1 %19, label %121, label %20

20:                                               ; preds = %15
  %21 = icmp eq i32 %7, 32767
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = icmp ne i64 %0, 0
  %24 = icmp ne i64 %11, 281474976710656
  %25 = or i1 %23, %24
  br i1 %25, label %121, label %26

26:                                               ; preds = %22, %20
  br label %121

27:                                               ; preds = %13
  %28 = add nsw i32 %7, -16431
  %29 = zext i32 %28 to i64
  %30 = shl i64 %0, %29
  %31 = icmp eq i32 %28, 0
  br i1 %31, label %63, label %32

32:                                               ; preds = %27
  %33 = shl i64 %11, %29
  %34 = sub nsw i64 47, %5
  %35 = and i64 %34, 63
  %36 = lshr i64 %0, %35
  %37 = or i64 %33, %36
  br label %63

38:                                               ; preds = %3, %10
  %39 = phi i64 [ %11, %10 ], [ %4, %3 ]
  %40 = sub nuw nsw i32 16431, %7
  %41 = add nuw nsw i64 %5, 17
  %42 = and i64 %41, 63
  %43 = icmp eq i32 %40, 0
  br i1 %43, label %63, label %44

44:                                               ; preds = %38
  %45 = icmp ugt i32 %7, 16367
  br i1 %45, label %46, label %53

46:                                               ; preds = %44
  %47 = shl i64 %39, %42
  %48 = icmp ne i64 %0, 0
  %49 = zext i1 %48 to i64
  %50 = or i64 %47, %49
  %51 = zext i32 %40 to i64
  %52 = lshr i64 %39, %51
  br label %63

53:                                               ; preds = %44
  %54 = icmp eq i32 %40, 64
  br i1 %54, label %55, label %59

55:                                               ; preds = %53
  %56 = icmp ne i64 %0, 0
  %57 = zext i1 %56 to i64
  %58 = or i64 %39, %57
  br label %63

59:                                               ; preds = %53
  %60 = or i64 %39, %0
  %61 = icmp ne i64 %60, 0
  %62 = zext i1 %61 to i64
  br label %63

63:                                               ; preds = %59, %55, %46, %38, %32, %27
  %64 = phi i64 [ %37, %32 ], [ %11, %27 ], [ %52, %46 ], [ %39, %38 ], [ 0, %55 ], [ 0, %59 ]
  %65 = phi i64 [ %30, %32 ], [ %30, %27 ], [ %50, %46 ], [ %0, %38 ], [ %58, %55 ], [ %62, %59 ]
  %66 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 0
  %69 = lshr i64 %65, 63
  %70 = trunc i64 %69 to i8
  br i1 %68, label %85, label %71

71:                                               ; preds = %63
  %72 = icmp eq i8 %67, 3
  br i1 %72, label %98, label %73

73:                                               ; preds = %71
  %74 = icmp sgt i64 %1, -1
  br i1 %74, label %80, label %75

75:                                               ; preds = %73
  %76 = icmp eq i8 %67, 1
  %77 = icmp ne i64 %65, 0
  %78 = and i1 %77, %76
  %79 = zext i1 %78 to i8
  br label %85

80:                                               ; preds = %73
  %81 = icmp eq i8 %67, 2
  %82 = icmp ne i64 %65, 0
  %83 = and i1 %82, %81
  %84 = zext i1 %83 to i8
  br label %85

85:                                               ; preds = %80, %75, %63
  %86 = phi i8 [ %70, %63 ], [ %79, %75 ], [ %84, %80 ]
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %98, label %88

88:                                               ; preds = %85
  %89 = add i64 %64, 1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %109, label %91

91:                                               ; preds = %88
  %92 = and i64 %65, 9223372036854775807
  %93 = icmp eq i64 %92, 0
  %94 = and i1 %93, %68
  %95 = zext i1 %94 to i64
  %96 = xor i64 %95, -1
  %97 = and i64 %89, %96
  br label %98

98:                                               ; preds = %91, %85, %71
  %99 = phi i64 [ %97, %91 ], [ %64, %85 ], [ %64, %71 ]
  %100 = icmp sgt i64 %1, -1
  %101 = sub nsw i64 0, %99
  %102 = select i1 %100, i64 %99, i64 %101
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %115, label %104

104:                                              ; preds = %98
  %105 = lshr i64 %102, 63
  %106 = trunc i64 %105 to i32
  %107 = trunc i64 %8 to i32
  %108 = icmp eq i32 %106, %107
  br i1 %108, label %115, label %109

109:                                              ; preds = %104, %88
  %110 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %111, 1
  store i8 %112, i8* %110, align 1
  %113 = icmp sgt i64 %1, -1
  %114 = select i1 %113, i64 9223372036854775807, i64 -9223372036854775808
  br label %121

115:                                              ; preds = %104, %98
  %116 = icmp eq i64 %65, 0
  br i1 %116, label %121, label %117

117:                                              ; preds = %115
  %118 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %119 = load i8, i8* %118, align 1
  %120 = or i8 %119, 32
  store i8 %120, i8* %118, align 1
  br label %121

121:                                              ; preds = %117, %115, %109, %22, %15, %26
  %122 = phi i64 [ -9223372036854775808, %26 ], [ 9223372036854775807, %15 ], [ 9223372036854775807, %22 ], [ %114, %109 ], [ %102, %115 ], [ %102, %117 ]
  ret i64 %122
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float128_to_int64_round_to_zero(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = icmp eq i32 %7, 0
  %9 = or i64 %4, 281474976710656
  %10 = select i1 %8, i64 %4, i64 %9
  %11 = add nsw i32 %7, -16431
  %12 = icmp ugt i32 %7, 16431
  br i1 %12, label %13, label %49

13:                                               ; preds = %3
  %14 = icmp ugt i32 %7, 16445
  br i1 %14, label %15, label %36

15:                                               ; preds = %13
  %16 = icmp eq i64 %1, -4594234569871327232
  %17 = icmp ult i64 %0, 562949953421312
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = icmp eq i64 %0, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %23, 32
  store i8 %24, i8* %22, align 1
  br label %35

25:                                               ; preds = %15
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 1
  %29 = icmp sgt i64 %1, -1
  br i1 %29, label %81, label %30

30:                                               ; preds = %25
  %31 = icmp ne i32 %7, 32767
  %32 = or i64 %4, %0
  %33 = icmp eq i64 %32, 0
  %34 = or i1 %33, %31
  br i1 %34, label %35, label %81

35:                                               ; preds = %30, %19, %21
  br label %81

36:                                               ; preds = %13
  %37 = zext i32 %11 to i64
  %38 = shl i64 %10, %37
  %39 = sub nsw i64 47, %5
  %40 = and i64 %39, 63
  %41 = lshr i64 %0, %40
  %42 = or i64 %38, %41
  %43 = shl i64 %0, %37
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %76, label %45

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %47 = load i8, i8* %46, align 1
  %48 = or i8 %47, 32
  store i8 %48, i8* %46, align 1
  br label %76

49:                                               ; preds = %3
  %50 = icmp ult i32 %7, 16383
  br i1 %50, label %51, label %60

51:                                               ; preds = %49
  %52 = zext i32 %7 to i64
  %53 = or i64 %52, %0
  %54 = or i64 %53, %10
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %81, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 32
  store i8 %59, i8* %57, align 1
  br label %81

60:                                               ; preds = %49
  %61 = sub nuw nsw i32 16431, %7
  %62 = zext i32 %61 to i64
  %63 = lshr i64 %10, %62
  %64 = icmp eq i64 %0, 0
  br i1 %64, label %65, label %72

65:                                               ; preds = %60
  %66 = icmp eq i32 %11, 0
  br i1 %66, label %76, label %67

67:                                               ; preds = %65
  %68 = and i32 %11, 63
  %69 = zext i32 %68 to i64
  %70 = shl i64 %10, %69
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %76, label %72

72:                                               ; preds = %67, %60
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = or i8 %74, 32
  store i8 %75, i8* %73, align 1
  br label %76

76:                                               ; preds = %36, %67, %65, %72, %45
  %77 = phi i64 [ %42, %45 ], [ %42, %36 ], [ %63, %72 ], [ %63, %67 ], [ %63, %65 ]
  %78 = icmp sgt i64 %1, -1
  %79 = sub nsw i64 0, %77
  %80 = select i1 %78, i64 %77, i64 %79
  br label %81

81:                                               ; preds = %56, %51, %25, %30, %76, %35
  %82 = phi i64 [ -9223372036854775808, %35 ], [ %80, %76 ], [ 9223372036854775807, %30 ], [ 9223372036854775807, %25 ], [ 0, %51 ], [ 0, %56 ]
  ret i64 %82
}

; Function Attrs: nounwind uwtable
define i32 @float128_to_float32(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = icmp eq i32 %7, 32767
  br i1 %9, label %10, label %41

10:                                               ; preds = %3
  %11 = or i64 %4, %0
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %10
  %14 = and i64 %1, 9223231299366420480
  %15 = icmp ne i64 %14, 9223090561878065152
  %16 = and i64 %1, 140737488355327
  %17 = or i64 %16, %0
  %18 = icmp eq i64 %17, 0
  %19 = or i1 %15, %18
  br i1 %19, label %24, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %22 = load i8, i8* %21, align 1, !noalias !75
  %23 = or i8 %22, 1
  store i8 %23, i8* %21, align 1, !noalias !75
  br label %24

24:                                               ; preds = %13, %20
  %25 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %26 = load i8, i8* %25, align 1
  %27 = lshr i64 %1, 25
  %28 = and i64 %27, 8388607
  %29 = icmp ne i8 %26, 0
  %30 = icmp eq i64 %28, 0
  %31 = or i1 %30, %29
  %32 = shl nuw nsw i64 %8, 31
  %33 = or i64 %32, %28
  %34 = trunc i64 %33 to i32
  %35 = or i32 %34, 2139095040
  %36 = select i1 %31, i32 -4194304, i32 %35
  br label %59

37:                                               ; preds = %10
  %38 = shl nuw nsw i64 %8, 31
  %39 = trunc i64 %38 to i32
  %40 = or i32 %39, 2139095040
  br label %59

41:                                               ; preds = %3
  %42 = trunc i64 %8 to i8
  %43 = icmp ne i64 %0, 0
  %44 = zext i1 %43 to i64
  %45 = lshr i64 %4, 18
  %46 = and i64 %1, 262143
  %47 = or i64 %46, %44
  %48 = icmp ne i64 %47, 0
  %49 = zext i1 %48 to i64
  %50 = or i64 %45, %49
  %51 = trunc i64 %50 to i32
  %52 = or i32 %7, %51
  %53 = icmp eq i32 %52, 0
  %54 = or i32 %51, 1073741824
  %55 = add nsw i32 %7, -16257
  %56 = select i1 %53, i32 0, i32 %55
  %57 = select i1 %53, i32 0, i32 %54
  %58 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %42, i32 %56, i32 %57, %struct.float_status* %2)
  br label %59

59:                                               ; preds = %41, %37, %24
  %60 = phi i32 [ %36, %24 ], [ %40, %37 ], [ %58, %41 ]
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define i64 @float128_to_float64(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = icmp eq i32 %7, 32767
  br i1 %8, label %9, label %40

9:                                                ; preds = %3
  %10 = or i64 %4, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %37, label %12

12:                                               ; preds = %9
  %13 = and i64 %1, 9223231299366420480
  %14 = icmp ne i64 %13, 9223090561878065152
  %15 = and i64 %1, 140737488355327
  %16 = or i64 %15, %0
  %17 = icmp eq i64 %16, 0
  %18 = or i1 %14, %17
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %21 = load i8, i8* %20, align 1, !noalias !78
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1, !noalias !78
  br label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %25 = load i8, i8* %24, align 1
  %26 = lshr i64 %0, 60
  %27 = shl i64 %1, 4
  %28 = and i64 %27, 4503599627370480
  %29 = or i64 %28, %26
  %30 = icmp ne i8 %25, 0
  %31 = icmp eq i64 %29, 0
  %32 = or i1 %31, %30
  %33 = and i64 %1, -9223372036854775808
  %34 = or i64 %33, %29
  %35 = or i64 %34, 9218868437227405312
  %36 = select i1 %32, i64 -2251799813685248, i64 %35
  br label %58

37:                                               ; preds = %9
  %38 = and i64 %1, -9223372036854775808
  %39 = or i64 %38, 9218868437227405312
  br label %58

40:                                               ; preds = %3
  %41 = lshr i64 %1, 63
  %42 = trunc i64 %41 to i8
  %43 = shl nuw nsw i64 %4, 14
  %44 = lshr i64 %0, 50
  %45 = or i64 %43, %44
  %46 = and i64 %0, 1125899906842623
  %47 = icmp ne i64 %46, 0
  %48 = zext i1 %47 to i64
  %49 = or i64 %45, %48
  %50 = icmp ne i32 %7, 0
  %51 = icmp ne i64 %49, 0
  %52 = or i1 %50, %51
  %53 = or i64 %49, 4611686018427387904
  %54 = add nsw i32 %7, -15361
  %55 = select i1 %52, i64 %53, i64 0
  %56 = select i1 %52, i32 %54, i32 0
  %57 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %42, i32 %56, i64 %55, %struct.float_status* %2)
  br label %58

58:                                               ; preds = %40, %37, %23
  %59 = phi i64 [ %36, %23 ], [ %39, %37 ], [ %57, %40 ]
  ret i64 %59
}

; Function Attrs: nounwind uwtable
define { i64, i16 } @float128_to_floatx80(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i8
  switch i32 %7, label %87 [
    i32 32767, label %10
    i32 0, label %43
  ]

10:                                               ; preds = %3
  %11 = or i64 %4, %0
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %39, label %13

13:                                               ; preds = %10
  %14 = and i64 %1, 9223231299366420480
  %15 = icmp ne i64 %14, 9223090561878065152
  %16 = and i64 %1, 140737488355327
  %17 = or i64 %16, %0
  %18 = icmp eq i64 %17, 0
  %19 = or i1 %15, %18
  br i1 %19, label %24, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %22 = load i8, i8* %21, align 1, !noalias !81
  %23 = or i8 %22, 1
  store i8 %23, i8* %21, align 1, !noalias !81
  br label %24

24:                                               ; preds = %13, %20
  %25 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %100

28:                                               ; preds = %24
  %29 = lshr i64 %0, 49
  %30 = shl i64 %1, 15
  %31 = and i64 %30, 9223372036854743040
  %32 = or i64 %31, %29
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %100, label %34

34:                                               ; preds = %28
  %35 = or i64 %32, -9223372036854775808
  %36 = shl nuw nsw i64 %8, 15
  %37 = trunc i64 %36 to i16
  %38 = or i16 %37, 32767
  br label %100

39:                                               ; preds = %10
  %40 = shl nuw nsw i64 %8, 15
  %41 = trunc i64 %40 to i16
  %42 = or i16 %41, 32767
  br label %100

43:                                               ; preds = %3
  %44 = or i64 %4, %0
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %43
  %47 = shl nuw nsw i64 %8, 15
  %48 = trunc i64 %47 to i16
  br label %100

49:                                               ; preds = %43
  %50 = icmp eq i64 %4, 0
  br i1 %50, label %51, label %71

51:                                               ; preds = %49
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %52 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %52, 6148914691236517205
  %ctpop.sh = lshr i64 %52, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %53 = trunc i64 %ctpop.part to i8
  %54 = add nsw i8 %53, -15
  %55 = sext i8 %54 to i32
  %56 = icmp ult i8 %53, 15
  br i1 %56, label %57, label %64

57:                                               ; preds = %51
  %58 = sub nsw i32 0, %55
  %59 = zext i32 %58 to i64
  %60 = lshr i64 %0, %59
  %61 = and i32 %55, 63
  %62 = zext i32 %61 to i64
  %63 = shl i64 %0, %62
  br label %67

64:                                               ; preds = %51
  %65 = zext i32 %55 to i64
  %66 = shl i64 %0, %65
  br label %67

67:                                               ; preds = %64, %57
  %68 = phi i64 [ %60, %57 ], [ %66, %64 ]
  %69 = phi i64 [ %63, %57 ], [ 0, %64 ]
  %70 = sub nsw i32 -63, %55
  br label %89

71:                                               ; preds = %49
  %ctlz.sh31 = lshr i64 %4, 1
  %ctlz.step32 = or i64 %4, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %72 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %72, 6148914691236517205
  %ctpop.sh44 = lshr i64 %72, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %73 = trunc i64 %ctpop.part67 to i32
  %74 = add nsw i32 %73, -15
  %75 = zext i32 %74 to i64
  %76 = shl i64 %0, %75
  %77 = icmp eq i32 %74, 0
  br i1 %77, label %84, label %78

78:                                               ; preds = %71
  %79 = shl i64 %4, %75
  %80 = sub nsw i64 15, %ctpop.part67
  %81 = and i64 %80, 63
  %82 = lshr i64 %0, %81
  %83 = or i64 %79, %82
  br label %84

84:                                               ; preds = %78, %71
  %85 = phi i64 [ %83, %78 ], [ %4, %71 ]
  %86 = sub nsw i32 16, %73
  br label %89

87:                                               ; preds = %3
  %88 = or i64 %4, 281474976710656
  br label %89

89:                                               ; preds = %84, %67, %87
  %90 = phi i64 [ %0, %87 ], [ %69, %67 ], [ %76, %84 ]
  %91 = phi i64 [ %88, %87 ], [ %68, %67 ], [ %85, %84 ]
  %92 = phi i32 [ %7, %87 ], [ %70, %67 ], [ %86, %84 ]
  %93 = shl i64 %90, 15
  %94 = shl i64 %91, 15
  %95 = lshr i64 %90, 49
  %96 = or i64 %94, %95
  %97 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext 80, i8 zeroext %9, i32 %92, i64 %96, i64 %93, %struct.float_status* %2)
  %98 = extractvalue { i64, i16 } %97, 0
  %99 = extractvalue { i64, i16 } %97, 1
  br label %100

100:                                              ; preds = %34, %28, %24, %89, %46, %39
  %101 = phi i64 [ -9223372036854775808, %39 ], [ 0, %46 ], [ %98, %89 ], [ %35, %34 ], [ -4611686018427387904, %24 ], [ -4611686018427387904, %28 ]
  %102 = phi i16 [ %42, %39 ], [ %48, %46 ], [ %99, %89 ], [ %38, %34 ], [ -1, %24 ], [ -1, %28 ]
  %103 = insertvalue { i64, i16 } undef, i64 %101, 0
  %104 = insertvalue { i64, i16 } %103, i16 %102, 1
  ret { i64, i16 } %104
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_round_to_int(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = lshr i64 %1, 48
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 32767
  %7 = icmp ugt i32 %6, 16430
  br i1 %7, label %8, label %64

8:                                                ; preds = %3
  %9 = icmp ugt i32 %6, 16494
  br i1 %9, label %10, label %20

10:                                               ; preds = %8
  %11 = icmp eq i32 %6, 32767
  br i1 %11, label %12, label %133

12:                                               ; preds = %10
  %13 = and i64 %1, 281474976710655
  %14 = or i64 %13, %0
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %133, label %16

16:                                               ; preds = %12
  %17 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %0, i64 %1, %struct.float_status* %2)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  br label %133

20:                                               ; preds = %8
  %21 = sub nuw nsw i32 16494, %6
  %22 = zext i32 %21 to i64
  %23 = shl i64 2, %22
  %24 = add i64 %23, -1
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %26 = load i8, i8* %25, align 1
  switch i8 %26, label %48 [
    i8 0, label %27
    i8 3, label %59
  ]

27:                                               ; preds = %20
  %28 = icmp ugt i32 %6, 16431
  br i1 %28, label %29, label %40

29:                                               ; preds = %27
  %30 = lshr i64 %23, 1
  %31 = add i64 %30, %0
  %32 = icmp ult i64 %31, %0
  %33 = zext i1 %32 to i64
  %34 = add i64 %33, %1
  %35 = and i64 %31, %24
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %59

37:                                               ; preds = %29
  %38 = xor i64 %23, -1
  %39 = and i64 %31, %38
  br label %59

40:                                               ; preds = %27
  %41 = icmp slt i64 %0, 0
  br i1 %41, label %42, label %59

42:                                               ; preds = %40
  %43 = add i64 %1, 1
  %44 = and i64 %0, 9223372036854775807
  %45 = icmp eq i64 %44, 0
  %46 = and i64 %43, -2
  %47 = select i1 %45, i64 %46, i64 %43
  br label %59

48:                                               ; preds = %20
  %49 = lshr i64 %1, 63
  %50 = trunc i64 %49 to i8
  %51 = icmp eq i8 %26, 2
  %52 = zext i1 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = add i64 %24, %0
  %56 = icmp ult i64 %55, %0
  %57 = zext i1 %56 to i64
  %58 = add i64 %57, %1
  br label %59

59:                                               ; preds = %42, %20, %48, %54, %37, %29, %40
  %60 = phi i64 [ %1, %48 ], [ %58, %54 ], [ %1, %20 ], [ %34, %37 ], [ %34, %29 ], [ %1, %40 ], [ %47, %42 ]
  %61 = phi i64 [ %0, %48 ], [ %55, %54 ], [ %0, %20 ], [ %39, %37 ], [ %31, %29 ], [ %0, %40 ], [ %0, %42 ]
  %62 = sub i64 0, %23
  %63 = and i64 %61, %62
  br label %123

64:                                               ; preds = %3
  %65 = icmp ult i32 %6, 16383
  br i1 %65, label %66, label %92

66:                                               ; preds = %64
  %67 = shl i64 %1, 1
  %68 = or i64 %67, %0
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %133, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %72, 32
  store i8 %73, i8* %71, align 1
  %74 = and i64 %1, -9223372036854775808
  %75 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  switch i32 %77, label %133 [
    i32 0, label %78
    i32 1, label %86
    i32 2, label %89
  ]

78:                                               ; preds = %70
  %79 = icmp eq i32 %6, 16382
  br i1 %79, label %80, label %133

80:                                               ; preds = %78
  %81 = and i64 %1, 281474976710655
  %82 = or i64 %81, %0
  %83 = icmp eq i64 %82, 0
  %84 = or i64 %74, 4611404543450677248
  %85 = select i1 %83, i64 %74, i64 %84
  br label %133

86:                                               ; preds = %70
  %87 = icmp slt i64 %1, 0
  %88 = select i1 %87, i64 -4611967493404098560, i64 0
  br label %133

89:                                               ; preds = %70
  %90 = icmp sgt i64 %1, -1
  %91 = select i1 %90, i64 4611404543450677248, i64 -9223372036854775808
  br label %133

92:                                               ; preds = %64
  %93 = sub nuw nsw i32 16431, %6
  %94 = zext i32 %93 to i64
  %95 = shl nuw nsw i64 1, %94
  %96 = add nsw i64 %95, -1
  %97 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %98 = load i8, i8* %97, align 1
  switch i8 %98, label %108 [
    i8 0, label %99
    i8 3, label %119
  ]

99:                                               ; preds = %92
  %100 = lshr i64 %95, 1
  %101 = add i64 %100, %1
  %102 = and i64 %101, %96
  %103 = or i64 %102, %0
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %119

105:                                              ; preds = %99
  %106 = xor i64 %95, -1
  %107 = and i64 %101, %106
  br label %119

108:                                              ; preds = %92
  %109 = lshr i64 %1, 63
  %110 = trunc i64 %109 to i8
  %111 = icmp eq i8 %98, 2
  %112 = zext i1 %111 to i8
  %113 = icmp eq i8 %110, %112
  br i1 %113, label %119, label %114

114:                                              ; preds = %108
  %115 = icmp ne i64 %0, 0
  %116 = zext i1 %115 to i64
  %117 = or i64 %116, %1
  %118 = add i64 %96, %117
  br label %119

119:                                              ; preds = %92, %108, %114, %99, %105
  %120 = phi i64 [ %1, %108 ], [ %118, %114 ], [ %1, %92 ], [ %107, %105 ], [ %101, %99 ]
  %121 = sub nsw i64 0, %95
  %122 = and i64 %120, %121
  br label %123

123:                                              ; preds = %119, %59
  %124 = phi i64 [ %60, %59 ], [ %122, %119 ]
  %125 = phi i64 [ %63, %59 ], [ 0, %119 ]
  %126 = icmp eq i64 %125, %0
  %127 = icmp eq i64 %124, %1
  %128 = and i1 %127, %126
  br i1 %128, label %133, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %131 = load i8, i8* %130, align 1
  %132 = or i8 %131, 32
  store i8 %132, i8* %130, align 1
  br label %133

133:                                              ; preds = %80, %70, %78, %89, %86, %123, %129, %66, %10, %12, %16
  %134 = phi i64 [ %18, %16 ], [ %0, %12 ], [ %0, %10 ], [ %0, %66 ], [ %125, %129 ], [ 0, %86 ], [ 0, %89 ], [ %0, %123 ], [ 0, %78 ], [ 0, %70 ], [ 0, %80 ]
  %135 = phi i64 [ %19, %16 ], [ %1, %12 ], [ %1, %10 ], [ %1, %66 ], [ %124, %129 ], [ %88, %86 ], [ %91, %89 ], [ %1, %123 ], [ %74, %78 ], [ %74, %70 ], [ %85, %80 ]
  %136 = insertvalue { i64, i64 } undef, i64 %134, 0
  %137 = insertvalue { i64, i64 } %136, i64 %135, 1
  ret { i64, i64 } %137
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) unnamed_addr #2 {
  %6 = shl i64 %1, 1
  %7 = icmp ult i64 %6, -562949953421312
  %8 = and i64 %1, 281474976710655
  %9 = or i64 %8, %0
  %10 = icmp eq i64 %9, 0
  %11 = and i64 %1, 9223231299366420480
  %12 = icmp eq i64 %11, 9223090561878065152
  %13 = and i64 %1, 140737488355327
  %14 = or i64 %13, %0
  %15 = icmp ne i64 %14, 0
  %16 = and i1 %12, %15
  %17 = shl i64 %3, 1
  %18 = icmp ugt i64 %17, -562949953421313
  %19 = and i64 %3, 281474976710655
  %20 = or i64 %19, %2
  %21 = icmp ne i64 %20, 0
  %22 = and i1 %18, %21
  %23 = and i64 %3, 9223231299366420480
  %24 = icmp eq i64 %23, 9223090561878065152
  %25 = and i64 %3, 140737488355327
  %26 = or i64 %25, %2
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %24, %27
  %29 = zext i1 %28 to i8
  %30 = or i1 %16, %28
  br i1 %30, label %31, label %35

31:                                               ; preds = %5
  %32 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %33 = load i8, i8* %32, align 1
  %34 = or i8 %33, 1
  store i8 %34, i8* %32, align 1
  br label %35

35:                                               ; preds = %5, %31
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %35
  %40 = icmp ult i64 %6, %17
  %41 = icmp eq i64 %6, %17
  %42 = icmp ult i64 %0, %2
  %43 = and i1 %42, %41
  %44 = or i1 %40, %43
  br i1 %44, label %53, label %45

45:                                               ; preds = %39
  %46 = icmp ult i64 %17, %6
  %47 = icmp ult i64 %2, %0
  %48 = and i1 %47, %41
  %49 = or i1 %46, %48
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = icmp ult i64 %1, %3
  %52 = zext i1 %51 to i8
  br label %53

53:                                               ; preds = %45, %39, %50
  %54 = phi i8 [ %52, %50 ], [ 0, %39 ], [ 1, %45 ]
  br i1 %16, label %61, label %55

55:                                               ; preds = %53
  %56 = or i1 %7, %10
  br i1 %56, label %64, label %57

57:                                               ; preds = %55
  %58 = or i8 %54, %29
  %59 = icmp eq i8 %58, 0
  %60 = and i1 %22, %59
  br i1 %60, label %64, label %70

61:                                               ; preds = %53
  %62 = icmp eq i8 %54, 0
  %63 = select i1 %28, i1 %62, i1 %22
  br i1 %63, label %64, label %70

64:                                               ; preds = %57, %61, %55
  %65 = icmp ne i64 %23, 9223090561878065152
  %66 = icmp eq i64 %26, 0
  %67 = or i1 %65, %66
  %68 = or i64 %3, 140737488355328
  %69 = select i1 %67, i64 %3, i64 %68
  br label %76

70:                                               ; preds = %57, %61
  %71 = icmp ne i64 %11, 9223090561878065152
  %72 = icmp eq i64 %14, 0
  %73 = or i1 %71, %72
  %74 = or i64 %1, 140737488355328
  %75 = select i1 %73, i64 %1, i64 %74
  br label %76

76:                                               ; preds = %35, %70, %64
  %77 = phi i64 [ %2, %64 ], [ %0, %70 ], [ 0, %35 ]
  %78 = phi i64 [ %69, %64 ], [ %75, %70 ], [ -140737488355328, %35 ]
  %79 = insertvalue { i64, i64 } undef, i64 %77, 0
  %80 = insertvalue { i64, i64 } %79, i64 %78, 1
  ret { i64, i64 } %80
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_add(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = lshr i64 %1, 63
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i64 } @addFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i64 } @subFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i64 } [ %14, %13 ], [ %12, %11 ]
  ret { i64, i64 } %16
}

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i64 } @addFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 zeroext %4, %struct.float_status* nocapture %5) unnamed_addr #13 {
  %7 = and i64 %1, 281474976710655
  %8 = lshr i64 %1, 48
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 32767
  %11 = and i64 %3, 281474976710655
  %12 = lshr i64 %3, 48
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 32767
  %15 = sub nsw i32 %10, %14
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %71

17:                                               ; preds = %6
  %18 = icmp eq i32 %10, 32767
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = or i64 %7, %0
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %204, label %22

22:                                               ; preds = %19
  %23 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %5)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = extractvalue { i64, i64 } %23, 1
  br label %204

26:                                               ; preds = %17
  %27 = icmp eq i32 %14, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = or i64 %11, 281474976710656
  br label %33

30:                                               ; preds = %26
  %31 = add nsw i32 %15, -1
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %168, label %33

33:                                               ; preds = %28, %30
  %34 = phi i32 [ %15, %28 ], [ %31, %30 ]
  %35 = phi i64 [ %29, %28 ], [ %11, %30 ]
  %36 = trunc i32 %34 to i8
  %37 = sub i8 0, %36
  %38 = and i8 %37, 63
  %39 = icmp slt i32 %34, 64
  br i1 %39, label %40, label %48

40:                                               ; preds = %33
  %41 = zext i8 %38 to i64
  %42 = shl i64 %2, %41
  %43 = shl i64 %35, %41
  %44 = zext i32 %34 to i64
  %45 = lshr i64 %2, %44
  %46 = or i64 %43, %45
  %47 = lshr i64 %35, %44
  br label %63

48:                                               ; preds = %33
  %49 = icmp eq i32 %34, 64
  br i1 %49, label %63, label %50

50:                                               ; preds = %48
  %51 = icmp slt i32 %34, 128
  br i1 %51, label %52, label %58

52:                                               ; preds = %50
  %53 = zext i8 %38 to i64
  %54 = shl i64 %35, %53
  %55 = and i32 %34, 63
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  br label %63

58:                                               ; preds = %50
  %59 = icmp eq i32 %34, 128
  %60 = icmp ne i64 %35, 0
  %61 = zext i1 %60 to i64
  %62 = select i1 %59, i64 %35, i64 %61
  br label %63

63:                                               ; preds = %58, %52, %48, %40
  %64 = phi i64 [ %47, %40 ], [ 0, %48 ], [ 0, %52 ], [ 0, %58 ]
  %65 = phi i64 [ %46, %40 ], [ %35, %48 ], [ %57, %52 ], [ 0, %58 ]
  %66 = phi i64 [ %42, %40 ], [ %2, %48 ], [ %54, %52 ], [ %62, %58 ]
  %67 = phi i64 [ 0, %40 ], [ 0, %48 ], [ %2, %52 ], [ %2, %58 ]
  %68 = icmp ne i64 %67, 0
  %69 = zext i1 %68 to i64
  %70 = or i64 %66, %69
  br label %168

71:                                               ; preds = %6
  %72 = icmp slt i32 %15, 0
  br i1 %72, label %73, label %130

73:                                               ; preds = %71
  %74 = icmp eq i32 %14, 32767
  br i1 %74, label %75, label %86

75:                                               ; preds = %73
  %76 = or i64 %11, %2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %75
  %79 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %5)
  %80 = extractvalue { i64, i64 } %79, 0
  %81 = extractvalue { i64, i64 } %79, 1
  br label %204

82:                                               ; preds = %75
  %83 = zext i8 %4 to i64
  %84 = shl i64 %83, 63
  %85 = or i64 %84, 9223090561878065152
  br label %204

86:                                               ; preds = %73
  %87 = icmp eq i32 %10, 0
  %88 = or i64 %7, 281474976710656
  %89 = select i1 %87, i64 %7, i64 %88
  %90 = zext i1 %87 to i32
  %91 = add nsw i32 %15, %90
  %92 = sub nsw i32 0, %91
  %93 = trunc i32 %92 to i8
  %94 = sub i8 0, %93
  %95 = and i8 %94, 63
  %96 = icmp eq i32 %91, 0
  br i1 %96, label %168, label %97

97:                                               ; preds = %86
  %98 = icmp sgt i32 %91, -64
  br i1 %98, label %99, label %107

99:                                               ; preds = %97
  %100 = zext i8 %95 to i64
  %101 = shl i64 %0, %100
  %102 = shl i64 %89, %100
  %103 = zext i32 %92 to i64
  %104 = lshr i64 %0, %103
  %105 = or i64 %102, %104
  %106 = lshr i64 %89, %103
  br label %122

107:                                              ; preds = %97
  %108 = icmp eq i32 %92, 64
  br i1 %108, label %122, label %109

109:                                              ; preds = %107
  %110 = icmp sgt i32 %91, -128
  br i1 %110, label %111, label %117

111:                                              ; preds = %109
  %112 = zext i8 %95 to i64
  %113 = shl i64 %89, %112
  %114 = and i32 %92, 63
  %115 = zext i32 %114 to i64
  %116 = lshr i64 %89, %115
  br label %122

117:                                              ; preds = %109
  %118 = icmp eq i32 %92, 128
  %119 = icmp ne i64 %89, 0
  %120 = zext i1 %119 to i64
  %121 = select i1 %118, i64 %89, i64 %120
  br label %122

122:                                              ; preds = %117, %111, %107, %99
  %123 = phi i64 [ %106, %99 ], [ 0, %107 ], [ 0, %111 ], [ 0, %117 ]
  %124 = phi i64 [ %105, %99 ], [ %89, %107 ], [ %116, %111 ], [ 0, %117 ]
  %125 = phi i64 [ %101, %99 ], [ %0, %107 ], [ %113, %111 ], [ %121, %117 ]
  %126 = phi i64 [ 0, %99 ], [ 0, %107 ], [ %0, %111 ], [ %0, %117 ]
  %127 = icmp ne i64 %126, 0
  %128 = zext i1 %127 to i64
  %129 = or i64 %125, %128
  br label %168

130:                                              ; preds = %71
  %131 = icmp eq i32 %10, 32767
  br i1 %131, label %132, label %141

132:                                              ; preds = %130
  %133 = or i64 %7, %0
  %134 = or i64 %133, %2
  %135 = or i64 %134, %11
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %204, label %137

137:                                              ; preds = %132
  %138 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %5)
  %139 = extractvalue { i64, i64 } %138, 0
  %140 = extractvalue { i64, i64 } %138, 1
  br label %204

141:                                              ; preds = %130
  %142 = add i64 %2, %0
  %143 = add nuw nsw i64 %11, %7
  %144 = icmp ult i64 %142, %0
  %145 = zext i1 %144 to i64
  %146 = add nuw nsw i64 %143, %145
  %147 = icmp eq i32 %10, 0
  br i1 %147, label %148, label %166

148:                                              ; preds = %141
  %149 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 4
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %162, label %152

152:                                              ; preds = %148
  %153 = or i64 %146, %142
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %159, label %155

155:                                              ; preds = %152
  %156 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %157 = load i8, i8* %156, align 1
  %158 = or i8 %157, -128
  store i8 %158, i8* %156, align 1
  br label %159

159:                                              ; preds = %152, %155
  %160 = zext i8 %4 to i64
  %161 = shl i64 %160, 63
  br label %204

162:                                              ; preds = %148
  %163 = zext i8 %4 to i64
  %164 = shl i64 %163, 63
  %165 = or i64 %164, %146
  br label %204

166:                                              ; preds = %141
  %167 = or i64 %146, 562949953421312
  br label %183

168:                                              ; preds = %122, %86, %63, %30
  %169 = phi i64 [ %7, %30 ], [ %7, %63 ], [ %123, %122 ], [ %89, %86 ]
  %170 = phi i64 [ %0, %30 ], [ %0, %63 ], [ %124, %122 ], [ %0, %86 ]
  %171 = phi i64 [ %11, %30 ], [ %64, %63 ], [ %11, %122 ], [ %11, %86 ]
  %172 = phi i64 [ %2, %30 ], [ %65, %63 ], [ %2, %122 ], [ %2, %86 ]
  %173 = phi i64 [ 0, %30 ], [ %70, %63 ], [ %129, %122 ], [ 0, %86 ]
  %174 = phi i32 [ %10, %30 ], [ %10, %63 ], [ %14, %122 ], [ %14, %86 ]
  %175 = or i64 %169, 281474976710656
  %176 = add i64 %172, %170
  %177 = add i64 %171, %175
  %178 = icmp ult i64 %176, %170
  %179 = zext i1 %178 to i64
  %180 = add i64 %177, %179
  %181 = add nsw i32 %174, -1
  %182 = icmp ult i64 %180, 562949953421312
  br i1 %182, label %196, label %183

183:                                              ; preds = %168, %166
  %184 = phi i64 [ %180, %168 ], [ %167, %166 ]
  %185 = phi i64 [ %176, %168 ], [ %142, %166 ]
  %186 = phi i64 [ %173, %168 ], [ 0, %166 ]
  %187 = phi i32 [ %174, %168 ], [ %10, %166 ]
  %188 = shl i64 %185, 63
  %189 = shl i64 %184, 63
  %190 = lshr i64 %185, 1
  %191 = or i64 %190, %189
  %192 = lshr i64 %184, 1
  %193 = icmp ne i64 %186, 0
  %194 = zext i1 %193 to i64
  %195 = or i64 %188, %194
  br label %196

196:                                              ; preds = %168, %183
  %197 = phi i64 [ %180, %168 ], [ %192, %183 ]
  %198 = phi i64 [ %176, %168 ], [ %191, %183 ]
  %199 = phi i64 [ %173, %168 ], [ %195, %183 ]
  %200 = phi i32 [ %181, %168 ], [ %187, %183 ]
  %201 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %4, i32 %200, i64 %197, i64 %198, i64 %199, %struct.float_status* %5)
  %202 = extractvalue { i64, i64 } %201, 0
  %203 = extractvalue { i64, i64 } %201, 1
  br label %204

204:                                              ; preds = %132, %19, %196, %162, %159, %137, %82, %78, %22
  %205 = phi i64 [ %24, %22 ], [ %202, %196 ], [ %80, %78 ], [ 0, %82 ], [ %139, %137 ], [ 0, %159 ], [ %142, %162 ], [ %0, %19 ], [ %0, %132 ]
  %206 = phi i64 [ %25, %22 ], [ %203, %196 ], [ %81, %78 ], [ %85, %82 ], [ %140, %137 ], [ %161, %159 ], [ %165, %162 ], [ %1, %19 ], [ %1, %132 ]
  %207 = insertvalue { i64, i64 } undef, i64 %205, 0
  %208 = insertvalue { i64, i64 } %207, i64 %206, 1
  ret { i64, i64 } %208
}

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i64 } @subFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 zeroext %4, %struct.float_status* nocapture %5) unnamed_addr #13 {
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = lshr i64 %3, 48
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 32767
  %13 = sub nsw i32 %9, %12
  %14 = shl i64 %0, 14
  %15 = shl i64 %1, 14
  %16 = and i64 %15, 4611686018427371520
  %17 = lshr i64 %0, 50
  %18 = or i64 %16, %17
  %19 = shl i64 %2, 14
  %20 = shl i64 %3, 14
  %21 = and i64 %20, 4611686018427371520
  %22 = lshr i64 %2, 50
  %23 = or i64 %21, %22
  %24 = icmp sgt i32 %13, 0
  br i1 %24, label %132, label %25

25:                                               ; preds = %6
  %26 = icmp slt i32 %13, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %25
  switch i32 %9, label %42 [
    i32 32767, label %28
    i32 0, label %41
  ]

28:                                               ; preds = %27
  %29 = or i64 %18, %14
  %30 = or i64 %29, %19
  %31 = or i64 %30, %23
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %28
  %34 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %5)
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = extractvalue { i64, i64 } %34, 1
  br label %247

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 1
  store i8 %40, i8* %38, align 1
  br label %247

41:                                               ; preds = %27
  br label %42

42:                                               ; preds = %27, %41
  %43 = phi i32 [ 1, %41 ], [ %9, %27 ]
  %44 = phi i32 [ 1, %41 ], [ %12, %27 ]
  %45 = icmp ult i64 %23, %18
  br i1 %45, label %192, label %46

46:                                               ; preds = %42
  %47 = icmp ult i64 %18, %23
  br i1 %47, label %121, label %48

48:                                               ; preds = %46
  %49 = icmp ult i64 %19, %14
  br i1 %49, label %192, label %50

50:                                               ; preds = %48
  %51 = icmp ult i64 %14, %19
  br i1 %51, label %121, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 1
  %56 = select i1 %55, i64 -9223372036854775808, i64 0
  br label %247

57:                                               ; preds = %25
  %58 = icmp eq i32 %12, 32767
  br i1 %58, label %59, label %71

59:                                               ; preds = %57
  %60 = or i64 %23, %19
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %59
  %63 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %5)
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = extractvalue { i64, i64 } %63, 1
  br label %247

66:                                               ; preds = %59
  %67 = xor i8 %4, 1
  %68 = zext i8 %67 to i64
  %69 = shl i64 %68, 63
  %70 = or i64 %69, 9223090561878065152
  br label %247

71:                                               ; preds = %57
  %72 = icmp eq i32 %9, 0
  %73 = or i64 %18, 4611686018427387904
  %74 = select i1 %72, i64 %18, i64 %73
  %75 = zext i1 %72 to i32
  %76 = add nsw i32 %13, %75
  %77 = sub nsw i32 0, %76
  %78 = trunc i32 %77 to i8
  %79 = sub i8 0, %78
  %80 = and i8 %79, 63
  %81 = icmp eq i32 %76, 0
  br i1 %81, label %117, label %82

82:                                               ; preds = %71
  %83 = icmp sgt i32 %76, -64
  br i1 %83, label %84, label %95

84:                                               ; preds = %82
  %85 = zext i8 %80 to i64
  %86 = shl i64 %74, %85
  %87 = zext i32 %77 to i64
  %88 = lshr i64 %14, %87
  %89 = or i64 %86, %88
  %90 = shl i64 %14, %85
  %91 = icmp ne i64 %90, 0
  %92 = zext i1 %91 to i64
  %93 = or i64 %89, %92
  %94 = lshr i64 %74, %87
  br label %117

95:                                               ; preds = %82
  %96 = icmp eq i32 %77, 64
  br i1 %96, label %97, label %101

97:                                               ; preds = %95
  %98 = icmp ne i64 %14, 0
  %99 = zext i1 %98 to i64
  %100 = or i64 %74, %99
  br label %117

101:                                              ; preds = %95
  %102 = icmp sgt i32 %76, -128
  br i1 %102, label %103, label %113

103:                                              ; preds = %101
  %104 = and i32 %77, 63
  %105 = zext i32 %104 to i64
  %106 = lshr i64 %74, %105
  %107 = zext i8 %80 to i64
  %108 = shl i64 %74, %107
  %109 = or i64 %108, %14
  %110 = icmp ne i64 %109, 0
  %111 = zext i1 %110 to i64
  %112 = or i64 %106, %111
  br label %117

113:                                              ; preds = %101
  %114 = or i64 %74, %14
  %115 = icmp ne i64 %114, 0
  %116 = zext i1 %115 to i64
  br label %117

117:                                              ; preds = %71, %84, %97, %103, %113
  %118 = phi i64 [ %93, %84 ], [ %14, %71 ], [ %100, %97 ], [ %112, %103 ], [ %116, %113 ]
  %119 = phi i64 [ %94, %84 ], [ %74, %71 ], [ 0, %97 ], [ 0, %103 ], [ 0, %113 ]
  %120 = or i64 %23, 4611686018427387904
  br label %121

121:                                              ; preds = %50, %46, %117
  %122 = phi i64 [ %119, %117 ], [ %18, %46 ], [ %18, %50 ]
  %123 = phi i64 [ %118, %117 ], [ %14, %46 ], [ %14, %50 ]
  %124 = phi i64 [ %120, %117 ], [ %23, %46 ], [ %23, %50 ]
  %125 = phi i32 [ %12, %117 ], [ %44, %46 ], [ %44, %50 ]
  %126 = sub i64 %19, %123
  %127 = sub i64 %124, %122
  %128 = icmp ult i64 %19, %123
  %129 = sext i1 %128 to i64
  %130 = add i64 %127, %129
  %131 = xor i8 %4, 1
  br label %202

132:                                              ; preds = %6
  %133 = icmp eq i32 %9, 32767
  br i1 %133, label %134, label %141

134:                                              ; preds = %132
  %135 = or i64 %18, %14
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %247, label %137

137:                                              ; preds = %134
  %138 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %5)
  %139 = extractvalue { i64, i64 } %138, 0
  %140 = extractvalue { i64, i64 } %138, 1
  br label %247

141:                                              ; preds = %132
  %142 = icmp eq i32 %12, 0
  br i1 %142, label %145, label %143

143:                                              ; preds = %141
  %144 = or i64 %23, 4611686018427387904
  br label %148

145:                                              ; preds = %141
  %146 = add nsw i32 %13, -1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %188, label %148

148:                                              ; preds = %143, %145
  %149 = phi i32 [ %13, %143 ], [ %146, %145 ]
  %150 = phi i64 [ %144, %143 ], [ %23, %145 ]
  %151 = trunc i32 %149 to i8
  %152 = sub i8 0, %151
  %153 = and i8 %152, 63
  %154 = icmp slt i32 %149, 64
  br i1 %154, label %155, label %166

155:                                              ; preds = %148
  %156 = zext i8 %153 to i64
  %157 = shl i64 %150, %156
  %158 = zext i32 %149 to i64
  %159 = lshr i64 %19, %158
  %160 = or i64 %157, %159
  %161 = shl i64 %19, %156
  %162 = icmp ne i64 %161, 0
  %163 = zext i1 %162 to i64
  %164 = or i64 %160, %163
  %165 = lshr i64 %150, %158
  br label %188

166:                                              ; preds = %148
  %167 = icmp eq i32 %149, 64
  br i1 %167, label %168, label %172

168:                                              ; preds = %166
  %169 = icmp ne i64 %19, 0
  %170 = zext i1 %169 to i64
  %171 = or i64 %150, %170
  br label %188

172:                                              ; preds = %166
  %173 = icmp slt i32 %149, 128
  br i1 %173, label %174, label %184

174:                                              ; preds = %172
  %175 = and i32 %149, 63
  %176 = zext i32 %175 to i64
  %177 = lshr i64 %150, %176
  %178 = zext i8 %153 to i64
  %179 = shl i64 %150, %178
  %180 = or i64 %179, %19
  %181 = icmp ne i64 %180, 0
  %182 = zext i1 %181 to i64
  %183 = or i64 %177, %182
  br label %188

184:                                              ; preds = %172
  %185 = or i64 %150, %19
  %186 = icmp ne i64 %185, 0
  %187 = zext i1 %186 to i64
  br label %188

188:                                              ; preds = %145, %155, %168, %174, %184
  %189 = phi i64 [ %164, %155 ], [ %19, %145 ], [ %171, %168 ], [ %183, %174 ], [ %187, %184 ]
  %190 = phi i64 [ %165, %155 ], [ %23, %145 ], [ 0, %168 ], [ 0, %174 ], [ 0, %184 ]
  %191 = or i64 %18, 4611686018427387904
  br label %192

192:                                              ; preds = %48, %42, %188
  %193 = phi i64 [ %191, %188 ], [ %18, %42 ], [ %18, %48 ]
  %194 = phi i64 [ %190, %188 ], [ %23, %42 ], [ %23, %48 ]
  %195 = phi i64 [ %189, %188 ], [ %19, %42 ], [ %19, %48 ]
  %196 = phi i32 [ %9, %188 ], [ %43, %42 ], [ %43, %48 ]
  %197 = sub i64 %14, %195
  %198 = sub i64 %193, %194
  %199 = icmp ult i64 %14, %195
  %200 = sext i1 %199 to i64
  %201 = add i64 %198, %200
  br label %202

202:                                              ; preds = %192, %121
  %203 = phi i64 [ %201, %192 ], [ %130, %121 ]
  %204 = phi i64 [ %197, %192 ], [ %126, %121 ]
  %205 = phi i8 [ %4, %192 ], [ %131, %121 ]
  %206 = phi i32 [ %196, %192 ], [ %125, %121 ]
  %207 = icmp eq i64 %203, 0
  %208 = select i1 %207, i64 %204, i64 %203
  %209 = select i1 %207, i64 0, i64 %204
  %210 = select i1 %207, i32 -79, i32 -15
  %211 = add nsw i32 %206, %210
  %ctlz.sh = lshr i64 %208, 1
  %ctlz.step = or i64 %208, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %212 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %212, 6148914691236517205
  %ctpop.sh = lshr i64 %212, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %213 = trunc i64 %ctpop.part to i8
  %214 = add nsw i8 %213, -15
  %215 = sext i8 %214 to i32
  %216 = sub nsw i32 0, %215
  %217 = icmp ugt i8 %213, 14
  br i1 %217, label %218, label %228

218:                                              ; preds = %202
  %219 = zext i32 %215 to i64
  %220 = shl i64 %209, %219
  %221 = icmp eq i8 %214, 0
  br i1 %221, label %239, label %222

222:                                              ; preds = %218
  %223 = shl i64 %208, %219
  %224 = and i32 %216, 63
  %225 = zext i32 %224 to i64
  %226 = lshr i64 %209, %225
  %227 = or i64 %226, %223
  br label %239

228:                                              ; preds = %202
  %229 = and i32 %215, 63
  %230 = zext i32 %229 to i64
  %231 = icmp eq i8 %214, 0
  br i1 %231, label %239, label %232

232:                                              ; preds = %228
  %233 = shl i64 %209, %230
  %234 = shl i64 %208, %230
  %235 = zext i32 %216 to i64
  %236 = lshr i64 %209, %235
  %237 = or i64 %234, %236
  %238 = lshr i64 %208, %235
  br label %239

239:                                              ; preds = %218, %222, %228, %232
  %240 = phi i64 [ %227, %222 ], [ %208, %218 ], [ %238, %232 ], [ %208, %228 ]
  %241 = phi i64 [ %220, %222 ], [ %220, %218 ], [ %237, %232 ], [ %209, %228 ]
  %242 = phi i64 [ 0, %222 ], [ 0, %218 ], [ %233, %232 ], [ 0, %228 ]
  %243 = sub nsw i32 %211, %215
  %244 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %205, i32 %243, i64 %240, i64 %241, i64 %242, %struct.float_status* %5) #23
  %245 = extractvalue { i64, i64 } %244, 0
  %246 = extractvalue { i64, i64 } %244, 1
  br label %247

247:                                              ; preds = %134, %239, %137, %66, %62, %52, %37, %33
  %248 = phi i64 [ %139, %137 ], [ %245, %239 ], [ %64, %62 ], [ 0, %66 ], [ %35, %33 ], [ 0, %37 ], [ 0, %52 ], [ %0, %134 ]
  %249 = phi i64 [ %140, %137 ], [ %246, %239 ], [ %65, %62 ], [ %70, %66 ], [ %36, %33 ], [ -140737488355328, %37 ], [ %56, %52 ], [ %1, %134 ]
  %250 = insertvalue { i64, i64 } undef, i64 %248, 0
  %251 = insertvalue { i64, i64 } %250, i64 %249, 1
  ret { i64, i64 } %251
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %0, i32 %1, i64 %2, i64 %3, i64 %4, %struct.float_status* nocapture %5) unnamed_addr #2 {
  %7 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  %10 = lshr i64 %4, 63
  %11 = trunc i64 %10 to i8
  br i1 %9, label %26, label %12

12:                                               ; preds = %6
  %13 = icmp eq i8 %8, 3
  br i1 %13, label %26, label %14

14:                                               ; preds = %12
  %15 = icmp eq i8 %0, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = icmp eq i8 %8, 1
  %18 = icmp ne i64 %4, 0
  %19 = and i1 %18, %17
  %20 = zext i1 %19 to i8
  br label %26

21:                                               ; preds = %14
  %22 = icmp eq i8 %8, 2
  %23 = icmp ne i64 %4, 0
  %24 = and i1 %23, %22
  %25 = zext i1 %24 to i8
  br label %26

26:                                               ; preds = %12, %21, %16, %6
  %27 = phi i8 [ %11, %6 ], [ %20, %16 ], [ %25, %21 ], [ 0, %12 ]
  %28 = icmp ugt i32 %1, 32764
  br i1 %28, label %29, label %155

29:                                               ; preds = %26
  %30 = icmp sgt i32 %1, 32765
  br i1 %30, label %39, label %31

31:                                               ; preds = %29
  %32 = icmp eq i32 %1, 32765
  br i1 %32, label %33, label %65

33:                                               ; preds = %31
  %34 = icmp ne i64 %2, 562949953421311
  %35 = icmp ne i64 %3, -1
  %36 = or i1 %34, %35
  %37 = icmp eq i8 %27, 0
  %38 = or i1 %36, %37
  br i1 %38, label %155, label %39

39:                                               ; preds = %33, %29
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 40
  store i8 %42, i8* %40, align 1
  %43 = icmp eq i8 %8, 3
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = icmp ne i8 %0, 0
  %46 = icmp eq i8 %8, 2
  %47 = and i1 %45, %46
  br i1 %47, label %57, label %48

48:                                               ; preds = %44
  %49 = icmp eq i8 %0, 0
  br i1 %49, label %55, label %50

50:                                               ; preds = %48
  %51 = zext i8 %0 to i64
  %52 = shl i64 %51, 63
  %53 = or i64 %52, 9223090561878065152
  %54 = insertvalue { i64, i64 } { i64 0, i64 undef }, i64 %53, 1
  br label %61

55:                                               ; preds = %48
  %56 = icmp eq i8 %8, 1
  br i1 %56, label %57, label %61

57:                                               ; preds = %44, %55, %39
  %58 = zext i8 %0 to i64
  %59 = shl i64 %58, 63
  %60 = or i64 %59, 9223090561878065151
  br label %193

61:                                               ; preds = %55, %50
  %62 = phi { i64, i64 } [ %54, %50 ], [ { i64 0, i64 9223090561878065152 }, %55 ]
  %63 = extractvalue { i64, i64 } %62, 0
  %64 = extractvalue { i64, i64 } %62, 1
  br label %193

65:                                               ; preds = %31
  %66 = icmp slt i32 %1, 0
  br i1 %66, label %67, label %155

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 4
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %77, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %73, -128
  store i8 %74, i8* %72, align 1
  %75 = zext i8 %0 to i64
  %76 = shl i64 %75, 63
  br label %193

77:                                               ; preds = %67
  %78 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = icmp ne i8 %79, 1
  %81 = icmp sgt i32 %1, -2
  %82 = and i1 %81, %80
  %83 = icmp ne i8 %27, 0
  %84 = and i1 %83, %82
  br i1 %84, label %85, label %93

85:                                               ; preds = %77
  %86 = icmp ult i64 %2, 562949953421311
  %87 = icmp eq i64 %2, 562949953421311
  %88 = icmp ne i64 %3, -1
  %89 = and i1 %87, %88
  %90 = or i1 %86, %89
  %91 = trunc i32 %1 to i8
  %92 = and i8 %91, 63
  br label %99

93:                                               ; preds = %77
  %94 = sub nsw i32 0, %1
  %95 = trunc i32 %94 to i8
  %96 = sub i8 0, %95
  %97 = and i8 %96, 63
  %98 = icmp sgt i32 %1, -64
  br i1 %98, label %99, label %110

99:                                               ; preds = %85, %93
  %100 = phi i8 [ %92, %85 ], [ %97, %93 ]
  %101 = phi i32 [ 1, %85 ], [ %94, %93 ]
  %102 = phi i1 [ %90, %85 ], [ true, %93 ]
  %103 = zext i8 %100 to i64
  %104 = shl i64 %3, %103
  %105 = shl i64 %2, %103
  %106 = zext i32 %101 to i64
  %107 = lshr i64 %3, %106
  %108 = or i64 %105, %107
  %109 = lshr i64 %2, %106
  br label %126

110:                                              ; preds = %93
  %111 = icmp eq i32 %94, 64
  br i1 %111, label %126, label %112

112:                                              ; preds = %110
  %113 = or i64 %4, %3
  %114 = icmp sgt i32 %1, -128
  br i1 %114, label %115, label %121

115:                                              ; preds = %112
  %116 = zext i8 %97 to i64
  %117 = shl i64 %2, %116
  %118 = and i32 %94, 63
  %119 = zext i32 %118 to i64
  %120 = lshr i64 %2, %119
  br label %126

121:                                              ; preds = %112
  %122 = icmp eq i32 %94, 128
  %123 = icmp ne i64 %2, 0
  %124 = zext i1 %123 to i64
  %125 = select i1 %122, i64 %2, i64 %124
  br label %126

126:                                              ; preds = %99, %110, %115, %121
  %127 = phi i1 [ %102, %99 ], [ true, %110 ], [ true, %115 ], [ true, %121 ]
  %128 = phi i64 [ %109, %99 ], [ 0, %110 ], [ 0, %115 ], [ 0, %121 ]
  %129 = phi i64 [ %108, %99 ], [ %2, %110 ], [ %120, %115 ], [ 0, %121 ]
  %130 = phi i64 [ %104, %99 ], [ %3, %110 ], [ %117, %115 ], [ %125, %121 ]
  %131 = phi i64 [ %4, %99 ], [ %4, %110 ], [ %113, %115 ], [ %113, %121 ]
  %132 = icmp ne i64 %131, 0
  %133 = zext i1 %132 to i64
  %134 = or i64 %130, %133
  %135 = icmp ne i64 %134, 0
  %136 = and i1 %127, %135
  br i1 %136, label %137, label %141

137:                                              ; preds = %126
  %138 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %139 = load i8, i8* %138, align 1
  %140 = or i8 %139, 16
  store i8 %140, i8* %138, align 1
  br label %141

141:                                              ; preds = %137, %126
  br i1 %9, label %142, label %145

142:                                              ; preds = %141
  %143 = lshr i64 %130, 63
  %144 = trunc i64 %143 to i8
  br label %155

145:                                              ; preds = %141
  %146 = icmp eq i8 %0, 0
  br i1 %146, label %151, label %147

147:                                              ; preds = %145
  %148 = icmp eq i8 %8, 1
  %149 = and i1 %148, %135
  %150 = zext i1 %149 to i8
  br label %155

151:                                              ; preds = %145
  %152 = icmp eq i8 %8, 2
  %153 = and i1 %152, %135
  %154 = zext i1 %153 to i8
  br label %155

155:                                              ; preds = %33, %65, %147, %151, %142, %26
  %156 = phi i64 [ %128, %142 ], [ %128, %151 ], [ %128, %147 ], [ %2, %65 ], [ %2, %26 ], [ %2, %33 ]
  %157 = phi i64 [ %129, %142 ], [ %129, %151 ], [ %129, %147 ], [ %3, %65 ], [ %3, %26 ], [ %3, %33 ]
  %158 = phi i64 [ %134, %142 ], [ %134, %151 ], [ %134, %147 ], [ %4, %65 ], [ %4, %26 ], [ %4, %33 ]
  %159 = phi i32 [ 0, %142 ], [ 0, %151 ], [ 0, %147 ], [ %1, %65 ], [ %1, %26 ], [ 32765, %33 ]
  %160 = phi i8 [ %144, %142 ], [ %154, %151 ], [ %150, %147 ], [ %27, %65 ], [ %27, %26 ], [ %27, %33 ]
  %161 = icmp eq i64 %158, 0
  br i1 %161, label %166, label %162

162:                                              ; preds = %155
  %163 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %164 = load i8, i8* %163, align 1
  %165 = or i8 %164, 32
  store i8 %165, i8* %163, align 1
  br label %166

166:                                              ; preds = %155, %162
  %167 = icmp eq i8 %160, 0
  br i1 %167, label %179, label %168

168:                                              ; preds = %166
  %169 = add i64 %157, 1
  %170 = icmp eq i64 %157, -1
  %171 = zext i1 %170 to i64
  %172 = add i64 %156, %171
  %173 = and i64 %158, 9223372036854775807
  %174 = icmp eq i64 %173, 0
  %175 = and i1 %9, %174
  %176 = zext i1 %175 to i64
  %177 = xor i64 %176, -1
  %178 = and i64 %169, %177
  br label %183

179:                                              ; preds = %166
  %180 = or i64 %157, %156
  %181 = icmp eq i64 %180, 0
  %182 = select i1 %181, i32 0, i32 %159
  br label %183

183:                                              ; preds = %179, %168
  %184 = phi i64 [ %156, %179 ], [ %172, %168 ]
  %185 = phi i64 [ %157, %179 ], [ %178, %168 ]
  %186 = phi i32 [ %182, %179 ], [ %159, %168 ]
  %187 = zext i8 %0 to i64
  %188 = shl i64 %187, 63
  %189 = zext i32 %186 to i64
  %190 = shl nuw nsw i64 %189, 48
  %191 = add i64 %184, %188
  %192 = add i64 %191, %190
  br label %193

193:                                              ; preds = %183, %71, %61, %57
  %194 = phi i64 [ -1, %57 ], [ %63, %61 ], [ 0, %71 ], [ %185, %183 ]
  %195 = phi i64 [ %60, %57 ], [ %64, %61 ], [ %76, %71 ], [ %192, %183 ]
  %196 = insertvalue { i64, i64 } undef, i64 %194, 0
  %197 = insertvalue { i64, i64 } %196, i64 %195, 1
  ret { i64, i64 } %197
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_sub(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = lshr i64 %1, 63
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i64 } @subFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i64 } @addFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 zeroext %7, %struct.float_status* %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i64 } [ %14, %13 ], [ %12, %11 ]
  ret { i64, i64 } %16
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_mul(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = and i64 %1, 281474976710655
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = and i64 %3, 281474976710655
  %11 = lshr i64 %3, 48
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 32767
  %14 = xor i64 %3, %1
  %15 = lshr i64 %14, 63
  %16 = trunc i64 %15 to i8
  %17 = icmp eq i32 %9, 32767
  br i1 %17, label %18, label %37

18:                                               ; preds = %5
  %19 = or i64 %6, %0
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = icmp ne i32 %13, 32767
  %23 = or i64 %10, %2
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %24, %22
  br i1 %25, label %30, label %26

26:                                               ; preds = %21, %18
  %27 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = extractvalue { i64, i64 } %27, 1
  br label %275

30:                                               ; preds = %21
  %31 = zext i32 %13 to i64
  %32 = or i64 %23, %31
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %51, label %34

34:                                               ; preds = %30
  %35 = and i64 %14, -9223372036854775808
  %36 = or i64 %35, 9223090561878065152
  br label %275

37:                                               ; preds = %5
  %38 = icmp eq i32 %13, 32767
  br i1 %38, label %39, label %58

39:                                               ; preds = %37
  %40 = or i64 %10, %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %44 = extractvalue { i64, i64 } %43, 0
  %45 = extractvalue { i64, i64 } %43, 1
  br label %275

46:                                               ; preds = %39
  %47 = zext i32 %9 to i64
  %48 = or i64 %6, %0
  %49 = or i64 %48, %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %46, %30
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 1
  store i8 %54, i8* %52, align 1
  br label %275

55:                                               ; preds = %46
  %56 = and i64 %14, -9223372036854775808
  %57 = or i64 %56, 9223090561878065152
  br label %275

58:                                               ; preds = %37
  %59 = icmp eq i32 %9, 0
  br i1 %59, label %60, label %103

60:                                               ; preds = %58
  %61 = or i64 %6, %0
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = and i64 %14, -9223372036854775808
  br label %275

65:                                               ; preds = %60
  %66 = icmp eq i64 %6, 0
  br i1 %66, label %67, label %87

67:                                               ; preds = %65
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %68 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %68, 6148914691236517205
  %ctpop.sh = lshr i64 %68, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %69 = trunc i64 %ctpop.part to i8
  %70 = add nsw i8 %69, -15
  %71 = sext i8 %70 to i32
  %72 = icmp ult i8 %69, 15
  br i1 %72, label %73, label %80

73:                                               ; preds = %67
  %74 = sub nsw i32 0, %71
  %75 = zext i32 %74 to i64
  %76 = lshr i64 %0, %75
  %77 = and i32 %71, 63
  %78 = zext i32 %77 to i64
  %79 = shl i64 %0, %78
  br label %83

80:                                               ; preds = %67
  %81 = zext i32 %71 to i64
  %82 = shl i64 %0, %81
  br label %83

83:                                               ; preds = %80, %73
  %84 = phi i64 [ %76, %73 ], [ %82, %80 ]
  %85 = phi i64 [ %79, %73 ], [ 0, %80 ]
  %86 = sub nsw i32 -63, %71
  br label %103

87:                                               ; preds = %65
  %ctlz.sh31 = lshr i64 %6, 1
  %ctlz.step32 = or i64 %6, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %88 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %88, 6148914691236517205
  %ctpop.sh44 = lshr i64 %88, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %89 = trunc i64 %ctpop.part67 to i32
  %90 = add nsw i32 %89, -15
  %91 = zext i32 %90 to i64
  %92 = shl i64 %0, %91
  %93 = icmp eq i32 %90, 0
  br i1 %93, label %100, label %94

94:                                               ; preds = %87
  %95 = shl i64 %6, %91
  %96 = sub nsw i64 15, %ctpop.part67
  %97 = and i64 %96, 63
  %98 = lshr i64 %0, %97
  %99 = or i64 %95, %98
  br label %100

100:                                              ; preds = %94, %87
  %101 = phi i64 [ %99, %94 ], [ %6, %87 ]
  %102 = sub nsw i32 16, %89
  br label %103

103:                                              ; preds = %100, %83, %58
  %104 = phi i64 [ %6, %58 ], [ %84, %83 ], [ %101, %100 ]
  %105 = phi i64 [ %0, %58 ], [ %85, %83 ], [ %92, %100 ]
  %106 = phi i32 [ %9, %58 ], [ %86, %83 ], [ %102, %100 ]
  %107 = icmp eq i32 %13, 0
  br i1 %107, label %108, label %151

108:                                              ; preds = %103
  %109 = or i64 %10, %2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %108
  %112 = and i64 %14, -9223372036854775808
  br label %275

113:                                              ; preds = %108
  %114 = icmp eq i64 %10, 0
  br i1 %114, label %115, label %135

115:                                              ; preds = %113
  %ctlz.sh68 = lshr i64 %2, 1
  %ctlz.step69 = or i64 %2, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %116 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %116, 6148914691236517205
  %ctpop.sh81 = lshr i64 %116, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %117 = trunc i64 %ctpop.part104 to i8
  %118 = add nsw i8 %117, -15
  %119 = sext i8 %118 to i32
  %120 = icmp ult i8 %117, 15
  br i1 %120, label %121, label %128

121:                                              ; preds = %115
  %122 = sub nsw i32 0, %119
  %123 = zext i32 %122 to i64
  %124 = lshr i64 %2, %123
  %125 = and i32 %119, 63
  %126 = zext i32 %125 to i64
  %127 = shl i64 %2, %126
  br label %131

128:                                              ; preds = %115
  %129 = zext i32 %119 to i64
  %130 = shl i64 %2, %129
  br label %131

131:                                              ; preds = %128, %121
  %132 = phi i64 [ %124, %121 ], [ %130, %128 ]
  %133 = phi i64 [ %127, %121 ], [ 0, %128 ]
  %134 = sub nsw i32 -63, %119
  br label %151

135:                                              ; preds = %113
  %ctlz.sh105 = lshr i64 %10, 1
  %ctlz.step106 = or i64 %10, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %136 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %136, 6148914691236517205
  %ctpop.sh118 = lshr i64 %136, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %137 = trunc i64 %ctpop.part141 to i32
  %138 = add nsw i32 %137, -15
  %139 = zext i32 %138 to i64
  %140 = shl i64 %2, %139
  %141 = icmp eq i32 %138, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %135
  %143 = shl i64 %10, %139
  %144 = sub nsw i64 15, %ctpop.part141
  %145 = and i64 %144, 63
  %146 = lshr i64 %2, %145
  %147 = or i64 %143, %146
  br label %148

148:                                              ; preds = %142, %135
  %149 = phi i64 [ %147, %142 ], [ %10, %135 ]
  %150 = sub nsw i32 16, %137
  br label %151

151:                                              ; preds = %148, %131, %103
  %152 = phi i32 [ %13, %103 ], [ %150, %148 ], [ %134, %131 ]
  %153 = phi i64 [ %10, %103 ], [ %149, %148 ], [ %132, %131 ]
  %154 = phi i64 [ %2, %103 ], [ %140, %148 ], [ %133, %131 ]
  %155 = add nsw i32 %152, %106
  %156 = add nsw i32 %155, -16384
  %157 = or i64 %104, 281474976710656
  %158 = shl i64 %154, 16
  %159 = shl i64 %153, 16
  %160 = lshr i64 %154, 48
  %161 = lshr i64 %105, 32
  %162 = lshr i64 %154, 16
  %163 = and i64 %162, 4294967295
  %164 = and i64 %105, 4294967295
  %165 = and i64 %158, 4294901760
  %166 = mul nuw i64 %165, %164
  %167 = mul nuw i64 %163, %164
  %168 = mul nuw i64 %165, %161
  %169 = mul nuw i64 %163, %161
  %170 = add i64 %167, %168
  %171 = icmp ult i64 %170, %168
  %172 = select i1 %171, i64 4294967296, i64 0
  %173 = lshr i64 %170, 32
  %174 = or i64 %172, %173
  %175 = shl i64 %170, 32
  %176 = add i64 %175, %166
  %177 = icmp ult i64 %176, %175
  %178 = zext i1 %177 to i64
  %179 = lshr i64 %153, 16
  %180 = and i64 %179, 4294967295
  %181 = and i64 %159, 4294901760
  %182 = or i64 %160, %181
  %183 = mul nuw i64 %182, %164
  %184 = mul nuw i64 %180, %164
  %185 = mul nuw i64 %182, %161
  %186 = mul nuw i64 %180, %161
  %187 = add i64 %185, %184
  %188 = icmp ult i64 %187, %185
  %189 = select i1 %188, i64 4294967296, i64 0
  %190 = lshr i64 %187, 32
  %191 = or i64 %189, %190
  %192 = shl i64 %187, 32
  %193 = add i64 %192, %183
  %194 = icmp ult i64 %193, %192
  %195 = zext i1 %194 to i64
  %196 = add i64 %193, %169
  %197 = add i64 %196, %174
  %198 = add i64 %197, %178
  %199 = icmp ult i64 %198, %193
  %200 = zext i1 %199 to i64
  %201 = lshr i64 %157, 32
  %202 = and i64 %104, 4294967295
  %203 = mul nuw i64 %182, %202
  %204 = mul nuw i64 %180, %202
  %205 = mul nuw i64 %182, %201
  %206 = mul nuw i64 %180, %201
  %207 = add i64 %205, %204
  %208 = icmp ult i64 %207, %205
  %209 = select i1 %208, i64 4294967296, i64 0
  %210 = lshr i64 %207, 32
  %211 = or i64 %209, %210
  %212 = shl i64 %207, 32
  %213 = add i64 %212, %203
  %214 = icmp ult i64 %213, %212
  %215 = zext i1 %214 to i64
  %216 = add i64 %213, %186
  %217 = add i64 %216, %191
  %218 = add i64 %217, %195
  %219 = add i64 %218, %200
  %220 = icmp ult i64 %219, %213
  %221 = zext i1 %220 to i64
  %222 = mul nuw i64 %165, %202
  %223 = mul nuw i64 %163, %202
  %224 = mul nuw i64 %165, %201
  %225 = mul nuw i64 %163, %201
  %226 = add i64 %223, %224
  %227 = icmp ult i64 %226, %224
  %228 = select i1 %227, i64 4294967296, i64 0
  %229 = lshr i64 %226, 32
  %230 = or i64 %228, %229
  %231 = add i64 %230, %225
  %232 = shl i64 %226, 32
  %233 = add i64 %232, %222
  %234 = icmp ult i64 %233, %232
  %235 = zext i1 %234 to i64
  %236 = add i64 %231, %235
  %237 = add i64 %198, %233
  %238 = icmp ult i64 %237, %233
  %239 = zext i1 %238 to i64
  %240 = add i64 %236, %239
  %241 = add i64 %240, %219
  %242 = icmp ult i64 %241, %219
  %243 = zext i1 %242 to i64
  %244 = add i64 %241, %105
  %245 = icmp ult i64 %244, %241
  %246 = zext i1 %245 to i64
  %247 = add i64 %206, %157
  %248 = add i64 %247, %211
  %249 = add i64 %248, %215
  %250 = add i64 %249, %221
  %251 = add i64 %250, %243
  %252 = add i64 %251, %246
  %253 = icmp ne i64 %176, 0
  %254 = zext i1 %253 to i64
  %255 = or i64 %237, %254
  %256 = icmp ugt i64 %252, 562949953421311
  br i1 %256, label %257, label %267

257:                                              ; preds = %151
  %258 = shl i64 %244, 63
  %259 = shl i64 %252, 63
  %260 = lshr i64 %244, 1
  %261 = or i64 %259, %260
  %262 = lshr i64 %252, 1
  %263 = icmp ne i64 %255, 0
  %264 = zext i1 %263 to i64
  %265 = or i64 %258, %264
  %266 = add nsw i32 %155, -16383
  br label %267

267:                                              ; preds = %257, %151
  %268 = phi i64 [ %262, %257 ], [ %252, %151 ]
  %269 = phi i64 [ %261, %257 ], [ %244, %151 ]
  %270 = phi i64 [ %265, %257 ], [ %255, %151 ]
  %271 = phi i32 [ %266, %257 ], [ %156, %151 ]
  %272 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %16, i32 %271, i64 %268, i64 %269, i64 %270, %struct.float_status* %4)
  %273 = extractvalue { i64, i64 } %272, 0
  %274 = extractvalue { i64, i64 } %272, 1
  br label %275

275:                                              ; preds = %267, %111, %63, %55, %51, %42, %34, %26
  %276 = phi i64 [ %28, %26 ], [ 0, %51 ], [ 0, %34 ], [ %44, %42 ], [ 0, %55 ], [ 0, %63 ], [ 0, %111 ], [ %273, %267 ]
  %277 = phi i64 [ %29, %26 ], [ -140737488355328, %51 ], [ %36, %34 ], [ %45, %42 ], [ %57, %55 ], [ %64, %63 ], [ %112, %111 ], [ %274, %267 ]
  %278 = insertvalue { i64, i64 } undef, i64 %276, 0
  %279 = insertvalue { i64, i64 } %278, i64 %277, 1
  ret { i64, i64 } %279
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_div(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = and i64 %1, 281474976710655
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = and i64 %3, 281474976710655
  %11 = lshr i64 %3, 48
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 32767
  %14 = xor i64 %3, %1
  %15 = lshr i64 %14, 63
  %16 = trunc i64 %15 to i8
  %17 = icmp eq i32 %9, 32767
  br i1 %17, label %18, label %37

18:                                               ; preds = %5
  %19 = or i64 %6, %0
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = extractvalue { i64, i64 } %22, 1
  br label %448

25:                                               ; preds = %18
  %26 = icmp eq i32 %13, 32767
  br i1 %26, label %27, label %34

27:                                               ; preds = %25
  %28 = or i64 %10, %2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %55, label %30

30:                                               ; preds = %27
  %31 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %32 = extractvalue { i64, i64 } %31, 0
  %33 = extractvalue { i64, i64 } %31, 1
  br label %448

34:                                               ; preds = %25
  %35 = and i64 %14, -9223372036854775808
  %36 = or i64 %35, 9223090561878065152
  br label %448

37:                                               ; preds = %5
  switch i32 %13, label %103 [
    i32 32767, label %38
    i32 0, label %47
  ]

38:                                               ; preds = %37
  %39 = or i64 %10, %2
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = extractvalue { i64, i64 } %42, 1
  br label %448

45:                                               ; preds = %38
  %46 = and i64 %14, -9223372036854775808
  br label %448

47:                                               ; preds = %37
  %48 = or i64 %10, %2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %65

50:                                               ; preds = %47
  %51 = zext i32 %9 to i64
  %52 = or i64 %6, %0
  %53 = or i64 %52, %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %27, %50
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %448

59:                                               ; preds = %50
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %61, 4
  store i8 %62, i8* %60, align 1
  %63 = and i64 %14, -9223372036854775808
  %64 = or i64 %63, 9223090561878065152
  br label %448

65:                                               ; preds = %47
  %66 = icmp eq i64 %10, 0
  br i1 %66, label %67, label %87

67:                                               ; preds = %65
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %68 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %68, 6148914691236517205
  %ctpop.sh = lshr i64 %68, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %69 = trunc i64 %ctpop.part to i8
  %70 = add nsw i8 %69, -15
  %71 = sext i8 %70 to i32
  %72 = icmp ult i8 %69, 15
  br i1 %72, label %73, label %80

73:                                               ; preds = %67
  %74 = sub nsw i32 0, %71
  %75 = zext i32 %74 to i64
  %76 = lshr i64 %2, %75
  %77 = and i32 %71, 63
  %78 = zext i32 %77 to i64
  %79 = shl i64 %2, %78
  br label %83

80:                                               ; preds = %67
  %81 = zext i32 %71 to i64
  %82 = shl i64 %2, %81
  br label %83

83:                                               ; preds = %80, %73
  %84 = phi i64 [ %76, %73 ], [ %82, %80 ]
  %85 = phi i64 [ %79, %73 ], [ 0, %80 ]
  %86 = sub nsw i32 -63, %71
  br label %103

87:                                               ; preds = %65
  %ctlz.sh31 = lshr i64 %10, 1
  %ctlz.step32 = or i64 %10, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %88 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %88, 6148914691236517205
  %ctpop.sh44 = lshr i64 %88, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %89 = trunc i64 %ctpop.part67 to i32
  %90 = add nsw i32 %89, -15
  %91 = zext i32 %90 to i64
  %92 = shl i64 %2, %91
  %93 = icmp eq i32 %90, 0
  br i1 %93, label %100, label %94

94:                                               ; preds = %87
  %95 = shl i64 %10, %91
  %96 = sub nsw i64 15, %ctpop.part67
  %97 = and i64 %96, 63
  %98 = lshr i64 %2, %97
  %99 = or i64 %95, %98
  br label %100

100:                                              ; preds = %94, %87
  %101 = phi i64 [ %99, %94 ], [ %10, %87 ]
  %102 = sub nsw i32 16, %89
  br label %103

103:                                              ; preds = %100, %83, %37
  %104 = phi i64 [ %10, %37 ], [ %84, %83 ], [ %101, %100 ]
  %105 = phi i64 [ %2, %37 ], [ %85, %83 ], [ %92, %100 ]
  %106 = phi i32 [ %13, %37 ], [ %86, %83 ], [ %102, %100 ]
  %107 = icmp eq i32 %9, 0
  br i1 %107, label %108, label %151

108:                                              ; preds = %103
  %109 = or i64 %6, %0
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %108
  %112 = and i64 %14, -9223372036854775808
  br label %448

113:                                              ; preds = %108
  %114 = icmp eq i64 %6, 0
  br i1 %114, label %115, label %135

115:                                              ; preds = %113
  %ctlz.sh68 = lshr i64 %0, 1
  %ctlz.step69 = or i64 %0, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %116 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %116, 6148914691236517205
  %ctpop.sh81 = lshr i64 %116, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %117 = trunc i64 %ctpop.part104 to i8
  %118 = add nsw i8 %117, -15
  %119 = sext i8 %118 to i32
  %120 = icmp ult i8 %117, 15
  br i1 %120, label %121, label %128

121:                                              ; preds = %115
  %122 = sub nsw i32 0, %119
  %123 = zext i32 %122 to i64
  %124 = lshr i64 %0, %123
  %125 = and i32 %119, 63
  %126 = zext i32 %125 to i64
  %127 = shl i64 %0, %126
  br label %131

128:                                              ; preds = %115
  %129 = zext i32 %119 to i64
  %130 = shl i64 %0, %129
  br label %131

131:                                              ; preds = %128, %121
  %132 = phi i64 [ %124, %121 ], [ %130, %128 ]
  %133 = phi i64 [ %127, %121 ], [ 0, %128 ]
  %134 = sub nsw i32 -63, %119
  br label %151

135:                                              ; preds = %113
  %ctlz.sh105 = lshr i64 %6, 1
  %ctlz.step106 = or i64 %6, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %136 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %136, 6148914691236517205
  %ctpop.sh118 = lshr i64 %136, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %137 = trunc i64 %ctpop.part141 to i32
  %138 = add nsw i32 %137, -15
  %139 = zext i32 %138 to i64
  %140 = shl i64 %0, %139
  %141 = icmp eq i32 %138, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %135
  %143 = shl i64 %6, %139
  %144 = sub nsw i64 15, %ctpop.part141
  %145 = and i64 %144, 63
  %146 = lshr i64 %0, %145
  %147 = or i64 %143, %146
  br label %148

148:                                              ; preds = %142, %135
  %149 = phi i64 [ %147, %142 ], [ %6, %135 ]
  %150 = sub nsw i32 16, %137
  br label %151

151:                                              ; preds = %148, %131, %103
  %152 = phi i64 [ %0, %103 ], [ %133, %131 ], [ %140, %148 ]
  %153 = phi i64 [ %6, %103 ], [ %132, %131 ], [ %149, %148 ]
  %154 = phi i32 [ %9, %103 ], [ %134, %131 ], [ %150, %148 ]
  %155 = sub nsw i32 %154, %106
  %156 = add nsw i32 %155, 16381
  %157 = shl i64 %152, 15
  %158 = shl i64 %153, 15
  %159 = lshr i64 %152, 49
  %160 = or i64 %159, %158
  %161 = or i64 %160, -9223372036854775808
  %162 = shl i64 %105, 15
  %163 = shl i64 %104, 15
  %164 = or i64 %163, -9223372036854775808
  %165 = lshr i64 %105, 49
  %166 = or i64 %165, %164
  %167 = icmp ult i64 %166, %161
  %168 = icmp eq i64 %166, %161
  %169 = icmp ule i64 %162, %157
  %170 = and i1 %169, %168
  %171 = or i1 %167, %170
  br i1 %171, label %172, label %179

172:                                              ; preds = %151
  %173 = shl i64 %159, 63
  %174 = shl i64 %152, 14
  %175 = and i64 %174, 9223372036854759424
  %176 = or i64 %173, %175
  %177 = lshr i64 %161, 1
  %178 = add nsw i32 %155, 16382
  br label %179

179:                                              ; preds = %151, %172
  %180 = phi i64 [ %157, %151 ], [ %176, %172 ]
  %181 = phi i64 [ %161, %151 ], [ %177, %172 ]
  %182 = phi i32 [ %156, %151 ], [ %178, %172 ]
  %183 = icmp ugt i64 %166, %181
  %184 = lshr i64 %164, 32
  br i1 %183, label %187, label %185

185:                                              ; preds = %179
  %186 = and i64 %166, 4294967295
  br label %234

187:                                              ; preds = %179
  %188 = and i64 %164, -4294967296
  %189 = icmp ugt i64 %188, %181
  br i1 %189, label %190, label %193

190:                                              ; preds = %187
  %191 = udiv i64 %181, %184
  %192 = shl i64 %191, 32
  br label %193

193:                                              ; preds = %190, %187
  %194 = phi i64 [ %192, %190 ], [ -4294967296, %187 ]
  %195 = lshr exact i64 %194, 32
  %196 = and i64 %166, 4294967295
  %197 = mul nuw i64 %195, %196
  %198 = mul nuw i64 %195, %184
  %199 = lshr i64 %197, 32
  %200 = shl i64 %197, 32
  %201 = sub i64 %180, %200
  %202 = icmp ult i64 %180, %200
  %203 = sext i1 %202 to i64
  %204 = sub i64 %181, %198
  %205 = sub i64 %204, %199
  %206 = add i64 %205, %203
  %207 = icmp slt i64 %206, 0
  br i1 %207, label %208, label %221

208:                                              ; preds = %193
  %209 = shl i64 %166, 32
  br label %210

210:                                              ; preds = %210, %208
  %211 = phi i64 [ %194, %208 ], [ %214, %210 ]
  %212 = phi i64 [ %206, %208 ], [ %219, %210 ]
  %213 = phi i64 [ %201, %208 ], [ %215, %210 ]
  %214 = add i64 %211, -4294967296
  %215 = add i64 %213, %209
  %216 = add i64 %212, %184
  %217 = icmp ult i64 %215, %213
  %218 = zext i1 %217 to i64
  %219 = add i64 %216, %218
  %220 = icmp slt i64 %219, 0
  br i1 %220, label %210, label %221

221:                                              ; preds = %210, %193
  %222 = phi i64 [ %201, %193 ], [ %215, %210 ]
  %223 = phi i64 [ %206, %193 ], [ %219, %210 ]
  %224 = phi i64 [ %194, %193 ], [ %214, %210 ]
  %225 = shl i64 %223, 32
  %226 = lshr i64 %222, 32
  %227 = or i64 %225, %226
  %228 = icmp ugt i64 %188, %227
  br i1 %228, label %229, label %231

229:                                              ; preds = %221
  %230 = udiv i64 %227, %184
  br label %231

231:                                              ; preds = %229, %221
  %232 = phi i64 [ %230, %229 ], [ 4294967295, %221 ]
  %233 = or i64 %232, %224
  br label %234

234:                                              ; preds = %185, %231
  %235 = phi i64 [ %186, %185 ], [ %196, %231 ]
  %236 = phi i64 [ -1, %185 ], [ %233, %231 ]
  %237 = lshr i64 %105, 17
  %238 = and i64 %237, 4294967295
  %239 = lshr i64 %236, 32
  %240 = and i64 %162, 4294934528
  %241 = and i64 %236, 4294967295
  %242 = mul nuw i64 %241, %240
  %243 = mul nuw i64 %239, %240
  %244 = mul nuw i64 %241, %238
  %245 = mul nuw i64 %239, %238
  %246 = add i64 %243, %244
  %247 = icmp ult i64 %246, %244
  %248 = select i1 %247, i64 4294967296, i64 0
  %249 = lshr i64 %246, 32
  %250 = or i64 %248, %249
  %251 = shl i64 %246, 32
  %252 = add i64 %251, %242
  %253 = icmp ult i64 %252, %251
  %254 = zext i1 %253 to i64
  %255 = mul nuw i64 %241, %235
  %256 = mul nuw i64 %239, %235
  %257 = mul nuw i64 %241, %184
  %258 = mul nuw i64 %239, %184
  %259 = add i64 %256, %257
  %260 = icmp ult i64 %259, %257
  %261 = select i1 %260, i64 4294967296, i64 0
  %262 = lshr i64 %259, 32
  %263 = or i64 %261, %262
  %264 = shl i64 %259, 32
  %265 = add i64 %264, %255
  %266 = icmp ult i64 %265, %264
  %267 = add i64 %265, %245
  %268 = add i64 %267, %250
  %269 = add i64 %268, %254
  %270 = icmp ult i64 %269, %265
  %271 = sub i64 0, %252
  %272 = icmp ne i64 %252, 0
  %273 = sub i64 %180, %269
  %274 = icmp ult i64 %180, %269
  %275 = sext i1 %266 to i64
  %276 = sext i1 %270 to i64
  %277 = zext i1 %272 to i64
  %278 = icmp ult i64 %273, %277
  %279 = sext i1 %278 to i64
  %280 = sub i64 %273, %277
  %281 = sext i1 %274 to i64
  %282 = sub i64 %181, %258
  %283 = sub i64 %282, %263
  %284 = add i64 %283, %275
  %285 = add i64 %284, %276
  %286 = add i64 %285, %281
  %287 = add i64 %286, %279
  %288 = icmp slt i64 %287, 0
  br i1 %288, label %289, label %307

289:                                              ; preds = %234, %289
  %290 = phi i64 [ %295, %289 ], [ %271, %234 ]
  %291 = phi i64 [ %300, %289 ], [ %280, %234 ]
  %292 = phi i64 [ %305, %289 ], [ %287, %234 ]
  %293 = phi i64 [ %294, %289 ], [ %236, %234 ]
  %294 = add i64 %293, -1
  %295 = add i64 %290, %162
  %296 = icmp ult i64 %295, %290
  %297 = add i64 %291, %166
  %298 = icmp ult i64 %297, %291
  %299 = zext i1 %296 to i64
  %300 = add i64 %297, %299
  %301 = icmp ult i64 %300, %299
  %302 = zext i1 %301 to i64
  %303 = zext i1 %298 to i64
  %304 = add nsw i64 %292, %303
  %305 = add nsw i64 %304, %302
  %306 = icmp slt i64 %305, 0
  br i1 %306, label %289, label %307

307:                                              ; preds = %289, %234
  %308 = phi i64 [ %236, %234 ], [ %294, %289 ]
  %309 = phi i64 [ %280, %234 ], [ %300, %289 ]
  %310 = phi i64 [ %271, %234 ], [ %295, %289 ]
  %311 = icmp ugt i64 %166, %309
  br i1 %311, label %312, label %438

312:                                              ; preds = %307
  %313 = and i64 %164, -4294967296
  %314 = icmp ugt i64 %313, %309
  br i1 %314, label %315, label %318

315:                                              ; preds = %312
  %316 = udiv i64 %309, %184
  %317 = shl i64 %316, 32
  br label %318

318:                                              ; preds = %315, %312
  %319 = phi i64 [ %317, %315 ], [ -4294967296, %312 ]
  %320 = lshr exact i64 %319, 32
  %321 = mul nuw i64 %320, %235
  %322 = mul nuw i64 %320, %184
  %323 = lshr i64 %321, 32
  %324 = shl i64 %321, 32
  %325 = sub i64 %310, %324
  %326 = icmp ult i64 %310, %324
  %327 = sext i1 %326 to i64
  %328 = sub i64 %309, %322
  %329 = sub i64 %328, %323
  %330 = add i64 %329, %327
  %331 = icmp slt i64 %330, 0
  br i1 %331, label %332, label %345

332:                                              ; preds = %318
  %333 = shl i64 %166, 32
  br label %334

334:                                              ; preds = %334, %332
  %335 = phi i64 [ %319, %332 ], [ %338, %334 ]
  %336 = phi i64 [ %330, %332 ], [ %343, %334 ]
  %337 = phi i64 [ %325, %332 ], [ %339, %334 ]
  %338 = add i64 %335, -4294967296
  %339 = add i64 %337, %333
  %340 = add i64 %336, %184
  %341 = icmp ult i64 %339, %337
  %342 = zext i1 %341 to i64
  %343 = add i64 %340, %342
  %344 = icmp slt i64 %343, 0
  br i1 %344, label %334, label %345

345:                                              ; preds = %334, %318
  %346 = phi i64 [ %325, %318 ], [ %339, %334 ]
  %347 = phi i64 [ %330, %318 ], [ %343, %334 ]
  %348 = phi i64 [ %319, %318 ], [ %338, %334 ]
  %349 = shl i64 %347, 32
  %350 = lshr i64 %346, 32
  %351 = or i64 %349, %350
  %352 = icmp ugt i64 %313, %351
  br i1 %352, label %353, label %355

353:                                              ; preds = %345
  %354 = udiv i64 %351, %184
  br label %355

355:                                              ; preds = %345, %353
  %356 = phi i64 [ %354, %353 ], [ 4294967295, %345 ]
  %357 = or i64 %356, %348
  %358 = and i64 %357, 16383
  %359 = icmp ult i64 %358, 5
  br i1 %359, label %360, label %438

360:                                              ; preds = %355
  %361 = lshr i64 %357, 32
  %362 = and i64 %357, 4294967295
  %363 = mul nuw i64 %362, %240
  %364 = mul nuw i64 %361, %240
  %365 = mul nuw i64 %362, %238
  %366 = mul nuw i64 %361, %238
  %367 = add i64 %364, %365
  %368 = icmp ult i64 %367, %365
  %369 = select i1 %368, i64 4294967296, i64 0
  %370 = lshr i64 %367, 32
  %371 = or i64 %369, %370
  %372 = shl i64 %367, 32
  %373 = add i64 %372, %363
  %374 = icmp ult i64 %373, %372
  %375 = zext i1 %374 to i64
  %376 = mul nuw i64 %362, %235
  %377 = mul nuw i64 %361, %235
  %378 = mul nuw i64 %362, %184
  %379 = mul nuw i64 %361, %184
  %380 = add i64 %377, %378
  %381 = icmp ult i64 %380, %378
  %382 = select i1 %381, i64 4294967296, i64 0
  %383 = lshr i64 %380, 32
  %384 = or i64 %382, %383
  %385 = shl i64 %380, 32
  %386 = add i64 %385, %376
  %387 = icmp ult i64 %386, %385
  %388 = add i64 %386, %366
  %389 = add i64 %388, %371
  %390 = add i64 %389, %375
  %391 = icmp ult i64 %390, %386
  %392 = sub i64 0, %373
  %393 = icmp ne i64 %373, 0
  %394 = sub i64 %310, %390
  %395 = icmp ult i64 %310, %390
  %396 = sext i1 %387 to i64
  %397 = sext i1 %391 to i64
  %398 = zext i1 %393 to i64
  %399 = icmp ult i64 %394, %398
  %400 = sext i1 %399 to i64
  %401 = sub i64 %394, %398
  %402 = sext i1 %395 to i64
  %403 = sub i64 %309, %379
  %404 = sub i64 %403, %384
  %405 = add i64 %404, %396
  %406 = add i64 %405, %397
  %407 = add i64 %406, %402
  %408 = add i64 %407, %400
  %409 = icmp slt i64 %408, 0
  br i1 %409, label %410, label %428

410:                                              ; preds = %360, %410
  %411 = phi i64 [ %416, %410 ], [ %392, %360 ]
  %412 = phi i64 [ %421, %410 ], [ %401, %360 ]
  %413 = phi i64 [ %426, %410 ], [ %408, %360 ]
  %414 = phi i64 [ %415, %410 ], [ %357, %360 ]
  %415 = add i64 %414, -1
  %416 = add i64 %411, %162
  %417 = icmp ult i64 %416, %411
  %418 = add i64 %412, %166
  %419 = icmp ult i64 %418, %412
  %420 = zext i1 %417 to i64
  %421 = add i64 %418, %420
  %422 = icmp ult i64 %421, %420
  %423 = zext i1 %422 to i64
  %424 = zext i1 %419 to i64
  %425 = add nsw i64 %413, %424
  %426 = add nsw i64 %425, %423
  %427 = icmp slt i64 %426, 0
  br i1 %427, label %410, label %428

428:                                              ; preds = %410, %360
  %429 = phi i64 [ %357, %360 ], [ %415, %410 ]
  %430 = phi i64 [ %408, %360 ], [ %426, %410 ]
  %431 = phi i64 [ %401, %360 ], [ %421, %410 ]
  %432 = phi i64 [ %392, %360 ], [ %416, %410 ]
  %433 = or i64 %431, %430
  %434 = or i64 %433, %432
  %435 = icmp ne i64 %434, 0
  %436 = zext i1 %435 to i64
  %437 = or i64 %429, %436
  br label %438

438:                                              ; preds = %307, %428, %355
  %439 = phi i64 [ %437, %428 ], [ %357, %355 ], [ -1, %307 ]
  %440 = shl i64 %439, 49
  %441 = shl i64 %308, 49
  %442 = lshr i64 %439, 15
  %443 = or i64 %442, %441
  %444 = lshr i64 %308, 15
  %445 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %16, i32 %182, i64 %444, i64 %443, i64 %440, %struct.float_status* %4)
  %446 = extractvalue { i64, i64 } %445, 0
  %447 = extractvalue { i64, i64 } %445, 1
  br label %448

448:                                              ; preds = %438, %111, %59, %55, %45, %41, %34, %30, %21
  %449 = phi i64 [ %23, %21 ], [ %32, %30 ], [ 0, %55 ], [ 0, %34 ], [ %43, %41 ], [ 0, %45 ], [ 0, %59 ], [ 0, %111 ], [ %446, %438 ]
  %450 = phi i64 [ %24, %21 ], [ %33, %30 ], [ -140737488355328, %55 ], [ %36, %34 ], [ %44, %41 ], [ %46, %45 ], [ %64, %59 ], [ %112, %111 ], [ %447, %438 ]
  %451 = insertvalue { i64, i64 } undef, i64 %449, 0
  %452 = insertvalue { i64, i64 } %451, i64 %450, 1
  ret { i64, i64 } %452
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_rem(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #13 {
  %6 = and i64 %1, 281474976710655
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = lshr i64 %1, 63
  %11 = trunc i64 %10 to i8
  %12 = and i64 %3, 281474976710655
  %13 = lshr i64 %3, 48
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 32767
  %16 = icmp eq i32 %9, 32767
  br i1 %16, label %17, label %29

17:                                               ; preds = %5
  %18 = or i64 %6, %0
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %17
  %21 = icmp ne i32 %15, 32767
  %22 = or i64 %12, %2
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %23, %21
  br i1 %24, label %40, label %25

25:                                               ; preds = %20, %17
  %26 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = extractvalue { i64, i64 } %26, 1
  br label %507

29:                                               ; preds = %5
  switch i32 %15, label %82 [
    i32 32767, label %30
    i32 0, label %37
  ]

30:                                               ; preds = %29
  %31 = or i64 %12, %2
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %507, label %33

33:                                               ; preds = %30
  %34 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* %4)
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = extractvalue { i64, i64 } %34, 1
  br label %507

37:                                               ; preds = %29
  %38 = or i64 %12, %2
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %20, %37
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 1
  store i8 %43, i8* %41, align 1
  br label %507

44:                                               ; preds = %37
  %45 = icmp eq i64 %12, 0
  br i1 %45, label %46, label %66

46:                                               ; preds = %44
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %47 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %47, 6148914691236517205
  %ctpop.sh = lshr i64 %47, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %48 = trunc i64 %ctpop.part to i8
  %49 = add nsw i8 %48, -15
  %50 = sext i8 %49 to i32
  %51 = icmp ult i8 %48, 15
  br i1 %51, label %52, label %59

52:                                               ; preds = %46
  %53 = sub nsw i32 0, %50
  %54 = zext i32 %53 to i64
  %55 = lshr i64 %2, %54
  %56 = and i32 %50, 63
  %57 = zext i32 %56 to i64
  %58 = shl i64 %2, %57
  br label %62

59:                                               ; preds = %46
  %60 = zext i32 %50 to i64
  %61 = shl i64 %2, %60
  br label %62

62:                                               ; preds = %59, %52
  %63 = phi i64 [ %55, %52 ], [ %61, %59 ]
  %64 = phi i64 [ %58, %52 ], [ 0, %59 ]
  %65 = sub nsw i32 -63, %50
  br label %82

66:                                               ; preds = %44
  %ctlz.sh31 = lshr i64 %12, 1
  %ctlz.step32 = or i64 %12, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %67 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %67, 6148914691236517205
  %ctpop.sh44 = lshr i64 %67, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %68 = trunc i64 %ctpop.part67 to i32
  %69 = add nsw i32 %68, -15
  %70 = zext i32 %69 to i64
  %71 = shl i64 %2, %70
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %66
  %74 = shl i64 %12, %70
  %75 = sub nsw i64 15, %ctpop.part67
  %76 = and i64 %75, 63
  %77 = lshr i64 %2, %76
  %78 = or i64 %74, %77
  br label %79

79:                                               ; preds = %73, %66
  %80 = phi i64 [ %78, %73 ], [ %12, %66 ]
  %81 = sub nsw i32 16, %68
  br label %82

82:                                               ; preds = %79, %62, %29
  %83 = phi i64 [ %12, %29 ], [ %63, %62 ], [ %80, %79 ]
  %84 = phi i64 [ %2, %29 ], [ %64, %62 ], [ %71, %79 ]
  %85 = phi i32 [ %15, %29 ], [ %65, %62 ], [ %81, %79 ]
  %86 = icmp eq i32 %9, 0
  br i1 %86, label %87, label %128

87:                                               ; preds = %82
  %88 = or i64 %6, %0
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %507, label %90

90:                                               ; preds = %87
  %91 = icmp eq i64 %6, 0
  br i1 %91, label %92, label %112

92:                                               ; preds = %90
  %ctlz.sh68 = lshr i64 %0, 1
  %ctlz.step69 = or i64 %0, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %93 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %93, 6148914691236517205
  %ctpop.sh81 = lshr i64 %93, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %94 = trunc i64 %ctpop.part104 to i8
  %95 = add nsw i8 %94, -15
  %96 = sext i8 %95 to i32
  %97 = icmp ult i8 %94, 15
  br i1 %97, label %98, label %105

98:                                               ; preds = %92
  %99 = sub nsw i32 0, %96
  %100 = zext i32 %99 to i64
  %101 = lshr i64 %0, %100
  %102 = and i32 %96, 63
  %103 = zext i32 %102 to i64
  %104 = shl i64 %0, %103
  br label %108

105:                                              ; preds = %92
  %106 = zext i32 %96 to i64
  %107 = shl i64 %0, %106
  br label %108

108:                                              ; preds = %105, %98
  %109 = phi i64 [ %101, %98 ], [ %107, %105 ]
  %110 = phi i64 [ %104, %98 ], [ 0, %105 ]
  %111 = sub nsw i32 -63, %96
  br label %128

112:                                              ; preds = %90
  %ctlz.sh105 = lshr i64 %6, 1
  %ctlz.step106 = or i64 %6, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %113 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %113, 6148914691236517205
  %ctpop.sh118 = lshr i64 %113, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %114 = trunc i64 %ctpop.part141 to i32
  %115 = add nsw i32 %114, -15
  %116 = zext i32 %115 to i64
  %117 = shl i64 %0, %116
  %118 = icmp eq i32 %115, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %112
  %120 = shl i64 %6, %116
  %121 = sub nsw i64 15, %ctpop.part141
  %122 = and i64 %121, 63
  %123 = lshr i64 %0, %122
  %124 = or i64 %120, %123
  br label %125

125:                                              ; preds = %119, %112
  %126 = phi i64 [ %124, %119 ], [ %6, %112 ]
  %127 = sub nsw i32 16, %114
  br label %128

128:                                              ; preds = %125, %108, %82
  %129 = phi i64 [ %0, %82 ], [ %110, %108 ], [ %117, %125 ]
  %130 = phi i64 [ %6, %82 ], [ %109, %108 ], [ %126, %125 ]
  %131 = phi i32 [ %9, %82 ], [ %111, %108 ], [ %127, %125 ]
  %132 = sub nsw i32 %131, %85
  %133 = icmp slt i32 %132, -1
  br i1 %133, label %507, label %134

134:                                              ; preds = %128
  %135 = or i64 %130, 281474976710656
  %136 = icmp eq i32 %132, -1
  %137 = select i1 %136, i32 14, i32 15
  %138 = zext i32 %137 to i64
  %139 = shl i64 %129, %138
  %140 = shl i64 %135, %138
  %141 = sub nsw i32 0, %137
  %142 = and i32 %141, 51
  %143 = zext i32 %142 to i64
  %144 = lshr i64 %129, %143
  %145 = or i64 %144, %140
  %146 = shl i64 %84, 15
  %147 = shl i64 %83, 15
  %148 = or i64 %147, -9223372036854775808
  %149 = lshr i64 %84, 49
  %150 = or i64 %149, %148
  %151 = icmp ugt i64 %145, %150
  %152 = icmp eq i64 %145, %150
  %153 = icmp uge i64 %139, %146
  %154 = and i1 %153, %152
  %155 = or i1 %151, %154
  %156 = zext i1 %155 to i64
  br i1 %155, label %157, label %163

157:                                              ; preds = %134
  %158 = sub i64 %139, %146
  %159 = sub i64 %145, %150
  %160 = icmp ult i64 %139, %146
  %161 = sext i1 %160 to i64
  %162 = add i64 %159, %161
  br label %163

163:                                              ; preds = %134, %157
  %164 = phi i64 [ %139, %134 ], [ %158, %157 ]
  %165 = phi i64 [ %145, %134 ], [ %162, %157 ]
  %166 = add nsw i32 %132, -64
  %167 = icmp sgt i32 %132, 64
  br i1 %167, label %168, label %278

168:                                              ; preds = %163
  %169 = lshr i64 %148, 32
  %170 = and i64 %148, -4294967296
  %171 = and i64 %150, 4294967295
  %172 = shl i64 %150, 32
  %173 = lshr i64 %84, 17
  %174 = and i64 %173, 4294967295
  %175 = and i64 %146, 4294934528
  br label %176

176:                                              ; preds = %168, %224
  %177 = phi i32 [ %166, %168 ], [ %276, %224 ]
  %178 = phi i64 [ %165, %168 ], [ %275, %224 ]
  %179 = phi i64 [ %164, %168 ], [ %271, %224 ]
  %180 = icmp ugt i64 %150, %178
  br i1 %180, label %181, label %224

181:                                              ; preds = %176
  %182 = icmp ugt i64 %170, %178
  br i1 %182, label %183, label %186

183:                                              ; preds = %181
  %184 = udiv i64 %178, %169
  %185 = shl i64 %184, 32
  br label %186

186:                                              ; preds = %183, %181
  %187 = phi i64 [ %185, %183 ], [ -4294967296, %181 ]
  %188 = lshr exact i64 %187, 32
  %189 = mul nuw i64 %188, %171
  %190 = mul nuw i64 %188, %169
  %191 = lshr i64 %189, 32
  %192 = shl i64 %189, 32
  %193 = sub i64 %179, %192
  %194 = icmp ult i64 %179, %192
  %195 = sext i1 %194 to i64
  %196 = sub i64 %178, %190
  %197 = sub i64 %196, %191
  %198 = add i64 %197, %195
  %199 = icmp slt i64 %198, 0
  br i1 %199, label %200, label %211

200:                                              ; preds = %186, %200
  %201 = phi i64 [ %204, %200 ], [ %187, %186 ]
  %202 = phi i64 [ %209, %200 ], [ %198, %186 ]
  %203 = phi i64 [ %205, %200 ], [ %193, %186 ]
  %204 = add i64 %201, -4294967296
  %205 = add i64 %203, %172
  %206 = add i64 %202, %169
  %207 = icmp ult i64 %205, %203
  %208 = zext i1 %207 to i64
  %209 = add i64 %206, %208
  %210 = icmp slt i64 %209, 0
  br i1 %210, label %200, label %211

211:                                              ; preds = %200, %186
  %212 = phi i64 [ %193, %186 ], [ %205, %200 ]
  %213 = phi i64 [ %198, %186 ], [ %209, %200 ]
  %214 = phi i64 [ %187, %186 ], [ %204, %200 ]
  %215 = shl i64 %213, 32
  %216 = lshr i64 %212, 32
  %217 = or i64 %215, %216
  %218 = icmp ugt i64 %170, %217
  br i1 %218, label %219, label %221

219:                                              ; preds = %211
  %220 = udiv i64 %217, %169
  br label %221

221:                                              ; preds = %219, %211
  %222 = phi i64 [ %220, %219 ], [ 4294967295, %211 ]
  %223 = or i64 %222, %214
  br label %224

224:                                              ; preds = %176, %221
  %225 = phi i64 [ %223, %221 ], [ -1, %176 ]
  %226 = sub i64 %225, 4
  %227 = icmp ult i64 %225, 4
  %228 = select i1 %227, i64 0, i64 %226
  %229 = lshr i64 %228, 32
  %230 = and i64 %228, 4294967295
  %231 = mul nuw i64 %230, %175
  %232 = mul nuw i64 %229, %175
  %233 = mul nuw i64 %230, %174
  %234 = mul nuw i64 %229, %174
  %235 = add i64 %232, %233
  %236 = icmp ult i64 %235, %233
  %237 = select i1 %236, i64 4294967296, i64 0
  %238 = lshr i64 %235, 32
  %239 = or i64 %237, %238
  %240 = shl i64 %235, 32
  %241 = add i64 %240, %231
  %242 = icmp ult i64 %241, %240
  %243 = zext i1 %242 to i64
  %244 = mul nuw i64 %230, %171
  %245 = mul nuw i64 %229, %171
  %246 = mul nuw i64 %230, %169
  %247 = mul nuw i64 %229, %169
  %248 = add i64 %245, %246
  %249 = lshr i64 %248, 32
  %250 = add i64 %249, %247
  %251 = shl i64 %248, 32
  %252 = add i64 %251, %244
  %253 = icmp ult i64 %252, %251
  %254 = zext i1 %253 to i64
  %255 = add i64 %250, %254
  %256 = add i64 %252, %234
  %257 = add i64 %256, %239
  %258 = add i64 %257, %243
  %259 = icmp ult i64 %258, %252
  %260 = zext i1 %259 to i64
  %261 = add i64 %255, %260
  %262 = shl i64 %261, 61
  %263 = lshr i64 %258, 3
  %264 = or i64 %262, %263
  %265 = shl i64 %258, 61
  %266 = lshr exact i64 %241, 3
  %267 = or i64 %265, %266
  %268 = shl i64 %178, 61
  %269 = lshr i64 %179, 3
  %270 = or i64 %268, %269
  %271 = sub i64 0, %267
  %272 = icmp ne i64 %267, 0
  %273 = sext i1 %272 to i64
  %274 = add i64 %270, %273
  %275 = sub i64 %274, %264
  %276 = add nsw i32 %177, -61
  %277 = icmp sgt i32 %177, 61
  br i1 %277, label %176, label %278

278:                                              ; preds = %224, %163
  %279 = phi i64 [ %164, %163 ], [ %271, %224 ]
  %280 = phi i64 [ %165, %163 ], [ %275, %224 ]
  %281 = phi i64 [ %156, %163 ], [ %228, %224 ]
  %282 = phi i32 [ %166, %163 ], [ %276, %224 ]
  %283 = icmp sgt i32 %282, -64
  br i1 %283, label %284, label %410

284:                                              ; preds = %278
  %285 = icmp ugt i64 %150, %280
  br i1 %285, label %286, label %334

286:                                              ; preds = %284
  %287 = lshr i64 %148, 32
  %288 = and i64 %148, -4294967296
  %289 = icmp ugt i64 %288, %280
  br i1 %289, label %290, label %293

290:                                              ; preds = %286
  %291 = udiv i64 %280, %287
  %292 = shl i64 %291, 32
  br label %293

293:                                              ; preds = %290, %286
  %294 = phi i64 [ %292, %290 ], [ -4294967296, %286 ]
  %295 = lshr exact i64 %294, 32
  %296 = and i64 %150, 4294967295
  %297 = mul nuw i64 %295, %296
  %298 = mul nuw i64 %295, %287
  %299 = lshr i64 %297, 32
  %300 = shl i64 %297, 32
  %301 = sub i64 %279, %300
  %302 = icmp ult i64 %279, %300
  %303 = sext i1 %302 to i64
  %304 = sub i64 %280, %298
  %305 = sub i64 %304, %299
  %306 = add i64 %305, %303
  %307 = icmp slt i64 %306, 0
  br i1 %307, label %308, label %321

308:                                              ; preds = %293
  %309 = shl i64 %150, 32
  br label %310

310:                                              ; preds = %310, %308
  %311 = phi i64 [ %294, %308 ], [ %314, %310 ]
  %312 = phi i64 [ %306, %308 ], [ %319, %310 ]
  %313 = phi i64 [ %301, %308 ], [ %315, %310 ]
  %314 = add i64 %311, -4294967296
  %315 = add i64 %313, %309
  %316 = add i64 %312, %287
  %317 = icmp ult i64 %315, %313
  %318 = zext i1 %317 to i64
  %319 = add i64 %316, %318
  %320 = icmp slt i64 %319, 0
  br i1 %320, label %310, label %321

321:                                              ; preds = %310, %293
  %322 = phi i64 [ %301, %293 ], [ %315, %310 ]
  %323 = phi i64 [ %306, %293 ], [ %319, %310 ]
  %324 = phi i64 [ %294, %293 ], [ %314, %310 ]
  %325 = shl i64 %323, 32
  %326 = lshr i64 %322, 32
  %327 = or i64 %325, %326
  %328 = icmp ugt i64 %288, %327
  br i1 %328, label %329, label %331

329:                                              ; preds = %321
  %330 = udiv i64 %327, %287
  br label %331

331:                                              ; preds = %329, %321
  %332 = phi i64 [ %330, %329 ], [ 4294967295, %321 ]
  %333 = or i64 %332, %324
  br label %334

334:                                              ; preds = %284, %331
  %335 = phi i64 [ %333, %331 ], [ -1, %284 ]
  %336 = sub i64 %335, 4
  %337 = icmp ult i64 %335, 4
  %338 = select i1 %337, i64 0, i64 %336
  %339 = sub nsw i32 0, %282
  %340 = zext i32 %339 to i64
  %341 = lshr i64 %338, %340
  %342 = shl i64 %149, 52
  %343 = shl i64 %84, 3
  %344 = and i64 %343, 4503599627370488
  %345 = or i64 %342, %344
  %346 = lshr i64 %150, 12
  %347 = icmp slt i32 %282, -52
  br i1 %347, label %348, label %362

348:                                              ; preds = %334
  %349 = sub nuw nsw i32 -52, %282
  %350 = add nuw nsw i32 %282, 52
  %351 = and i32 %350, 63
  %352 = icmp eq i32 %349, 0
  br i1 %352, label %374, label %353

353:                                              ; preds = %348
  %354 = icmp sgt i32 %282, -116
  br i1 %354, label %355, label %374

355:                                              ; preds = %353
  %356 = zext i32 %351 to i64
  %357 = shl i64 %280, %356
  %358 = zext i32 %349 to i64
  %359 = lshr i64 %279, %358
  %360 = or i64 %357, %359
  %361 = lshr i64 %280, %358
  br label %374

362:                                              ; preds = %334
  %363 = add nsw i32 %282, 52
  %364 = zext i32 %363 to i64
  %365 = shl i64 %279, %364
  %366 = icmp eq i32 %363, 0
  br i1 %366, label %374, label %367

367:                                              ; preds = %362
  %368 = shl i64 %280, %364
  %369 = sub nsw i32 12, %282
  %370 = and i32 %369, 63
  %371 = zext i32 %370 to i64
  %372 = lshr i64 %279, %371
  %373 = or i64 %372, %368
  br label %374

374:                                              ; preds = %367, %362, %355, %353, %348
  %375 = phi i64 [ %360, %355 ], [ %279, %348 ], [ 0, %353 ], [ %365, %362 ], [ %365, %367 ]
  %376 = phi i64 [ %361, %355 ], [ %280, %348 ], [ 0, %353 ], [ %280, %362 ], [ %373, %367 ]
  %377 = lshr i64 %345, 32
  %378 = lshr i64 %341, 32
  %379 = and i64 %343, 4294967288
  %380 = and i64 %341, 4294967295
  %381 = mul nuw i64 %380, %379
  %382 = mul nuw i64 %378, %379
  %383 = mul nuw i64 %380, %377
  %384 = add i64 %382, %383
  %385 = icmp ult i64 %384, %383
  %386 = select i1 %385, i64 4294967296, i64 0
  %387 = lshr i64 %384, 32
  %388 = or i64 %386, %387
  %389 = shl i64 %384, 32
  %390 = add i64 %389, %381
  %391 = icmp ult i64 %390, %389
  %392 = lshr i64 %148, 44
  %393 = and i64 %346, 4294967295
  %394 = mul nuw i64 %378, %393
  %395 = mul nuw nsw i64 %380, %392
  %396 = add i64 %394, %395
  %397 = sub i64 %375, %390
  %398 = mul nuw i64 %378, %377
  %399 = mul nuw i64 %380, %393
  %400 = mul i64 %396, -4294967296
  %401 = sext i1 %391 to i64
  %402 = icmp ult i64 %375, %390
  %403 = sext i1 %402 to i64
  %404 = add i64 %398, %399
  %405 = sub i64 %400, %404
  %406 = sub i64 %405, %388
  %407 = add i64 %406, %401
  %408 = add i64 %407, %376
  %409 = add i64 %408, %403
  br label %420

410:                                              ; preds = %278
  %411 = shl i64 %280, 52
  %412 = lshr i64 %279, 12
  %413 = or i64 %411, %412
  %414 = lshr i64 %280, 12
  %415 = shl i64 %149, 52
  %416 = shl i64 %84, 3
  %417 = and i64 %416, 4503599627370488
  %418 = or i64 %415, %417
  %419 = lshr i64 %150, 12
  br label %420

420:                                              ; preds = %410, %374
  %421 = phi i64 [ %397, %374 ], [ %413, %410 ]
  %422 = phi i64 [ %346, %374 ], [ %419, %410 ]
  %423 = phi i64 [ %345, %374 ], [ %418, %410 ]
  %424 = phi i64 [ %409, %374 ], [ %414, %410 ]
  %425 = phi i64 [ %341, %374 ], [ %281, %410 ]
  br label %426

426:                                              ; preds = %426, %420
  %427 = phi i64 [ %421, %420 ], [ %431, %426 ]
  %428 = phi i64 [ %424, %420 ], [ %435, %426 ]
  %429 = phi i64 [ %425, %420 ], [ %430, %426 ]
  %430 = add i64 %429, 1
  %431 = sub i64 %427, %423
  %432 = sub i64 %428, %422
  %433 = icmp ult i64 %427, %423
  %434 = sext i1 %433 to i64
  %435 = add i64 %432, %434
  %436 = icmp sgt i64 %435, -1
  br i1 %436, label %426, label %437

437:                                              ; preds = %426
  %438 = add i64 %431, %427
  %439 = add i64 %435, %428
  %440 = icmp ult i64 %438, %431
  %441 = zext i1 %440 to i64
  %442 = add i64 %439, %441
  %443 = icmp slt i64 %442, 0
  br i1 %443, label %450, label %444

444:                                              ; preds = %437
  %445 = or i64 %442, %438
  %446 = icmp ne i64 %445, 0
  %447 = and i64 %430, 1
  %448 = icmp eq i64 %447, 0
  %449 = or i1 %448, %446
  br i1 %449, label %454, label %450

450:                                              ; preds = %437, %444
  %451 = lshr i64 %428, 63
  %452 = trunc i64 %451 to i8
  %453 = icmp slt i64 %428, 0
  br i1 %453, label %454, label %462

454:                                              ; preds = %444, %450
  %455 = phi i8 [ %452, %450 ], [ 1, %444 ]
  %456 = phi i64 [ %428, %450 ], [ %435, %444 ]
  %457 = phi i64 [ %427, %450 ], [ %431, %444 ]
  %458 = sub i64 0, %457
  %459 = icmp ne i64 %457, 0
  %460 = sext i1 %459 to i64
  %461 = sub i64 %460, %456
  br label %462

462:                                              ; preds = %454, %450
  %463 = phi i8 [ %455, %454 ], [ %452, %450 ]
  %464 = phi i64 [ %458, %454 ], [ %427, %450 ]
  %465 = phi i64 [ %461, %454 ], [ %428, %450 ]
  %466 = xor i8 %463, %11
  %467 = icmp eq i64 %465, 0
  %468 = select i1 %467, i64 %464, i64 %465
  %469 = select i1 %467, i64 0, i64 %464
  %470 = select i1 %467, i32 -68, i32 -4
  %471 = add nsw i32 %470, %85
  %ctlz.sh142 = lshr i64 %468, 1
  %ctlz.step143 = or i64 %468, %ctlz.sh142
  %ctlz.sh144 = lshr i64 %ctlz.step143, 2
  %ctlz.step145 = or i64 %ctlz.step143, %ctlz.sh144
  %ctlz.sh146 = lshr i64 %ctlz.step145, 4
  %ctlz.step147 = or i64 %ctlz.step145, %ctlz.sh146
  %ctlz.sh148 = lshr i64 %ctlz.step147, 8
  %ctlz.step149 = or i64 %ctlz.step147, %ctlz.sh148
  %ctlz.sh150 = lshr i64 %ctlz.step149, 16
  %ctlz.step151 = or i64 %ctlz.step149, %ctlz.sh150
  %ctlz.sh152 = lshr i64 %ctlz.step151, 32
  %ctlz.step153 = or i64 %ctlz.step151, %ctlz.sh152
  %472 = xor i64 %ctlz.step153, -1
  %cppop.and1154 = and i64 %472, 6148914691236517205
  %ctpop.sh155 = lshr i64 %472, 1
  %cppop.and2156 = and i64 %ctpop.sh155, 6148914691236517205
  %ctpop.step157 = add i64 %cppop.and1154, %cppop.and2156
  %cppop.and1158 = and i64 %ctpop.step157, 3689348814741910323
  %ctpop.sh159 = lshr i64 %ctpop.step157, 2
  %cppop.and2160 = and i64 %ctpop.sh159, 3689348814741910323
  %ctpop.step161 = add i64 %cppop.and1158, %cppop.and2160
  %cppop.and1162 = and i64 %ctpop.step161, 1085102592571150095
  %ctpop.sh163 = lshr i64 %ctpop.step161, 4
  %cppop.and2164 = and i64 %ctpop.sh163, 1085102592571150095
  %ctpop.step165 = add i64 %cppop.and1162, %cppop.and2164
  %cppop.and1166 = and i64 %ctpop.step165, 71777214294589695
  %ctpop.sh167 = lshr i64 %ctpop.step165, 8
  %cppop.and2168 = and i64 %ctpop.sh167, 71777214294589695
  %ctpop.step169 = add i64 %cppop.and1166, %cppop.and2168
  %cppop.and1170 = and i64 %ctpop.step169, 281470681808895
  %ctpop.sh171 = lshr i64 %ctpop.step169, 16
  %cppop.and2172 = and i64 %ctpop.sh171, 281470681808895
  %ctpop.step173 = add i64 %cppop.and1170, %cppop.and2172
  %cppop.and1174 = and i64 %ctpop.step173, 4294967295
  %ctpop.sh175 = lshr i64 %ctpop.step173, 32
  %cppop.and2176 = and i64 %ctpop.sh175, 4294967295
  %ctpop.step177 = add i64 %cppop.and1174, %cppop.and2176
  %ctpop.part178 = add i64 %ctpop.step177, 0
  %473 = trunc i64 %ctpop.part178 to i8
  %474 = add nsw i8 %473, -15
  %475 = sext i8 %474 to i32
  %476 = sub nsw i32 0, %475
  %477 = icmp ugt i8 %473, 14
  br i1 %477, label %478, label %488

478:                                              ; preds = %462
  %479 = zext i32 %475 to i64
  %480 = shl i64 %469, %479
  %481 = icmp eq i8 %474, 0
  br i1 %481, label %499, label %482

482:                                              ; preds = %478
  %483 = shl i64 %468, %479
  %484 = and i32 %476, 63
  %485 = zext i32 %484 to i64
  %486 = lshr i64 %469, %485
  %487 = or i64 %486, %483
  br label %499

488:                                              ; preds = %462
  %489 = and i32 %475, 63
  %490 = zext i32 %489 to i64
  %491 = icmp eq i8 %474, 0
  br i1 %491, label %499, label %492

492:                                              ; preds = %488
  %493 = shl i64 %469, %490
  %494 = shl i64 %468, %490
  %495 = zext i32 %476 to i64
  %496 = lshr i64 %469, %495
  %497 = or i64 %494, %496
  %498 = lshr i64 %468, %495
  br label %499

499:                                              ; preds = %478, %482, %488, %492
  %500 = phi i64 [ %487, %482 ], [ %468, %478 ], [ %498, %492 ], [ %468, %488 ]
  %501 = phi i64 [ %480, %482 ], [ %480, %478 ], [ %497, %492 ], [ %469, %488 ]
  %502 = phi i64 [ 0, %482 ], [ 0, %478 ], [ %493, %492 ], [ 0, %488 ]
  %503 = sub nsw i32 %471, %475
  %504 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %466, i32 %503, i64 %500, i64 %501, i64 %502, %struct.float_status* %4) #23
  %505 = extractvalue { i64, i64 } %504, 0
  %506 = extractvalue { i64, i64 } %504, 1
  br label %507

507:                                              ; preds = %128, %87, %30, %499, %40, %33, %25
  %508 = phi i64 [ %27, %25 ], [ 0, %40 ], [ %35, %33 ], [ %505, %499 ], [ %0, %30 ], [ %0, %87 ], [ %0, %128 ]
  %509 = phi i64 [ %28, %25 ], [ -140737488355328, %40 ], [ %36, %33 ], [ %506, %499 ], [ %1, %30 ], [ %1, %87 ], [ %1, %128 ]
  %510 = insertvalue { i64, i64 } undef, i64 %508, 0
  %511 = insertvalue { i64, i64 } %510, i64 %509, 1
  ret { i64, i64 } %511
}

; Function Attrs: nounwind uwtable
define { i64, i64 } @float128_sqrt(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #13 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = icmp eq i32 %7, 32767
  br i1 %8, label %9, label %18

9:                                                ; preds = %3
  %10 = or i64 %4, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %9
  %13 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %0, i64 %1, %struct.float_status* %2)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  br label %358

16:                                               ; preds = %9
  %17 = icmp sgt i64 %1, -1
  br i1 %17, label %358, label %25

18:                                               ; preds = %3
  %19 = icmp sgt i64 %1, -1
  br i1 %19, label %29, label %20

20:                                               ; preds = %18
  %21 = zext i32 %7 to i64
  %22 = or i64 %4, %0
  %23 = or i64 %22, %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %358, label %25

25:                                               ; preds = %16, %20
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 1
  br label %358

29:                                               ; preds = %18
  %30 = icmp eq i32 %7, 0
  br i1 %30, label %31, label %72

31:                                               ; preds = %29
  %32 = or i64 %4, %0
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %358, label %34

34:                                               ; preds = %31
  %35 = icmp eq i64 %4, 0
  br i1 %35, label %36, label %56

36:                                               ; preds = %34
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %37 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %37, 6148914691236517205
  %ctpop.sh = lshr i64 %37, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %38 = trunc i64 %ctpop.part to i8
  %39 = add nsw i8 %38, -15
  %40 = sext i8 %39 to i32
  %41 = icmp ult i8 %38, 15
  br i1 %41, label %42, label %49

42:                                               ; preds = %36
  %43 = sub nsw i32 0, %40
  %44 = zext i32 %43 to i64
  %45 = lshr i64 %0, %44
  %46 = and i32 %40, 63
  %47 = zext i32 %46 to i64
  %48 = shl i64 %0, %47
  br label %52

49:                                               ; preds = %36
  %50 = zext i32 %40 to i64
  %51 = shl i64 %0, %50
  br label %52

52:                                               ; preds = %49, %42
  %53 = phi i64 [ %45, %42 ], [ %51, %49 ]
  %54 = phi i64 [ %48, %42 ], [ 0, %49 ]
  %55 = sub nsw i32 -63, %40
  br label %72

56:                                               ; preds = %34
  %ctlz.sh31 = lshr i64 %4, 1
  %ctlz.step32 = or i64 %4, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %57 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %57, 6148914691236517205
  %ctpop.sh44 = lshr i64 %57, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %58 = trunc i64 %ctpop.part67 to i32
  %59 = add nsw i32 %58, -15
  %60 = zext i32 %59 to i64
  %61 = shl i64 %0, %60
  %62 = icmp eq i32 %59, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %56
  %64 = shl i64 %4, %60
  %65 = sub nsw i64 15, %ctpop.part67
  %66 = and i64 %65, 63
  %67 = lshr i64 %0, %66
  %68 = or i64 %64, %67
  br label %69

69:                                               ; preds = %63, %56
  %70 = phi i64 [ %68, %63 ], [ %4, %56 ]
  %71 = sub nsw i32 16, %58
  br label %72

72:                                               ; preds = %69, %52, %29
  %73 = phi i64 [ %0, %29 ], [ %54, %52 ], [ %61, %69 ]
  %74 = phi i64 [ %4, %29 ], [ %53, %52 ], [ %70, %69 ]
  %75 = phi i32 [ %7, %29 ], [ %55, %52 ], [ %71, %69 ]
  %76 = add nsw i32 %75, -16383
  %77 = ashr i32 %76, 1
  %78 = add nsw i32 %77, 16382
  %79 = or i64 %74, 281474976710656
  %80 = lshr i64 %79, 17
  %81 = trunc i64 %80 to i32
  %82 = lshr i64 %74, 44
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 15
  %85 = and i32 %75, 1
  %86 = icmp eq i32 %85, 0
  %87 = lshr i64 %79, 34
  %88 = trunc i64 %87 to i32
  %89 = and i32 %88, 32767
  br i1 %86, label %103, label %90

90:                                               ; preds = %72
  %91 = add nuw nsw i32 %89, 16384
  %92 = zext i8 %84 to i64
  %93 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = sub nsw i32 %91, %95
  %97 = udiv i32 %81, %96
  %98 = shl i32 %97, 14
  %99 = shl nsw i32 %96, 15
  %100 = add i32 %99, %98
  %101 = lshr i64 %79, 18
  %102 = and i64 %101, 2147483647
  br label %118

103:                                              ; preds = %72
  %104 = or i32 %89, 32768
  %105 = zext i8 %84 to i64
  %106 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = sub nsw i32 %104, %108
  %110 = udiv i32 %81, %109
  %111 = add i32 %109, %110
  %112 = icmp ugt i32 %111, 131071
  %113 = shl i32 %111, 15
  %114 = select i1 %112, i32 -32768, i32 %113
  %115 = icmp ugt i32 %114, %81
  br i1 %115, label %118, label %116

116:                                              ; preds = %103
  %117 = ashr i32 %81, 1
  br label %128

118:                                              ; preds = %103, %90
  %119 = phi i64 [ %102, %90 ], [ %80, %103 ]
  %120 = phi i32 [ %100, %90 ], [ %114, %103 ]
  %121 = shl i64 %119, 31
  %122 = and i64 %121, 9223372034707292160
  %123 = zext i32 %120 to i64
  %124 = udiv i64 %122, %123
  %125 = trunc i64 %124 to i32
  %126 = lshr i32 %120, 1
  %127 = add i32 %126, %125
  br label %128

128:                                              ; preds = %116, %118
  %129 = phi i32 [ %127, %118 ], [ %117, %116 ]
  %130 = zext i32 %129 to i64
  %131 = sub nuw nsw i32 13, %85
  %132 = zext i32 %131 to i64
  %133 = shl i64 %73, %132
  %134 = shl i64 %79, %132
  %135 = add nuw nsw i32 %85, 51
  %136 = zext i32 %135 to i64
  %137 = lshr i64 %73, %136
  %138 = or i64 %137, %134
  %139 = shl nuw i64 %130, 32
  %140 = icmp ugt i64 %139, %138
  br i1 %140, label %141, label %166

141:                                              ; preds = %128
  %142 = udiv i64 %138, %130
  %143 = shl i64 %142, 32
  %144 = and i64 %142, 4294967295
  %145 = mul nuw i64 %144, %130
  %146 = sub i64 %138, %145
  %147 = icmp slt i64 %146, 0
  br i1 %147, label %148, label %154

148:                                              ; preds = %141, %148
  %149 = phi i64 [ %151, %148 ], [ %143, %141 ]
  %150 = phi i64 [ %152, %148 ], [ %146, %141 ]
  %151 = add i64 %149, -4294967296
  %152 = add i64 %150, %130
  %153 = icmp slt i64 %152, 0
  br i1 %153, label %148, label %154

154:                                              ; preds = %148, %141
  %155 = phi i64 [ %146, %141 ], [ %152, %148 ]
  %156 = phi i64 [ %143, %141 ], [ %151, %148 ]
  %157 = shl i64 %155, 32
  %158 = lshr i64 %133, 32
  %159 = or i64 %157, %158
  %160 = icmp ugt i64 %139, %159
  br i1 %160, label %161, label %163

161:                                              ; preds = %154
  %162 = udiv i64 %159, %130
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i64 [ %162, %161 ], [ 4294967295, %154 ]
  %165 = or i64 %164, %156
  br label %166

166:                                              ; preds = %128, %163
  %167 = phi i64 [ %165, %163 ], [ -1, %128 ]
  %168 = shl nuw nsw i64 %130, 30
  %169 = add i64 %167, %168
  %170 = shl i64 %169, 1
  %171 = lshr i64 %169, 32
  %172 = and i64 %169, 4294967295
  %173 = mul nuw i64 %172, %172
  %174 = mul nuw i64 %171, %172
  %175 = mul nuw i64 %171, %171
  %176 = shl i64 %174, 1
  %177 = icmp ult i64 %176, %174
  %178 = select i1 %177, i64 4294967296, i64 0
  %179 = lshr i64 %174, 31
  %180 = and i64 %179, 4294967295
  %181 = or i64 %178, %180
  %182 = shl i64 %174, 33
  %183 = add i64 %182, %173
  %184 = icmp ult i64 %183, %182
  %185 = sub i64 %133, %183
  %186 = sext i1 %184 to i64
  %187 = icmp ult i64 %133, %183
  %188 = sext i1 %187 to i64
  %189 = sub i64 %138, %175
  %190 = sub i64 %189, %181
  %191 = add i64 %190, %186
  %192 = add i64 %191, %188
  %193 = icmp slt i64 %192, 0
  br i1 %193, label %194, label %209

194:                                              ; preds = %166, %194
  %195 = phi i64 [ %200, %194 ], [ %170, %166 ]
  %196 = phi i64 [ %203, %194 ], [ %185, %166 ]
  %197 = phi i64 [ %207, %194 ], [ %192, %166 ]
  %198 = phi i64 [ %199, %194 ], [ %169, %166 ]
  %199 = add i64 %198, -1
  %200 = add i64 %195, -2
  %201 = lshr i64 %199, 63
  %202 = or i64 %200, 1
  %203 = add i64 %202, %196
  %204 = add nsw i64 %201, %197
  %205 = icmp ult i64 %203, %196
  %206 = zext i1 %205 to i64
  %207 = add nsw i64 %204, %206
  %208 = icmp slt i64 %207, 0
  br i1 %208, label %194, label %209

209:                                              ; preds = %194, %166
  %210 = phi i64 [ %169, %166 ], [ %199, %194 ]
  %211 = phi i64 [ %185, %166 ], [ %203, %194 ]
  %212 = phi i64 [ %170, %166 ], [ %200, %194 ]
  %213 = icmp ugt i64 %212, %211
  br i1 %213, label %214, label %348

214:                                              ; preds = %209
  %215 = lshr i64 %212, 32
  %216 = and i64 %212, -4294967296
  %217 = icmp ugt i64 %216, %211
  br i1 %217, label %218, label %221

218:                                              ; preds = %214
  %219 = udiv i64 %211, %215
  %220 = shl i64 %219, 32
  br label %221

221:                                              ; preds = %218, %214
  %222 = phi i64 [ %220, %218 ], [ -4294967296, %214 ]
  %223 = lshr exact i64 %222, 32
  %224 = and i64 %212, 4294967294
  %225 = mul nuw i64 %223, %224
  %226 = mul nuw i64 %223, %215
  %227 = lshr i64 %225, 32
  %228 = shl i64 %225, 32
  %229 = sub i64 0, %228
  %230 = icmp ne i64 %228, 0
  %231 = sext i1 %230 to i64
  %232 = sub i64 %211, %226
  %233 = sub i64 %232, %227
  %234 = add i64 %233, %231
  %235 = icmp slt i64 %234, 0
  br i1 %235, label %236, label %249

236:                                              ; preds = %221
  %237 = shl i64 %212, 32
  br label %238

238:                                              ; preds = %238, %236
  %239 = phi i64 [ %222, %236 ], [ %242, %238 ]
  %240 = phi i64 [ %234, %236 ], [ %247, %238 ]
  %241 = phi i64 [ %229, %236 ], [ %243, %238 ]
  %242 = add i64 %239, -4294967296
  %243 = add i64 %241, %237
  %244 = add i64 %240, %215
  %245 = icmp ult i64 %243, %241
  %246 = zext i1 %245 to i64
  %247 = add i64 %244, %246
  %248 = icmp slt i64 %247, 0
  br i1 %248, label %238, label %249

249:                                              ; preds = %238, %221
  %250 = phi i64 [ %229, %221 ], [ %243, %238 ]
  %251 = phi i64 [ %234, %221 ], [ %247, %238 ]
  %252 = phi i64 [ %222, %221 ], [ %242, %238 ]
  %253 = shl i64 %251, 32
  %254 = lshr i64 %250, 32
  %255 = or i64 %253, %254
  %256 = icmp ugt i64 %216, %255
  br i1 %256, label %257, label %259

257:                                              ; preds = %249
  %258 = udiv i64 %255, %215
  br label %259

259:                                              ; preds = %249, %257
  %260 = phi i64 [ %258, %257 ], [ 4294967295, %249 ]
  %261 = or i64 %260, %252
  %262 = and i64 %261, 8190
  %263 = icmp ult i64 %262, 6
  br i1 %263, label %264, label %348

264:                                              ; preds = %259
  %265 = icmp eq i64 %261, 0
  %266 = select i1 %265, i64 1, i64 %261
  %267 = lshr i64 %266, 32
  %268 = and i64 %266, 4294967295
  %269 = mul nuw i64 %268, %224
  %270 = mul nuw i64 %267, %224
  %271 = mul nuw i64 %268, %215
  %272 = mul nuw i64 %267, %215
  %273 = add i64 %270, %271
  %274 = icmp ult i64 %273, %271
  %275 = select i1 %274, i64 4294967296, i64 0
  %276 = lshr i64 %273, 32
  %277 = or i64 %275, %276
  %278 = shl i64 %273, 32
  %279 = add i64 %278, %269
  %280 = icmp ult i64 %279, %278
  %281 = sub i64 0, %279
  %282 = sext i1 %280 to i64
  %283 = icmp ne i64 %279, 0
  %284 = sext i1 %283 to i64
  %285 = mul nuw i64 %268, %268
  %286 = mul nuw i64 %267, %268
  %287 = mul nuw i64 %267, %267
  %288 = shl i64 %286, 1
  %289 = icmp ult i64 %288, %286
  %290 = select i1 %289, i64 4294967296, i64 0
  %291 = lshr i64 %286, 31
  %292 = and i64 %291, 4294967295
  %293 = or i64 %290, %292
  %294 = add i64 %293, %287
  %295 = shl i64 %286, 33
  %296 = add i64 %295, %285
  %297 = icmp ult i64 %296, %295
  %298 = zext i1 %297 to i64
  %299 = add i64 %294, %298
  %300 = sub i64 0, %296
  %301 = icmp ne i64 %296, 0
  %302 = sub i64 %281, %299
  %303 = icmp ugt i64 %299, %281
  %304 = zext i1 %301 to i64
  %305 = icmp ult i64 %302, %304
  %306 = sext i1 %305 to i64
  %307 = sub i64 %302, %304
  %308 = sext i1 %303 to i64
  %309 = sub i64 %211, %272
  %310 = sub i64 %309, %277
  %311 = add i64 %310, %282
  %312 = add i64 %311, %284
  %313 = add i64 %312, %308
  %314 = add i64 %313, %306
  %315 = icmp slt i64 %314, 0
  br i1 %315, label %316, label %338

316:                                              ; preds = %264, %316
  %317 = phi i64 [ %326, %316 ], [ %300, %264 ]
  %318 = phi i64 [ %331, %316 ], [ %307, %264 ]
  %319 = phi i64 [ %336, %316 ], [ %314, %264 ]
  %320 = phi i64 [ %321, %316 ], [ %266, %264 ]
  %321 = add i64 %320, -1
  %322 = shl i64 %321, 1
  %323 = lshr i64 %321, 63
  %324 = or i64 %322, 1
  %325 = or i64 %323, %212
  %326 = add i64 %324, %317
  %327 = icmp ult i64 %326, %317
  %328 = add i64 %325, %318
  %329 = icmp ult i64 %328, %318
  %330 = zext i1 %327 to i64
  %331 = add i64 %328, %330
  %332 = icmp ult i64 %331, %330
  %333 = zext i1 %332 to i64
  %334 = zext i1 %329 to i64
  %335 = add nsw i64 %319, %334
  %336 = add nsw i64 %335, %333
  %337 = icmp slt i64 %336, 0
  br i1 %337, label %316, label %338

338:                                              ; preds = %316, %264
  %339 = phi i64 [ %266, %264 ], [ %321, %316 ]
  %340 = phi i64 [ %314, %264 ], [ %336, %316 ]
  %341 = phi i64 [ %307, %264 ], [ %331, %316 ]
  %342 = phi i64 [ %300, %264 ], [ %326, %316 ]
  %343 = or i64 %341, %340
  %344 = or i64 %343, %342
  %345 = icmp ne i64 %344, 0
  %346 = zext i1 %345 to i64
  %347 = or i64 %339, %346
  br label %348

348:                                              ; preds = %209, %338, %259
  %349 = phi i64 [ %347, %338 ], [ %261, %259 ], [ -1, %209 ]
  %350 = shl i64 %349, 50
  %351 = shl i64 %210, 50
  %352 = lshr i64 %349, 14
  %353 = or i64 %352, %351
  %354 = lshr i64 %210, 14
  %355 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext 0, i32 %78, i64 %354, i64 %353, i64 %350, %struct.float_status* %2)
  %356 = extractvalue { i64, i64 } %355, 0
  %357 = extractvalue { i64, i64 } %355, 1
  br label %358

358:                                              ; preds = %31, %20, %16, %348, %25, %12
  %359 = phi i64 [ %14, %12 ], [ 0, %25 ], [ %356, %348 ], [ %0, %16 ], [ %0, %20 ], [ 0, %31 ]
  %360 = phi i64 [ %15, %12 ], [ -140737488355328, %25 ], [ %357, %348 ], [ %1, %16 ], [ %1, %20 ], [ 0, %31 ]
  %361 = insertvalue { i64, i64 } undef, i64 %359, 0
  %362 = insertvalue { i64, i64 } %361, i64 %360, 1
  ret { i64, i64 } %362
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_eq(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %8, %15
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %34

23:                                               ; preds = %15, %12
  %24 = icmp eq i64 %0, %2
  br i1 %24, label %25, label %34

25:                                               ; preds = %23
  %26 = icmp eq i64 %1, %3
  br i1 %26, label %34, label %27

27:                                               ; preds = %25
  %28 = icmp eq i64 %0, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = or i64 %3, %1
  %31 = and i64 %30, 9223372036854775807
  %32 = icmp eq i64 %31, 0
  %33 = zext i1 %32 to i32
  br label %34

34:                                               ; preds = %23, %27, %29, %25, %19
  %35 = phi i32 [ 0, %19 ], [ 0, %23 ], [ 1, %25 ], [ 0, %27 ], [ %33, %29 ]
  ret i32 %35
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_le(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %8, %15
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %50

23:                                               ; preds = %15, %12
  %24 = lshr i64 %1, 63
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %3, 63
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  %29 = icmp slt i64 %1, 0
  br i1 %28, label %37, label %30

30:                                               ; preds = %23
  br i1 %29, label %50, label %31

31:                                               ; preds = %30
  %32 = or i64 %3, %1
  %33 = shl i64 %32, 1
  %34 = or i64 %2, %0
  %35 = or i64 %34, %33
  %36 = icmp eq i64 %35, 0
  br label %50

37:                                               ; preds = %23
  br i1 %29, label %38, label %44

38:                                               ; preds = %37
  %39 = icmp ult i64 %3, %1
  %40 = icmp eq i64 %3, %1
  %41 = icmp ule i64 %2, %0
  %42 = and i1 %41, %40
  %43 = or i1 %39, %42
  br label %50

44:                                               ; preds = %37
  %45 = icmp ult i64 %1, %3
  %46 = icmp eq i64 %1, %3
  %47 = icmp ule i64 %0, %2
  %48 = and i1 %47, %46
  %49 = or i1 %45, %48
  br label %50

50:                                               ; preds = %38, %44, %30, %31, %19
  %51 = phi i1 [ false, %19 ], [ true, %30 ], [ %36, %31 ], [ %43, %38 ], [ %49, %44 ]
  %52 = zext i1 %51 to i32
  ret i32 %52
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_lt(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %8, %15
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %50

23:                                               ; preds = %15, %12
  %24 = lshr i64 %1, 63
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %3, 63
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  %29 = icmp slt i64 %1, 0
  br i1 %28, label %37, label %30

30:                                               ; preds = %23
  br i1 %29, label %31, label %50

31:                                               ; preds = %30
  %32 = or i64 %3, %1
  %33 = shl i64 %32, 1
  %34 = or i64 %2, %0
  %35 = or i64 %34, %33
  %36 = icmp ne i64 %35, 0
  br label %50

37:                                               ; preds = %23
  br i1 %29, label %38, label %44

38:                                               ; preds = %37
  %39 = icmp ult i64 %3, %1
  %40 = icmp eq i64 %3, %1
  %41 = icmp ult i64 %2, %0
  %42 = and i1 %41, %40
  %43 = or i1 %39, %42
  br label %50

44:                                               ; preds = %37
  %45 = icmp ult i64 %1, %3
  %46 = icmp eq i64 %1, %3
  %47 = icmp ult i64 %0, %2
  %48 = and i1 %47, %46
  %49 = or i1 %45, %48
  br label %50

50:                                               ; preds = %38, %44, %30, %31, %19
  %51 = phi i1 [ false, %19 ], [ false, %30 ], [ %36, %31 ], [ %43, %38 ], [ %49, %44 ]
  %52 = zext i1 %51 to i32
  ret i32 %52
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_unordered(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %8, %15
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %23

23:                                               ; preds = %12, %15, %19
  %24 = phi i32 [ 1, %19 ], [ 0, %15 ], [ 0, %12 ]
  ret i32 %24
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_eq_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %37

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %8, %15
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp ne i64 %20, 9223090561878065152
  %22 = and i64 %1, 140737488355327
  %23 = or i64 %22, %0
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %21, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = and i64 %3, 9223231299366420480
  %28 = icmp ne i64 %27, 9223090561878065152
  %29 = and i64 %3, 140737488355327
  %30 = or i64 %29, %2
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %28, %31
  br i1 %32, label %48, label %33

33:                                               ; preds = %26, %19
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %48

37:                                               ; preds = %15, %12
  %38 = icmp eq i64 %0, %2
  br i1 %38, label %39, label %48

39:                                               ; preds = %37
  %40 = icmp eq i64 %1, %3
  br i1 %40, label %48, label %41

41:                                               ; preds = %39
  %42 = icmp eq i64 %0, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %41
  %44 = or i64 %3, %1
  %45 = and i64 %44, 9223372036854775807
  %46 = icmp eq i64 %45, 0
  %47 = zext i1 %46 to i32
  br label %48

48:                                               ; preds = %37, %41, %43, %39, %33, %26
  %49 = phi i32 [ 0, %26 ], [ 0, %33 ], [ 0, %37 ], [ 1, %39 ], [ 0, %41 ], [ %47, %43 ]
  ret i32 %49
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_le_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %37

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %8, %15
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp ne i64 %20, 9223090561878065152
  %22 = and i64 %1, 140737488355327
  %23 = or i64 %22, %0
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %21, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = and i64 %3, 9223231299366420480
  %28 = icmp ne i64 %27, 9223090561878065152
  %29 = and i64 %3, 140737488355327
  %30 = or i64 %29, %2
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %28, %31
  br i1 %32, label %64, label %33

33:                                               ; preds = %26, %19
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %64

37:                                               ; preds = %15, %12
  %38 = lshr i64 %1, 63
  %39 = trunc i64 %38 to i8
  %40 = lshr i64 %3, 63
  %41 = trunc i64 %40 to i8
  %42 = icmp eq i8 %39, %41
  %43 = icmp slt i64 %1, 0
  br i1 %42, label %51, label %44

44:                                               ; preds = %37
  br i1 %43, label %64, label %45

45:                                               ; preds = %44
  %46 = or i64 %3, %1
  %47 = shl i64 %46, 1
  %48 = or i64 %2, %0
  %49 = or i64 %48, %47
  %50 = icmp eq i64 %49, 0
  br label %64

51:                                               ; preds = %37
  br i1 %43, label %52, label %58

52:                                               ; preds = %51
  %53 = icmp ult i64 %3, %1
  %54 = icmp eq i64 %3, %1
  %55 = icmp ule i64 %2, %0
  %56 = and i1 %55, %54
  %57 = or i1 %53, %56
  br label %64

58:                                               ; preds = %51
  %59 = icmp ult i64 %1, %3
  %60 = icmp eq i64 %1, %3
  %61 = icmp ule i64 %0, %2
  %62 = and i1 %61, %60
  %63 = or i1 %59, %62
  br label %64

64:                                               ; preds = %52, %58, %44, %45, %33, %26
  %65 = phi i1 [ false, %26 ], [ false, %33 ], [ true, %44 ], [ %50, %45 ], [ %57, %52 ], [ %63, %58 ]
  %66 = zext i1 %65 to i32
  ret i32 %66
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_lt_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %37

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %8, %15
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp ne i64 %20, 9223090561878065152
  %22 = and i64 %1, 140737488355327
  %23 = or i64 %22, %0
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %21, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = and i64 %3, 9223231299366420480
  %28 = icmp ne i64 %27, 9223090561878065152
  %29 = and i64 %3, 140737488355327
  %30 = or i64 %29, %2
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %28, %31
  br i1 %32, label %64, label %33

33:                                               ; preds = %26, %19
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %64

37:                                               ; preds = %15, %12
  %38 = lshr i64 %1, 63
  %39 = trunc i64 %38 to i8
  %40 = lshr i64 %3, 63
  %41 = trunc i64 %40 to i8
  %42 = icmp eq i8 %39, %41
  %43 = icmp slt i64 %1, 0
  br i1 %42, label %51, label %44

44:                                               ; preds = %37
  br i1 %43, label %45, label %64

45:                                               ; preds = %44
  %46 = or i64 %3, %1
  %47 = shl i64 %46, 1
  %48 = or i64 %2, %0
  %49 = or i64 %48, %47
  %50 = icmp ne i64 %49, 0
  br label %64

51:                                               ; preds = %37
  br i1 %43, label %52, label %58

52:                                               ; preds = %51
  %53 = icmp ult i64 %3, %1
  %54 = icmp eq i64 %3, %1
  %55 = icmp ult i64 %2, %0
  %56 = and i1 %55, %54
  %57 = or i1 %53, %56
  br label %64

58:                                               ; preds = %51
  %59 = icmp ult i64 %1, %3
  %60 = icmp eq i64 %1, %3
  %61 = icmp ult i64 %0, %2
  %62 = and i1 %61, %60
  %63 = or i1 %59, %62
  br label %64

64:                                               ; preds = %52, %58, %44, %45, %33, %26
  %65 = phi i1 [ false, %26 ], [ false, %33 ], [ false, %44 ], [ %50, %45 ], [ %57, %52 ], [ %63, %58 ]
  %66 = zext i1 %65 to i32
  ret i32 %66
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_unordered_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %37

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %8, %15
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp ne i64 %20, 9223090561878065152
  %22 = and i64 %1, 140737488355327
  %23 = or i64 %22, %0
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %21, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = and i64 %3, 9223231299366420480
  %28 = icmp ne i64 %27, 9223090561878065152
  %29 = and i64 %3, 140737488355327
  %30 = or i64 %29, %2
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %28, %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %26, %19
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %12, %15, %33, %26
  %38 = phi i32 [ 1, %26 ], [ 1, %33 ], [ 0, %15 ], [ 0, %12 ]
  ret i32 %38
}

; Function Attrs: nofree nounwind uwtable
define i32 @uint32_to_float32(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #19 {
  %3 = zext i32 %0 to i64
  %4 = icmp eq i32 %0, 0
  br i1 %4, label %42, label %5

5:                                                ; preds = %2
  %ctlz.sh = lshr i64 %3, 1
  %ctlz.step = or i64 %3, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %6 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %6, 6148914691236517205
  %ctpop.sh = lshr i64 %6, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %7 = trunc i64 %ctpop.part to i8
  %8 = add nsw i8 %7, -40
  %9 = sext i8 %8 to i32
  %10 = icmp ugt i8 %7, 39
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = zext i32 %9 to i64
  %13 = shl i64 %3, %12
  %14 = trunc i64 %13 to i32
  %15 = shl nsw i32 %9, 23
  %16 = sub i32 1249902592, %15
  %17 = add i32 %16, %14
  br label %42

18:                                               ; preds = %5
  %19 = add nsw i8 %7, -33
  %20 = sext i8 %19 to i32
  %21 = icmp ult i8 %7, 33
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = icmp eq i8 %19, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %22
  %25 = sub nsw i32 0, %20
  %26 = zext i32 %25 to i64
  %27 = lshr i64 %3, %26
  %28 = and i32 %20, 63
  %29 = zext i32 %28 to i64
  %30 = shl i64 %3, %29
  %31 = icmp ne i64 %30, 0
  %32 = zext i1 %31 to i64
  %33 = or i64 %27, %32
  br label %37

34:                                               ; preds = %18
  %35 = zext i32 %20 to i64
  %36 = shl i64 %3, %35
  br label %37

37:                                               ; preds = %34, %24, %22
  %38 = phi i64 [ %36, %34 ], [ %33, %24 ], [ %3, %22 ]
  %39 = sub nsw i32 156, %20
  %40 = trunc i64 %38 to i32
  %41 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext 0, i32 %39, i32 %40, %struct.float_status* %1) #23
  br label %42

42:                                               ; preds = %2, %11, %37
  %43 = phi i32 [ %17, %11 ], [ %41, %37 ], [ 0, %2 ]
  ret i32 %43
}

; Function Attrs: nofree nounwind uwtable
define i64 @uint32_to_float64(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #19 {
  %3 = zext i32 %0 to i64
  %4 = icmp eq i32 %0, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %ctlz.sh = lshr i64 %3, 1
  %ctlz.step = or i64 %3, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %6 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %6, 6148914691236517205
  %ctpop.sh = lshr i64 %6, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %7 = trunc i64 %ctpop.part to i32
  %8 = add nuw nsw i64 %ctpop.part, 4294967295
  %9 = sub nuw nsw i32 1085, %7
  %10 = and i64 %8, 4294967295
  %11 = shl i64 %3, %10
  %12 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext 0, i32 %9, i64 %11, %struct.float_status* %1) #23
  br label %13

13:                                               ; preds = %2, %5
  %14 = phi i64 [ %12, %5 ], [ 0, %2 ]
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define i32 @float32_to_uint32(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = tail call i64 @float32_to_int64(i32 %0, %struct.float_status* %1)
  %4 = icmp slt i64 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, 1
  store i8 %8, i8* %6, align 1
  br label %17

9:                                                ; preds = %2
  %10 = icmp sgt i64 %3, 4294967295
  br i1 %10, label %11, label %15

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = or i8 %13, 1
  store i8 %14, i8* %12, align 1
  br label %17

15:                                               ; preds = %9
  %16 = trunc i64 %3 to i32
  br label %17

17:                                               ; preds = %11, %15, %5
  %18 = phi i32 [ 0, %5 ], [ -1, %11 ], [ %16, %15 ]
  ret i32 %18
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_to_uint32_round_to_zero(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 189
  br i1 %23, label %24, label %35

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -553648128
  br i1 %25, label %63, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %72, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %72, label %63

35:                                               ; preds = %17
  %36 = icmp ult i32 %21, 127
  br i1 %36, label %37, label %44

37:                                               ; preds = %35
  %38 = or i32 %21, %19
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %76, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 32
  store i8 %43, i8* %41, align 1
  br label %76

44:                                               ; preds = %35
  %45 = or i32 %18, 8388608
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 40
  %48 = sub nuw nsw i32 190, %21
  %49 = zext i32 %48 to i64
  %50 = lshr i64 %47, %49
  %51 = and i32 %22, 63
  %52 = zext i32 %51 to i64
  %53 = shl i64 %47, %52
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %44
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %44
  %60 = icmp sgt i32 %18, -1
  br i1 %60, label %67, label %61

61:                                               ; preds = %59
  %62 = icmp sgt i64 %50, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %31, %24, %61
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %65 = load i8, i8* %64, align 1
  %66 = or i8 %65, 1
  store i8 %66, i8* %64, align 1
  br label %79

67:                                               ; preds = %59
  %68 = icmp sgt i64 %50, 4294967295
  br i1 %68, label %69, label %76

69:                                               ; preds = %67
  %70 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %71 = load i8, i8* %70, align 1
  br label %72

72:                                               ; preds = %69, %26, %31
  %73 = phi i8 [ %71, %69 ], [ %29, %26 ], [ %29, %31 ]
  %74 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %75 = or i8 %73, 1
  store i8 %75, i8* %74, align 1
  br label %79

76:                                               ; preds = %37, %40, %61, %67
  %77 = phi i64 [ %50, %67 ], [ 0, %61 ], [ 0, %40 ], [ 0, %37 ]
  %78 = trunc i64 %77 to i32
  br label %79

79:                                               ; preds = %72, %76, %63
  %80 = phi i32 [ 0, %63 ], [ -1, %72 ], [ %78, %76 ]
  ret i32 %80
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_to_uint16_round_to_zero(i32 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i32 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 189
  br i1 %23, label %24, label %35

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -553648128
  br i1 %25, label %63, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %72, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %72, label %63

35:                                               ; preds = %17
  %36 = icmp ult i32 %21, 127
  br i1 %36, label %37, label %44

37:                                               ; preds = %35
  %38 = or i32 %21, %19
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %76, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 32
  store i8 %43, i8* %41, align 1
  br label %76

44:                                               ; preds = %35
  %45 = or i32 %18, 8388608
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 40
  %48 = sub nuw nsw i32 190, %21
  %49 = zext i32 %48 to i64
  %50 = lshr i64 %47, %49
  %51 = and i32 %22, 63
  %52 = zext i32 %51 to i64
  %53 = shl i64 %47, %52
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %44
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %44
  %60 = icmp sgt i32 %18, -1
  br i1 %60, label %67, label %61

61:                                               ; preds = %59
  %62 = icmp sgt i64 %50, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %31, %24, %61
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %65 = load i8, i8* %64, align 1
  %66 = or i8 %65, 1
  store i8 %66, i8* %64, align 1
  br label %79

67:                                               ; preds = %59
  %68 = icmp sgt i64 %50, 65535
  br i1 %68, label %69, label %76

69:                                               ; preds = %67
  %70 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %71 = load i8, i8* %70, align 1
  br label %72

72:                                               ; preds = %69, %26, %31
  %73 = phi i8 [ %71, %69 ], [ %29, %26 ], [ %29, %31 ]
  %74 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %75 = or i8 %73, 1
  store i8 %75, i8* %74, align 1
  br label %79

76:                                               ; preds = %37, %40, %61, %67
  %77 = phi i64 [ %50, %67 ], [ 0, %61 ], [ 0, %40 ], [ 0, %37 ]
  %78 = trunc i64 %77 to i32
  br label %79

79:                                               ; preds = %72, %76, %63
  %80 = phi i32 [ 0, %63 ], [ 65535, %72 ], [ %78, %76 ]
  ret i32 %80
}

; Function Attrs: nounwind uwtable
define i32 @float64_to_uint32(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = tail call i64 @float64_to_int64(i64 %0, %struct.float_status* %1)
  %4 = icmp slt i64 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, 1
  store i8 %8, i8* %6, align 1
  br label %17

9:                                                ; preds = %2
  %10 = icmp sgt i64 %3, 4294967295
  br i1 %10, label %11, label %15

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = or i8 %13, 1
  store i8 %14, i8* %12, align 1
  br label %17

15:                                               ; preds = %9
  %16 = trunc i64 %3 to i32
  br label %17

17:                                               ; preds = %11, %15, %5
  %18 = phi i32 [ 0, %5 ], [ -1, %11 ], [ %16, %15 ]
  ret i32 %18
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_to_uint32_round_to_zero(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  %24 = or i64 %19, 4503599627370496
  %25 = select i1 %23, i64 %19, i64 %24
  %26 = add nsw i32 %22, -1075
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %44

28:                                               ; preds = %17
  %29 = icmp ugt i32 %22, 1085
  br i1 %29, label %30, label %41

30:                                               ; preds = %28
  %31 = icmp eq i64 %18, -4332462841530417152
  br i1 %31, label %72, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = icmp sgt i64 %18, -1
  br i1 %36, label %81, label %37

37:                                               ; preds = %32
  %38 = icmp eq i32 %22, 2047
  %39 = icmp ne i64 %25, 4503599627370496
  %40 = and i1 %38, %39
  br i1 %40, label %81, label %72

41:                                               ; preds = %28
  %42 = zext i32 %26 to i64
  %43 = shl i64 %25, %42
  br label %66

44:                                               ; preds = %17
  %45 = icmp ult i32 %22, 1022
  br i1 %45, label %46, label %54

46:                                               ; preds = %44
  %47 = zext i32 %22 to i64
  %48 = or i64 %25, %47
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %85, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %52, 32
  store i8 %53, i8* %51, align 1
  br label %85

54:                                               ; preds = %44
  %55 = sub nuw nsw i32 1075, %22
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %25, %56
  %58 = and i32 %26, 63
  %59 = zext i32 %58 to i64
  %60 = shl i64 %25, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %64, 32
  store i8 %65, i8* %63, align 1
  br label %66

66:                                               ; preds = %41, %54, %62
  %67 = phi i64 [ %43, %41 ], [ %57, %62 ], [ %57, %54 ]
  %68 = icmp sgt i64 %18, -1
  %69 = sub nsw i64 0, %67
  %70 = select i1 %68, i64 %67, i64 %69
  %71 = icmp slt i64 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %37, %30, %66
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = or i8 %74, 1
  store i8 %75, i8* %73, align 1
  br label %88

76:                                               ; preds = %66
  %77 = icmp sgt i64 %70, 4294967295
  br i1 %77, label %78, label %85

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %80 = load i8, i8* %79, align 1
  br label %81

81:                                               ; preds = %78, %32, %37
  %82 = phi i8 [ %80, %78 ], [ %35, %32 ], [ %35, %37 ]
  %83 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %84 = or i8 %82, 1
  store i8 %84, i8* %83, align 1
  br label %88

85:                                               ; preds = %46, %50, %76
  %86 = phi i64 [ %70, %76 ], [ 0, %50 ], [ 0, %46 ]
  %87 = trunc i64 %86 to i32
  br label %88

88:                                               ; preds = %81, %85, %72
  %89 = phi i32 [ 0, %72 ], [ -1, %81 ], [ %87, %85 ]
  ret i32 %89
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_to_uint16_round_to_zero(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i64 [ %16, %12 ], [ %0, %2 ], [ %0, %6 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  %24 = or i64 %19, 4503599627370496
  %25 = select i1 %23, i64 %19, i64 %24
  %26 = add nsw i32 %22, -1075
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %44

28:                                               ; preds = %17
  %29 = icmp ugt i32 %22, 1085
  br i1 %29, label %30, label %41

30:                                               ; preds = %28
  %31 = icmp eq i64 %18, -4332462841530417152
  br i1 %31, label %72, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = icmp sgt i64 %18, -1
  br i1 %36, label %81, label %37

37:                                               ; preds = %32
  %38 = icmp eq i32 %22, 2047
  %39 = icmp ne i64 %25, 4503599627370496
  %40 = and i1 %38, %39
  br i1 %40, label %81, label %72

41:                                               ; preds = %28
  %42 = zext i32 %26 to i64
  %43 = shl i64 %25, %42
  br label %66

44:                                               ; preds = %17
  %45 = icmp ult i32 %22, 1022
  br i1 %45, label %46, label %54

46:                                               ; preds = %44
  %47 = zext i32 %22 to i64
  %48 = or i64 %25, %47
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %85, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %52, 32
  store i8 %53, i8* %51, align 1
  br label %85

54:                                               ; preds = %44
  %55 = sub nuw nsw i32 1075, %22
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %25, %56
  %58 = and i32 %26, 63
  %59 = zext i32 %58 to i64
  %60 = shl i64 %25, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %64, 32
  store i8 %65, i8* %63, align 1
  br label %66

66:                                               ; preds = %41, %54, %62
  %67 = phi i64 [ %43, %41 ], [ %57, %62 ], [ %57, %54 ]
  %68 = icmp sgt i64 %18, -1
  %69 = sub nsw i64 0, %67
  %70 = select i1 %68, i64 %67, i64 %69
  %71 = icmp slt i64 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %37, %30, %66
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = or i8 %74, 1
  store i8 %75, i8* %73, align 1
  br label %88

76:                                               ; preds = %66
  %77 = icmp sgt i64 %70, 65535
  br i1 %77, label %78, label %85

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %80 = load i8, i8* %79, align 1
  br label %81

81:                                               ; preds = %78, %32, %37
  %82 = phi i8 [ %80, %78 ], [ %35, %32 ], [ %35, %37 ]
  %83 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %84 = or i8 %82, 1
  store i8 %84, i8* %83, align 1
  br label %88

85:                                               ; preds = %46, %50, %76
  %86 = phi i64 [ %70, %76 ], [ 0, %50 ], [ 0, %46 ]
  %87 = trunc i64 %86 to i32
  br label %88

88:                                               ; preds = %81, %85, %72
  %89 = phi i32 [ 0, %72 ], [ 65535, %81 ], [ %87, %85 ]
  ret i32 %89
}

; Function Attrs: nounwind uwtable
define i64 @float64_to_uint64(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #13 {
  %3 = add i64 %0, -4332462841530417152
  %4 = tail call i64 @float64_to_int64(i64 %3, %struct.float_status* %1)
  %5 = xor i64 %4, -9223372036854775808
  ret i64 %5
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float64_to_uint64_round_to_zero(i64 %0, %struct.float_status* nocapture %1) local_unnamed_addr #2 {
  %3 = add i64 %0, -4332462841530417152
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2
  %8 = and i64 %3, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %3, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %3, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7, %2
  %19 = phi i64 [ %17, %13 ], [ %3, %2 ], [ %3, %7 ]
  %20 = and i64 %19, 4503599627370495
  %21 = lshr i64 %19, 52
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2047
  %24 = icmp eq i32 %23, 0
  %25 = or i64 %20, 4503599627370496
  %26 = select i1 %24, i64 %20, i64 %25
  %27 = add nsw i32 %23, -1075
  %28 = icmp ugt i32 %23, 1074
  br i1 %28, label %29, label %46

29:                                               ; preds = %18
  %30 = icmp ugt i32 %23, 1085
  br i1 %30, label %31, label %43

31:                                               ; preds = %29
  %32 = icmp eq i64 %19, -4332462841530417152
  br i1 %32, label %42, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  %37 = icmp sgt i64 %19, -1
  br i1 %37, label %74, label %38

38:                                               ; preds = %33
  %39 = icmp eq i32 %23, 2047
  %40 = icmp ne i64 %26, 4503599627370496
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %38, %31
  br label %74

43:                                               ; preds = %29
  %44 = zext i32 %27 to i64
  %45 = shl i64 %26, %44
  br label %68

46:                                               ; preds = %18
  %47 = icmp ult i32 %23, 1022
  br i1 %47, label %48, label %56

48:                                               ; preds = %46
  %49 = zext i32 %23 to i64
  %50 = or i64 %26, %49
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %74, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %54, 32
  store i8 %55, i8* %53, align 1
  br label %74

56:                                               ; preds = %46
  %57 = sub nuw nsw i32 1075, %23
  %58 = zext i32 %57 to i64
  %59 = lshr i64 %26, %58
  %60 = and i32 %27, 63
  %61 = zext i32 %60 to i64
  %62 = shl i64 %26, %61
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %56
  %65 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %66, 32
  store i8 %67, i8* %65, align 1
  br label %68

68:                                               ; preds = %64, %56, %43
  %69 = phi i64 [ %45, %43 ], [ %59, %64 ], [ %59, %56 ]
  %70 = icmp sgt i64 %19, -1
  %71 = sub nsw i64 0, %69
  %72 = select i1 %70, i64 %69, i64 %71
  %73 = xor i64 %72, -9223372036854775808
  br label %74

74:                                               ; preds = %33, %38, %42, %48, %52, %68
  %75 = phi i64 [ 0, %42 ], [ %73, %68 ], [ -1, %33 ], [ -1, %38 ], [ -9223372036854775808, %48 ], [ -9223372036854775808, %52 ]
  ret i64 %75
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_compare(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %69

48:                                               ; preds = %38
  %49 = lshr i32 %31, 31
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %32, 31
  %52 = trunc i32 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %61, label %54

54:                                               ; preds = %48
  %55 = or i32 %32, %31
  %56 = and i32 %55, 2147483647
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %54
  %59 = shl nuw nsw i32 %49, 1
  %60 = sub nsw i32 1, %59
  br label %69

61:                                               ; preds = %48
  %62 = icmp eq i32 %31, %32
  br i1 %62, label %69, label %63

63:                                               ; preds = %61
  %64 = icmp ult i32 %31, %32
  %65 = zext i1 %64 to i32
  %66 = xor i32 %49, %65
  %67 = shl nuw nsw i32 %66, 1
  %68 = sub nsw i32 1, %67
  br label %69

69:                                               ; preds = %44, %54, %58, %61, %63
  %70 = phi i32 [ %60, %58 ], [ %68, %63 ], [ 2, %44 ], [ 0, %54 ], [ 0, %61 ]
  ret i32 %70
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_compare_quiet(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %81, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %81

60:                                               ; preds = %38
  %61 = lshr i32 %31, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %32, 31
  %64 = trunc i32 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %73, label %66

66:                                               ; preds = %60
  %67 = or i32 %32, %31
  %68 = and i32 %67, 2147483647
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %81, label %70

70:                                               ; preds = %66
  %71 = shl nuw nsw i32 %61, 1
  %72 = sub nsw i32 1, %71
  br label %81

73:                                               ; preds = %60
  %74 = icmp eq i32 %31, %32
  br i1 %74, label %81, label %75

75:                                               ; preds = %73
  %76 = icmp ult i32 %31, %32
  %77 = zext i1 %76 to i32
  %78 = xor i32 %61, %77
  %79 = shl nuw nsw i32 %78, 1
  %80 = sub nsw i32 1, %79
  br label %81

81:                                               ; preds = %50, %56, %66, %70, %73, %75
  %82 = phi i32 [ %72, %70 ], [ %80, %75 ], [ 2, %50 ], [ 2, %56 ], [ 0, %66 ], [ 0, %73 ]
  ret i32 %82
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_compare(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %71

48:                                               ; preds = %38
  %49 = lshr i64 %31, 63
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %32, 63
  %52 = trunc i64 %51 to i8
  %53 = trunc i64 %49 to i32
  %54 = icmp eq i8 %50, %52
  br i1 %54, label %63, label %55

55:                                               ; preds = %48
  %56 = or i64 %32, %31
  %57 = and i64 %56, 9223372036854775807
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %55
  %60 = shl nuw nsw i64 %49, 1
  %61 = trunc i64 %60 to i32
  %62 = sub nsw i32 1, %61
  br label %71

63:                                               ; preds = %48
  %64 = icmp eq i64 %31, %32
  br i1 %64, label %71, label %65

65:                                               ; preds = %63
  %66 = icmp ult i64 %31, %32
  %67 = zext i1 %66 to i32
  %68 = xor i32 %67, %53
  %69 = shl nuw nsw i32 %68, 1
  %70 = sub nsw i32 1, %69
  br label %71

71:                                               ; preds = %44, %55, %59, %63, %65
  %72 = phi i32 [ %62, %59 ], [ %70, %65 ], [ 2, %44 ], [ 0, %55 ], [ 0, %63 ]
  ret i32 %72
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float64_compare_quiet(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %54, %52
  br i1 %55, label %83, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %83

60:                                               ; preds = %38
  %61 = lshr i64 %31, 63
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %32, 63
  %64 = trunc i64 %63 to i8
  %65 = trunc i64 %61 to i32
  %66 = icmp eq i8 %62, %64
  br i1 %66, label %75, label %67

67:                                               ; preds = %60
  %68 = or i64 %32, %31
  %69 = and i64 %68, 9223372036854775807
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %83, label %71

71:                                               ; preds = %67
  %72 = shl nuw nsw i64 %61, 1
  %73 = trunc i64 %72 to i32
  %74 = sub nsw i32 1, %73
  br label %83

75:                                               ; preds = %60
  %76 = icmp eq i64 %31, %32
  br i1 %76, label %83, label %77

77:                                               ; preds = %75
  %78 = icmp ult i64 %31, %32
  %79 = zext i1 %78 to i32
  %80 = xor i32 %79, %65
  %81 = shl nuw nsw i32 %80, 1
  %82 = sub nsw i32 1, %81
  br label %83

83:                                               ; preds = %50, %56, %67, %71, %75, %77
  %84 = phi i32 [ %74, %71 ], [ %82, %77 ], [ 2, %50 ], [ 2, %56 ], [ 0, %67 ], [ 0, %75 ]
  ret i32 %84
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_compare(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %52

21:                                               ; preds = %11
  %22 = lshr i16 %1, 15
  %23 = trunc i16 %22 to i8
  %24 = lshr i16 %3, 15
  %25 = trunc i16 %24 to i8
  %26 = icmp eq i8 %23, %25
  br i1 %26, label %38, label %27

27:                                               ; preds = %21
  %28 = or i16 %3, %1
  %29 = and i16 %28, 32767
  %30 = icmp eq i16 %29, 0
  %31 = or i64 %2, %0
  %32 = icmp eq i64 %31, 0
  %33 = and i1 %32, %30
  br i1 %33, label %52, label %34

34:                                               ; preds = %27
  %35 = shl nuw nsw i16 %22, 1
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 1, %36
  br label %52

38:                                               ; preds = %21
  %39 = icmp eq i64 %0, %2
  %40 = icmp eq i16 %1, %3
  %41 = and i1 %39, %40
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = icmp ult i16 %1, %3
  %44 = icmp ult i64 %0, %2
  %45 = and i1 %44, %40
  %46 = or i1 %43, %45
  %47 = zext i1 %46 to i8
  %48 = xor i8 %47, %23
  %49 = shl nuw nsw i8 %48, 1
  %50 = zext i8 %49 to i32
  %51 = sub nsw i32 1, %50
  br label %52

52:                                               ; preds = %17, %27, %34, %38, %42
  %53 = phi i32 [ %37, %34 ], [ %51, %42 ], [ 2, %17 ], [ 0, %27 ], [ 0, %38 ]
  ret i32 %53
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @floatx80_compare_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %38, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = icmp eq i16 %6, 32767
  %20 = and i64 %0, 4611686018427387903
  %21 = icmp ne i64 %20, 0
  %22 = icmp eq i64 %18, %0
  %23 = and i1 %21, %19
  %24 = and i1 %22, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %17
  %26 = and i64 %2, -4611686018427387905
  %27 = and i16 %3, 32767
  %28 = icmp eq i16 %27, 32767
  %29 = and i64 %2, 4611686018427387903
  %30 = icmp ne i64 %29, 0
  %31 = icmp eq i64 %26, %2
  %32 = and i1 %30, %28
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %69

34:                                               ; preds = %25, %17
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %69

38:                                               ; preds = %11
  %39 = lshr i16 %1, 15
  %40 = trunc i16 %39 to i8
  %41 = lshr i16 %3, 15
  %42 = trunc i16 %41 to i8
  %43 = icmp eq i8 %40, %42
  br i1 %43, label %55, label %44

44:                                               ; preds = %38
  %45 = or i16 %3, %1
  %46 = and i16 %45, 32767
  %47 = icmp eq i16 %46, 0
  %48 = or i64 %2, %0
  %49 = icmp eq i64 %48, 0
  %50 = and i1 %49, %47
  br i1 %50, label %69, label %51

51:                                               ; preds = %44
  %52 = shl nuw nsw i16 %39, 1
  %53 = zext i16 %52 to i32
  %54 = sub nsw i32 1, %53
  br label %69

55:                                               ; preds = %38
  %56 = icmp eq i64 %0, %2
  %57 = icmp eq i16 %1, %3
  %58 = and i1 %56, %57
  br i1 %58, label %69, label %59

59:                                               ; preds = %55
  %60 = icmp ult i16 %1, %3
  %61 = icmp ult i64 %0, %2
  %62 = and i1 %61, %57
  %63 = or i1 %60, %62
  %64 = zext i1 %63 to i8
  %65 = xor i8 %64, %40
  %66 = shl nuw nsw i8 %65, 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 1, %67
  br label %69

69:                                               ; preds = %25, %34, %44, %51, %55, %59
  %70 = phi i32 [ %54, %51 ], [ %68, %59 ], [ 2, %25 ], [ 2, %34 ], [ 0, %44 ], [ 0, %55 ]
  ret i32 %70
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_compare(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15, %8
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %53

23:                                               ; preds = %15, %12
  %24 = lshr i64 %1, 63
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %3, 63
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  br i1 %28, label %39, label %29

29:                                               ; preds = %23
  %30 = or i64 %3, %1
  %31 = shl i64 %30, 1
  %32 = or i64 %2, %0
  %33 = or i64 %32, %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %53, label %35

35:                                               ; preds = %29
  %36 = shl nuw nsw i64 %24, 1
  %37 = trunc i64 %36 to i32
  %38 = sub nsw i32 1, %37
  br label %53

39:                                               ; preds = %23
  %40 = icmp eq i64 %0, %2
  %41 = icmp eq i64 %1, %3
  %42 = and i1 %40, %41
  br i1 %42, label %53, label %43

43:                                               ; preds = %39
  %44 = icmp ult i64 %1, %3
  %45 = icmp ult i64 %0, %2
  %46 = and i1 %45, %41
  %47 = or i1 %44, %46
  %48 = zext i1 %47 to i8
  %49 = xor i8 %48, %25
  %50 = shl nuw nsw i8 %49, 1
  %51 = zext i8 %50 to i32
  %52 = sub nsw i32 1, %51
  br label %53

53:                                               ; preds = %19, %29, %35, %39, %43
  %54 = phi i32 [ %38, %35 ], [ %52, %43 ], [ 2, %19 ], [ 0, %29 ], [ 0, %39 ]
  ret i32 %54
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float128_compare_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %37

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %15, %8
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp ne i64 %20, 9223090561878065152
  %22 = and i64 %1, 140737488355327
  %23 = or i64 %22, %0
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %21, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = and i64 %3, 9223231299366420480
  %28 = icmp ne i64 %27, 9223090561878065152
  %29 = and i64 %3, 140737488355327
  %30 = or i64 %29, %2
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %28, %31
  br i1 %32, label %67, label %33

33:                                               ; preds = %26, %19
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %67

37:                                               ; preds = %15, %12
  %38 = lshr i64 %1, 63
  %39 = trunc i64 %38 to i8
  %40 = lshr i64 %3, 63
  %41 = trunc i64 %40 to i8
  %42 = icmp eq i8 %39, %41
  br i1 %42, label %53, label %43

43:                                               ; preds = %37
  %44 = or i64 %3, %1
  %45 = shl i64 %44, 1
  %46 = or i64 %2, %0
  %47 = or i64 %46, %45
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %67, label %49

49:                                               ; preds = %43
  %50 = shl nuw nsw i64 %38, 1
  %51 = trunc i64 %50 to i32
  %52 = sub nsw i32 1, %51
  br label %67

53:                                               ; preds = %37
  %54 = icmp eq i64 %0, %2
  %55 = icmp eq i64 %1, %3
  %56 = and i1 %54, %55
  br i1 %56, label %67, label %57

57:                                               ; preds = %53
  %58 = icmp ult i64 %1, %3
  %59 = icmp ult i64 %0, %2
  %60 = and i1 %59, %55
  %61 = or i1 %58, %60
  %62 = zext i1 %61 to i8
  %63 = xor i8 %62, %39
  %64 = shl nuw nsw i8 %63, 1
  %65 = zext i8 %64 to i32
  %66 = sub nsw i32 1, %65
  br label %67

67:                                               ; preds = %26, %33, %43, %49, %53, %57
  %68 = phi i32 [ %52, %49 ], [ %66, %57 ], [ 2, %26 ], [ 2, %33 ], [ 0, %43 ], [ 0, %53 ]
  ret i32 %68
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_min(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2147483647
  %34 = icmp ult i32 %33, 2139095041
  %35 = and i32 %32, 2147483647
  %36 = icmp ult i32 %35, 2139095041
  %37 = and i1 %34, %36
  br i1 %37, label %92, label %38

38:                                               ; preds = %30
  %39 = shl i32 %31, 1
  %40 = icmp ult i32 %39, -8388608
  %41 = and i32 %31, 2143289344
  %42 = icmp eq i32 %41, 2139095040
  %43 = and i32 %31, 4194303
  %44 = icmp ne i32 %43, 0
  %45 = and i1 %42, %44
  %46 = shl i32 %32, 1
  %47 = icmp ugt i32 %46, -8388609
  %48 = and i32 %32, 2143289344
  %49 = icmp eq i32 %48, 2139095040
  %50 = and i32 %32, 4194303
  %51 = icmp ne i32 %50, 0
  %52 = and i1 %49, %51
  %53 = zext i1 %52 to i8
  %54 = or i1 %45, %52
  br i1 %54, label %55, label %59

55:                                               ; preds = %38
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %38
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %61 = load i8, i8* %60, align 1
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %106

63:                                               ; preds = %59
  %64 = icmp ult i32 %39, %46
  br i1 %64, label %70, label %65

65:                                               ; preds = %63
  %66 = icmp ult i32 %46, %39
  br i1 %66, label %70, label %67

67:                                               ; preds = %65
  %68 = icmp ult i32 %31, %32
  %69 = zext i1 %68 to i8
  br label %70

70:                                               ; preds = %67, %65, %63
  %71 = phi i8 [ %69, %67 ], [ 0, %63 ], [ 1, %65 ]
  br i1 %45, label %77, label %72

72:                                               ; preds = %70
  br i1 %40, label %80, label %73

73:                                               ; preds = %72
  %74 = or i8 %71, %53
  %75 = icmp eq i8 %74, 0
  %76 = and i1 %47, %75
  br i1 %76, label %80, label %86

77:                                               ; preds = %70
  %78 = icmp eq i8 %71, 0
  %79 = select i1 %52, i1 %78, i1 %47
  br i1 %79, label %80, label %86

80:                                               ; preds = %77, %73, %72
  %81 = icmp ne i32 %48, 2139095040
  %82 = icmp eq i32 %50, 0
  %83 = or i1 %82, %81
  %84 = or i32 %32, 4194304
  %85 = select i1 %83, i32 %32, i32 %84
  br label %106

86:                                               ; preds = %77, %73
  %87 = icmp ne i32 %41, 2139095040
  %88 = icmp eq i32 %43, 0
  %89 = or i1 %88, %87
  %90 = or i32 %31, 4194304
  %91 = select i1 %89, i32 %31, i32 %90
  br label %106

92:                                               ; preds = %30
  %93 = lshr i32 %31, 31
  %94 = trunc i32 %93 to i8
  %95 = lshr i32 %32, 31
  %96 = trunc i32 %95 to i8
  %97 = icmp eq i8 %94, %96
  br i1 %97, label %101, label %98

98:                                               ; preds = %92
  %99 = icmp slt i32 %31, 0
  %100 = select i1 %99, i32 %31, i32 %32
  br label %106

101:                                              ; preds = %92
  %102 = icmp ult i32 %31, %32
  %103 = zext i1 %102 to i8
  %104 = icmp eq i8 %94, %103
  %105 = select i1 %104, i32 %32, i32 %31
  br label %106

106:                                              ; preds = %86, %80, %59, %98, %101
  %107 = phi i32 [ %100, %98 ], [ %105, %101 ], [ %85, %80 ], [ %91, %86 ], [ -4194304, %59 ]
  ret i32 %107
}

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @float32_max(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2147483647
  %34 = icmp ult i32 %33, 2139095041
  %35 = and i32 %32, 2147483647
  %36 = icmp ult i32 %35, 2139095041
  %37 = and i1 %34, %36
  br i1 %37, label %92, label %38

38:                                               ; preds = %30
  %39 = shl i32 %31, 1
  %40 = icmp ult i32 %39, -8388608
  %41 = and i32 %31, 2143289344
  %42 = icmp eq i32 %41, 2139095040
  %43 = and i32 %31, 4194303
  %44 = icmp ne i32 %43, 0
  %45 = and i1 %42, %44
  %46 = shl i32 %32, 1
  %47 = icmp ugt i32 %46, -8388609
  %48 = and i32 %32, 2143289344
  %49 = icmp eq i32 %48, 2139095040
  %50 = and i32 %32, 4194303
  %51 = icmp ne i32 %50, 0
  %52 = and i1 %49, %51
  %53 = zext i1 %52 to i8
  %54 = or i1 %45, %52
  br i1 %54, label %55, label %59

55:                                               ; preds = %38
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %38
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %61 = load i8, i8* %60, align 1
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %106

63:                                               ; preds = %59
  %64 = icmp ult i32 %39, %46
  br i1 %64, label %70, label %65

65:                                               ; preds = %63
  %66 = icmp ult i32 %46, %39
  br i1 %66, label %70, label %67

67:                                               ; preds = %65
  %68 = icmp ult i32 %31, %32
  %69 = zext i1 %68 to i8
  br label %70

70:                                               ; preds = %67, %65, %63
  %71 = phi i8 [ %69, %67 ], [ 0, %63 ], [ 1, %65 ]
  br i1 %45, label %77, label %72

72:                                               ; preds = %70
  br i1 %40, label %80, label %73

73:                                               ; preds = %72
  %74 = or i8 %71, %53
  %75 = icmp eq i8 %74, 0
  %76 = and i1 %47, %75
  br i1 %76, label %80, label %86

77:                                               ; preds = %70
  %78 = icmp eq i8 %71, 0
  %79 = select i1 %52, i1 %78, i1 %47
  br i1 %79, label %80, label %86

80:                                               ; preds = %77, %73, %72
  %81 = icmp ne i32 %48, 2139095040
  %82 = icmp eq i32 %50, 0
  %83 = or i1 %82, %81
  %84 = or i32 %32, 4194304
  %85 = select i1 %83, i32 %32, i32 %84
  br label %106

86:                                               ; preds = %77, %73
  %87 = icmp ne i32 %41, 2139095040
  %88 = icmp eq i32 %43, 0
  %89 = or i1 %88, %87
  %90 = or i32 %31, 4194304
  %91 = select i1 %89, i32 %31, i32 %90
  br label %106

92:                                               ; preds = %30
  %93 = lshr i32 %31, 31
  %94 = trunc i32 %93 to i8
  %95 = lshr i32 %32, 31
  %96 = trunc i32 %95 to i8
  %97 = icmp eq i8 %94, %96
  br i1 %97, label %101, label %98

98:                                               ; preds = %92
  %99 = icmp slt i32 %31, 0
  %100 = select i1 %99, i32 %32, i32 %31
  br label %106

101:                                              ; preds = %92
  %102 = icmp ult i32 %31, %32
  %103 = zext i1 %102 to i8
  %104 = icmp eq i8 %94, %103
  %105 = select i1 %104, i32 %31, i32 %32
  br label %106

106:                                              ; preds = %86, %80, %59, %98, %101
  %107 = phi i32 [ %100, %98 ], [ %105, %101 ], [ %85, %80 ], [ %91, %86 ], [ -4194304, %59 ]
  ret i32 %107
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float64_min(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9223372036854775807
  %34 = icmp ult i64 %33, 9218868437227405313
  %35 = and i64 %32, 9223372036854775807
  %36 = icmp ult i64 %35, 9218868437227405313
  %37 = and i1 %34, %36
  br i1 %37, label %92, label %38

38:                                               ; preds = %30
  %39 = shl i64 %31, 1
  %40 = icmp ult i64 %39, -4503599627370496
  %41 = and i64 %31, 9221120237041090560
  %42 = icmp eq i64 %41, 9218868437227405312
  %43 = and i64 %31, 2251799813685247
  %44 = icmp ne i64 %43, 0
  %45 = and i1 %42, %44
  %46 = shl i64 %32, 1
  %47 = icmp ugt i64 %46, -4503599627370497
  %48 = and i64 %32, 9221120237041090560
  %49 = icmp eq i64 %48, 9218868437227405312
  %50 = and i64 %32, 2251799813685247
  %51 = icmp ne i64 %50, 0
  %52 = and i1 %49, %51
  %53 = zext i1 %52 to i8
  %54 = or i1 %45, %52
  br i1 %54, label %55, label %59

55:                                               ; preds = %38
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %38
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %61 = load i8, i8* %60, align 1
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %106

63:                                               ; preds = %59
  %64 = icmp ult i64 %39, %46
  br i1 %64, label %70, label %65

65:                                               ; preds = %63
  %66 = icmp ult i64 %46, %39
  br i1 %66, label %70, label %67

67:                                               ; preds = %65
  %68 = icmp ult i64 %31, %32
  %69 = zext i1 %68 to i8
  br label %70

70:                                               ; preds = %67, %65, %63
  %71 = phi i8 [ %69, %67 ], [ 0, %63 ], [ 1, %65 ]
  br i1 %45, label %77, label %72

72:                                               ; preds = %70
  br i1 %40, label %80, label %73

73:                                               ; preds = %72
  %74 = or i8 %71, %53
  %75 = icmp eq i8 %74, 0
  %76 = and i1 %47, %75
  br i1 %76, label %80, label %86

77:                                               ; preds = %70
  %78 = icmp eq i8 %71, 0
  %79 = select i1 %52, i1 %78, i1 %47
  br i1 %79, label %80, label %86

80:                                               ; preds = %77, %73, %72
  %81 = icmp ne i64 %48, 9218868437227405312
  %82 = icmp eq i64 %50, 0
  %83 = or i1 %82, %81
  %84 = or i64 %32, 2251799813685248
  %85 = select i1 %83, i64 %32, i64 %84
  br label %106

86:                                               ; preds = %77, %73
  %87 = icmp ne i64 %41, 9218868437227405312
  %88 = icmp eq i64 %43, 0
  %89 = or i1 %88, %87
  %90 = or i64 %31, 2251799813685248
  %91 = select i1 %89, i64 %31, i64 %90
  br label %106

92:                                               ; preds = %30
  %93 = lshr i64 %31, 63
  %94 = trunc i64 %93 to i8
  %95 = lshr i64 %32, 63
  %96 = trunc i64 %95 to i8
  %97 = icmp eq i8 %94, %96
  br i1 %97, label %101, label %98

98:                                               ; preds = %92
  %99 = icmp slt i64 %31, 0
  %100 = select i1 %99, i64 %31, i64 %32
  br label %106

101:                                              ; preds = %92
  %102 = icmp ult i64 %31, %32
  %103 = zext i1 %102 to i8
  %104 = icmp eq i8 %94, %103
  %105 = select i1 %104, i64 %32, i64 %31
  br label %106

106:                                              ; preds = %86, %80, %59, %98, %101
  %107 = phi i64 [ %100, %98 ], [ %105, %101 ], [ %85, %80 ], [ %91, %86 ], [ -2251799813685248, %59 ]
  ret i64 %107
}

; Function Attrs: nofree norecurse nounwind uwtable
define i64 @float64_max(i64 %0, i64 %1, %struct.float_status* nocapture %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9223372036854775807
  %34 = icmp ult i64 %33, 9218868437227405313
  %35 = and i64 %32, 9223372036854775807
  %36 = icmp ult i64 %35, 9218868437227405313
  %37 = and i1 %34, %36
  br i1 %37, label %92, label %38

38:                                               ; preds = %30
  %39 = shl i64 %31, 1
  %40 = icmp ult i64 %39, -4503599627370496
  %41 = and i64 %31, 9221120237041090560
  %42 = icmp eq i64 %41, 9218868437227405312
  %43 = and i64 %31, 2251799813685247
  %44 = icmp ne i64 %43, 0
  %45 = and i1 %42, %44
  %46 = shl i64 %32, 1
  %47 = icmp ugt i64 %46, -4503599627370497
  %48 = and i64 %32, 9221120237041090560
  %49 = icmp eq i64 %48, 9218868437227405312
  %50 = and i64 %32, 2251799813685247
  %51 = icmp ne i64 %50, 0
  %52 = and i1 %49, %51
  %53 = zext i1 %52 to i8
  %54 = or i1 %45, %52
  br i1 %54, label %55, label %59

55:                                               ; preds = %38
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %38
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %61 = load i8, i8* %60, align 1
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %106

63:                                               ; preds = %59
  %64 = icmp ult i64 %39, %46
  br i1 %64, label %70, label %65

65:                                               ; preds = %63
  %66 = icmp ult i64 %46, %39
  br i1 %66, label %70, label %67

67:                                               ; preds = %65
  %68 = icmp ult i64 %31, %32
  %69 = zext i1 %68 to i8
  br label %70

70:                                               ; preds = %67, %65, %63
  %71 = phi i8 [ %69, %67 ], [ 0, %63 ], [ 1, %65 ]
  br i1 %45, label %77, label %72

72:                                               ; preds = %70
  br i1 %40, label %80, label %73

73:                                               ; preds = %72
  %74 = or i8 %71, %53
  %75 = icmp eq i8 %74, 0
  %76 = and i1 %47, %75
  br i1 %76, label %80, label %86

77:                                               ; preds = %70
  %78 = icmp eq i8 %71, 0
  %79 = select i1 %52, i1 %78, i1 %47
  br i1 %79, label %80, label %86

80:                                               ; preds = %77, %73, %72
  %81 = icmp ne i64 %48, 9218868437227405312
  %82 = icmp eq i64 %50, 0
  %83 = or i1 %82, %81
  %84 = or i64 %32, 2251799813685248
  %85 = select i1 %83, i64 %32, i64 %84
  br label %106

86:                                               ; preds = %77, %73
  %87 = icmp ne i64 %41, 9218868437227405312
  %88 = icmp eq i64 %43, 0
  %89 = or i1 %88, %87
  %90 = or i64 %31, 2251799813685248
  %91 = select i1 %89, i64 %31, i64 %90
  br label %106

92:                                               ; preds = %30
  %93 = lshr i64 %31, 63
  %94 = trunc i64 %93 to i8
  %95 = lshr i64 %32, 63
  %96 = trunc i64 %95 to i8
  %97 = icmp eq i8 %94, %96
  br i1 %97, label %101, label %98

98:                                               ; preds = %92
  %99 = icmp slt i64 %31, 0
  %100 = select i1 %99, i64 %32, i64 %31
  br label %106

101:                                              ; preds = %92
  %102 = icmp ult i64 %31, %32
  %103 = zext i1 %102 to i8
  %104 = icmp eq i8 %94, %103
  %105 = select i1 %104, i64 %31, i64 %32
  br label %106

106:                                              ; preds = %86, %80, %59, %98, %101
  %107 = phi i64 [ %100, %98 ], [ %105, %101 ], [ %85, %80 ], [ %91, %86 ], [ -2251799813685248, %59 ]
  ret i64 %107
}

; Function Attrs: nofree nounwind uwtable
define i32 @float32_scalbn(i32 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #19 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %3, %7, %13
  %19 = phi i32 [ %17, %13 ], [ %0, %3 ], [ %0, %7 ]
  %20 = and i32 %19, 8388607
  %21 = lshr i32 %19, 23
  %22 = and i32 %21, 255
  %23 = lshr i32 %19, 31
  %24 = trunc i32 %23 to i8
  %25 = shl nuw nsw i32 %22, 16
  switch i32 %25, label %48 [
    i32 16711680, label %26
    i32 0, label %50
  ]

26:                                               ; preds = %18
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %68, label %28

28:                                               ; preds = %26
  %29 = and i32 %19, 2143289344
  %30 = icmp eq i32 %29, 2139095040
  %31 = and i32 %19, 4194303
  %32 = icmp ne i32 %31, 0
  %33 = and i1 %30, %32
  br i1 %33, label %34, label %38

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %34, %28
  %39 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %68

42:                                               ; preds = %38
  %43 = icmp ne i32 %29, 2139095040
  %44 = icmp eq i32 %31, 0
  %45 = or i1 %44, %43
  %46 = or i32 %19, 4194304
  %47 = select i1 %45, i32 %19, i32 %46
  br label %68

48:                                               ; preds = %18
  %49 = or i32 %20, 8388608
  br label %52

50:                                               ; preds = %18
  %51 = icmp eq i32 %20, 0
  br i1 %51, label %68, label %52

52:                                               ; preds = %50, %48
  %53 = phi i32 [ %49, %48 ], [ %20, %50 ]
  %54 = icmp sgt i32 %1, -512
  %55 = select i1 %54, i32 %1, i32 -512
  %56 = icmp slt i32 %55, 512
  %57 = select i1 %56, i32 %55, i32 512
  %58 = add nsw i32 %57, 65535
  %59 = add nsw i32 %58, %22
  %60 = shl nsw i32 %53, 7
  %61 = shl i32 %59, 16
  %62 = ashr exact i32 %61, 16
  %ctlz.sh = lshr i32 %60, 1
  %ctlz.step = or i32 %60, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %63 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %63, 1431655765
  %ctpop.sh = lshr i32 %63, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %64 = add nsw i32 %ctpop.part, -1
  %65 = sub nsw i32 %62, %64
  %66 = shl i32 %60, %64
  %67 = tail call fastcc i32 @roundAndPackFloat32(i8 zeroext %24, i32 %65, i32 %66, %struct.float_status* nonnull %2) #23
  br label %68

68:                                               ; preds = %42, %38, %50, %26, %52
  %69 = phi i32 [ %67, %52 ], [ %19, %26 ], [ %19, %50 ], [ %47, %42 ], [ -4194304, %38 ]
  ret i32 %69
}

; Function Attrs: nofree nounwind uwtable
define i64 @float64_scalbn(i64 %0, i32 %1, %struct.float_status* nocapture %2) local_unnamed_addr #19 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %3, %7, %13
  %19 = phi i64 [ %17, %13 ], [ %0, %3 ], [ %0, %7 ]
  %20 = and i64 %19, 4503599627370495
  %21 = lshr i64 %19, 52
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2047
  %24 = lshr i64 %19, 63
  %25 = trunc i64 %24 to i8
  %26 = shl nuw nsw i32 %23, 16
  switch i32 %26, label %49 [
    i32 134152192, label %27
    i32 0, label %51
  ]

27:                                               ; preds = %18
  %28 = icmp eq i64 %20, 0
  br i1 %28, label %71, label %29

29:                                               ; preds = %27
  %30 = and i64 %19, 9221120237041090560
  %31 = icmp eq i64 %30, 9218868437227405312
  %32 = and i64 %19, 2251799813685247
  %33 = icmp ne i64 %32, 0
  %34 = and i1 %31, %33
  br i1 %34, label %35, label %39

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %39

39:                                               ; preds = %35, %29
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %71

43:                                               ; preds = %39
  %44 = icmp ne i64 %30, 9218868437227405312
  %45 = icmp eq i64 %32, 0
  %46 = or i1 %45, %44
  %47 = or i64 %19, 2251799813685248
  %48 = select i1 %46, i64 %19, i64 %47
  br label %71

49:                                               ; preds = %18
  %50 = or i64 %20, 4503599627370496
  br label %53

51:                                               ; preds = %18
  %52 = icmp eq i64 %20, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %51, %49
  %54 = phi i64 [ %50, %49 ], [ %20, %51 ]
  %55 = icmp sgt i32 %1, -4096
  %56 = select i1 %55, i32 %1, i32 -4096
  %57 = icmp slt i32 %56, 4096
  %58 = select i1 %57, i32 %56, i32 4096
  %59 = add nsw i32 %58, 65535
  %60 = add nsw i32 %59, %23
  %61 = shl nsw i64 %54, 10
  %62 = shl i32 %60, 16
  %63 = ashr exact i32 %62, 16
  %ctlz.sh = lshr i64 %61, 1
  %ctlz.step = or i64 %61, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %64 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %64, 6148914691236517205
  %ctpop.sh = lshr i64 %64, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %65 = trunc i64 %ctpop.part to i32
  %66 = add nsw i32 %65, -1
  %67 = sub nsw i32 %63, %66
  %68 = zext i32 %66 to i64
  %69 = shl i64 %61, %68
  %70 = tail call fastcc i64 @roundAndPackFloat64(i8 zeroext %25, i32 %67, i64 %69, %struct.float_status* nonnull %2) #23
  br label %71

71:                                               ; preds = %43, %39, %51, %27, %53
  %72 = phi i64 [ %70, %53 ], [ %19, %27 ], [ %19, %51 ], [ %48, %43 ], [ -2251799813685248, %39 ]
  ret i64 %72
}

; Function Attrs: nofree nounwind uwtable
define { i64, i16 } @floatx80_scalbn(i64 %0, i16 %1, i32 %2, %struct.float_status* nocapture %3) local_unnamed_addr #19 {
  %5 = and i16 %1, 32767
  %6 = zext i16 %5 to i32
  %7 = lshr i16 %1, 15
  %8 = trunc i16 %7 to i8
  %9 = icmp eq i16 %5, 32767
  br i1 %9, label %10, label %31

10:                                               ; preds = %4
  %11 = and i64 %0, 9223372036854775807
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %54, label %13

13:                                               ; preds = %10
  %14 = and i64 %0, -4611686018427387905
  %15 = and i64 %0, 4611686018427387903
  %16 = icmp ne i64 %15, 0
  %17 = icmp eq i64 %14, %0
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %23

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %23

23:                                               ; preds = %19, %13
  %24 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  %27 = or i64 %0, -4611686018427387904
  %28 = select i1 %18, i64 %27, i64 %0
  %29 = select i1 %26, i64 %28, i64 -4611686018427387904
  %30 = select i1 %26, i16 %1, i16 -1
  br label %54

31:                                               ; preds = %4
  %32 = icmp eq i16 %5, 0
  %33 = icmp eq i64 %0, 0
  %34 = and i1 %33, %32
  br i1 %34, label %54, label %35

35:                                               ; preds = %31
  %36 = icmp sgt i32 %2, -65536
  %37 = select i1 %36, i32 %2, i32 -65536
  %38 = icmp slt i32 %37, 65536
  %39 = select i1 %38, i32 %37, i32 65536
  %40 = add nsw i32 %39, %6
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 3
  %42 = load i8, i8* %41, align 1
  %43 = add nsw i32 %40, -64
  %44 = select i1 %33, i32 %43, i32 %40
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %45 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %45, 6148914691236517205
  %ctpop.sh = lshr i64 %45, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %46 = trunc i64 %ctpop.part to i32
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, i64 0, i64 %ctpop.part
  %49 = shl i64 %0, %48
  %50 = sub nsw i32 %44, %46
  %51 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 signext %42, i8 zeroext %8, i32 %50, i64 %49, i64 0, %struct.float_status* nonnull %3) #23
  %52 = extractvalue { i64, i16 } %51, 0
  %53 = extractvalue { i64, i16 } %51, 1
  br label %54

54:                                               ; preds = %31, %10, %35, %23
  %55 = phi i64 [ %29, %23 ], [ %52, %35 ], [ %0, %10 ], [ 0, %31 ]
  %56 = phi i16 [ %30, %23 ], [ %53, %35 ], [ %1, %10 ], [ %1, %31 ]
  %57 = insertvalue { i64, i16 } undef, i64 %55, 0
  %58 = insertvalue { i64, i16 } %57, i16 %56, 1
  ret { i64, i16 } %58
}

; Function Attrs: nofree nounwind uwtable
define { i64, i64 } @float128_scalbn(i64 %0, i64 %1, i32 %2, %struct.float_status* nocapture %3) local_unnamed_addr #19 {
  %5 = and i64 %1, 281474976710655
  %6 = lshr i64 %1, 48
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 32767
  %9 = lshr i64 %1, 63
  %10 = trunc i64 %9 to i8
  switch i32 %8, label %18 [
    i32 32767, label %11
    i32 0, label %20
  ]

11:                                               ; preds = %4
  %12 = or i64 %5, %0
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %72, label %14

14:                                               ; preds = %11
  %15 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %0, i64 %1, %struct.float_status* %3)
  %16 = extractvalue { i64, i64 } %15, 0
  %17 = extractvalue { i64, i64 } %15, 1
  br label %72

18:                                               ; preds = %4
  %19 = or i64 %5, 281474976710656
  br label %23

20:                                               ; preds = %4
  %21 = or i64 %5, %0
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %72, label %23

23:                                               ; preds = %20, %18
  %24 = phi i64 [ %19, %18 ], [ %5, %20 ]
  %25 = icmp sgt i32 %2, -65536
  %26 = select i1 %25, i32 %2, i32 -65536
  %27 = icmp slt i32 %26, 65536
  %28 = select i1 %27, i32 %26, i32 65536
  %29 = add nsw i32 %8, -1
  %30 = add nsw i32 %29, %28
  %31 = icmp eq i64 %24, 0
  %32 = add nsw i32 %30, -64
  %33 = select i1 %31, i64 %0, i64 %24
  %34 = select i1 %31, i64 0, i64 %0
  %35 = select i1 %31, i32 %32, i32 %30
  %ctlz.sh = lshr i64 %33, 1
  %ctlz.step = or i64 %33, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %36 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %36, 6148914691236517205
  %ctpop.sh = lshr i64 %36, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %37 = trunc i64 %ctpop.part to i8
  %38 = add nsw i8 %37, -15
  %39 = sext i8 %38 to i32
  %40 = icmp ugt i8 %37, 14
  br i1 %40, label %41, label %52

41:                                               ; preds = %23
  %42 = zext i32 %39 to i64
  %43 = shl i64 %34, %42
  %44 = icmp eq i8 %38, 0
  br i1 %44, label %64, label %45

45:                                               ; preds = %41
  %46 = shl i64 %33, %42
  %47 = sub nsw i32 0, %39
  %48 = and i32 %47, 63
  %49 = zext i32 %48 to i64
  %50 = lshr i64 %34, %49
  %51 = or i64 %50, %46
  br label %64

52:                                               ; preds = %23
  %53 = and i32 %39, 63
  %54 = zext i32 %53 to i64
  %55 = icmp eq i8 %38, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %52
  %57 = sub nsw i32 0, %39
  %58 = shl i64 %34, %54
  %59 = shl i64 %33, %54
  %60 = zext i32 %57 to i64
  %61 = lshr i64 %34, %60
  %62 = or i64 %59, %61
  %63 = lshr i64 %33, %60
  br label %64

64:                                               ; preds = %41, %45, %52, %56
  %65 = phi i64 [ %51, %45 ], [ %33, %41 ], [ %63, %56 ], [ %33, %52 ]
  %66 = phi i64 [ %43, %45 ], [ %43, %41 ], [ %62, %56 ], [ %34, %52 ]
  %67 = phi i64 [ 0, %45 ], [ 0, %41 ], [ %58, %56 ], [ 0, %52 ]
  %68 = sub nsw i32 %35, %39
  %69 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 zeroext %10, i32 %68, i64 %65, i64 %66, i64 %67, %struct.float_status* %3) #23
  %70 = extractvalue { i64, i64 } %69, 0
  %71 = extractvalue { i64, i64 } %69, 1
  br label %72

72:                                               ; preds = %20, %11, %64, %14
  %73 = phi i64 [ %16, %14 ], [ %70, %64 ], [ %0, %11 ], [ %0, %20 ]
  %74 = phi i64 [ %17, %14 ], [ %71, %64 ], [ %1, %11 ], [ %1, %20 ]
  %75 = insertvalue { i64, i64 } undef, i64 %73, 0
  %76 = insertvalue { i64, i64 } %75, i64 %74, 1
  ret { i64, i64 } %76
}

define i1 @uadds(i16* %0, i16 %1, i16 %2) {
  %4 = add i16 %1, %2
  store i16 %4, i16* %0
  %5 = icmp ugt i16 %1, %2
  %6 = select i1 %5, i16 %1, i16 %2
  %7 = icmp ult i16 %4, %6
  ret i1 %7
}

define i1 @uadd(i32* %0, i32 %1, i32 %2) {
  %4 = add i32 %1, %2
  store i32 %4, i32* %0
  %5 = icmp ugt i32 %1, %2
  %6 = select i1 %5, i32 %1, i32 %2
  %7 = icmp ult i32 %4, %6
  ret i1 %7
}

define i1 @uaddl(i64* %0, i64 %1, i64 %2) {
  %4 = add i64 %1, %2
  store i64 %4, i64* %0
  %5 = icmp ugt i64 %1, %2
  %6 = select i1 %5, i64 %1, i64 %2
  %7 = icmp ult i64 %4, %6
  ret i1 %7
}

declare double @fabs(double)

declare double @rint(double)

declare double @floor(double)

declare double @ceil(double)

attributes #0 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"=
attributes #1 = { nofree norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-
attributes #2 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="f
attributes #3 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="f
attributes #4 = { noreturn uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-tr
attributes #6 = { nofree nounwind }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-
attributes #9 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="fa
attributes #10 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans
attributes #11 = { argmemonly nounwind willreturn }
attributes #12 = { noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "
attributes #13 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-f
attributes #14 = { nounwind readnone speculatable willreturn }
attributes #15 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"
attributes #16 = { inlinehint nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jum
attributes #17 = { inlinehint norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-j
attributes #18 = { inlinehint norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-j
attributes #19 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no
attributes #20 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "
attributes #21 = { noreturn }
attributes #22 = { noreturn nounwind }
attributes #23 = { nounwind }
attributes #24 = { cold }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 10.0.0 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"misexpect", i64 1, i64 2000, i64 1}
!5 = !{!"misexpect", i64 0, i64 2000, i64 1}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.peeled.count", i32 2}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !15}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !17}
!26 = distinct !{!26, !15}
!27 = !{i32 (i32)* @ffs1, i32 (i32)* @rffs1}
!28 = distinct !{!28, !15}
!29 = distinct !{!29, !30, !15}
!30 = !{!"llvm.loop.unroll.runtime.disable"}
!31 = distinct !{!31, !15}
!32 = distinct !{!32, !15}
!33 = distinct !{!33, !15}
!34 = distinct !{!34, !30, !15}
!35 = distinct !{!35, !30, !15}
!36 = distinct !{!36, !30, !15}
!37 = distinct !{!37, !15}
!38 = distinct !{!38, !15}
!39 = distinct !{!39, !30, !15}
!40 = distinct !{!40, !30, !15}
!41 = distinct !{!41, !17}
!42 = !{!43}
!43 = distinct !{!43, !44, !"float32ToCommonNaN: argument 0"}
!44 = distinct !{!44, !"float32ToCommonNaN"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"float32ToCommonNaN: argument 0"}
!47 = distinct !{!47, !"float32ToCommonNaN"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"float32ToCommonNaN: argument 0"}
!50 = distinct !{!50, !"float32ToCommonNaN"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"float64ToCommonNaN: argument 0"}
!53 = distinct !{!53, !"float64ToCommonNaN"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"float16ToCommonNaN: argument 0"}
!56 = distinct !{!56, !"float16ToCommonNaN"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"float32ToCommonNaN: argument 0"}
!59 = distinct !{!59, !"float32ToCommonNaN"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"float64ToCommonNaN: argument 0"}
!62 = distinct !{!62, !"float64ToCommonNaN"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"float64ToCommonNaN: argument 0"}
!65 = distinct !{!65, !"float64ToCommonNaN"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"floatx80ToCommonNaN: argument 0"}
!68 = distinct !{!68, !"floatx80ToCommonNaN"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"floatx80ToCommonNaN: argument 0"}
!71 = distinct !{!71, !"floatx80ToCommonNaN"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"floatx80ToCommonNaN: argument 0"}
!74 = distinct !{!74, !"floatx80ToCommonNaN"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"float128ToCommonNaN: argument 0"}
!77 = distinct !{!77, !"float128ToCommonNaN"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"float128ToCommonNaN: argument 0"}
!80 = distinct !{!80, !"float128ToCommonNaN"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"float128ToCommonNaN: argument 0"}
!83 = distinct !{!83, !"float128ToCommonNaN"}
